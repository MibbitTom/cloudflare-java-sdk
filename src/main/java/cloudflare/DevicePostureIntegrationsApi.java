/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DevicePostureIntegrationsCreateDevicePostureIntegration4XXResponse;
import org.openapitools.client.model.DevicePostureIntegrationsCreateDevicePostureIntegrationRequest;
import org.openapitools.client.model.DevicePostureIntegrationsDeleteDevicePostureIntegration4XXResponse;
import org.openapitools.client.model.DevicePostureIntegrationsListDevicePostureIntegrations4XXResponse;
import org.openapitools.client.model.DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest;
import org.openapitools.client.model.TeamsDevicesSchemasIdResponse;
import org.openapitools.client.model.TeamsDevicesSchemasResponseCollection;
import org.openapitools.client.model.TeamsDevicesSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicePostureIntegrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicePostureIntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicePostureIntegrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for devicePostureIntegrationsCreateDevicePostureIntegration
     * @param accountId  (required)
     * @param devicePostureIntegrationsCreateDevicePostureIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsCreateDevicePostureIntegrationCall(Object accountId, DevicePostureIntegrationsCreateDevicePostureIntegrationRequest devicePostureIntegrationsCreateDevicePostureIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicePostureIntegrationsCreateDevicePostureIntegrationRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/posture/integration"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicePostureIntegrationsCreateDevicePostureIntegrationValidateBeforeCall(Object accountId, DevicePostureIntegrationsCreateDevicePostureIntegrationRequest devicePostureIntegrationsCreateDevicePostureIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicePostureIntegrationsCreateDevicePostureIntegration(Async)");
        }

        // verify the required parameter 'devicePostureIntegrationsCreateDevicePostureIntegrationRequest' is set
        if (devicePostureIntegrationsCreateDevicePostureIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'devicePostureIntegrationsCreateDevicePostureIntegrationRequest' when calling devicePostureIntegrationsCreateDevicePostureIntegration(Async)");
        }

        return devicePostureIntegrationsCreateDevicePostureIntegrationCall(accountId, devicePostureIntegrationsCreateDevicePostureIntegrationRequest, _callback);

    }

    /**
     * Create a device posture integration
     * Create a new device posture integration.
     * @param accountId  (required)
     * @param devicePostureIntegrationsCreateDevicePostureIntegrationRequest  (required)
     * @return TeamsDevicesSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSchemasSingleResponse devicePostureIntegrationsCreateDevicePostureIntegration(Object accountId, DevicePostureIntegrationsCreateDevicePostureIntegrationRequest devicePostureIntegrationsCreateDevicePostureIntegrationRequest) throws ApiException {
        ApiResponse<TeamsDevicesSchemasSingleResponse> localVarResp = devicePostureIntegrationsCreateDevicePostureIntegrationWithHttpInfo(accountId, devicePostureIntegrationsCreateDevicePostureIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a device posture integration
     * Create a new device posture integration.
     * @param accountId  (required)
     * @param devicePostureIntegrationsCreateDevicePostureIntegrationRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSchemasSingleResponse> devicePostureIntegrationsCreateDevicePostureIntegrationWithHttpInfo(Object accountId, DevicePostureIntegrationsCreateDevicePostureIntegrationRequest devicePostureIntegrationsCreateDevicePostureIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = devicePostureIntegrationsCreateDevicePostureIntegrationValidateBeforeCall(accountId, devicePostureIntegrationsCreateDevicePostureIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a device posture integration (asynchronously)
     * Create a new device posture integration.
     * @param accountId  (required)
     * @param devicePostureIntegrationsCreateDevicePostureIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsCreateDevicePostureIntegrationAsync(Object accountId, DevicePostureIntegrationsCreateDevicePostureIntegrationRequest devicePostureIntegrationsCreateDevicePostureIntegrationRequest, final ApiCallback<TeamsDevicesSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicePostureIntegrationsCreateDevicePostureIntegrationValidateBeforeCall(accountId, devicePostureIntegrationsCreateDevicePostureIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicePostureIntegrationsDeleteDevicePostureIntegration
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsDeleteDevicePostureIntegrationCall(String integrationId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/posture/integration/{integration_id}"
            .replace("{" + "integration_id" + "}", localVarApiClient.escapeString(integrationId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicePostureIntegrationsDeleteDevicePostureIntegrationValidateBeforeCall(String integrationId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling devicePostureIntegrationsDeleteDevicePostureIntegration(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicePostureIntegrationsDeleteDevicePostureIntegration(Async)");
        }

        return devicePostureIntegrationsDeleteDevicePostureIntegrationCall(integrationId, accountId, _callback);

    }

    /**
     * Delete a device posture integration
     * Delete a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSchemasIdResponse devicePostureIntegrationsDeleteDevicePostureIntegration(String integrationId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSchemasIdResponse> localVarResp = devicePostureIntegrationsDeleteDevicePostureIntegrationWithHttpInfo(integrationId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete a device posture integration
     * Delete a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSchemasIdResponse> devicePostureIntegrationsDeleteDevicePostureIntegrationWithHttpInfo(String integrationId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicePostureIntegrationsDeleteDevicePostureIntegrationValidateBeforeCall(integrationId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a device posture integration (asynchronously)
     * Delete a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsDeleteDevicePostureIntegrationAsync(String integrationId, Object accountId, final ApiCallback<TeamsDevicesSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicePostureIntegrationsDeleteDevicePostureIntegrationValidateBeforeCall(integrationId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicePostureIntegrationsDevicePostureIntegrationDetails
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device posture integration details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device posture integration details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsDevicePostureIntegrationDetailsCall(String integrationId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/posture/integration/{integration_id}"
            .replace("{" + "integration_id" + "}", localVarApiClient.escapeString(integrationId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicePostureIntegrationsDevicePostureIntegrationDetailsValidateBeforeCall(String integrationId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling devicePostureIntegrationsDevicePostureIntegrationDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicePostureIntegrationsDevicePostureIntegrationDetails(Async)");
        }

        return devicePostureIntegrationsDevicePostureIntegrationDetailsCall(integrationId, accountId, _callback);

    }

    /**
     * Get device posture integration details
     * Fetches details for a single device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device posture integration details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device posture integration details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSchemasSingleResponse devicePostureIntegrationsDevicePostureIntegrationDetails(String integrationId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSchemasSingleResponse> localVarResp = devicePostureIntegrationsDevicePostureIntegrationDetailsWithHttpInfo(integrationId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get device posture integration details
     * Fetches details for a single device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device posture integration details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device posture integration details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSchemasSingleResponse> devicePostureIntegrationsDevicePostureIntegrationDetailsWithHttpInfo(String integrationId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicePostureIntegrationsDevicePostureIntegrationDetailsValidateBeforeCall(integrationId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device posture integration details (asynchronously)
     * Fetches details for a single device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device posture integration details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device posture integration details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsDevicePostureIntegrationDetailsAsync(String integrationId, Object accountId, final ApiCallback<TeamsDevicesSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicePostureIntegrationsDevicePostureIntegrationDetailsValidateBeforeCall(integrationId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicePostureIntegrationsListDevicePostureIntegrations
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device posture integrations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device posture integrations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsListDevicePostureIntegrationsCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/posture/integration"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicePostureIntegrationsListDevicePostureIntegrationsValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicePostureIntegrationsListDevicePostureIntegrations(Async)");
        }

        return devicePostureIntegrationsListDevicePostureIntegrationsCall(accountId, _callback);

    }

    /**
     * List your device posture integrations
     * Fetches the list of device posture integrations for an account.
     * @param accountId  (required)
     * @return TeamsDevicesSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device posture integrations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device posture integrations response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSchemasResponseCollection devicePostureIntegrationsListDevicePostureIntegrations(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSchemasResponseCollection> localVarResp = devicePostureIntegrationsListDevicePostureIntegrationsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List your device posture integrations
     * Fetches the list of device posture integrations for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device posture integrations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device posture integrations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSchemasResponseCollection> devicePostureIntegrationsListDevicePostureIntegrationsWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicePostureIntegrationsListDevicePostureIntegrationsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your device posture integrations (asynchronously)
     * Fetches the list of device posture integrations for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device posture integrations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device posture integrations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsListDevicePostureIntegrationsAsync(Object accountId, final ApiCallback<TeamsDevicesSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicePostureIntegrationsListDevicePostureIntegrationsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicePostureIntegrationsUpdateDevicePostureIntegration
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param devicePostureIntegrationsUpdateDevicePostureIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsUpdateDevicePostureIntegrationCall(String integrationId, Object accountId, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicePostureIntegrationsUpdateDevicePostureIntegrationRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/posture/integration/{integration_id}"
            .replace("{" + "integration_id" + "}", localVarApiClient.escapeString(integrationId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicePostureIntegrationsUpdateDevicePostureIntegrationValidateBeforeCall(String integrationId, Object accountId, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling devicePostureIntegrationsUpdateDevicePostureIntegration(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicePostureIntegrationsUpdateDevicePostureIntegration(Async)");
        }

        // verify the required parameter 'devicePostureIntegrationsUpdateDevicePostureIntegrationRequest' is set
        if (devicePostureIntegrationsUpdateDevicePostureIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'devicePostureIntegrationsUpdateDevicePostureIntegrationRequest' when calling devicePostureIntegrationsUpdateDevicePostureIntegration(Async)");
        }

        return devicePostureIntegrationsUpdateDevicePostureIntegrationCall(integrationId, accountId, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, _callback);

    }

    /**
     * Update a device posture integration
     * Updates a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param devicePostureIntegrationsUpdateDevicePostureIntegrationRequest  (required)
     * @return TeamsDevicesSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSchemasSingleResponse devicePostureIntegrationsUpdateDevicePostureIntegration(String integrationId, Object accountId, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest) throws ApiException {
        ApiResponse<TeamsDevicesSchemasSingleResponse> localVarResp = devicePostureIntegrationsUpdateDevicePostureIntegrationWithHttpInfo(integrationId, accountId, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Update a device posture integration
     * Updates a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param devicePostureIntegrationsUpdateDevicePostureIntegrationRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSchemasSingleResponse> devicePostureIntegrationsUpdateDevicePostureIntegrationWithHttpInfo(String integrationId, Object accountId, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = devicePostureIntegrationsUpdateDevicePostureIntegrationValidateBeforeCall(integrationId, accountId, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a device posture integration (asynchronously)
     * Updates a configured device posture integration.
     * @param integrationId  (required)
     * @param accountId  (required)
     * @param devicePostureIntegrationsUpdateDevicePostureIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device posture integration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device posture integration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicePostureIntegrationsUpdateDevicePostureIntegrationAsync(String integrationId, Object accountId, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, final ApiCallback<TeamsDevicesSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicePostureIntegrationsUpdateDevicePostureIntegrationValidateBeforeCall(integrationId, accountId, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
