/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FirewallRatelimitResponseCollection;
import org.openapitools.client.model.FirewallRatelimitResponseSingle;
import org.openapitools.client.model.RateLimitsForAZoneCreateARateLimit4XXResponse;
import org.openapitools.client.model.RateLimitsForAZoneDeleteARateLimit200Response;
import org.openapitools.client.model.RateLimitsForAZoneDeleteARateLimit4XXResponse;
import org.openapitools.client.model.RateLimitsForAZoneListRateLimits4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RateLimitsForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RateLimitsForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RateLimitsForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rateLimitsForAZoneCreateARateLimit
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneCreateARateLimitCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/rate_limits"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateLimitsForAZoneCreateARateLimitValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling rateLimitsForAZoneCreateARateLimit(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rateLimitsForAZoneCreateARateLimit(Async)");
        }

        return rateLimitsForAZoneCreateARateLimitCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create a rate limit
     * Creates a new rate limit for a zone. Refer to the object definition for a list of required attributes.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallRatelimitResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallRatelimitResponseSingle rateLimitsForAZoneCreateARateLimit(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallRatelimitResponseSingle> localVarResp = rateLimitsForAZoneCreateARateLimitWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create a rate limit
     * Creates a new rate limit for a zone. Refer to the object definition for a list of required attributes.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallRatelimitResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallRatelimitResponseSingle> rateLimitsForAZoneCreateARateLimitWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = rateLimitsForAZoneCreateARateLimitValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a rate limit (asynchronously)
     * Creates a new rate limit for a zone. Refer to the object definition for a list of required attributes.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneCreateARateLimitAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallRatelimitResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateLimitsForAZoneCreateARateLimitValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rateLimitsForAZoneDeleteARateLimit
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneDeleteARateLimitCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/rate_limits/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateLimitsForAZoneDeleteARateLimitValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rateLimitsForAZoneDeleteARateLimit(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling rateLimitsForAZoneDeleteARateLimit(Async)");
        }

        return rateLimitsForAZoneDeleteARateLimitCall(id, zoneIdentifier, _callback);

    }

    /**
     * Delete a rate limit
     * Deletes an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return RateLimitsForAZoneDeleteARateLimit200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RateLimitsForAZoneDeleteARateLimit200Response rateLimitsForAZoneDeleteARateLimit(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<RateLimitsForAZoneDeleteARateLimit200Response> localVarResp = rateLimitsForAZoneDeleteARateLimitWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a rate limit
     * Deletes an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RateLimitsForAZoneDeleteARateLimit200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RateLimitsForAZoneDeleteARateLimit200Response> rateLimitsForAZoneDeleteARateLimitWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = rateLimitsForAZoneDeleteARateLimitValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<RateLimitsForAZoneDeleteARateLimit200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a rate limit (asynchronously)
     * Deletes an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneDeleteARateLimitAsync(String id, String zoneIdentifier, final ApiCallback<RateLimitsForAZoneDeleteARateLimit200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateLimitsForAZoneDeleteARateLimitValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<RateLimitsForAZoneDeleteARateLimit200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rateLimitsForAZoneGetARateLimit
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneGetARateLimitCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/rate_limits/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateLimitsForAZoneGetARateLimitValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rateLimitsForAZoneGetARateLimit(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling rateLimitsForAZoneGetARateLimit(Async)");
        }

        return rateLimitsForAZoneGetARateLimitCall(id, zoneIdentifier, _callback);

    }

    /**
     * Get a rate limit
     * Fetches the details of a rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallRatelimitResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallRatelimitResponseSingle rateLimitsForAZoneGetARateLimit(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallRatelimitResponseSingle> localVarResp = rateLimitsForAZoneGetARateLimitWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a rate limit
     * Fetches the details of a rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallRatelimitResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallRatelimitResponseSingle> rateLimitsForAZoneGetARateLimitWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = rateLimitsForAZoneGetARateLimitValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a rate limit (asynchronously)
     * Fetches the details of a rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneGetARateLimitAsync(String id, String zoneIdentifier, final ApiCallback<FirewallRatelimitResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateLimitsForAZoneGetARateLimitValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rateLimitsForAZoneListRateLimits
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rate limits response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rate limits response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneListRateLimitsCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/rate_limits"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateLimitsForAZoneListRateLimitsValidateBeforeCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling rateLimitsForAZoneListRateLimits(Async)");
        }

        return rateLimitsForAZoneListRateLimitsCall(zoneIdentifier, page, perPage, _callback);

    }

    /**
     * List rate limits
     * Fetches the rate limits for a zone.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @return FirewallRatelimitResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rate limits response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rate limits response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallRatelimitResponseCollection rateLimitsForAZoneListRateLimits(String zoneIdentifier, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<FirewallRatelimitResponseCollection> localVarResp = rateLimitsForAZoneListRateLimitsWithHttpInfo(zoneIdentifier, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List rate limits
     * Fetches the rate limits for a zone.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @return ApiResponse&lt;FirewallRatelimitResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rate limits response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rate limits response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallRatelimitResponseCollection> rateLimitsForAZoneListRateLimitsWithHttpInfo(String zoneIdentifier, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = rateLimitsForAZoneListRateLimitsValidateBeforeCall(zoneIdentifier, page, perPage, null);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rate limits (asynchronously)
     * Fetches the rate limits for a zone.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rate limits response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rate limits response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneListRateLimitsAsync(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback<FirewallRatelimitResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateLimitsForAZoneListRateLimitsValidateBeforeCall(zoneIdentifier, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rateLimitsForAZoneUpdateARateLimit
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneUpdateARateLimitCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/rate_limits/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateLimitsForAZoneUpdateARateLimitValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rateLimitsForAZoneUpdateARateLimit(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling rateLimitsForAZoneUpdateARateLimit(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rateLimitsForAZoneUpdateARateLimit(Async)");
        }

        return rateLimitsForAZoneUpdateARateLimitCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update a rate limit
     * Updates an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallRatelimitResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallRatelimitResponseSingle rateLimitsForAZoneUpdateARateLimit(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallRatelimitResponseSingle> localVarResp = rateLimitsForAZoneUpdateARateLimitWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update a rate limit
     * Updates an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallRatelimitResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallRatelimitResponseSingle> rateLimitsForAZoneUpdateARateLimitWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = rateLimitsForAZoneUpdateARateLimitValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a rate limit (asynchronously)
     * Updates an existing rate limit.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a rate limit response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a rate limit response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rateLimitsForAZoneUpdateARateLimitAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallRatelimitResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateLimitsForAZoneUpdateARateLimitValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallRatelimitResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
