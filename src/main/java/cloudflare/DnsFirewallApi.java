/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DnsFirewallCreateDnsFirewallCluster4XXResponse;
import org.openapitools.client.model.DnsFirewallCreateDnsFirewallClusterRequest;
import org.openapitools.client.model.DnsFirewallDeleteDnsFirewallCluster200Response;
import org.openapitools.client.model.DnsFirewallDeleteDnsFirewallCluster4XXResponse;
import org.openapitools.client.model.DnsFirewallDnsFirewallResponseCollection;
import org.openapitools.client.model.DnsFirewallDnsFirewallSingleResponse;
import org.openapitools.client.model.DnsFirewallListDnsFirewallClusters4XXResponse;
import org.openapitools.client.model.DnsFirewallSchemasDnsFirewall;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnsFirewallApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnsFirewallApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnsFirewallApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dnsFirewallCreateDnsFirewallCluster
     * @param accountId  (required)
     * @param dnsFirewallCreateDnsFirewallClusterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallCreateDnsFirewallClusterCall(String accountId, DnsFirewallCreateDnsFirewallClusterRequest dnsFirewallCreateDnsFirewallClusterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsFirewallCreateDnsFirewallClusterRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dns_firewall"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsFirewallCreateDnsFirewallClusterValidateBeforeCall(String accountId, DnsFirewallCreateDnsFirewallClusterRequest dnsFirewallCreateDnsFirewallClusterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dnsFirewallCreateDnsFirewallCluster(Async)");
        }

        // verify the required parameter 'dnsFirewallCreateDnsFirewallClusterRequest' is set
        if (dnsFirewallCreateDnsFirewallClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'dnsFirewallCreateDnsFirewallClusterRequest' when calling dnsFirewallCreateDnsFirewallCluster(Async)");
        }

        return dnsFirewallCreateDnsFirewallClusterCall(accountId, dnsFirewallCreateDnsFirewallClusterRequest, _callback);

    }

    /**
     * Create DNS Firewall Cluster
     * Create a configured DNS Firewall Cluster.
     * @param accountId  (required)
     * @param dnsFirewallCreateDnsFirewallClusterRequest  (required)
     * @return DnsFirewallDnsFirewallSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsFirewallDnsFirewallSingleResponse dnsFirewallCreateDnsFirewallCluster(String accountId, DnsFirewallCreateDnsFirewallClusterRequest dnsFirewallCreateDnsFirewallClusterRequest) throws ApiException {
        ApiResponse<DnsFirewallDnsFirewallSingleResponse> localVarResp = dnsFirewallCreateDnsFirewallClusterWithHttpInfo(accountId, dnsFirewallCreateDnsFirewallClusterRequest);
        return localVarResp.getData();
    }

    /**
     * Create DNS Firewall Cluster
     * Create a configured DNS Firewall Cluster.
     * @param accountId  (required)
     * @param dnsFirewallCreateDnsFirewallClusterRequest  (required)
     * @return ApiResponse&lt;DnsFirewallDnsFirewallSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsFirewallDnsFirewallSingleResponse> dnsFirewallCreateDnsFirewallClusterWithHttpInfo(String accountId, DnsFirewallCreateDnsFirewallClusterRequest dnsFirewallCreateDnsFirewallClusterRequest) throws ApiException {
        okhttp3.Call localVarCall = dnsFirewallCreateDnsFirewallClusterValidateBeforeCall(accountId, dnsFirewallCreateDnsFirewallClusterRequest, null);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create DNS Firewall Cluster (asynchronously)
     * Create a configured DNS Firewall Cluster.
     * @param accountId  (required)
     * @param dnsFirewallCreateDnsFirewallClusterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallCreateDnsFirewallClusterAsync(String accountId, DnsFirewallCreateDnsFirewallClusterRequest dnsFirewallCreateDnsFirewallClusterRequest, final ApiCallback<DnsFirewallDnsFirewallSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsFirewallCreateDnsFirewallClusterValidateBeforeCall(accountId, dnsFirewallCreateDnsFirewallClusterRequest, _callback);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsFirewallDeleteDnsFirewallCluster
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallDeleteDnsFirewallClusterCall(String dnsFirewallId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dns_firewall/{dns_firewall_id}"
            .replace("{" + "dns_firewall_id" + "}", localVarApiClient.escapeString(dnsFirewallId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsFirewallDeleteDnsFirewallClusterValidateBeforeCall(String dnsFirewallId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsFirewallId' is set
        if (dnsFirewallId == null) {
            throw new ApiException("Missing the required parameter 'dnsFirewallId' when calling dnsFirewallDeleteDnsFirewallCluster(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dnsFirewallDeleteDnsFirewallCluster(Async)");
        }

        return dnsFirewallDeleteDnsFirewallClusterCall(dnsFirewallId, accountId, _callback);

    }

    /**
     * Delete DNS Firewall Cluster
     * Delete a configured DNS Firewall Cluster.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @return DnsFirewallDeleteDnsFirewallCluster200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsFirewallDeleteDnsFirewallCluster200Response dnsFirewallDeleteDnsFirewallCluster(String dnsFirewallId, String accountId) throws ApiException {
        ApiResponse<DnsFirewallDeleteDnsFirewallCluster200Response> localVarResp = dnsFirewallDeleteDnsFirewallClusterWithHttpInfo(dnsFirewallId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete DNS Firewall Cluster
     * Delete a configured DNS Firewall Cluster.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsFirewallDeleteDnsFirewallCluster200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsFirewallDeleteDnsFirewallCluster200Response> dnsFirewallDeleteDnsFirewallClusterWithHttpInfo(String dnsFirewallId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dnsFirewallDeleteDnsFirewallClusterValidateBeforeCall(dnsFirewallId, accountId, null);
        Type localVarReturnType = new TypeToken<DnsFirewallDeleteDnsFirewallCluster200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete DNS Firewall Cluster (asynchronously)
     * Delete a configured DNS Firewall Cluster.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallDeleteDnsFirewallClusterAsync(String dnsFirewallId, String accountId, final ApiCallback<DnsFirewallDeleteDnsFirewallCluster200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsFirewallDeleteDnsFirewallClusterValidateBeforeCall(dnsFirewallId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsFirewallDeleteDnsFirewallCluster200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsFirewallDnsFirewallClusterDetails
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Firewall Cluster Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNS Firewall Cluster Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallDnsFirewallClusterDetailsCall(String dnsFirewallId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dns_firewall/{dns_firewall_id}"
            .replace("{" + "dns_firewall_id" + "}", localVarApiClient.escapeString(dnsFirewallId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsFirewallDnsFirewallClusterDetailsValidateBeforeCall(String dnsFirewallId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsFirewallId' is set
        if (dnsFirewallId == null) {
            throw new ApiException("Missing the required parameter 'dnsFirewallId' when calling dnsFirewallDnsFirewallClusterDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dnsFirewallDnsFirewallClusterDetails(Async)");
        }

        return dnsFirewallDnsFirewallClusterDetailsCall(dnsFirewallId, accountId, _callback);

    }

    /**
     * DNS Firewall Cluster Details
     * Show a single configured DNS Firewall cluster for an account.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @return DnsFirewallDnsFirewallSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Firewall Cluster Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNS Firewall Cluster Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsFirewallDnsFirewallSingleResponse dnsFirewallDnsFirewallClusterDetails(String dnsFirewallId, String accountId) throws ApiException {
        ApiResponse<DnsFirewallDnsFirewallSingleResponse> localVarResp = dnsFirewallDnsFirewallClusterDetailsWithHttpInfo(dnsFirewallId, accountId);
        return localVarResp.getData();
    }

    /**
     * DNS Firewall Cluster Details
     * Show a single configured DNS Firewall cluster for an account.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsFirewallDnsFirewallSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Firewall Cluster Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNS Firewall Cluster Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsFirewallDnsFirewallSingleResponse> dnsFirewallDnsFirewallClusterDetailsWithHttpInfo(String dnsFirewallId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dnsFirewallDnsFirewallClusterDetailsValidateBeforeCall(dnsFirewallId, accountId, null);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DNS Firewall Cluster Details (asynchronously)
     * Show a single configured DNS Firewall cluster for an account.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Firewall Cluster Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNS Firewall Cluster Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallDnsFirewallClusterDetailsAsync(String dnsFirewallId, String accountId, final ApiCallback<DnsFirewallDnsFirewallSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsFirewallDnsFirewallClusterDetailsValidateBeforeCall(dnsFirewallId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsFirewallListDnsFirewallClusters
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Firewall Clusters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DNS Firewall Clusters response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallListDnsFirewallClustersCall(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dns_firewall"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsFirewallListDnsFirewallClustersValidateBeforeCall(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dnsFirewallListDnsFirewallClusters(Async)");
        }

        return dnsFirewallListDnsFirewallClustersCall(accountId, page, perPage, _callback);

    }

    /**
     * List DNS Firewall Clusters
     * List configured DNS Firewall clusters for an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @return DnsFirewallDnsFirewallResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Firewall Clusters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DNS Firewall Clusters response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsFirewallDnsFirewallResponseCollection dnsFirewallListDnsFirewallClusters(String accountId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<DnsFirewallDnsFirewallResponseCollection> localVarResp = dnsFirewallListDnsFirewallClustersWithHttpInfo(accountId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List DNS Firewall Clusters
     * List configured DNS Firewall clusters for an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @return ApiResponse&lt;DnsFirewallDnsFirewallResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Firewall Clusters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DNS Firewall Clusters response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsFirewallDnsFirewallResponseCollection> dnsFirewallListDnsFirewallClustersWithHttpInfo(String accountId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = dnsFirewallListDnsFirewallClustersValidateBeforeCall(accountId, page, perPage, null);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DNS Firewall Clusters (asynchronously)
     * List configured DNS Firewall clusters for an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Firewall Clusters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DNS Firewall Clusters response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallListDnsFirewallClustersAsync(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback<DnsFirewallDnsFirewallResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsFirewallListDnsFirewallClustersValidateBeforeCall(accountId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsFirewallUpdateDnsFirewallCluster
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param dnsFirewallSchemasDnsFirewall  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallUpdateDnsFirewallClusterCall(String dnsFirewallId, String accountId, DnsFirewallSchemasDnsFirewall dnsFirewallSchemasDnsFirewall, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsFirewallSchemasDnsFirewall;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dns_firewall/{dns_firewall_id}"
            .replace("{" + "dns_firewall_id" + "}", localVarApiClient.escapeString(dnsFirewallId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsFirewallUpdateDnsFirewallClusterValidateBeforeCall(String dnsFirewallId, String accountId, DnsFirewallSchemasDnsFirewall dnsFirewallSchemasDnsFirewall, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsFirewallId' is set
        if (dnsFirewallId == null) {
            throw new ApiException("Missing the required parameter 'dnsFirewallId' when calling dnsFirewallUpdateDnsFirewallCluster(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dnsFirewallUpdateDnsFirewallCluster(Async)");
        }

        // verify the required parameter 'dnsFirewallSchemasDnsFirewall' is set
        if (dnsFirewallSchemasDnsFirewall == null) {
            throw new ApiException("Missing the required parameter 'dnsFirewallSchemasDnsFirewall' when calling dnsFirewallUpdateDnsFirewallCluster(Async)");
        }

        return dnsFirewallUpdateDnsFirewallClusterCall(dnsFirewallId, accountId, dnsFirewallSchemasDnsFirewall, _callback);

    }

    /**
     * Update DNS Firewall Cluster
     * Modify a DNS Firewall Cluster configuration.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param dnsFirewallSchemasDnsFirewall  (required)
     * @return DnsFirewallDnsFirewallSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsFirewallDnsFirewallSingleResponse dnsFirewallUpdateDnsFirewallCluster(String dnsFirewallId, String accountId, DnsFirewallSchemasDnsFirewall dnsFirewallSchemasDnsFirewall) throws ApiException {
        ApiResponse<DnsFirewallDnsFirewallSingleResponse> localVarResp = dnsFirewallUpdateDnsFirewallClusterWithHttpInfo(dnsFirewallId, accountId, dnsFirewallSchemasDnsFirewall);
        return localVarResp.getData();
    }

    /**
     * Update DNS Firewall Cluster
     * Modify a DNS Firewall Cluster configuration.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param dnsFirewallSchemasDnsFirewall  (required)
     * @return ApiResponse&lt;DnsFirewallDnsFirewallSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsFirewallDnsFirewallSingleResponse> dnsFirewallUpdateDnsFirewallClusterWithHttpInfo(String dnsFirewallId, String accountId, DnsFirewallSchemasDnsFirewall dnsFirewallSchemasDnsFirewall) throws ApiException {
        okhttp3.Call localVarCall = dnsFirewallUpdateDnsFirewallClusterValidateBeforeCall(dnsFirewallId, accountId, dnsFirewallSchemasDnsFirewall, null);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DNS Firewall Cluster (asynchronously)
     * Modify a DNS Firewall Cluster configuration.
     * @param dnsFirewallId  (required)
     * @param accountId  (required)
     * @param dnsFirewallSchemasDnsFirewall  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Firewall Cluster response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update DNS Firewall Cluster response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsFirewallUpdateDnsFirewallClusterAsync(String dnsFirewallId, String accountId, DnsFirewallSchemasDnsFirewall dnsFirewallSchemasDnsFirewall, final ApiCallback<DnsFirewallDnsFirewallSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsFirewallUpdateDnsFirewallClusterValidateBeforeCall(dnsFirewallId, accountId, dnsFirewallSchemasDnsFirewall, _callback);
        Type localVarReturnType = new TypeToken<DnsFirewallDnsFirewallSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
