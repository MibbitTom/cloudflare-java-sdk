/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Zones0HoldDelete200Response;
import org.openapitools.client.model.Zones0HoldGet200Response;
import org.openapitools.client.model.Zones0HoldPost200Response;
import org.openapitools.client.model.ZonesSchemasApiResponseCommonFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneHoldsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneHoldsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneHoldsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zones0HoldDelete
     * @param zoneId Zone ID (required)
     * @param holdAfter If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldDeleteCall(String zoneId, String holdAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/hold"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (holdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hold_after", holdAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0HoldDeleteValidateBeforeCall(String zoneId, String holdAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0HoldDelete(Async)");
        }

        return zones0HoldDeleteCall(zoneId, holdAfter, _callback);

    }

    /**
     * Remove Zone Hold
     * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param holdAfter If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely. (optional)
     * @return Zones0HoldDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public Zones0HoldDelete200Response zones0HoldDelete(String zoneId, String holdAfter) throws ApiException {
        ApiResponse<Zones0HoldDelete200Response> localVarResp = zones0HoldDeleteWithHttpInfo(zoneId, holdAfter);
        return localVarResp.getData();
    }

    /**
     * Remove Zone Hold
     * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param holdAfter If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely. (optional)
     * @return ApiResponse&lt;Zones0HoldDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zones0HoldDelete200Response> zones0HoldDeleteWithHttpInfo(String zoneId, String holdAfter) throws ApiException {
        okhttp3.Call localVarCall = zones0HoldDeleteValidateBeforeCall(zoneId, holdAfter, null);
        Type localVarReturnType = new TypeToken<Zones0HoldDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Zone Hold (asynchronously)
     * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param holdAfter If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldDeleteAsync(String zoneId, String holdAfter, final ApiCallback<Zones0HoldDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0HoldDeleteValidateBeforeCall(zoneId, holdAfter, _callback);
        Type localVarReturnType = new TypeToken<Zones0HoldDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zones0HoldGet
     * @param zoneId Zone ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldGetCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/hold"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0HoldGetValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0HoldGet(Async)");
        }

        return zones0HoldGetCall(zoneId, _callback);

    }

    /**
     * Get Zone Hold
     * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
     * @param zoneId Zone ID (required)
     * @return Zones0HoldGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public Zones0HoldGet200Response zones0HoldGet(String zoneId) throws ApiException {
        ApiResponse<Zones0HoldGet200Response> localVarResp = zones0HoldGetWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Zone Hold
     * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
     * @param zoneId Zone ID (required)
     * @return ApiResponse&lt;Zones0HoldGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zones0HoldGet200Response> zones0HoldGetWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zones0HoldGetValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<Zones0HoldGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zone Hold (asynchronously)
     * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
     * @param zoneId Zone ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldGetAsync(String zoneId, final ApiCallback<Zones0HoldGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0HoldGetValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<Zones0HoldGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zones0HoldPost
     * @param zoneId Zone ID (required)
     * @param includeSubdomains If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#39;example.com&#39; and include_subdomains&#x3D;true will block &#39;example.com&#39;, &#39;staging.example.com&#39;, &#39;api.staging.example.com&#39;, etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldPostCall(String zoneId, Boolean includeSubdomains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/hold"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSubdomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_subdomains", includeSubdomains));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0HoldPostValidateBeforeCall(String zoneId, Boolean includeSubdomains, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0HoldPost(Async)");
        }

        return zones0HoldPostCall(zoneId, includeSubdomains, _callback);

    }

    /**
     * Create Zone Hold
     * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param includeSubdomains If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#39;example.com&#39; and include_subdomains&#x3D;true will block &#39;example.com&#39;, &#39;staging.example.com&#39;, &#39;api.staging.example.com&#39;, etc. (optional)
     * @return Zones0HoldPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public Zones0HoldPost200Response zones0HoldPost(String zoneId, Boolean includeSubdomains) throws ApiException {
        ApiResponse<Zones0HoldPost200Response> localVarResp = zones0HoldPostWithHttpInfo(zoneId, includeSubdomains);
        return localVarResp.getData();
    }

    /**
     * Create Zone Hold
     * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param includeSubdomains If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#39;example.com&#39; and include_subdomains&#x3D;true will block &#39;example.com&#39;, &#39;staging.example.com&#39;, &#39;api.staging.example.com&#39;, etc. (optional)
     * @return ApiResponse&lt;Zones0HoldPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zones0HoldPost200Response> zones0HoldPostWithHttpInfo(String zoneId, Boolean includeSubdomains) throws ApiException {
        okhttp3.Call localVarCall = zones0HoldPostValidateBeforeCall(zoneId, includeSubdomains, null);
        Type localVarReturnType = new TypeToken<Zones0HoldPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Zone Hold (asynchronously)
     * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone&#39;s hostname.
     * @param zoneId Zone ID (required)
     * @param includeSubdomains If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#39;example.com&#39; and include_subdomains&#x3D;true will block &#39;example.com&#39;, &#39;staging.example.com&#39;, &#39;api.staging.example.com&#39;, etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0HoldPostAsync(String zoneId, Boolean includeSubdomains, final ApiCallback<Zones0HoldPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0HoldPostValidateBeforeCall(zoneId, includeSubdomains, _callback);
        Type localVarReturnType = new TypeToken<Zones0HoldPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
