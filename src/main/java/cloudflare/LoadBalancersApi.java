/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LoadBalancersCreateLoadBalancer4XXResponse;
import org.openapitools.client.model.LoadBalancersCreateLoadBalancerRequest;
import org.openapitools.client.model.LoadBalancersDeleteLoadBalancer4XXResponse;
import org.openapitools.client.model.LoadBalancersListLoadBalancers4XXResponse;
import org.openapitools.client.model.LoadBalancersPatchLoadBalancerRequest;
import org.openapitools.client.model.LoadBalancersUpdateLoadBalancerRequest;
import org.openapitools.client.model.LoadBalancingComponentsSchemasIdResponse;
import org.openapitools.client.model.LoadBalancingLoadBalancerComponentsSchemasResponseCollection;
import org.openapitools.client.model.LoadBalancingLoadBalancerComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoadBalancersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for loadBalancersCreateLoadBalancer
     * @param zoneId  (required)
     * @param loadBalancersCreateLoadBalancerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersCreateLoadBalancerCall(String zoneId, LoadBalancersCreateLoadBalancerRequest loadBalancersCreateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadBalancersCreateLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersCreateLoadBalancerValidateBeforeCall(String zoneId, LoadBalancersCreateLoadBalancerRequest loadBalancersCreateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersCreateLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancersCreateLoadBalancerRequest' is set
        if (loadBalancersCreateLoadBalancerRequest == null) {
            throw new ApiException("Missing the required parameter 'loadBalancersCreateLoadBalancerRequest' when calling loadBalancersCreateLoadBalancer(Async)");
        }

        return loadBalancersCreateLoadBalancerCall(zoneId, loadBalancersCreateLoadBalancerRequest, _callback);

    }

    /**
     * Create Load Balancer
     * Create a new load balancer.
     * @param zoneId  (required)
     * @param loadBalancersCreateLoadBalancerRequest  (required)
     * @return LoadBalancingLoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingLoadBalancerComponentsSchemasSingleResponse loadBalancersCreateLoadBalancer(String zoneId, LoadBalancersCreateLoadBalancerRequest loadBalancersCreateLoadBalancerRequest) throws ApiException {
        ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> localVarResp = loadBalancersCreateLoadBalancerWithHttpInfo(zoneId, loadBalancersCreateLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * Create Load Balancer
     * Create a new load balancer.
     * @param zoneId  (required)
     * @param loadBalancersCreateLoadBalancerRequest  (required)
     * @return ApiResponse&lt;LoadBalancingLoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> loadBalancersCreateLoadBalancerWithHttpInfo(String zoneId, LoadBalancersCreateLoadBalancerRequest loadBalancersCreateLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersCreateLoadBalancerValidateBeforeCall(zoneId, loadBalancersCreateLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Load Balancer (asynchronously)
     * Create a new load balancer.
     * @param zoneId  (required)
     * @param loadBalancersCreateLoadBalancerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersCreateLoadBalancerAsync(String zoneId, LoadBalancersCreateLoadBalancerRequest loadBalancersCreateLoadBalancerRequest, final ApiCallback<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersCreateLoadBalancerValidateBeforeCall(zoneId, loadBalancersCreateLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancersDeleteLoadBalancer
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersDeleteLoadBalancerCall(String zoneId, String loadBalancerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers/{load_balancer_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "load_balancer_id" + "}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersDeleteLoadBalancerValidateBeforeCall(String zoneId, String loadBalancerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersDeleteLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling loadBalancersDeleteLoadBalancer(Async)");
        }

        return loadBalancersDeleteLoadBalancerCall(zoneId, loadBalancerId, _callback);

    }

    /**
     * Delete Load Balancer
     * Delete a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @return LoadBalancingComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingComponentsSchemasIdResponse loadBalancersDeleteLoadBalancer(String zoneId, String loadBalancerId) throws ApiException {
        ApiResponse<LoadBalancingComponentsSchemasIdResponse> localVarResp = loadBalancersDeleteLoadBalancerWithHttpInfo(zoneId, loadBalancerId);
        return localVarResp.getData();
    }

    /**
     * Delete Load Balancer
     * Delete a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @return ApiResponse&lt;LoadBalancingComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingComponentsSchemasIdResponse> loadBalancersDeleteLoadBalancerWithHttpInfo(String zoneId, String loadBalancerId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersDeleteLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingComponentsSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Load Balancer (asynchronously)
     * Delete a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersDeleteLoadBalancerAsync(String zoneId, String loadBalancerId, final ApiCallback<LoadBalancingComponentsSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersDeleteLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingComponentsSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancersListLoadBalancers
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Load Balancers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Load Balancers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersListLoadBalancersCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersListLoadBalancersValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersListLoadBalancers(Async)");
        }

        return loadBalancersListLoadBalancersCall(zoneId, _callback);

    }

    /**
     * List Load Balancers
     * List configured load balancers.
     * @param zoneId  (required)
     * @return LoadBalancingLoadBalancerComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Load Balancers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Load Balancers response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingLoadBalancerComponentsSchemasResponseCollection loadBalancersListLoadBalancers(String zoneId) throws ApiException {
        ApiResponse<LoadBalancingLoadBalancerComponentsSchemasResponseCollection> localVarResp = loadBalancersListLoadBalancersWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Load Balancers
     * List configured load balancers.
     * @param zoneId  (required)
     * @return ApiResponse&lt;LoadBalancingLoadBalancerComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Load Balancers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Load Balancers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingLoadBalancerComponentsSchemasResponseCollection> loadBalancersListLoadBalancersWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersListLoadBalancersValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Load Balancers (asynchronously)
     * List configured load balancers.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Load Balancers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Load Balancers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersListLoadBalancersAsync(String zoneId, final ApiCallback<LoadBalancingLoadBalancerComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersListLoadBalancersValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancersLoadBalancerDetails
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load Balancer Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Load Balancer Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersLoadBalancerDetailsCall(String zoneId, String loadBalancerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers/{load_balancer_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "load_balancer_id" + "}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersLoadBalancerDetailsValidateBeforeCall(String zoneId, String loadBalancerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersLoadBalancerDetails(Async)");
        }

        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling loadBalancersLoadBalancerDetails(Async)");
        }

        return loadBalancersLoadBalancerDetailsCall(zoneId, loadBalancerId, _callback);

    }

    /**
     * Load Balancer Details
     * Fetch a single configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @return LoadBalancingLoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load Balancer Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Load Balancer Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingLoadBalancerComponentsSchemasSingleResponse loadBalancersLoadBalancerDetails(String zoneId, String loadBalancerId) throws ApiException {
        ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> localVarResp = loadBalancersLoadBalancerDetailsWithHttpInfo(zoneId, loadBalancerId);
        return localVarResp.getData();
    }

    /**
     * Load Balancer Details
     * Fetch a single configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @return ApiResponse&lt;LoadBalancingLoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load Balancer Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Load Balancer Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> loadBalancersLoadBalancerDetailsWithHttpInfo(String zoneId, String loadBalancerId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersLoadBalancerDetailsValidateBeforeCall(zoneId, loadBalancerId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Balancer Details (asynchronously)
     * Fetch a single configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load Balancer Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Load Balancer Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersLoadBalancerDetailsAsync(String zoneId, String loadBalancerId, final ApiCallback<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersLoadBalancerDetailsValidateBeforeCall(zoneId, loadBalancerId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancersPatchLoadBalancer
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersPatchLoadBalancerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersPatchLoadBalancerCall(String zoneId, String loadBalancerId, LoadBalancersPatchLoadBalancerRequest loadBalancersPatchLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadBalancersPatchLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers/{load_balancer_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "load_balancer_id" + "}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersPatchLoadBalancerValidateBeforeCall(String zoneId, String loadBalancerId, LoadBalancersPatchLoadBalancerRequest loadBalancersPatchLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersPatchLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling loadBalancersPatchLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancersPatchLoadBalancerRequest' is set
        if (loadBalancersPatchLoadBalancerRequest == null) {
            throw new ApiException("Missing the required parameter 'loadBalancersPatchLoadBalancerRequest' when calling loadBalancersPatchLoadBalancer(Async)");
        }

        return loadBalancersPatchLoadBalancerCall(zoneId, loadBalancerId, loadBalancersPatchLoadBalancerRequest, _callback);

    }

    /**
     * Patch Load Balancer
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersPatchLoadBalancerRequest  (required)
     * @return LoadBalancingLoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingLoadBalancerComponentsSchemasSingleResponse loadBalancersPatchLoadBalancer(String zoneId, String loadBalancerId, LoadBalancersPatchLoadBalancerRequest loadBalancersPatchLoadBalancerRequest) throws ApiException {
        ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> localVarResp = loadBalancersPatchLoadBalancerWithHttpInfo(zoneId, loadBalancerId, loadBalancersPatchLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Load Balancer
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersPatchLoadBalancerRequest  (required)
     * @return ApiResponse&lt;LoadBalancingLoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> loadBalancersPatchLoadBalancerWithHttpInfo(String zoneId, String loadBalancerId, LoadBalancersPatchLoadBalancerRequest loadBalancersPatchLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersPatchLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, loadBalancersPatchLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Load Balancer (asynchronously)
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersPatchLoadBalancerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersPatchLoadBalancerAsync(String zoneId, String loadBalancerId, LoadBalancersPatchLoadBalancerRequest loadBalancersPatchLoadBalancerRequest, final ApiCallback<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersPatchLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, loadBalancersPatchLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancersUpdateLoadBalancer
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersUpdateLoadBalancerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersUpdateLoadBalancerCall(String zoneId, String loadBalancerId, LoadBalancersUpdateLoadBalancerRequest loadBalancersUpdateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadBalancersUpdateLoadBalancerRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/load_balancers/{load_balancer_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "load_balancer_id" + "}", localVarApiClient.escapeString(loadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancersUpdateLoadBalancerValidateBeforeCall(String zoneId, String loadBalancerId, LoadBalancersUpdateLoadBalancerRequest loadBalancersUpdateLoadBalancerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling loadBalancersUpdateLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancerId' is set
        if (loadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerId' when calling loadBalancersUpdateLoadBalancer(Async)");
        }

        // verify the required parameter 'loadBalancersUpdateLoadBalancerRequest' is set
        if (loadBalancersUpdateLoadBalancerRequest == null) {
            throw new ApiException("Missing the required parameter 'loadBalancersUpdateLoadBalancerRequest' when calling loadBalancersUpdateLoadBalancer(Async)");
        }

        return loadBalancersUpdateLoadBalancerCall(zoneId, loadBalancerId, loadBalancersUpdateLoadBalancerRequest, _callback);

    }

    /**
     * Update Load Balancer
     * Update a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersUpdateLoadBalancerRequest  (required)
     * @return LoadBalancingLoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingLoadBalancerComponentsSchemasSingleResponse loadBalancersUpdateLoadBalancer(String zoneId, String loadBalancerId, LoadBalancersUpdateLoadBalancerRequest loadBalancersUpdateLoadBalancerRequest) throws ApiException {
        ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> localVarResp = loadBalancersUpdateLoadBalancerWithHttpInfo(zoneId, loadBalancerId, loadBalancersUpdateLoadBalancerRequest);
        return localVarResp.getData();
    }

    /**
     * Update Load Balancer
     * Update a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersUpdateLoadBalancerRequest  (required)
     * @return ApiResponse&lt;LoadBalancingLoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> loadBalancersUpdateLoadBalancerWithHttpInfo(String zoneId, String loadBalancerId, LoadBalancersUpdateLoadBalancerRequest loadBalancersUpdateLoadBalancerRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancersUpdateLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, loadBalancersUpdateLoadBalancerRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Load Balancer (asynchronously)
     * Update a configured load balancer.
     * @param zoneId  (required)
     * @param loadBalancerId  (required)
     * @param loadBalancersUpdateLoadBalancerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Load Balancer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Load Balancer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancersUpdateLoadBalancerAsync(String zoneId, String loadBalancerId, LoadBalancersUpdateLoadBalancerRequest loadBalancersUpdateLoadBalancerRequest, final ApiCallback<LoadBalancingLoadBalancerComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancersUpdateLoadBalancerValidateBeforeCall(zoneId, loadBalancerId, loadBalancersUpdateLoadBalancerRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingLoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
