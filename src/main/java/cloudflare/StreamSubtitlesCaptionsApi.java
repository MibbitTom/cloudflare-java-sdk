/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamLanguageResponseCollection;
import org.openapitools.client.model.StreamLanguageResponseSingle;
import org.openapitools.client.model.StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamSubtitlesCaptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamSubtitlesCaptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamSubtitlesCaptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamSubtitlesCaptionsDeleteCaptionsOrSubtitles
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/captions/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesValidateBeforeCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling streamSubtitlesCaptionsDeleteCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSubtitlesCaptionsDeleteCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSubtitlesCaptionsDeleteCaptionsOrSubtitles(Async)");
        }

        return streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesCall(language, identifier, accountId, _callback);

    }

    /**
     * Delete captions or subtitles
     * Removes the captions or subtitles from a video.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response streamSubtitlesCaptionsDeleteCaptionsOrSubtitles(String language, String identifier, String accountId) throws ApiException {
        ApiResponse<StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response> localVarResp = streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesWithHttpInfo(language, identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete captions or subtitles
     * Removes the captions or subtitles from a video.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response> streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesWithHttpInfo(String language, String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesValidateBeforeCall(language, identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete captions or subtitles (asynchronously)
     * Removes the captions or subtitles from a video.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesAsync(String language, String identifier, String accountId, final ApiCallback<StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSubtitlesCaptionsDeleteCaptionsOrSubtitlesValidateBeforeCall(language, identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamSubtitlesCaptionsDeleteCaptionsOrSubtitles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguage
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/captions/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageValidateBeforeCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguage(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguage(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguage(Async)");
        }

        return streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageCall(language, identifier, accountId, _callback);

    }

    /**
     * List captions or subtitles for a provided language
     * Lists the captions or subtitles for provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamLanguageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
     </table>
     */
    public StreamLanguageResponseSingle streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguage(String language, String identifier, String accountId) throws ApiException {
        ApiResponse<StreamLanguageResponseSingle> localVarResp = streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageWithHttpInfo(language, identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * List captions or subtitles for a provided language
     * Lists the captions or subtitles for provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamLanguageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLanguageResponseSingle> streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageWithHttpInfo(String language, String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageValidateBeforeCall(language, identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List captions or subtitles for a provided language (asynchronously)
     * Lists the captions or subtitles for provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response for a provided language </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageAsync(String language, String identifier, String accountId, final ApiCallback<StreamLanguageResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSubtitlesCaptionsGetCaptionOrSubtitleForLanguageValidateBeforeCall(language, identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSubtitlesCaptionsGetVttCaptionOrSubtitle
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return WebVTT caption or subtitle response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Return WebVTT caption or subtitle response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsGetVttCaptionOrSubtitleCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/captions/{language}/vtt"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/vtt",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSubtitlesCaptionsGetVttCaptionOrSubtitleValidateBeforeCall(String language, String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling streamSubtitlesCaptionsGetVttCaptionOrSubtitle(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSubtitlesCaptionsGetVttCaptionOrSubtitle(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSubtitlesCaptionsGetVttCaptionOrSubtitle(Async)");
        }

        return streamSubtitlesCaptionsGetVttCaptionOrSubtitleCall(language, identifier, accountId, _callback);

    }

    /**
     * Return WebVTT captions for a provided language
     * Return WebVTT captions for a provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return WebVTT caption or subtitle response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Return WebVTT caption or subtitle response failure </td><td>  -  </td></tr>
     </table>
     */
    public String streamSubtitlesCaptionsGetVttCaptionOrSubtitle(String language, String identifier, String accountId) throws ApiException {
        ApiResponse<String> localVarResp = streamSubtitlesCaptionsGetVttCaptionOrSubtitleWithHttpInfo(language, identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Return WebVTT captions for a provided language
     * Return WebVTT captions for a provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return WebVTT caption or subtitle response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Return WebVTT caption or subtitle response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> streamSubtitlesCaptionsGetVttCaptionOrSubtitleWithHttpInfo(String language, String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSubtitlesCaptionsGetVttCaptionOrSubtitleValidateBeforeCall(language, identifier, accountId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return WebVTT captions for a provided language (asynchronously)
     * Return WebVTT captions for a provided language.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return WebVTT caption or subtitle response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Return WebVTT caption or subtitle response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsGetVttCaptionOrSubtitleAsync(String language, String identifier, String accountId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSubtitlesCaptionsGetVttCaptionOrSubtitleValidateBeforeCall(language, identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSubtitlesCaptionsListCaptionsOrSubtitles
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsListCaptionsOrSubtitlesCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/captions"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSubtitlesCaptionsListCaptionsOrSubtitlesValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSubtitlesCaptionsListCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSubtitlesCaptionsListCaptionsOrSubtitles(Async)");
        }

        return streamSubtitlesCaptionsListCaptionsOrSubtitlesCall(identifier, accountId, _callback);

    }

    /**
     * List captions or subtitles
     * Lists the available captions or subtitles for a specific video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamLanguageResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLanguageResponseCollection streamSubtitlesCaptionsListCaptionsOrSubtitles(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamLanguageResponseCollection> localVarResp = streamSubtitlesCaptionsListCaptionsOrSubtitlesWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * List captions or subtitles
     * Lists the available captions or subtitles for a specific video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamLanguageResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLanguageResponseCollection> streamSubtitlesCaptionsListCaptionsOrSubtitlesWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSubtitlesCaptionsListCaptionsOrSubtitlesValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List captions or subtitles (asynchronously)
     * Lists the available captions or subtitles for a specific video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsListCaptionsOrSubtitlesAsync(String identifier, String accountId, final ApiCallback<StreamLanguageResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSubtitlesCaptionsListCaptionsOrSubtitlesValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSubtitlesCaptionsUploadCaptionsOrSubtitles
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _file The WebVTT file containing the caption or subtitle content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsUploadCaptionsOrSubtitlesCall(String language, String identifier, String accountId, String _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/captions/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSubtitlesCaptionsUploadCaptionsOrSubtitlesValidateBeforeCall(String language, String identifier, String accountId, String _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling streamSubtitlesCaptionsUploadCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSubtitlesCaptionsUploadCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSubtitlesCaptionsUploadCaptionsOrSubtitles(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling streamSubtitlesCaptionsUploadCaptionsOrSubtitles(Async)");
        }

        return streamSubtitlesCaptionsUploadCaptionsOrSubtitlesCall(language, identifier, accountId, _file, _callback);

    }

    /**
     * Upload captions or subtitles
     * Uploads the caption or subtitle file to the endpoint for a specific BCP47 language. One caption or subtitle file per language is allowed.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _file The WebVTT file containing the caption or subtitle content. (required)
     * @return StreamLanguageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLanguageResponseSingle streamSubtitlesCaptionsUploadCaptionsOrSubtitles(String language, String identifier, String accountId, String _file) throws ApiException {
        ApiResponse<StreamLanguageResponseSingle> localVarResp = streamSubtitlesCaptionsUploadCaptionsOrSubtitlesWithHttpInfo(language, identifier, accountId, _file);
        return localVarResp.getData();
    }

    /**
     * Upload captions or subtitles
     * Uploads the caption or subtitle file to the endpoint for a specific BCP47 language. One caption or subtitle file per language is allowed.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _file The WebVTT file containing the caption or subtitle content. (required)
     * @return ApiResponse&lt;StreamLanguageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLanguageResponseSingle> streamSubtitlesCaptionsUploadCaptionsOrSubtitlesWithHttpInfo(String language, String identifier, String accountId, String _file) throws ApiException {
        okhttp3.Call localVarCall = streamSubtitlesCaptionsUploadCaptionsOrSubtitlesValidateBeforeCall(language, identifier, accountId, _file, null);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload captions or subtitles (asynchronously)
     * Uploads the caption or subtitle file to the endpoint for a specific BCP47 language. One caption or subtitle file per language is allowed.
     * @param language  (required)
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _file The WebVTT file containing the caption or subtitle content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload captions or subtitles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload captions or subtitles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSubtitlesCaptionsUploadCaptionsOrSubtitlesAsync(String language, String identifier, String accountId, String _file, final ApiCallback<StreamLanguageResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSubtitlesCaptionsUploadCaptionsOrSubtitlesValidateBeforeCall(language, identifier, accountId, _file, _callback);
        Type localVarReturnType = new TypeToken<StreamLanguageResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
