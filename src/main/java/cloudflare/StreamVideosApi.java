/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamDirectUploadRequest;
import org.openapitools.client.model.StreamDirectUploadResponse;
import org.openapitools.client.model.StreamMediaState;
import org.openapitools.client.model.StreamSignedTokenRequest;
import org.openapitools.client.model.StreamSignedTokenResponse;
import org.openapitools.client.model.StreamStorageUseResponse;
import org.openapitools.client.model.StreamTusResumable;
import org.openapitools.client.model.StreamVideoCopyRequest;
import org.openapitools.client.model.StreamVideoResponseCollection;
import org.openapitools.client.model.StreamVideoResponseSingle;
import org.openapitools.client.model.StreamVideoUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamVideosCreateSignedUrlTokensForVideos
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamSignedTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signed URL tokens for videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signed URL tokens for videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosCreateSignedUrlTokensForVideosCall(String identifier, String accountId, StreamSignedTokenRequest streamSignedTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamSignedTokenRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/token"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosCreateSignedUrlTokensForVideosValidateBeforeCall(String identifier, String accountId, StreamSignedTokenRequest streamSignedTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamVideosCreateSignedUrlTokensForVideos(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosCreateSignedUrlTokensForVideos(Async)");
        }

        // verify the required parameter 'streamSignedTokenRequest' is set
        if (streamSignedTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'streamSignedTokenRequest' when calling streamVideosCreateSignedUrlTokensForVideos(Async)");
        }

        return streamVideosCreateSignedUrlTokensForVideosCall(identifier, accountId, streamSignedTokenRequest, _callback);

    }

    /**
     * Create signed URL tokens for videos
     * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamSignedTokenRequest  (required)
     * @return StreamSignedTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signed URL tokens for videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signed URL tokens for videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamSignedTokenResponse streamVideosCreateSignedUrlTokensForVideos(String identifier, String accountId, StreamSignedTokenRequest streamSignedTokenRequest) throws ApiException {
        ApiResponse<StreamSignedTokenResponse> localVarResp = streamVideosCreateSignedUrlTokensForVideosWithHttpInfo(identifier, accountId, streamSignedTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create signed URL tokens for videos
     * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamSignedTokenRequest  (required)
     * @return ApiResponse&lt;StreamSignedTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signed URL tokens for videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signed URL tokens for videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamSignedTokenResponse> streamVideosCreateSignedUrlTokensForVideosWithHttpInfo(String identifier, String accountId, StreamSignedTokenRequest streamSignedTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = streamVideosCreateSignedUrlTokensForVideosValidateBeforeCall(identifier, accountId, streamSignedTokenRequest, null);
        Type localVarReturnType = new TypeToken<StreamSignedTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create signed URL tokens for videos (asynchronously)
     * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamSignedTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signed URL tokens for videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signed URL tokens for videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosCreateSignedUrlTokensForVideosAsync(String identifier, String accountId, StreamSignedTokenRequest streamSignedTokenRequest, final ApiCallback<StreamSignedTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosCreateSignedUrlTokensForVideosValidateBeforeCall(identifier, accountId, streamSignedTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamSignedTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosDeleteVideo
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete video response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete video response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosDeleteVideoCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosDeleteVideoValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamVideosDeleteVideo(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosDeleteVideo(Async)");
        }

        return streamVideosDeleteVideoCall(identifier, accountId, _callback);

    }

    /**
     * Delete video
     * Deletes a video and its copies from Cloudflare Stream.
     * @param identifier  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete video response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete video response failure </td><td>  -  </td></tr>
     </table>
     */
    public void streamVideosDeleteVideo(String identifier, String accountId) throws ApiException {
        streamVideosDeleteVideoWithHttpInfo(identifier, accountId);
    }

    /**
     * Delete video
     * Deletes a video and its copies from Cloudflare Stream.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete video response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete video response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamVideosDeleteVideoWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamVideosDeleteVideoValidateBeforeCall(identifier, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete video (asynchronously)
     * Deletes a video and its copies from Cloudflare Stream.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete video response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete video response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosDeleteVideoAsync(String identifier, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosDeleteVideoValidateBeforeCall(identifier, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosInitiateVideoUploadsUsingTus
     * @param tusResumable  (required)
     * @param uploadLength  (required)
     * @param accountId  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiate video uploads using TUS response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Initiate video uploads using TUS response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosInitiateVideoUploadsUsingTusCall(StreamTusResumable tusResumable, Integer uploadLength, String accountId, String uploadCreator, String uploadMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tusResumable != null) {
            localVarHeaderParams.put("Tus-Resumable", localVarApiClient.parameterToString(tusResumable));
        }

        if (uploadCreator != null) {
            localVarHeaderParams.put("Upload-Creator", localVarApiClient.parameterToString(uploadCreator));
        }

        if (uploadLength != null) {
            localVarHeaderParams.put("Upload-Length", localVarApiClient.parameterToString(uploadLength));
        }

        if (uploadMetadata != null) {
            localVarHeaderParams.put("Upload-Metadata", localVarApiClient.parameterToString(uploadMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosInitiateVideoUploadsUsingTusValidateBeforeCall(StreamTusResumable tusResumable, Integer uploadLength, String accountId, String uploadCreator, String uploadMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tusResumable' is set
        if (tusResumable == null) {
            throw new ApiException("Missing the required parameter 'tusResumable' when calling streamVideosInitiateVideoUploadsUsingTus(Async)");
        }

        // verify the required parameter 'uploadLength' is set
        if (uploadLength == null) {
            throw new ApiException("Missing the required parameter 'uploadLength' when calling streamVideosInitiateVideoUploadsUsingTus(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosInitiateVideoUploadsUsingTus(Async)");
        }

        return streamVideosInitiateVideoUploadsUsingTusCall(tusResumable, uploadLength, accountId, uploadCreator, uploadMetadata, _callback);

    }

    /**
     * Initiate video uploads using TUS
     * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a &#x60;location&#x60; header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
     * @param tusResumable  (required)
     * @param uploadLength  (required)
     * @param accountId  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiate video uploads using TUS response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Initiate video uploads using TUS response failure </td><td>  -  </td></tr>
     </table>
     */
    public void streamVideosInitiateVideoUploadsUsingTus(StreamTusResumable tusResumable, Integer uploadLength, String accountId, String uploadCreator, String uploadMetadata) throws ApiException {
        streamVideosInitiateVideoUploadsUsingTusWithHttpInfo(tusResumable, uploadLength, accountId, uploadCreator, uploadMetadata);
    }

    /**
     * Initiate video uploads using TUS
     * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a &#x60;location&#x60; header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
     * @param tusResumable  (required)
     * @param uploadLength  (required)
     * @param accountId  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiate video uploads using TUS response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Initiate video uploads using TUS response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamVideosInitiateVideoUploadsUsingTusWithHttpInfo(StreamTusResumable tusResumable, Integer uploadLength, String accountId, String uploadCreator, String uploadMetadata) throws ApiException {
        okhttp3.Call localVarCall = streamVideosInitiateVideoUploadsUsingTusValidateBeforeCall(tusResumable, uploadLength, accountId, uploadCreator, uploadMetadata, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate video uploads using TUS (asynchronously)
     * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a &#x60;location&#x60; header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
     * @param tusResumable  (required)
     * @param uploadLength  (required)
     * @param accountId  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiate video uploads using TUS response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Initiate video uploads using TUS response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosInitiateVideoUploadsUsingTusAsync(StreamTusResumable tusResumable, Integer uploadLength, String accountId, String uploadCreator, String uploadMetadata, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosInitiateVideoUploadsUsingTusValidateBeforeCall(tusResumable, uploadLength, accountId, uploadCreator, uploadMetadata, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosListVideos
     * @param accountId  (required)
     * @param status  (optional)
     * @param creator  (optional)
     * @param type  (optional)
     * @param asc  (optional, default to false)
     * @param search  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param includeCounts  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosListVideosCall(String accountId, StreamMediaState status, String creator, String type, Boolean asc, String search, OffsetDateTime start, OffsetDateTime end, Boolean includeCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (creator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creator", creator));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_counts", includeCounts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosListVideosValidateBeforeCall(String accountId, StreamMediaState status, String creator, String type, Boolean asc, String search, OffsetDateTime start, OffsetDateTime end, Boolean includeCounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosListVideos(Async)");
        }

        return streamVideosListVideosCall(accountId, status, creator, type, asc, search, start, end, includeCounts, _callback);

    }

    /**
     * List videos
     * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
     * @param accountId  (required)
     * @param status  (optional)
     * @param creator  (optional)
     * @param type  (optional)
     * @param asc  (optional, default to false)
     * @param search  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param includeCounts  (optional, default to false)
     * @return StreamVideoResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamVideoResponseCollection streamVideosListVideos(String accountId, StreamMediaState status, String creator, String type, Boolean asc, String search, OffsetDateTime start, OffsetDateTime end, Boolean includeCounts) throws ApiException {
        ApiResponse<StreamVideoResponseCollection> localVarResp = streamVideosListVideosWithHttpInfo(accountId, status, creator, type, asc, search, start, end, includeCounts);
        return localVarResp.getData();
    }

    /**
     * List videos
     * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
     * @param accountId  (required)
     * @param status  (optional)
     * @param creator  (optional)
     * @param type  (optional)
     * @param asc  (optional, default to false)
     * @param search  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param includeCounts  (optional, default to false)
     * @return ApiResponse&lt;StreamVideoResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamVideoResponseCollection> streamVideosListVideosWithHttpInfo(String accountId, StreamMediaState status, String creator, String type, Boolean asc, String search, OffsetDateTime start, OffsetDateTime end, Boolean includeCounts) throws ApiException {
        okhttp3.Call localVarCall = streamVideosListVideosValidateBeforeCall(accountId, status, creator, type, asc, search, start, end, includeCounts, null);
        Type localVarReturnType = new TypeToken<StreamVideoResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List videos (asynchronously)
     * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
     * @param accountId  (required)
     * @param status  (optional)
     * @param creator  (optional)
     * @param type  (optional)
     * @param asc  (optional, default to false)
     * @param search  (optional)
     * @param start  (optional)
     * @param end  (optional)
     * @param includeCounts  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List videos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosListVideosAsync(String accountId, StreamMediaState status, String creator, String type, Boolean asc, String search, OffsetDateTime start, OffsetDateTime end, Boolean includeCounts, final ApiCallback<StreamVideoResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosListVideosValidateBeforeCall(accountId, status, creator, type, asc, search, start, end, includeCounts, _callback);
        Type localVarReturnType = new TypeToken<StreamVideoResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosRetreieveEmbedCodeHtml
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retreieve embed Code HTML response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retreieve embed Code HTML response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosRetreieveEmbedCodeHtmlCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/embed"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosRetreieveEmbedCodeHtmlValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamVideosRetreieveEmbedCodeHtml(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosRetreieveEmbedCodeHtml(Async)");
        }

        return streamVideosRetreieveEmbedCodeHtmlCall(identifier, accountId, _callback);

    }

    /**
     * Retrieve embed Code HTML
     * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retreieve embed Code HTML response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retreieve embed Code HTML response failure </td><td>  -  </td></tr>
     </table>
     */
    public Object streamVideosRetreieveEmbedCodeHtml(String identifier, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = streamVideosRetreieveEmbedCodeHtmlWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve embed Code HTML
     * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retreieve embed Code HTML response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retreieve embed Code HTML response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> streamVideosRetreieveEmbedCodeHtmlWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamVideosRetreieveEmbedCodeHtmlValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve embed Code HTML (asynchronously)
     * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retreieve embed Code HTML response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retreieve embed Code HTML response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosRetreieveEmbedCodeHtmlAsync(String identifier, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosRetreieveEmbedCodeHtmlValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosRetrieveVideoDetails
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosRetrieveVideoDetailsCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosRetrieveVideoDetailsValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamVideosRetrieveVideoDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosRetrieveVideoDetails(Async)");
        }

        return streamVideosRetrieveVideoDetailsCall(identifier, accountId, _callback);

    }

    /**
     * Retrieve video details
     * Fetches details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamVideoResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamVideoResponseSingle streamVideosRetrieveVideoDetails(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamVideoResponseSingle> localVarResp = streamVideosRetrieveVideoDetailsWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve video details
     * Fetches details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamVideoResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamVideoResponseSingle> streamVideosRetrieveVideoDetailsWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamVideosRetrieveVideoDetailsValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve video details (asynchronously)
     * Fetches details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosRetrieveVideoDetailsAsync(String identifier, String accountId, final ApiCallback<StreamVideoResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosRetrieveVideoDetailsValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosStorageUsage
     * @param accountId  (required)
     * @param creator  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about an account&#39;s storage use response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Returns information about an account&#39;s storage use response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosStorageUsageCall(String accountId, String creator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/storage-usage"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (creator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creator", creator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosStorageUsageValidateBeforeCall(String accountId, String creator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosStorageUsage(Async)");
        }

        return streamVideosStorageUsageCall(accountId, creator, _callback);

    }

    /**
     * Storage use
     * Returns information about an account&#39;s storage use.
     * @param accountId  (required)
     * @param creator  (optional)
     * @return StreamStorageUseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about an account&#39;s storage use response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Returns information about an account&#39;s storage use response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamStorageUseResponse streamVideosStorageUsage(String accountId, String creator) throws ApiException {
        ApiResponse<StreamStorageUseResponse> localVarResp = streamVideosStorageUsageWithHttpInfo(accountId, creator);
        return localVarResp.getData();
    }

    /**
     * Storage use
     * Returns information about an account&#39;s storage use.
     * @param accountId  (required)
     * @param creator  (optional)
     * @return ApiResponse&lt;StreamStorageUseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about an account&#39;s storage use response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Returns information about an account&#39;s storage use response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamStorageUseResponse> streamVideosStorageUsageWithHttpInfo(String accountId, String creator) throws ApiException {
        okhttp3.Call localVarCall = streamVideosStorageUsageValidateBeforeCall(accountId, creator, null);
        Type localVarReturnType = new TypeToken<StreamStorageUseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Storage use (asynchronously)
     * Returns information about an account&#39;s storage use.
     * @param accountId  (required)
     * @param creator  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about an account&#39;s storage use response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Returns information about an account&#39;s storage use response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosStorageUsageAsync(String accountId, String creator, final ApiCallback<StreamStorageUseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosStorageUsageValidateBeforeCall(accountId, creator, _callback);
        Type localVarReturnType = new TypeToken<StreamStorageUseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosUpdateVideoDetails
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamVideoUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUpdateVideoDetailsCall(String identifier, String accountId, StreamVideoUpdate streamVideoUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamVideoUpdate;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosUpdateVideoDetailsValidateBeforeCall(String identifier, String accountId, StreamVideoUpdate streamVideoUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamVideosUpdateVideoDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosUpdateVideoDetails(Async)");
        }

        // verify the required parameter 'streamVideoUpdate' is set
        if (streamVideoUpdate == null) {
            throw new ApiException("Missing the required parameter 'streamVideoUpdate' when calling streamVideosUpdateVideoDetails(Async)");
        }

        return streamVideosUpdateVideoDetailsCall(identifier, accountId, streamVideoUpdate, _callback);

    }

    /**
     * Edit video details
     * Edit details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamVideoUpdate  (required)
     * @return StreamVideoResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamVideoResponseSingle streamVideosUpdateVideoDetails(String identifier, String accountId, StreamVideoUpdate streamVideoUpdate) throws ApiException {
        ApiResponse<StreamVideoResponseSingle> localVarResp = streamVideosUpdateVideoDetailsWithHttpInfo(identifier, accountId, streamVideoUpdate);
        return localVarResp.getData();
    }

    /**
     * Edit video details
     * Edit details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamVideoUpdate  (required)
     * @return ApiResponse&lt;StreamVideoResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamVideoResponseSingle> streamVideosUpdateVideoDetailsWithHttpInfo(String identifier, String accountId, StreamVideoUpdate streamVideoUpdate) throws ApiException {
        okhttp3.Call localVarCall = streamVideosUpdateVideoDetailsValidateBeforeCall(identifier, accountId, streamVideoUpdate, null);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit video details (asynchronously)
     * Edit details for a single video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param streamVideoUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit video details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUpdateVideoDetailsAsync(String identifier, String accountId, StreamVideoUpdate streamVideoUpdate, final ApiCallback<StreamVideoResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosUpdateVideoDetailsValidateBeforeCall(identifier, accountId, streamVideoUpdate, _callback);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosUploadVideosFromAUrl
     * @param accountId  (required)
     * @param streamVideoCopyRequest  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos from a URL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos from a URL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUploadVideosFromAUrlCall(String accountId, StreamVideoCopyRequest streamVideoCopyRequest, String uploadCreator, String uploadMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamVideoCopyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/copy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uploadCreator != null) {
            localVarHeaderParams.put("Upload-Creator", localVarApiClient.parameterToString(uploadCreator));
        }

        if (uploadMetadata != null) {
            localVarHeaderParams.put("Upload-Metadata", localVarApiClient.parameterToString(uploadMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosUploadVideosFromAUrlValidateBeforeCall(String accountId, StreamVideoCopyRequest streamVideoCopyRequest, String uploadCreator, String uploadMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosUploadVideosFromAUrl(Async)");
        }

        // verify the required parameter 'streamVideoCopyRequest' is set
        if (streamVideoCopyRequest == null) {
            throw new ApiException("Missing the required parameter 'streamVideoCopyRequest' when calling streamVideosUploadVideosFromAUrl(Async)");
        }

        return streamVideosUploadVideosFromAUrlCall(accountId, streamVideoCopyRequest, uploadCreator, uploadMetadata, _callback);

    }

    /**
     * Upload videos from a URL
     * Uploads a video to Stream from a provided URL.
     * @param accountId  (required)
     * @param streamVideoCopyRequest  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @return StreamVideoResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos from a URL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos from a URL response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamVideoResponseSingle streamVideosUploadVideosFromAUrl(String accountId, StreamVideoCopyRequest streamVideoCopyRequest, String uploadCreator, String uploadMetadata) throws ApiException {
        ApiResponse<StreamVideoResponseSingle> localVarResp = streamVideosUploadVideosFromAUrlWithHttpInfo(accountId, streamVideoCopyRequest, uploadCreator, uploadMetadata);
        return localVarResp.getData();
    }

    /**
     * Upload videos from a URL
     * Uploads a video to Stream from a provided URL.
     * @param accountId  (required)
     * @param streamVideoCopyRequest  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @return ApiResponse&lt;StreamVideoResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos from a URL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos from a URL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamVideoResponseSingle> streamVideosUploadVideosFromAUrlWithHttpInfo(String accountId, StreamVideoCopyRequest streamVideoCopyRequest, String uploadCreator, String uploadMetadata) throws ApiException {
        okhttp3.Call localVarCall = streamVideosUploadVideosFromAUrlValidateBeforeCall(accountId, streamVideoCopyRequest, uploadCreator, uploadMetadata, null);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload videos from a URL (asynchronously)
     * Uploads a video to Stream from a provided URL.
     * @param accountId  (required)
     * @param streamVideoCopyRequest  (required)
     * @param uploadCreator  (optional)
     * @param uploadMetadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos from a URL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos from a URL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUploadVideosFromAUrlAsync(String accountId, StreamVideoCopyRequest streamVideoCopyRequest, String uploadCreator, String uploadMetadata, final ApiCallback<StreamVideoResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosUploadVideosFromAUrlValidateBeforeCall(accountId, streamVideoCopyRequest, uploadCreator, uploadMetadata, _callback);
        Type localVarReturnType = new TypeToken<StreamVideoResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamVideosUploadVideosViaDirectUploadUrLs
     * @param accountId  (required)
     * @param streamDirectUploadRequest  (required)
     * @param uploadCreator  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos via direct upload URLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos via direct upload URLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUploadVideosViaDirectUploadUrLsCall(String accountId, StreamDirectUploadRequest streamDirectUploadRequest, String uploadCreator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamDirectUploadRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/direct_upload"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uploadCreator != null) {
            localVarHeaderParams.put("Upload-Creator", localVarApiClient.parameterToString(uploadCreator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamVideosUploadVideosViaDirectUploadUrLsValidateBeforeCall(String accountId, StreamDirectUploadRequest streamDirectUploadRequest, String uploadCreator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamVideosUploadVideosViaDirectUploadUrLs(Async)");
        }

        // verify the required parameter 'streamDirectUploadRequest' is set
        if (streamDirectUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'streamDirectUploadRequest' when calling streamVideosUploadVideosViaDirectUploadUrLs(Async)");
        }

        return streamVideosUploadVideosViaDirectUploadUrLsCall(accountId, streamDirectUploadRequest, uploadCreator, _callback);

    }

    /**
     * Upload videos via direct upload URLs
     * Creates a direct upload that allows video uploads without an API key.
     * @param accountId  (required)
     * @param streamDirectUploadRequest  (required)
     * @param uploadCreator  (optional)
     * @return StreamDirectUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos via direct upload URLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos via direct upload URLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDirectUploadResponse streamVideosUploadVideosViaDirectUploadUrLs(String accountId, StreamDirectUploadRequest streamDirectUploadRequest, String uploadCreator) throws ApiException {
        ApiResponse<StreamDirectUploadResponse> localVarResp = streamVideosUploadVideosViaDirectUploadUrLsWithHttpInfo(accountId, streamDirectUploadRequest, uploadCreator);
        return localVarResp.getData();
    }

    /**
     * Upload videos via direct upload URLs
     * Creates a direct upload that allows video uploads without an API key.
     * @param accountId  (required)
     * @param streamDirectUploadRequest  (required)
     * @param uploadCreator  (optional)
     * @return ApiResponse&lt;StreamDirectUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos via direct upload URLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos via direct upload URLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDirectUploadResponse> streamVideosUploadVideosViaDirectUploadUrLsWithHttpInfo(String accountId, StreamDirectUploadRequest streamDirectUploadRequest, String uploadCreator) throws ApiException {
        okhttp3.Call localVarCall = streamVideosUploadVideosViaDirectUploadUrLsValidateBeforeCall(accountId, streamDirectUploadRequest, uploadCreator, null);
        Type localVarReturnType = new TypeToken<StreamDirectUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload videos via direct upload URLs (asynchronously)
     * Creates a direct upload that allows video uploads without an API key.
     * @param accountId  (required)
     * @param streamDirectUploadRequest  (required)
     * @param uploadCreator  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload videos via direct upload URLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload videos via direct upload URLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamVideosUploadVideosViaDirectUploadUrLsAsync(String accountId, StreamDirectUploadRequest streamDirectUploadRequest, String uploadCreator, final ApiCallback<StreamDirectUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamVideosUploadVideosViaDirectUploadUrLsValidateBeforeCall(accountId, streamDirectUploadRequest, uploadCreator, _callback);
        Type localVarReturnType = new TypeToken<StreamDirectUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
