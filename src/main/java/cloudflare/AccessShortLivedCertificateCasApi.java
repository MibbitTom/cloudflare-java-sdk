/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessCaComponentsSchemasResponseCollection;
import org.openapitools.client.model.AccessCaComponentsSchemasSingleResponse;
import org.openapitools.client.model.AccessSchemasIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessShortLivedCertificateCasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessShortLivedCertificateCasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessShortLivedCertificateCasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessShortLivedCertificateCAsCreateAShortLivedCertificateCa
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsCreateAShortLivedCertificateCaCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid}/ca"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessShortLivedCertificateCAsCreateAShortLivedCertificateCaValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessShortLivedCertificateCAsCreateAShortLivedCertificateCa(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessShortLivedCertificateCAsCreateAShortLivedCertificateCa(Async)");
        }

        return accessShortLivedCertificateCAsCreateAShortLivedCertificateCaCall(uuid, identifier, _callback);

    }

    /**
     * Create a short-lived certificate CA
     * Generates a new short-lived certificate CA and public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessCaComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCaComponentsSchemasSingleResponse accessShortLivedCertificateCAsCreateAShortLivedCertificateCa(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessCaComponentsSchemasSingleResponse> localVarResp = accessShortLivedCertificateCAsCreateAShortLivedCertificateCaWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Create a short-lived certificate CA
     * Generates a new short-lived certificate CA and public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCaComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCaComponentsSchemasSingleResponse> accessShortLivedCertificateCAsCreateAShortLivedCertificateCaWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessShortLivedCertificateCAsCreateAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a short-lived certificate CA (asynchronously)
     * Generates a new short-lived certificate CA and public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsCreateAShortLivedCertificateCaAsync(String uuid, String identifier, final ApiCallback<AccessCaComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessShortLivedCertificateCAsCreateAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessShortLivedCertificateCAsDeleteAShortLivedCertificateCa
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid}/ca"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(Async)");
        }

        return accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaCall(uuid, identifier, _callback);

    }

    /**
     * Delete a short-lived certificate CA
     * Deletes a short-lived certificate CA.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasIdResponse accessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessSchemasIdResponse> localVarResp = accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete a short-lived certificate CA
     * Deletes a short-lived certificate CA.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasIdResponse> accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a short-lived certificate CA (asynchronously)
     * Deletes a short-lived certificate CA.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaAsync(String uuid, String identifier, final ApiCallback<AccessSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessShortLivedCertificateCAsDeleteAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessShortLivedCertificateCAsGetAShortLivedCertificateCa
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsGetAShortLivedCertificateCaCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid}/ca"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessShortLivedCertificateCAsGetAShortLivedCertificateCaValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessShortLivedCertificateCAsGetAShortLivedCertificateCa(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessShortLivedCertificateCAsGetAShortLivedCertificateCa(Async)");
        }

        return accessShortLivedCertificateCAsGetAShortLivedCertificateCaCall(uuid, identifier, _callback);

    }

    /**
     * Get a short-lived certificate CA
     * Fetches a short-lived certificate CA and its public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessCaComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCaComponentsSchemasSingleResponse accessShortLivedCertificateCAsGetAShortLivedCertificateCa(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessCaComponentsSchemasSingleResponse> localVarResp = accessShortLivedCertificateCAsGetAShortLivedCertificateCaWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get a short-lived certificate CA
     * Fetches a short-lived certificate CA and its public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCaComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCaComponentsSchemasSingleResponse> accessShortLivedCertificateCAsGetAShortLivedCertificateCaWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessShortLivedCertificateCAsGetAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a short-lived certificate CA (asynchronously)
     * Fetches a short-lived certificate CA and its public key.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a short-lived certificate CA response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a short-lived certificate CA response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsGetAShortLivedCertificateCaAsync(String uuid, String identifier, final ApiCallback<AccessCaComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessShortLivedCertificateCAsGetAShortLivedCertificateCaValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessShortLivedCertificateCAsListShortLivedCertificateCAs
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List short-lived certificate CAs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List short-lived certificate CAs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsListShortLivedCertificateCAsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/ca"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessShortLivedCertificateCAsListShortLivedCertificateCAsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessShortLivedCertificateCAsListShortLivedCertificateCAs(Async)");
        }

        return accessShortLivedCertificateCAsListShortLivedCertificateCAsCall(identifier, _callback);

    }

    /**
     * List short-lived certificate CAs
     * Lists short-lived certificate CAs and their public keys.
     * @param identifier  (required)
     * @return AccessCaComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List short-lived certificate CAs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List short-lived certificate CAs response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCaComponentsSchemasResponseCollection accessShortLivedCertificateCAsListShortLivedCertificateCAs(String identifier) throws ApiException {
        ApiResponse<AccessCaComponentsSchemasResponseCollection> localVarResp = accessShortLivedCertificateCAsListShortLivedCertificateCAsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List short-lived certificate CAs
     * Lists short-lived certificate CAs and their public keys.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCaComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List short-lived certificate CAs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List short-lived certificate CAs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCaComponentsSchemasResponseCollection> accessShortLivedCertificateCAsListShortLivedCertificateCAsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessShortLivedCertificateCAsListShortLivedCertificateCAsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List short-lived certificate CAs (asynchronously)
     * Lists short-lived certificate CAs and their public keys.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List short-lived certificate CAs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List short-lived certificate CAs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessShortLivedCertificateCAsListShortLivedCertificateCAsAsync(String identifier, final ApiCallback<AccessCaComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessShortLivedCertificateCAsListShortLivedCertificateCAsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCaComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
