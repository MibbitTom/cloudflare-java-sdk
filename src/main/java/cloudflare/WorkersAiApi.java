/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.openapitools.client.model.WorkersAiPostRunModel200Response;
import org.openapitools.client.model.WorkersAiPostRunModelRequest;
import org.openapitools.client.model.WorkersAiSearchAuthor200Response;
import org.openapitools.client.model.WorkersAiSearchAuthor404Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersAiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersAiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersAiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workersAiPostRunModel
     * @param accountId  (required)
     * @param modelName  (required)
     * @param workersAiPostRunModelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunModelCall(String accountId, String modelName, WorkersAiPostRunModelRequest workersAiPostRunModelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunModelRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/{model_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunModelValidateBeforeCall(String accountId, String modelName, WorkersAiPostRunModelRequest workersAiPostRunModelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunModel(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling workersAiPostRunModel(Async)");
        }

        return workersAiPostRunModelCall(accountId, modelName, workersAiPostRunModelRequest, _callback);

    }

    /**
     * Execute AI model
     * This endpoint provides users with the capability to run specific AI models on-demand.  By submitting the required input data, users can receive real-time predictions or results generated by the chosen AI model. The endpoint supports various AI model types, ensuring flexibility and adaptability for diverse use cases.  Model specific inputs available in [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).
     * @param accountId  (required)
     * @param modelName  (required)
     * @param workersAiPostRunModelRequest  (optional)
     * @return WorkersAiPostRunModel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunModel200Response workersAiPostRunModel(String accountId, String modelName, WorkersAiPostRunModelRequest workersAiPostRunModelRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunModel200Response> localVarResp = workersAiPostRunModelWithHttpInfo(accountId, modelName, workersAiPostRunModelRequest);
        return localVarResp.getData();
    }

    /**
     * Execute AI model
     * This endpoint provides users with the capability to run specific AI models on-demand.  By submitting the required input data, users can receive real-time predictions or results generated by the chosen AI model. The endpoint supports various AI model types, ensuring flexibility and adaptability for diverse use cases.  Model specific inputs available in [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).
     * @param accountId  (required)
     * @param modelName  (required)
     * @param workersAiPostRunModelRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunModel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunModel200Response> workersAiPostRunModelWithHttpInfo(String accountId, String modelName, WorkersAiPostRunModelRequest workersAiPostRunModelRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunModelValidateBeforeCall(accountId, modelName, workersAiPostRunModelRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunModel200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute AI model (asynchronously)
     * This endpoint provides users with the capability to run specific AI models on-demand.  By submitting the required input data, users can receive real-time predictions or results generated by the chosen AI model. The endpoint supports various AI model types, ensuring flexibility and adaptability for diverse use cases.  Model specific inputs available in [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).
     * @param accountId  (required)
     * @param modelName  (required)
     * @param workersAiPostRunModelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunModelAsync(String accountId, String modelName, WorkersAiPostRunModelRequest workersAiPostRunModelRequest, final ApiCallback<WorkersAiPostRunModel200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunModelValidateBeforeCall(accountId, modelName, workersAiPostRunModelRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunModel200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiSearchAuthor
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of authors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchAuthorCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/authors/search"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiSearchAuthorValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiSearchAuthor(Async)");
        }

        return workersAiSearchAuthorCall(accountId, _callback);

    }

    /**
     * Author Search
     * 
     * @param accountId  (required)
     * @return WorkersAiSearchAuthor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of authors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiSearchAuthor200Response workersAiSearchAuthor(Integer accountId) throws ApiException {
        ApiResponse<WorkersAiSearchAuthor200Response> localVarResp = workersAiSearchAuthorWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Author Search
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersAiSearchAuthor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of authors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiSearchAuthor200Response> workersAiSearchAuthorWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = workersAiSearchAuthorValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Author Search (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of authors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchAuthorAsync(Integer accountId, final ApiCallback<WorkersAiSearchAuthor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiSearchAuthorValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiSearchModel
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param task Filter by Task Name (optional)
     * @param author Filter by Author (optional)
     * @param source Filter by Source Id (optional)
     * @param hideExperimental Filter to hide experimental models (optional)
     * @param search Search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchModelCall(Integer accountId, Integer perPage, Integer page, String task, String author, BigDecimal source, Boolean hideExperimental, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/models/search"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (task != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task", task));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (hideExperimental != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_experimental", hideExperimental));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiSearchModelValidateBeforeCall(Integer accountId, Integer perPage, Integer page, String task, String author, BigDecimal source, Boolean hideExperimental, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiSearchModel(Async)");
        }

        return workersAiSearchModelCall(accountId, perPage, page, task, author, source, hideExperimental, search, _callback);

    }

    /**
     * Model Search
     * 
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param task Filter by Task Name (optional)
     * @param author Filter by Author (optional)
     * @param source Filter by Source Id (optional)
     * @param hideExperimental Filter to hide experimental models (optional)
     * @param search Search (optional)
     * @return WorkersAiSearchAuthor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiSearchAuthor200Response workersAiSearchModel(Integer accountId, Integer perPage, Integer page, String task, String author, BigDecimal source, Boolean hideExperimental, String search) throws ApiException {
        ApiResponse<WorkersAiSearchAuthor200Response> localVarResp = workersAiSearchModelWithHttpInfo(accountId, perPage, page, task, author, source, hideExperimental, search);
        return localVarResp.getData();
    }

    /**
     * Model Search
     * 
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param task Filter by Task Name (optional)
     * @param author Filter by Author (optional)
     * @param source Filter by Source Id (optional)
     * @param hideExperimental Filter to hide experimental models (optional)
     * @param search Search (optional)
     * @return ApiResponse&lt;WorkersAiSearchAuthor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiSearchAuthor200Response> workersAiSearchModelWithHttpInfo(Integer accountId, Integer perPage, Integer page, String task, String author, BigDecimal source, Boolean hideExperimental, String search) throws ApiException {
        okhttp3.Call localVarCall = workersAiSearchModelValidateBeforeCall(accountId, perPage, page, task, author, source, hideExperimental, search, null);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Model Search (asynchronously)
     * 
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param task Filter by Task Name (optional)
     * @param author Filter by Author (optional)
     * @param source Filter by Source Id (optional)
     * @param hideExperimental Filter to hide experimental models (optional)
     * @param search Search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchModelAsync(Integer accountId, Integer perPage, Integer page, String task, String author, BigDecimal source, Boolean hideExperimental, String search, final ApiCallback<WorkersAiSearchAuthor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiSearchModelValidateBeforeCall(accountId, perPage, page, task, author, source, hideExperimental, search, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiSearchTask
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of tasks </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchTaskCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/tasks/search"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiSearchTaskValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiSearchTask(Async)");
        }

        return workersAiSearchTaskCall(accountId, _callback);

    }

    /**
     * Task Search
     * 
     * @param accountId  (required)
     * @return WorkersAiSearchAuthor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of tasks </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiSearchAuthor200Response workersAiSearchTask(Integer accountId) throws ApiException {
        ApiResponse<WorkersAiSearchAuthor200Response> localVarResp = workersAiSearchTaskWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Task Search
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersAiSearchAuthor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of tasks </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiSearchAuthor200Response> workersAiSearchTaskWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = workersAiSearchTaskValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Task Search (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of tasks </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiSearchTaskAsync(Integer accountId, final ApiCallback<WorkersAiSearchAuthor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiSearchTaskValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiSearchAuthor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
