/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WaitingRoomCreateACustomWaitingRoomPagePreview4XXResponse;
import org.openapitools.client.model.WaitingRoomCreateEvent4XXResponse;
import org.openapitools.client.model.WaitingRoomCreateWaitingRoom4XXResponse;
import org.openapitools.client.model.WaitingRoomDeleteEvent4XXResponse;
import org.openapitools.client.model.WaitingRoomDeleteWaitingRoom4XXResponse;
import org.openapitools.client.model.WaitingRoomGetWaitingRoomStatus4XXResponse;
import org.openapitools.client.model.WaitingRoomGetZoneSettings4XXResponse;
import org.openapitools.client.model.WaitingRoomListEvents4XXResponse;
import org.openapitools.client.model.WaitingRoomListWaitingRoomRules4XXResponse;
import org.openapitools.client.model.WaitingRoomListWaitingRooms4XXResponse;
import org.openapitools.client.model.WaitingRoomPreviewActiveEventDetails4XXResponse;
import org.openapitools.client.model.WaitingroomCreateRule;
import org.openapitools.client.model.WaitingroomEventDetailsResponse;
import org.openapitools.client.model.WaitingroomEventIdResponse;
import org.openapitools.client.model.WaitingroomEventResponse;
import org.openapitools.client.model.WaitingroomEventResponseCollection;
import org.openapitools.client.model.WaitingroomPatchRule;
import org.openapitools.client.model.WaitingroomPreviewResponse;
import org.openapitools.client.model.WaitingroomQueryEvent;
import org.openapitools.client.model.WaitingroomQueryPreview;
import org.openapitools.client.model.WaitingroomQueryWaitingroom;
import org.openapitools.client.model.WaitingroomResponseCollection;
import org.openapitools.client.model.WaitingroomRulesResponseCollection;
import org.openapitools.client.model.WaitingroomSingleResponse;
import org.openapitools.client.model.WaitingroomStatusResponse;
import org.openapitools.client.model.WaitingroomWaitingRoomIdResponse;
import org.openapitools.client.model.WaitingroomZoneSettings;
import org.openapitools.client.model.WaitingroomZoneSettingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaitingRoomApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WaitingRoomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaitingRoomApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for waitingRoomCreateACustomWaitingRoomPagePreview
     * @param zoneId  (required)
     * @param waitingroomQueryPreview  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a custom waiting room page preview response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a custom waiting room page preview response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateACustomWaitingRoomPagePreviewCall(String zoneId, WaitingroomQueryPreview waitingroomQueryPreview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryPreview;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/preview"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(String zoneId, WaitingroomQueryPreview waitingroomQueryPreview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomCreateACustomWaitingRoomPagePreview(Async)");
        }

        // verify the required parameter 'waitingroomQueryPreview' is set
        if (waitingroomQueryPreview == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryPreview' when calling waitingRoomCreateACustomWaitingRoomPagePreview(Async)");
        }

        return waitingRoomCreateACustomWaitingRoomPagePreviewCall(zoneId, waitingroomQueryPreview, _callback);

    }

    /**
     * Create a custom waiting room page preview
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#39;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param zoneId  (required)
     * @param waitingroomQueryPreview  (required)
     * @return WaitingroomPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a custom waiting room page preview response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a custom waiting room page preview response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomPreviewResponse waitingRoomCreateACustomWaitingRoomPagePreview(String zoneId, WaitingroomQueryPreview waitingroomQueryPreview) throws ApiException {
        ApiResponse<WaitingroomPreviewResponse> localVarResp = waitingRoomCreateACustomWaitingRoomPagePreviewWithHttpInfo(zoneId, waitingroomQueryPreview);
        return localVarResp.getData();
    }

    /**
     * Create a custom waiting room page preview
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#39;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param zoneId  (required)
     * @param waitingroomQueryPreview  (required)
     * @return ApiResponse&lt;WaitingroomPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a custom waiting room page preview response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a custom waiting room page preview response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomPreviewResponse> waitingRoomCreateACustomWaitingRoomPagePreviewWithHttpInfo(String zoneId, WaitingroomQueryPreview waitingroomQueryPreview) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(zoneId, waitingroomQueryPreview, null);
        Type localVarReturnType = new TypeToken<WaitingroomPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a custom waiting room page preview (asynchronously)
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#39;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param zoneId  (required)
     * @param waitingroomQueryPreview  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a custom waiting room page preview response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a custom waiting room page preview response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateACustomWaitingRoomPagePreviewAsync(String zoneId, WaitingroomQueryPreview waitingroomQueryPreview, final ApiCallback<WaitingroomPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(zoneId, waitingroomQueryPreview, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomCreateEvent
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateEventCall(String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryEvent;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomCreateEventValidateBeforeCall(String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomCreateEvent(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomCreateEvent(Async)");
        }

        // verify the required parameter 'waitingroomQueryEvent' is set
        if (waitingroomQueryEvent == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryEvent' when calling waitingRoomCreateEvent(Async)");
        }

        return waitingRoomCreateEventCall(waitingRoomId, zoneId, waitingroomQueryEvent, _callback);

    }

    /**
     * Create event
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#39;s configuration may either override or inherit from the waiting room&#39;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return WaitingroomEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create event response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventResponse waitingRoomCreateEvent(String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        ApiResponse<WaitingroomEventResponse> localVarResp = waitingRoomCreateEventWithHttpInfo(waitingRoomId, zoneId, waitingroomQueryEvent);
        return localVarResp.getData();
    }

    /**
     * Create event
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#39;s configuration may either override or inherit from the waiting room&#39;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return ApiResponse&lt;WaitingroomEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create event response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventResponse> waitingRoomCreateEventWithHttpInfo(String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomCreateEventValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryEvent, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create event (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#39;s configuration may either override or inherit from the waiting room&#39;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateEventAsync(String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback<WaitingroomEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomCreateEventValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryEvent, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomCreateWaitingRoom
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateWaitingRoomCall(String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryWaitingroom;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomCreateWaitingRoomValidateBeforeCall(String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomCreateWaitingRoom(Async)");
        }

        // verify the required parameter 'waitingroomQueryWaitingroom' is set
        if (waitingroomQueryWaitingroom == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryWaitingroom' when calling waitingRoomCreateWaitingRoom(Async)");
        }

        return waitingRoomCreateWaitingRoomCall(zoneId, waitingroomQueryWaitingroom, _callback);

    }

    /**
     * Create waiting room
     * Creates a new waiting room.
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return WaitingroomSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomSingleResponse waitingRoomCreateWaitingRoom(String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        ApiResponse<WaitingroomSingleResponse> localVarResp = waitingRoomCreateWaitingRoomWithHttpInfo(zoneId, waitingroomQueryWaitingroom);
        return localVarResp.getData();
    }

    /**
     * Create waiting room
     * Creates a new waiting room.
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return ApiResponse&lt;WaitingroomSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomSingleResponse> waitingRoomCreateWaitingRoomWithHttpInfo(String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomCreateWaitingRoomValidateBeforeCall(zoneId, waitingroomQueryWaitingroom, null);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create waiting room (asynchronously)
     * Creates a new waiting room.
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateWaitingRoomAsync(String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback<WaitingroomSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomCreateWaitingRoomValidateBeforeCall(zoneId, waitingroomQueryWaitingroom, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomCreateWaitingRoomRule
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateWaitingRoomRuleCall(String waitingRoomId, String zoneId, WaitingroomCreateRule waitingroomCreateRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomCreateRule;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomCreateWaitingRoomRuleValidateBeforeCall(String waitingRoomId, String zoneId, WaitingroomCreateRule waitingroomCreateRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }

        // verify the required parameter 'waitingroomCreateRule' is set
        if (waitingroomCreateRule == null) {
            throw new ApiException("Missing the required parameter 'waitingroomCreateRule' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }

        return waitingRoomCreateWaitingRoomRuleCall(waitingRoomId, zoneId, waitingroomCreateRule, _callback);

    }

    /**
     * Create Waiting Room Rule
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @return WaitingroomRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomRulesResponseCollection waitingRoomCreateWaitingRoomRule(String waitingRoomId, String zoneId, WaitingroomCreateRule waitingroomCreateRule) throws ApiException {
        ApiResponse<WaitingroomRulesResponseCollection> localVarResp = waitingRoomCreateWaitingRoomRuleWithHttpInfo(waitingRoomId, zoneId, waitingroomCreateRule);
        return localVarResp.getData();
    }

    /**
     * Create Waiting Room Rule
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @return ApiResponse&lt;WaitingroomRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomRulesResponseCollection> waitingRoomCreateWaitingRoomRuleWithHttpInfo(String waitingRoomId, String zoneId, WaitingroomCreateRule waitingroomCreateRule) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomCreateWaitingRoomRuleValidateBeforeCall(waitingRoomId, zoneId, waitingroomCreateRule, null);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Waiting Room Rule (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomCreateWaitingRoomRuleAsync(String waitingRoomId, String zoneId, WaitingroomCreateRule waitingroomCreateRule, final ApiCallback<WaitingroomRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomCreateWaitingRoomRuleValidateBeforeCall(waitingRoomId, zoneId, waitingroomCreateRule, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomDeleteEvent
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteEventCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomDeleteEventValidateBeforeCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomDeleteEvent(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteEvent(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomDeleteEvent(Async)");
        }

        return waitingRoomDeleteEventCall(eventId, waitingRoomId, zoneId, _callback);

    }

    /**
     * Delete event
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomEventIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete event response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventIdResponse waitingRoomDeleteEvent(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomEventIdResponse> localVarResp = waitingRoomDeleteEventWithHttpInfo(eventId, waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete event
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomEventIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete event response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventIdResponse> waitingRoomDeleteEventWithHttpInfo(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomDeleteEventValidateBeforeCall(eventId, waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete event (asynchronously)
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteEventAsync(String eventId, String waitingRoomId, String zoneId, final ApiCallback<WaitingroomEventIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomDeleteEventValidateBeforeCall(eventId, waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomDeleteWaitingRoom
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteWaitingRoomCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomDeleteWaitingRoomValidateBeforeCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteWaitingRoom(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomDeleteWaitingRoom(Async)");
        }

        return waitingRoomDeleteWaitingRoomCall(waitingRoomId, zoneId, _callback);

    }

    /**
     * Delete waiting room
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomWaitingRoomIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomWaitingRoomIdResponse waitingRoomDeleteWaitingRoom(String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomWaitingRoomIdResponse> localVarResp = waitingRoomDeleteWaitingRoomWithHttpInfo(waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete waiting room
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomWaitingRoomIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomWaitingRoomIdResponse> waitingRoomDeleteWaitingRoomWithHttpInfo(String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomDeleteWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomWaitingRoomIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete waiting room (asynchronously)
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteWaitingRoomAsync(String waitingRoomId, String zoneId, final ApiCallback<WaitingroomWaitingRoomIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomDeleteWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomWaitingRoomIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomDeleteWaitingRoomRule
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteWaitingRoomRuleCall(String ruleId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(String ruleId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }

        return waitingRoomDeleteWaitingRoomRuleCall(ruleId, waitingRoomId, zoneId, _callback);

    }

    /**
     * Delete Waiting Room Rule
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomRulesResponseCollection waitingRoomDeleteWaitingRoomRule(String ruleId, String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomRulesResponseCollection> localVarResp = waitingRoomDeleteWaitingRoomRuleWithHttpInfo(ruleId, waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Waiting Room Rule
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomRulesResponseCollection> waitingRoomDeleteWaitingRoomRuleWithHttpInfo(String ruleId, String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Waiting Room Rule (asynchronously)
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomDeleteWaitingRoomRuleAsync(String ruleId, String waitingRoomId, String zoneId, final ApiCallback<WaitingroomRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomEventDetails
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomEventDetailsCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomEventDetailsValidateBeforeCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomEventDetails(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomEventDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomEventDetails(Async)");
        }

        return waitingRoomEventDetailsCall(eventId, waitingRoomId, zoneId, _callback);

    }

    /**
     * Event details
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventResponse waitingRoomEventDetails(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomEventResponse> localVarResp = waitingRoomEventDetailsWithHttpInfo(eventId, waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Event details
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventResponse> waitingRoomEventDetailsWithHttpInfo(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event details (asynchronously)
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomEventDetailsAsync(String eventId, String waitingRoomId, String zoneId, final ApiCallback<WaitingroomEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomGetWaitingRoomStatus
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get waiting room status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get waiting room status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomGetWaitingRoomStatusCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/status"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomGetWaitingRoomStatusValidateBeforeCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomGetWaitingRoomStatus(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomGetWaitingRoomStatus(Async)");
        }

        return waitingRoomGetWaitingRoomStatusCall(waitingRoomId, zoneId, _callback);

    }

    /**
     * Get waiting room status
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#39;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get waiting room status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get waiting room status response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomStatusResponse waitingRoomGetWaitingRoomStatus(String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomStatusResponse> localVarResp = waitingRoomGetWaitingRoomStatusWithHttpInfo(waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get waiting room status
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#39;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get waiting room status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get waiting room status response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomStatusResponse> waitingRoomGetWaitingRoomStatusWithHttpInfo(String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomGetWaitingRoomStatusValidateBeforeCall(waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get waiting room status (asynchronously)
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#39;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get waiting room status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get waiting room status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomGetWaitingRoomStatusAsync(String waitingRoomId, String zoneId, final ApiCallback<WaitingroomStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomGetWaitingRoomStatusValidateBeforeCall(waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomGetZoneSettings
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The current zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomGetZoneSettingsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomGetZoneSettingsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomGetZoneSettings(Async)");
        }

        return waitingRoomGetZoneSettingsCall(zoneId, _callback);

    }

    /**
     * Get zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @return WaitingroomZoneSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The current zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomZoneSettingsResponse waitingRoomGetZoneSettings(String zoneId) throws ApiException {
        ApiResponse<WaitingroomZoneSettingsResponse> localVarResp = waitingRoomGetZoneSettingsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomZoneSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The current zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomZoneSettingsResponse> waitingRoomGetZoneSettingsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomGetZoneSettingsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get zone-level Waiting Room settings (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The current zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomGetZoneSettingsAsync(String zoneId, final ApiCallback<WaitingroomZoneSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomGetZoneSettingsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomListEvents
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List events response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List events response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListEventsCall(String waitingRoomId, String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomListEventsValidateBeforeCall(String waitingRoomId, String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomListEvents(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomListEvents(Async)");
        }

        return waitingRoomListEventsCall(waitingRoomId, zoneId, page, perPage, _callback);

    }

    /**
     * List events
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return WaitingroomEventResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List events response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List events response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventResponseCollection waitingRoomListEvents(String waitingRoomId, String zoneId, Object page, Object perPage) throws ApiException {
        ApiResponse<WaitingroomEventResponseCollection> localVarResp = waitingRoomListEventsWithHttpInfo(waitingRoomId, zoneId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List events
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return ApiResponse&lt;WaitingroomEventResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List events response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List events response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventResponseCollection> waitingRoomListEventsWithHttpInfo(String waitingRoomId, String zoneId, Object page, Object perPage) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomListEventsValidateBeforeCall(waitingRoomId, zoneId, page, perPage, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List events (asynchronously)
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List events response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List events response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListEventsAsync(String waitingRoomId, String zoneId, Object page, Object perPage, final ApiCallback<WaitingroomEventResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomListEventsValidateBeforeCall(waitingRoomId, zoneId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomListWaitingRoomRules
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListWaitingRoomRulesCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomListWaitingRoomRulesValidateBeforeCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomListWaitingRoomRules(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomListWaitingRoomRules(Async)");
        }

        return waitingRoomListWaitingRoomRulesCall(waitingRoomId, zoneId, _callback);

    }

    /**
     * List Waiting Room Rules
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomRulesResponseCollection waitingRoomListWaitingRoomRules(String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomRulesResponseCollection> localVarResp = waitingRoomListWaitingRoomRulesWithHttpInfo(waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * List Waiting Room Rules
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomRulesResponseCollection> waitingRoomListWaitingRoomRulesWithHttpInfo(String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomListWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Waiting Room Rules (asynchronously)
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListWaitingRoomRulesAsync(String waitingRoomId, String zoneId, final ApiCallback<WaitingroomRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomListWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomListWaitingRooms
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List waiting rooms response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List waiting rooms response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListWaitingRoomsCall(String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomListWaitingRoomsValidateBeforeCall(String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomListWaitingRooms(Async)");
        }

        return waitingRoomListWaitingRoomsCall(zoneId, page, perPage, _callback);

    }

    /**
     * List waiting rooms
     * Lists waiting rooms.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return WaitingroomResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List waiting rooms response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List waiting rooms response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomResponseCollection waitingRoomListWaitingRooms(String zoneId, Object page, Object perPage) throws ApiException {
        ApiResponse<WaitingroomResponseCollection> localVarResp = waitingRoomListWaitingRoomsWithHttpInfo(zoneId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List waiting rooms
     * Lists waiting rooms.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return ApiResponse&lt;WaitingroomResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List waiting rooms response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List waiting rooms response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomResponseCollection> waitingRoomListWaitingRoomsWithHttpInfo(String zoneId, Object page, Object perPage) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomListWaitingRoomsValidateBeforeCall(zoneId, page, perPage, null);
        Type localVarReturnType = new TypeToken<WaitingroomResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List waiting rooms (asynchronously)
     * Lists waiting rooms.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List waiting rooms response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List waiting rooms response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomListWaitingRoomsAsync(String zoneId, Object page, Object perPage, final ApiCallback<WaitingroomResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomListWaitingRoomsValidateBeforeCall(zoneId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomPatchEvent
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchEventCall(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryEvent;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomPatchEventValidateBeforeCall(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomPatchEvent(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchEvent(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomPatchEvent(Async)");
        }

        // verify the required parameter 'waitingroomQueryEvent' is set
        if (waitingroomQueryEvent == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryEvent' when calling waitingRoomPatchEvent(Async)");
        }

        return waitingRoomPatchEventCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, _callback);

    }

    /**
     * Patch event
     * Patches a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return WaitingroomEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch event response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventResponse waitingRoomPatchEvent(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        ApiResponse<WaitingroomEventResponse> localVarResp = waitingRoomPatchEventWithHttpInfo(eventId, waitingRoomId, zoneId, waitingroomQueryEvent);
        return localVarResp.getData();
    }

    /**
     * Patch event
     * Patches a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return ApiResponse&lt;WaitingroomEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch event response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventResponse> waitingRoomPatchEventWithHttpInfo(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomPatchEventValidateBeforeCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch event (asynchronously)
     * Patches a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchEventAsync(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback<WaitingroomEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomPatchEventValidateBeforeCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomPatchWaitingRoom
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchWaitingRoomCall(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryWaitingroom;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomPatchWaitingRoomValidateBeforeCall(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchWaitingRoom(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomPatchWaitingRoom(Async)");
        }

        // verify the required parameter 'waitingroomQueryWaitingroom' is set
        if (waitingroomQueryWaitingroom == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryWaitingroom' when calling waitingRoomPatchWaitingRoom(Async)");
        }

        return waitingRoomPatchWaitingRoomCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, _callback);

    }

    /**
     * Patch waiting room
     * Patches a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return WaitingroomSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomSingleResponse waitingRoomPatchWaitingRoom(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        ApiResponse<WaitingroomSingleResponse> localVarResp = waitingRoomPatchWaitingRoomWithHttpInfo(waitingRoomId, zoneId, waitingroomQueryWaitingroom);
        return localVarResp.getData();
    }

    /**
     * Patch waiting room
     * Patches a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return ApiResponse&lt;WaitingroomSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomSingleResponse> waitingRoomPatchWaitingRoomWithHttpInfo(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomPatchWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, null);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch waiting room (asynchronously)
     * Patches a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchWaitingRoomAsync(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback<WaitingroomSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomPatchWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomPatchWaitingRoomRule
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomPatchRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchWaitingRoomRuleCall(String ruleId, String waitingRoomId, String zoneId, WaitingroomPatchRule waitingroomPatchRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomPatchRule;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomPatchWaitingRoomRuleValidateBeforeCall(String ruleId, String waitingRoomId, String zoneId, WaitingroomPatchRule waitingroomPatchRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }

        // verify the required parameter 'waitingroomPatchRule' is set
        if (waitingroomPatchRule == null) {
            throw new ApiException("Missing the required parameter 'waitingroomPatchRule' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }

        return waitingRoomPatchWaitingRoomRuleCall(ruleId, waitingRoomId, zoneId, waitingroomPatchRule, _callback);

    }

    /**
     * Patch Waiting Room Rule
     * Patches a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomPatchRule  (required)
     * @return WaitingroomRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomRulesResponseCollection waitingRoomPatchWaitingRoomRule(String ruleId, String waitingRoomId, String zoneId, WaitingroomPatchRule waitingroomPatchRule) throws ApiException {
        ApiResponse<WaitingroomRulesResponseCollection> localVarResp = waitingRoomPatchWaitingRoomRuleWithHttpInfo(ruleId, waitingRoomId, zoneId, waitingroomPatchRule);
        return localVarResp.getData();
    }

    /**
     * Patch Waiting Room Rule
     * Patches a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomPatchRule  (required)
     * @return ApiResponse&lt;WaitingroomRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomRulesResponseCollection> waitingRoomPatchWaitingRoomRuleWithHttpInfo(String ruleId, String waitingRoomId, String zoneId, WaitingroomPatchRule waitingroomPatchRule) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomPatchWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneId, waitingroomPatchRule, null);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Waiting Room Rule (asynchronously)
     * Patches a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomPatchRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Waiting Room Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Waiting Room Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchWaitingRoomRuleAsync(String ruleId, String waitingRoomId, String zoneId, WaitingroomPatchRule waitingroomPatchRule, final ApiCallback<WaitingroomRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomPatchWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneId, waitingroomPatchRule, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomPatchZoneSettings
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchZoneSettingsCall(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomZoneSettings;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomPatchZoneSettingsValidateBeforeCall(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomPatchZoneSettings(Async)");
        }

        // verify the required parameter 'waitingroomZoneSettings' is set
        if (waitingroomZoneSettings == null) {
            throw new ApiException("Missing the required parameter 'waitingroomZoneSettings' when calling waitingRoomPatchZoneSettings(Async)");
        }

        return waitingRoomPatchZoneSettingsCall(zoneId, waitingroomZoneSettings, _callback);

    }

    /**
     * Patch zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @return WaitingroomZoneSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomZoneSettingsResponse waitingRoomPatchZoneSettings(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings) throws ApiException {
        ApiResponse<WaitingroomZoneSettingsResponse> localVarResp = waitingRoomPatchZoneSettingsWithHttpInfo(zoneId, waitingroomZoneSettings);
        return localVarResp.getData();
    }

    /**
     * Patch zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @return ApiResponse&lt;WaitingroomZoneSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomZoneSettingsResponse> waitingRoomPatchZoneSettingsWithHttpInfo(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomPatchZoneSettingsValidateBeforeCall(zoneId, waitingroomZoneSettings, null);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch zone-level Waiting Room settings (asynchronously)
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPatchZoneSettingsAsync(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback<WaitingroomZoneSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomPatchZoneSettingsValidateBeforeCall(zoneId, waitingroomZoneSettings, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomPreviewActiveEventDetails
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview active event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview active event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPreviewActiveEventDetailsCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}/details"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomPreviewActiveEventDetailsValidateBeforeCall(String eventId, String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }

        return waitingRoomPreviewActiveEventDetailsCall(eventId, waitingRoomId, zoneId, _callback);

    }

    /**
     * Preview active event details
     * Previews an event&#39;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomEventDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview active event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview active event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventDetailsResponse waitingRoomPreviewActiveEventDetails(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomEventDetailsResponse> localVarResp = waitingRoomPreviewActiveEventDetailsWithHttpInfo(eventId, waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Preview active event details
     * Previews an event&#39;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomEventDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview active event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview active event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventDetailsResponse> waitingRoomPreviewActiveEventDetailsWithHttpInfo(String eventId, String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomPreviewActiveEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview active event details (asynchronously)
     * Previews an event&#39;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview active event details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview active event details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomPreviewActiveEventDetailsAsync(String eventId, String waitingRoomId, String zoneId, final ApiCallback<WaitingroomEventDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomPreviewActiveEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomReplaceWaitingRoomRules
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomReplaceWaitingRoomRulesCall(String waitingRoomId, String zoneId, List<WaitingroomCreateRule> waitingroomCreateRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomCreateRule;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(String waitingRoomId, String zoneId, List<WaitingroomCreateRule> waitingroomCreateRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }

        // verify the required parameter 'waitingroomCreateRule' is set
        if (waitingroomCreateRule == null) {
            throw new ApiException("Missing the required parameter 'waitingroomCreateRule' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }

        return waitingRoomReplaceWaitingRoomRulesCall(waitingRoomId, zoneId, waitingroomCreateRule, _callback);

    }

    /**
     * Replace Waiting Room Rules
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @return WaitingroomRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomRulesResponseCollection waitingRoomReplaceWaitingRoomRules(String waitingRoomId, String zoneId, List<WaitingroomCreateRule> waitingroomCreateRule) throws ApiException {
        ApiResponse<WaitingroomRulesResponseCollection> localVarResp = waitingRoomReplaceWaitingRoomRulesWithHttpInfo(waitingRoomId, zoneId, waitingroomCreateRule);
        return localVarResp.getData();
    }

    /**
     * Replace Waiting Room Rules
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @return ApiResponse&lt;WaitingroomRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomRulesResponseCollection> waitingRoomReplaceWaitingRoomRulesWithHttpInfo(String waitingRoomId, String zoneId, List<WaitingroomCreateRule> waitingroomCreateRule) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneId, waitingroomCreateRule, null);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Waiting Room Rules (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomCreateRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Waiting Room Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Waiting Room Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomReplaceWaitingRoomRulesAsync(String waitingRoomId, String zoneId, List<WaitingroomCreateRule> waitingroomCreateRule, final ApiCallback<WaitingroomRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneId, waitingroomCreateRule, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomUpdateEvent
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateEventCall(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryEvent;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomUpdateEventValidateBeforeCall(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomUpdateEvent(Async)");
        }

        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomUpdateEvent(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomUpdateEvent(Async)");
        }

        // verify the required parameter 'waitingroomQueryEvent' is set
        if (waitingroomQueryEvent == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryEvent' when calling waitingRoomUpdateEvent(Async)");
        }

        return waitingRoomUpdateEventCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, _callback);

    }

    /**
     * Update event
     * Updates a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return WaitingroomEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update event response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomEventResponse waitingRoomUpdateEvent(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        ApiResponse<WaitingroomEventResponse> localVarResp = waitingRoomUpdateEventWithHttpInfo(eventId, waitingRoomId, zoneId, waitingroomQueryEvent);
        return localVarResp.getData();
    }

    /**
     * Update event
     * Updates a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @return ApiResponse&lt;WaitingroomEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update event response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomEventResponse> waitingRoomUpdateEventWithHttpInfo(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomUpdateEventValidateBeforeCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, null);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update event (asynchronously)
     * Updates a configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update event response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update event response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateEventAsync(String eventId, String waitingRoomId, String zoneId, WaitingroomQueryEvent waitingroomQueryEvent, final ApiCallback<WaitingroomEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomUpdateEventValidateBeforeCall(eventId, waitingRoomId, zoneId, waitingroomQueryEvent, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomUpdateWaitingRoom
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateWaitingRoomCall(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomQueryWaitingroom;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomUpdateWaitingRoomValidateBeforeCall(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomUpdateWaitingRoom(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomUpdateWaitingRoom(Async)");
        }

        // verify the required parameter 'waitingroomQueryWaitingroom' is set
        if (waitingroomQueryWaitingroom == null) {
            throw new ApiException("Missing the required parameter 'waitingroomQueryWaitingroom' when calling waitingRoomUpdateWaitingRoom(Async)");
        }

        return waitingRoomUpdateWaitingRoomCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, _callback);

    }

    /**
     * Update waiting room
     * Updates a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return WaitingroomSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomSingleResponse waitingRoomUpdateWaitingRoom(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        ApiResponse<WaitingroomSingleResponse> localVarResp = waitingRoomUpdateWaitingRoomWithHttpInfo(waitingRoomId, zoneId, waitingroomQueryWaitingroom);
        return localVarResp.getData();
    }

    /**
     * Update waiting room
     * Updates a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @return ApiResponse&lt;WaitingroomSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomSingleResponse> waitingRoomUpdateWaitingRoomWithHttpInfo(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomUpdateWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, null);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update waiting room (asynchronously)
     * Updates a configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param waitingroomQueryWaitingroom  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update waiting room response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update waiting room response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateWaitingRoomAsync(String waitingRoomId, String zoneId, WaitingroomQueryWaitingroom waitingroomQueryWaitingroom, final ApiCallback<WaitingroomSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomUpdateWaitingRoomValidateBeforeCall(waitingRoomId, zoneId, waitingroomQueryWaitingroom, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomUpdateZoneSettings
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateZoneSettingsCall(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = waitingroomZoneSettings;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomUpdateZoneSettingsValidateBeforeCall(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomUpdateZoneSettings(Async)");
        }

        // verify the required parameter 'waitingroomZoneSettings' is set
        if (waitingroomZoneSettings == null) {
            throw new ApiException("Missing the required parameter 'waitingroomZoneSettings' when calling waitingRoomUpdateZoneSettings(Async)");
        }

        return waitingRoomUpdateZoneSettingsCall(zoneId, waitingroomZoneSettings, _callback);

    }

    /**
     * Update zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @return WaitingroomZoneSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomZoneSettingsResponse waitingRoomUpdateZoneSettings(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings) throws ApiException {
        ApiResponse<WaitingroomZoneSettingsResponse> localVarResp = waitingRoomUpdateZoneSettingsWithHttpInfo(zoneId, waitingroomZoneSettings);
        return localVarResp.getData();
    }

    /**
     * Update zone-level Waiting Room settings
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @return ApiResponse&lt;WaitingroomZoneSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomZoneSettingsResponse> waitingRoomUpdateZoneSettingsWithHttpInfo(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomUpdateZoneSettingsValidateBeforeCall(zoneId, waitingroomZoneSettings, null);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update zone-level Waiting Room settings (asynchronously)
     * 
     * @param zoneId  (required)
     * @param waitingroomZoneSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated zone-level Waiting Room settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> The zone-level Waiting Room settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomUpdateZoneSettingsAsync(String zoneId, WaitingroomZoneSettings waitingroomZoneSettings, final ApiCallback<WaitingroomZoneSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomUpdateZoneSettingsValidateBeforeCall(zoneId, waitingroomZoneSettings, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomZoneSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitingRoomWaitingRoomDetails
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Waiting room details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Waiting room details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomWaitingRoomDetailsCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/waiting_rooms/{waiting_room_id}"
            .replace("{" + "waiting_room_id" + "}", localVarApiClient.escapeString(waitingRoomId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitingRoomWaitingRoomDetailsValidateBeforeCall(String waitingRoomId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomWaitingRoomDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling waitingRoomWaitingRoomDetails(Async)");
        }

        return waitingRoomWaitingRoomDetailsCall(waitingRoomId, zoneId, _callback);

    }

    /**
     * Waiting room details
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return WaitingroomSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Waiting room details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Waiting room details response failure </td><td>  -  </td></tr>
     </table>
     */
    public WaitingroomSingleResponse waitingRoomWaitingRoomDetails(String waitingRoomId, String zoneId) throws ApiException {
        ApiResponse<WaitingroomSingleResponse> localVarResp = waitingRoomWaitingRoomDetailsWithHttpInfo(waitingRoomId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Waiting room details
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WaitingroomSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Waiting room details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Waiting room details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitingroomSingleResponse> waitingRoomWaitingRoomDetailsWithHttpInfo(String waitingRoomId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = waitingRoomWaitingRoomDetailsValidateBeforeCall(waitingRoomId, zoneId, null);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Waiting room details (asynchronously)
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Waiting room details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Waiting room details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitingRoomWaitingRoomDetailsAsync(String waitingRoomId, String zoneId, final ApiCallback<WaitingroomSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitingRoomWaitingRoomDetailsValidateBeforeCall(waitingRoomId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WaitingroomSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
