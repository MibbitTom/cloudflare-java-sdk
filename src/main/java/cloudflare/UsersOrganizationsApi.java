/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.IamCollectionOrganizationResponse;
import org.openapitools.client.model.IamSingleOrganizationResponse;
import org.openapitools.client.model.UserSOrganizationsLeaveOrganization200Response;
import org.openapitools.client.model.UserSOrganizationsLeaveOrganization4XXResponse;
import org.openapitools.client.model.UserSOrganizationsListOrganizations4XXResponse;
import org.openapitools.client.model.UserSOrganizationsOrganizationDetails4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersOrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersOrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersOrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userSOrganizationsLeaveOrganization
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leave Organization response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Leave Organization response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsLeaveOrganizationCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/organizations/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSOrganizationsLeaveOrganizationValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling userSOrganizationsLeaveOrganization(Async)");
        }

        return userSOrganizationsLeaveOrganizationCall(organizationId, _callback);

    }

    /**
     * Leave Organization
     * Removes association to an organization.
     * @param organizationId  (required)
     * @return UserSOrganizationsLeaveOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leave Organization response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Leave Organization response failure </td><td>  -  </td></tr>
     </table>
     */
    public UserSOrganizationsLeaveOrganization200Response userSOrganizationsLeaveOrganization(String organizationId) throws ApiException {
        ApiResponse<UserSOrganizationsLeaveOrganization200Response> localVarResp = userSOrganizationsLeaveOrganizationWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Leave Organization
     * Removes association to an organization.
     * @param organizationId  (required)
     * @return ApiResponse&lt;UserSOrganizationsLeaveOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leave Organization response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Leave Organization response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSOrganizationsLeaveOrganization200Response> userSOrganizationsLeaveOrganizationWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = userSOrganizationsLeaveOrganizationValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<UserSOrganizationsLeaveOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Leave Organization (asynchronously)
     * Removes association to an organization.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leave Organization response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Leave Organization response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsLeaveOrganizationAsync(String organizationId, final ApiCallback<UserSOrganizationsLeaveOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSOrganizationsLeaveOrganizationValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<UserSOrganizationsLeaveOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSOrganizationsListOrganizations
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Organizations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Organizations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsListOrganizationsCall(String name, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSOrganizationsListOrganizationsValidateBeforeCall(String name, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String status, final ApiCallback _callback) throws ApiException {
        return userSOrganizationsListOrganizationsCall(name, page, perPage, order, direction, match, status, _callback);

    }

    /**
     * List Organizations
     * Lists organizations the user is associated with.
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @return IamCollectionOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Organizations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Organizations response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamCollectionOrganizationResponse userSOrganizationsListOrganizations(String name, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String status) throws ApiException {
        ApiResponse<IamCollectionOrganizationResponse> localVarResp = userSOrganizationsListOrganizationsWithHttpInfo(name, page, perPage, order, direction, match, status);
        return localVarResp.getData();
    }

    /**
     * List Organizations
     * Lists organizations the user is associated with.
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @return ApiResponse&lt;IamCollectionOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Organizations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Organizations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamCollectionOrganizationResponse> userSOrganizationsListOrganizationsWithHttpInfo(String name, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String status) throws ApiException {
        okhttp3.Call localVarCall = userSOrganizationsListOrganizationsValidateBeforeCall(name, page, perPage, order, direction, match, status, null);
        Type localVarReturnType = new TypeToken<IamCollectionOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Organizations (asynchronously)
     * Lists organizations the user is associated with.
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Organizations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Organizations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsListOrganizationsAsync(String name, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String status, final ApiCallback<IamCollectionOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSOrganizationsListOrganizationsValidateBeforeCall(name, page, perPage, order, direction, match, status, _callback);
        Type localVarReturnType = new TypeToken<IamCollectionOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSOrganizationsOrganizationDetails
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Organization Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsOrganizationDetailsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/organizations/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSOrganizationsOrganizationDetailsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling userSOrganizationsOrganizationDetails(Async)");
        }

        return userSOrganizationsOrganizationDetailsCall(organizationId, _callback);

    }

    /**
     * Organization Details
     * Gets a specific organization the user is associated with.
     * @param organizationId  (required)
     * @return IamSingleOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Organization Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamSingleOrganizationResponse userSOrganizationsOrganizationDetails(String organizationId) throws ApiException {
        ApiResponse<IamSingleOrganizationResponse> localVarResp = userSOrganizationsOrganizationDetailsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Organization Details
     * Gets a specific organization the user is associated with.
     * @param organizationId  (required)
     * @return ApiResponse&lt;IamSingleOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Organization Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamSingleOrganizationResponse> userSOrganizationsOrganizationDetailsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = userSOrganizationsOrganizationDetailsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<IamSingleOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Organization Details (asynchronously)
     * Gets a specific organization the user is associated with.
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Organization Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSOrganizationsOrganizationDetailsAsync(String organizationId, final ApiCallback<IamSingleOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSOrganizationsOrganizationDetailsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<IamSingleOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
