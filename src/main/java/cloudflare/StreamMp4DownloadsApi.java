/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamDeletedResponse;
import org.openapitools.client.model.StreamDownloadsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamMp4DownloadsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamMp4DownloadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamMp4DownloadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamMP4DownloadsCreateDownloads
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsCreateDownloadsCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/downloads"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamMP4DownloadsCreateDownloadsValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamMP4DownloadsCreateDownloads(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamMP4DownloadsCreateDownloads(Async)");
        }

        return streamMP4DownloadsCreateDownloadsCall(identifier, accountId, _callback);

    }

    /**
     * Create downloads
     * Creates a download for a video when a video is ready to view.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamDownloadsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDownloadsResponse streamMP4DownloadsCreateDownloads(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamDownloadsResponse> localVarResp = streamMP4DownloadsCreateDownloadsWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Create downloads
     * Creates a download for a video when a video is ready to view.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamDownloadsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDownloadsResponse> streamMP4DownloadsCreateDownloadsWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamMP4DownloadsCreateDownloadsValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamDownloadsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create downloads (asynchronously)
     * Creates a download for a video when a video is ready to view.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsCreateDownloadsAsync(String identifier, String accountId, final ApiCallback<StreamDownloadsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamMP4DownloadsCreateDownloadsValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamDownloadsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamMP4DownloadsDeleteDownloads
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsDeleteDownloadsCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/downloads"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamMP4DownloadsDeleteDownloadsValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamMP4DownloadsDeleteDownloads(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamMP4DownloadsDeleteDownloads(Async)");
        }

        return streamMP4DownloadsDeleteDownloadsCall(identifier, accountId, _callback);

    }

    /**
     * Delete downloads
     * Delete the downloads for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDeletedResponse streamMP4DownloadsDeleteDownloads(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamDeletedResponse> localVarResp = streamMP4DownloadsDeleteDownloadsWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete downloads
     * Delete the downloads for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDeletedResponse> streamMP4DownloadsDeleteDownloadsWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamMP4DownloadsDeleteDownloadsValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete downloads (asynchronously)
     * Delete the downloads for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsDeleteDownloadsAsync(String identifier, String accountId, final ApiCallback<StreamDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamMP4DownloadsDeleteDownloadsValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamMP4DownloadsListDownloads
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsListDownloadsCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/{identifier}/downloads"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamMP4DownloadsListDownloadsValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamMP4DownloadsListDownloads(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamMP4DownloadsListDownloads(Async)");
        }

        return streamMP4DownloadsListDownloadsCall(identifier, accountId, _callback);

    }

    /**
     * List downloads
     * Lists the downloads created for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamDownloadsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDownloadsResponse streamMP4DownloadsListDownloads(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamDownloadsResponse> localVarResp = streamMP4DownloadsListDownloadsWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * List downloads
     * Lists the downloads created for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamDownloadsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDownloadsResponse> streamMP4DownloadsListDownloadsWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamMP4DownloadsListDownloadsValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamDownloadsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List downloads (asynchronously)
     * Lists the downloads created for a video.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List downloads response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List downloads response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamMP4DownloadsListDownloadsAsync(String identifier, String accountId, final ApiCallback<StreamDownloadsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamMP4DownloadsListDownloadsValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamDownloadsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
