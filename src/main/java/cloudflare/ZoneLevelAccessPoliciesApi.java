/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.AccessPoliciesComponentsSchemasResponseCollection2;
import org.openapitools.client.model.AccessPoliciesComponentsSchemasSingleResponse2;
import org.openapitools.client.model.ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAccessPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAccessPoliciesCreateAnAccessPolicy
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesCreateAnAccessPolicyCall(String uuid, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{uuid}/policies"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessPoliciesCreateAnAccessPolicyValidateBeforeCall(String uuid, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessPoliciesCreateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessPoliciesCreateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest' is set
        if (zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest' when calling zoneLevelAccessPoliciesCreateAnAccessPolicy(Async)");
        }

        return zoneLevelAccessPoliciesCreateAnAccessPolicyCall(uuid, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, _callback);

    }

    /**
     * Create an Access policy
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse2 zoneLevelAccessPoliciesCreateAnAccessPolicy(String uuid, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessPoliciesCreateAnAccessPolicyWithHttpInfo(uuid, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Access policy
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> zoneLevelAccessPoliciesCreateAnAccessPolicyWithHttpInfo(String uuid, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessPoliciesCreateAnAccessPolicyValidateBeforeCall(uuid, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Access policy (asynchronously)
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesCreateAnAccessPolicyAsync(String uuid, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessPoliciesCreateAnAccessPolicyValidateBeforeCall(uuid, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessPoliciesDeleteAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesDeleteAnAccessPolicyCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessPoliciesDeleteAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessPoliciesDeleteAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling zoneLevelAccessPoliciesDeleteAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessPoliciesDeleteAnAccessPolicy(Async)");
        }

        return zoneLevelAccessPoliciesDeleteAnAccessPolicyCall(uuid, uuid1, identifier, _callback);

    }

    /**
     * Delete an Access policy
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse zoneLevelAccessPoliciesDeleteAnAccessPolicy(String uuid, String uuid1, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = zoneLevelAccessPoliciesDeleteAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access policy
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> zoneLevelAccessPoliciesDeleteAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessPoliciesDeleteAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access policy (asynchronously)
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesDeleteAnAccessPolicyAsync(String uuid, String uuid1, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessPoliciesDeleteAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessPoliciesGetAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesGetAnAccessPolicyCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessPoliciesGetAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessPoliciesGetAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling zoneLevelAccessPoliciesGetAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessPoliciesGetAnAccessPolicy(Async)");
        }

        return zoneLevelAccessPoliciesGetAnAccessPolicyCall(uuid, uuid1, identifier, _callback);

    }

    /**
     * Get an Access policy
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse2 zoneLevelAccessPoliciesGetAnAccessPolicy(String uuid, String uuid1, String identifier) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessPoliciesGetAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access policy
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> zoneLevelAccessPoliciesGetAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessPoliciesGetAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access policy (asynchronously)
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesGetAnAccessPolicyAsync(String uuid, String uuid1, String identifier, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessPoliciesGetAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessPoliciesListAccessPolicies
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesListAccessPoliciesCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{uuid}/policies"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessPoliciesListAccessPoliciesValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessPoliciesListAccessPolicies(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessPoliciesListAccessPolicies(Async)");
        }

        return zoneLevelAccessPoliciesListAccessPoliciesCall(uuid, identifier, _callback);

    }

    /**
     * List Access policies
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessPoliciesComponentsSchemasResponseCollection2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasResponseCollection2 zoneLevelAccessPoliciesListAccessPolicies(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasResponseCollection2> localVarResp = zoneLevelAccessPoliciesListAccessPoliciesWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * List Access policies
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasResponseCollection2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasResponseCollection2> zoneLevelAccessPoliciesListAccessPoliciesWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessPoliciesListAccessPoliciesValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasResponseCollection2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access policies (asynchronously)
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesListAccessPoliciesAsync(String uuid, String identifier, final ApiCallback<AccessPoliciesComponentsSchemasResponseCollection2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessPoliciesListAccessPoliciesValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasResponseCollection2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessPoliciesUpdateAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesUpdateAnAccessPolicyCall(String uuid, String uuid1, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessPoliciesUpdateAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling zoneLevelAccessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest' is set
        if (zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest' when calling zoneLevelAccessPoliciesUpdateAnAccessPolicy(Async)");
        }

        return zoneLevelAccessPoliciesUpdateAnAccessPolicyCall(uuid, uuid1, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, _callback);

    }

    /**
     * Update an Access policy
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse2 zoneLevelAccessPoliciesUpdateAnAccessPolicy(String uuid, String uuid1, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessPoliciesUpdateAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Access policy
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse2> zoneLevelAccessPoliciesUpdateAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessPoliciesUpdateAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access policy (asynchronously)
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessPoliciesUpdateAnAccessPolicyAsync(String uuid, String uuid1, String identifier, ZoneLevelAccessPoliciesUpdateAnAccessPolicyRequest zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessPoliciesUpdateAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, zoneLevelAccessPoliciesUpdateAnAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
