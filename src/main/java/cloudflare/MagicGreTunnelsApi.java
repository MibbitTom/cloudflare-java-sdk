/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicGreTunnelsDeleteGreTunnel4XXResponse;
import org.openapitools.client.model.MagicGreTunnelsListGreTunnelDetails4XXResponse;
import org.openapitools.client.model.MagicGreTunnelsListGreTunnels4XXResponse;
import org.openapitools.client.model.MagicGreTunnelsUpdateGreTunnel4XXResponse;
import org.openapitools.client.model.MagicGreTunnelsUpdateMultipleGreTunnels4XXResponse;
import org.openapitools.client.model.MagicModifiedTunnelsCollectionResponse;
import org.openapitools.client.model.MagicTunnelDeletedResponse;
import org.openapitools.client.model.MagicTunnelModifiedResponse;
import org.openapitools.client.model.MagicTunnelSingleResponse;
import org.openapitools.client.model.MagicTunnelUpdateRequest;
import org.openapitools.client.model.MagicTunnelsCollectionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicGreTunnelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicGreTunnelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicGreTunnelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicGreTunnelsCreateGreTunnels
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsCreateGreTunnelsCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsCreateGreTunnelsValidateBeforeCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsCreateGreTunnels(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicGreTunnelsCreateGreTunnels(Async)");
        }

        return magicGreTunnelsCreateGreTunnelsCall(accountId, body, _callback);

    }

    /**
     * Create GRE tunnels
     * Creates new GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return MagicTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicTunnelsCollectionResponse magicGreTunnelsCreateGreTunnels(String accountId, Object body) throws ApiException {
        ApiResponse<MagicTunnelsCollectionResponse> localVarResp = magicGreTunnelsCreateGreTunnelsWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create GRE tunnels
     * Creates new GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;MagicTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicTunnelsCollectionResponse> magicGreTunnelsCreateGreTunnelsWithHttpInfo(String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsCreateGreTunnelsValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<MagicTunnelsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GRE tunnels (asynchronously)
     * Creates new GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsCreateGreTunnelsAsync(String accountId, Object body, final ApiCallback<MagicTunnelsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsCreateGreTunnelsValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<MagicTunnelsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicGreTunnelsDeleteGreTunnel
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsDeleteGreTunnelCall(String tunnelIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels/{tunnel_identifier}"
            .replace("{" + "tunnel_identifier" + "}", localVarApiClient.escapeString(tunnelIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsDeleteGreTunnelValidateBeforeCall(String tunnelIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicGreTunnelsDeleteGreTunnel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsDeleteGreTunnel(Async)");
        }

        return magicGreTunnelsDeleteGreTunnelCall(tunnelIdentifier, accountId, _callback);

    }

    /**
     * Delete GRE Tunnel
     * Disables and removes a specific static GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @return MagicTunnelDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicTunnelDeletedResponse magicGreTunnelsDeleteGreTunnel(String tunnelIdentifier, String accountId) throws ApiException {
        ApiResponse<MagicTunnelDeletedResponse> localVarResp = magicGreTunnelsDeleteGreTunnelWithHttpInfo(tunnelIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete GRE Tunnel
     * Disables and removes a specific static GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicTunnelDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicTunnelDeletedResponse> magicGreTunnelsDeleteGreTunnelWithHttpInfo(String tunnelIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsDeleteGreTunnelValidateBeforeCall(tunnelIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<MagicTunnelDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete GRE Tunnel (asynchronously)
     * Disables and removes a specific static GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsDeleteGreTunnelAsync(String tunnelIdentifier, String accountId, final ApiCallback<MagicTunnelDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsDeleteGreTunnelValidateBeforeCall(tunnelIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicTunnelDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicGreTunnelsListGreTunnelDetails
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE Tunnel Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE Tunnel Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsListGreTunnelDetailsCall(String tunnelIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels/{tunnel_identifier}"
            .replace("{" + "tunnel_identifier" + "}", localVarApiClient.escapeString(tunnelIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsListGreTunnelDetailsValidateBeforeCall(String tunnelIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicGreTunnelsListGreTunnelDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsListGreTunnelDetails(Async)");
        }

        return magicGreTunnelsListGreTunnelDetailsCall(tunnelIdentifier, accountId, _callback);

    }

    /**
     * List GRE Tunnel Details
     * Lists informtion for a specific GRE tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @return MagicTunnelSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE Tunnel Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE Tunnel Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicTunnelSingleResponse magicGreTunnelsListGreTunnelDetails(String tunnelIdentifier, String accountId) throws ApiException {
        ApiResponse<MagicTunnelSingleResponse> localVarResp = magicGreTunnelsListGreTunnelDetailsWithHttpInfo(tunnelIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * List GRE Tunnel Details
     * Lists informtion for a specific GRE tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicTunnelSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE Tunnel Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE Tunnel Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicTunnelSingleResponse> magicGreTunnelsListGreTunnelDetailsWithHttpInfo(String tunnelIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsListGreTunnelDetailsValidateBeforeCall(tunnelIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<MagicTunnelSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GRE Tunnel Details (asynchronously)
     * Lists informtion for a specific GRE tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE Tunnel Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE Tunnel Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsListGreTunnelDetailsAsync(String tunnelIdentifier, String accountId, final ApiCallback<MagicTunnelSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsListGreTunnelDetailsValidateBeforeCall(tunnelIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicTunnelSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicGreTunnelsListGreTunnels
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsListGreTunnelsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsListGreTunnelsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsListGreTunnels(Async)");
        }

        return magicGreTunnelsListGreTunnelsCall(accountId, _callback);

    }

    /**
     * List GRE tunnels
     * Lists GRE tunnels associated with an account.
     * @param accountId  (required)
     * @return MagicTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicTunnelsCollectionResponse magicGreTunnelsListGreTunnels(String accountId) throws ApiException {
        ApiResponse<MagicTunnelsCollectionResponse> localVarResp = magicGreTunnelsListGreTunnelsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List GRE tunnels
     * Lists GRE tunnels associated with an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicTunnelsCollectionResponse> magicGreTunnelsListGreTunnelsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsListGreTunnelsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicTunnelsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GRE tunnels (asynchronously)
     * Lists GRE tunnels associated with an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsListGreTunnelsAsync(String accountId, final ApiCallback<MagicTunnelsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsListGreTunnelsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicTunnelsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicGreTunnelsUpdateGreTunnel
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param magicTunnelUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsUpdateGreTunnelCall(String tunnelIdentifier, String accountId, MagicTunnelUpdateRequest magicTunnelUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicTunnelUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels/{tunnel_identifier}"
            .replace("{" + "tunnel_identifier" + "}", localVarApiClient.escapeString(tunnelIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsUpdateGreTunnelValidateBeforeCall(String tunnelIdentifier, String accountId, MagicTunnelUpdateRequest magicTunnelUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicGreTunnelsUpdateGreTunnel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsUpdateGreTunnel(Async)");
        }

        // verify the required parameter 'magicTunnelUpdateRequest' is set
        if (magicTunnelUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicTunnelUpdateRequest' when calling magicGreTunnelsUpdateGreTunnel(Async)");
        }

        return magicGreTunnelsUpdateGreTunnelCall(tunnelIdentifier, accountId, magicTunnelUpdateRequest, _callback);

    }

    /**
     * Update GRE Tunnel
     * Updates a specific GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param magicTunnelUpdateRequest  (required)
     * @return MagicTunnelModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicTunnelModifiedResponse magicGreTunnelsUpdateGreTunnel(String tunnelIdentifier, String accountId, MagicTunnelUpdateRequest magicTunnelUpdateRequest) throws ApiException {
        ApiResponse<MagicTunnelModifiedResponse> localVarResp = magicGreTunnelsUpdateGreTunnelWithHttpInfo(tunnelIdentifier, accountId, magicTunnelUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update GRE Tunnel
     * Updates a specific GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param magicTunnelUpdateRequest  (required)
     * @return ApiResponse&lt;MagicTunnelModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicTunnelModifiedResponse> magicGreTunnelsUpdateGreTunnelWithHttpInfo(String tunnelIdentifier, String accountId, MagicTunnelUpdateRequest magicTunnelUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsUpdateGreTunnelValidateBeforeCall(tunnelIdentifier, accountId, magicTunnelUpdateRequest, null);
        Type localVarReturnType = new TypeToken<MagicTunnelModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update GRE Tunnel (asynchronously)
     * Updates a specific GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountId  (required)
     * @param magicTunnelUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update GRE Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update GRE Tunnel response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsUpdateGreTunnelAsync(String tunnelIdentifier, String accountId, MagicTunnelUpdateRequest magicTunnelUpdateRequest, final ApiCallback<MagicTunnelModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsUpdateGreTunnelValidateBeforeCall(tunnelIdentifier, accountId, magicTunnelUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicTunnelModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicGreTunnelsUpdateMultipleGreTunnels
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsUpdateMultipleGreTunnelsCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/gre_tunnels"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicGreTunnelsUpdateMultipleGreTunnelsValidateBeforeCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicGreTunnelsUpdateMultipleGreTunnels(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicGreTunnelsUpdateMultipleGreTunnels(Async)");
        }

        return magicGreTunnelsUpdateMultipleGreTunnelsCall(accountId, body, _callback);

    }

    /**
     * Update multiple GRE tunnels
     * Updates multiple GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return MagicModifiedTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicModifiedTunnelsCollectionResponse magicGreTunnelsUpdateMultipleGreTunnels(String accountId, Object body) throws ApiException {
        ApiResponse<MagicModifiedTunnelsCollectionResponse> localVarResp = magicGreTunnelsUpdateMultipleGreTunnelsWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Update multiple GRE tunnels
     * Updates multiple GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;MagicModifiedTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicModifiedTunnelsCollectionResponse> magicGreTunnelsUpdateMultipleGreTunnelsWithHttpInfo(String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = magicGreTunnelsUpdateMultipleGreTunnelsValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<MagicModifiedTunnelsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update multiple GRE tunnels (asynchronously)
     * Updates multiple GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple GRE tunnels response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple GRE tunnels response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicGreTunnelsUpdateMultipleGreTunnelsAsync(String accountId, Object body, final ApiCallback<MagicModifiedTunnelsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicGreTunnelsUpdateMultipleGreTunnelsValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<MagicModifiedTunnelsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
