/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessActiveSessionResponse;
import org.openapitools.client.model.AccessActiveSessionsResponse;
import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessFailedLoginResponse;
import org.openapitools.client.model.AccessLastSeenIdentityResponse;
import org.openapitools.client.model.AccessUsersComponentsSchemasResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZeroTrustUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZeroTrustUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZeroTrustUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zeroTrustUsersGetActiveSession
     * @param id  (required)
     * @param identifier  (required)
     * @param nonce  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetActiveSessionCall(String id, String identifier, String nonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/users/{id}/active_sessions/{nonce}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "nonce" + "}", localVarApiClient.escapeString(nonce.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustUsersGetActiveSessionValidateBeforeCall(String id, String identifier, String nonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zeroTrustUsersGetActiveSession(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustUsersGetActiveSession(Async)");
        }

        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling zeroTrustUsersGetActiveSession(Async)");
        }

        return zeroTrustUsersGetActiveSessionCall(id, identifier, nonce, _callback);

    }

    /**
     * Get single active session
     * Get an active session for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param nonce  (required)
     * @return AccessActiveSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessActiveSessionResponse zeroTrustUsersGetActiveSession(String id, String identifier, String nonce) throws ApiException {
        ApiResponse<AccessActiveSessionResponse> localVarResp = zeroTrustUsersGetActiveSessionWithHttpInfo(id, identifier, nonce);
        return localVarResp.getData();
    }

    /**
     * Get single active session
     * Get an active session for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param nonce  (required)
     * @return ApiResponse&lt;AccessActiveSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessActiveSessionResponse> zeroTrustUsersGetActiveSessionWithHttpInfo(String id, String identifier, String nonce) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustUsersGetActiveSessionValidateBeforeCall(id, identifier, nonce, null);
        Type localVarReturnType = new TypeToken<AccessActiveSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get single active session (asynchronously)
     * Get an active session for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param nonce  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetActiveSessionAsync(String id, String identifier, String nonce, final ApiCallback<AccessActiveSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustUsersGetActiveSessionValidateBeforeCall(id, identifier, nonce, _callback);
        Type localVarReturnType = new TypeToken<AccessActiveSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zeroTrustUsersGetActiveSessions
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active sessions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active sessions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetActiveSessionsCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/users/{id}/active_sessions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustUsersGetActiveSessionsValidateBeforeCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zeroTrustUsersGetActiveSessions(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustUsersGetActiveSessions(Async)");
        }

        return zeroTrustUsersGetActiveSessionsCall(id, identifier, _callback);

    }

    /**
     * Get active sessions
     * Get active sessions for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return AccessActiveSessionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active sessions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active sessions response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessActiveSessionsResponse zeroTrustUsersGetActiveSessions(String id, String identifier) throws ApiException {
        ApiResponse<AccessActiveSessionsResponse> localVarResp = zeroTrustUsersGetActiveSessionsWithHttpInfo(id, identifier);
        return localVarResp.getData();
    }

    /**
     * Get active sessions
     * Get active sessions for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessActiveSessionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active sessions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active sessions response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessActiveSessionsResponse> zeroTrustUsersGetActiveSessionsWithHttpInfo(String id, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustUsersGetActiveSessionsValidateBeforeCall(id, identifier, null);
        Type localVarReturnType = new TypeToken<AccessActiveSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active sessions (asynchronously)
     * Get active sessions for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active sessions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active sessions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetActiveSessionsAsync(String id, String identifier, final ApiCallback<AccessActiveSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustUsersGetActiveSessionsValidateBeforeCall(id, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessActiveSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zeroTrustUsersGetFailedLogins
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get failed logins response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get failed logins response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetFailedLoginsCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/users/{id}/failed_logins"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustUsersGetFailedLoginsValidateBeforeCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zeroTrustUsersGetFailedLogins(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustUsersGetFailedLogins(Async)");
        }

        return zeroTrustUsersGetFailedLoginsCall(id, identifier, _callback);

    }

    /**
     * Get failed logins
     * Get all failed login attempts for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return AccessFailedLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get failed logins response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get failed logins response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessFailedLoginResponse zeroTrustUsersGetFailedLogins(String id, String identifier) throws ApiException {
        ApiResponse<AccessFailedLoginResponse> localVarResp = zeroTrustUsersGetFailedLoginsWithHttpInfo(id, identifier);
        return localVarResp.getData();
    }

    /**
     * Get failed logins
     * Get all failed login attempts for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessFailedLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get failed logins response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get failed logins response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessFailedLoginResponse> zeroTrustUsersGetFailedLoginsWithHttpInfo(String id, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustUsersGetFailedLoginsValidateBeforeCall(id, identifier, null);
        Type localVarReturnType = new TypeToken<AccessFailedLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get failed logins (asynchronously)
     * Get all failed login attempts for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get failed logins response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get failed logins response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetFailedLoginsAsync(String id, String identifier, final ApiCallback<AccessFailedLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustUsersGetFailedLoginsValidateBeforeCall(id, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessFailedLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zeroTrustUsersGetLastSeenIdentity
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetLastSeenIdentityCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/users/{id}/last_seen_identity"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustUsersGetLastSeenIdentityValidateBeforeCall(String id, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zeroTrustUsersGetLastSeenIdentity(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustUsersGetLastSeenIdentity(Async)");
        }

        return zeroTrustUsersGetLastSeenIdentityCall(id, identifier, _callback);

    }

    /**
     * Get last seen identity
     * Get last seen identity for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return AccessLastSeenIdentityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessLastSeenIdentityResponse zeroTrustUsersGetLastSeenIdentity(String id, String identifier) throws ApiException {
        ApiResponse<AccessLastSeenIdentityResponse> localVarResp = zeroTrustUsersGetLastSeenIdentityWithHttpInfo(id, identifier);
        return localVarResp.getData();
    }

    /**
     * Get last seen identity
     * Get last seen identity for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessLastSeenIdentityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessLastSeenIdentityResponse> zeroTrustUsersGetLastSeenIdentityWithHttpInfo(String id, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustUsersGetLastSeenIdentityValidateBeforeCall(id, identifier, null);
        Type localVarReturnType = new TypeToken<AccessLastSeenIdentityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get last seen identity (asynchronously)
     * Get last seen identity for a single user.
     * @param id  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get active session response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get active session response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetLastSeenIdentityAsync(String id, String identifier, final ApiCallback<AccessLastSeenIdentityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustUsersGetLastSeenIdentityValidateBeforeCall(id, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessLastSeenIdentityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zeroTrustUsersGetUsers
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get users response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetUsersCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/users"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustUsersGetUsersValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustUsersGetUsers(Async)");
        }

        return zeroTrustUsersGetUsersCall(identifier, _callback);

    }

    /**
     * Get users
     * Gets a list of users for an account.
     * @param identifier  (required)
     * @return AccessUsersComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get users response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessUsersComponentsSchemasResponseCollection zeroTrustUsersGetUsers(String identifier) throws ApiException {
        ApiResponse<AccessUsersComponentsSchemasResponseCollection> localVarResp = zeroTrustUsersGetUsersWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Get users
     * Gets a list of users for an account.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessUsersComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get users response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessUsersComponentsSchemasResponseCollection> zeroTrustUsersGetUsersWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustUsersGetUsersValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessUsersComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users (asynchronously)
     * Gets a list of users for an account.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get users response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustUsersGetUsersAsync(String identifier, final ApiCallback<AccessUsersComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustUsersGetUsersValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessUsersComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
