/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkerTailLogsDeleteTail4XXResponse;
import org.openapitools.client.model.WorkerTailLogsListTails4XXResponse;
import org.openapitools.client.model.WorkersApiResponseCommon;
import org.openapitools.client.model.WorkersTailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerTailLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerTailLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerTailLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerTailLogsDeleteTail
     * @param id  (required)
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsDeleteTailCall(String id, String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/tails/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerTailLogsDeleteTailValidateBeforeCall(String id, String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workerTailLogsDeleteTail(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerTailLogsDeleteTail(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerTailLogsDeleteTail(Async)");
        }

        return workerTailLogsDeleteTailCall(id, scriptName, accountId, _callback);

    }

    /**
     * Delete Tail
     * Deletes a tail from a Worker.
     * @param id  (required)
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return WorkersApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersApiResponseCommon workerTailLogsDeleteTail(String id, String scriptName, String accountId) throws ApiException {
        ApiResponse<WorkersApiResponseCommon> localVarResp = workerTailLogsDeleteTailWithHttpInfo(id, scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Tail
     * Deletes a tail from a Worker.
     * @param id  (required)
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersApiResponseCommon> workerTailLogsDeleteTailWithHttpInfo(String id, String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerTailLogsDeleteTailValidateBeforeCall(id, scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Tail (asynchronously)
     * Deletes a tail from a Worker.
     * @param id  (required)
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsDeleteTailAsync(String id, String scriptName, String accountId, final ApiCallback<WorkersApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerTailLogsDeleteTailValidateBeforeCall(id, scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerTailLogsListTails
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tails response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tails response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsListTailsCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/tails"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerTailLogsListTailsValidateBeforeCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerTailLogsListTails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerTailLogsListTails(Async)");
        }

        return workerTailLogsListTailsCall(scriptName, accountId, _callback);

    }

    /**
     * List Tails
     * Get list of tails currently deployed on a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return WorkersTailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tails response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tails response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersTailResponse workerTailLogsListTails(String scriptName, String accountId) throws ApiException {
        ApiResponse<WorkersTailResponse> localVarResp = workerTailLogsListTailsWithHttpInfo(scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * List Tails
     * Get list of tails currently deployed on a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersTailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tails response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tails response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersTailResponse> workerTailLogsListTailsWithHttpInfo(String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerTailLogsListTailsValidateBeforeCall(scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersTailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tails (asynchronously)
     * Get list of tails currently deployed on a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tails response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tails response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsListTailsAsync(String scriptName, String accountId, final ApiCallback<WorkersTailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerTailLogsListTailsValidateBeforeCall(scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersTailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerTailLogsStartTail
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsStartTailCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/tails"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerTailLogsStartTailValidateBeforeCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerTailLogsStartTail(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerTailLogsStartTail(Async)");
        }

        return workerTailLogsStartTailCall(scriptName, accountId, _callback);

    }

    /**
     * Start Tail
     * Starts a tail that receives logs and exception from a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return WorkersTailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersTailResponse workerTailLogsStartTail(String scriptName, String accountId) throws ApiException {
        ApiResponse<WorkersTailResponse> localVarResp = workerTailLogsStartTailWithHttpInfo(scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * Start Tail
     * Starts a tail that receives logs and exception from a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersTailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersTailResponse> workerTailLogsStartTailWithHttpInfo(String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerTailLogsStartTailValidateBeforeCall(scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersTailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Tail (asynchronously)
     * Starts a tail that receives logs and exception from a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Tail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Tail response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerTailLogsStartTailAsync(String scriptName, String accountId, final ApiCallback<WorkersTailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerTailLogsStartTailValidateBeforeCall(scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersTailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
