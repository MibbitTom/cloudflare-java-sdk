/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DevicesCreateDeviceSettingsPolicy4XXResponse;
import org.openapitools.client.model.DevicesCreateDeviceSettingsPolicyRequest;
import org.openapitools.client.model.DevicesDeviceDetails4XXResponse;
import org.openapitools.client.model.DevicesGetDefaultDeviceSettingsPolicy4XXResponse;
import org.openapitools.client.model.DevicesGetLocalDomainFallbackList4XXResponse;
import org.openapitools.client.model.DevicesGetSplitTunnelExcludeList4XXResponse;
import org.openapitools.client.model.DevicesGetSplitTunnelIncludeList4XXResponse;
import org.openapitools.client.model.DevicesListAdminOverrideCodeForDevice4XXResponse;
import org.openapitools.client.model.DevicesListDeviceSettingsPolicies4XXResponse;
import org.openapitools.client.model.DevicesListDevices4XXResponse;
import org.openapitools.client.model.DevicesRevokeDevices4XXResponse;
import org.openapitools.client.model.DevicesUpdateDefaultDeviceSettingsPolicyRequest;
import org.openapitools.client.model.DevicesUpdateDeviceSettingsPolicyRequest;
import org.openapitools.client.model.TeamsDevicesApiResponseSingle;
import org.openapitools.client.model.TeamsDevicesDefaultDeviceSettingsResponse;
import org.openapitools.client.model.TeamsDevicesDeviceResponse;
import org.openapitools.client.model.TeamsDevicesDeviceSettingsResponse;
import org.openapitools.client.model.TeamsDevicesDeviceSettingsResponseCollection;
import org.openapitools.client.model.TeamsDevicesDevicesResponse;
import org.openapitools.client.model.TeamsDevicesFallbackDomain;
import org.openapitools.client.model.TeamsDevicesFallbackDomainResponseCollection;
import org.openapitools.client.model.TeamsDevicesOverrideCodesResponse;
import org.openapitools.client.model.TeamsDevicesSplitTunnel;
import org.openapitools.client.model.TeamsDevicesSplitTunnelInclude;
import org.openapitools.client.model.TeamsDevicesSplitTunnelIncludeResponseCollection;
import org.openapitools.client.model.TeamsDevicesSplitTunnelResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for devicesCreateDeviceSettingsPolicy
     * @param accountId  (required)
     * @param devicesCreateDeviceSettingsPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesCreateDeviceSettingsPolicyCall(Object accountId, DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesCreateDeviceSettingsPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesCreateDeviceSettingsPolicyValidateBeforeCall(Object accountId, DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesCreateDeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'devicesCreateDeviceSettingsPolicyRequest' is set
        if (devicesCreateDeviceSettingsPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'devicesCreateDeviceSettingsPolicyRequest' when calling devicesCreateDeviceSettingsPolicy(Async)");
        }

        return devicesCreateDeviceSettingsPolicyCall(accountId, devicesCreateDeviceSettingsPolicyRequest, _callback);

    }

    /**
     * Create a device settings profile
     * Creates a device settings profile to be applied to certain devices matching the criteria.
     * @param accountId  (required)
     * @param devicesCreateDeviceSettingsPolicyRequest  (required)
     * @return TeamsDevicesDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceSettingsResponse devicesCreateDeviceSettingsPolicy(Object accountId, DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest) throws ApiException {
        ApiResponse<TeamsDevicesDeviceSettingsResponse> localVarResp = devicesCreateDeviceSettingsPolicyWithHttpInfo(accountId, devicesCreateDeviceSettingsPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a device settings profile
     * Creates a device settings profile to be applied to certain devices matching the criteria.
     * @param accountId  (required)
     * @param devicesCreateDeviceSettingsPolicyRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceSettingsResponse> devicesCreateDeviceSettingsPolicyWithHttpInfo(Object accountId, DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesCreateDeviceSettingsPolicyValidateBeforeCall(accountId, devicesCreateDeviceSettingsPolicyRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a device settings profile (asynchronously)
     * Creates a device settings profile to be applied to certain devices matching the criteria.
     * @param accountId  (required)
     * @param devicesCreateDeviceSettingsPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesCreateDeviceSettingsPolicyAsync(Object accountId, DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest, final ApiCallback<TeamsDevicesDeviceSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesCreateDeviceSettingsPolicyValidateBeforeCall(accountId, devicesCreateDeviceSettingsPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesDeleteDeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeleteDeviceSettingsPolicyCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesDeleteDeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesDeleteDeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesDeleteDeviceSettingsPolicy(Async)");
        }

        return devicesDeleteDeviceSettingsPolicyCall(policyId, accountId, _callback);

    }

    /**
     * Delete a device settings profile
     * Deletes a device settings profile and fetches a list of the remaining profiles for an account.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesDeviceSettingsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceSettingsResponseCollection devicesDeleteDeviceSettingsPolicy(String policyId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDeviceSettingsResponseCollection> localVarResp = devicesDeleteDeviceSettingsPolicyWithHttpInfo(policyId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete a device settings profile
     * Deletes a device settings profile and fetches a list of the remaining profiles for an account.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceSettingsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceSettingsResponseCollection> devicesDeleteDeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesDeleteDeviceSettingsPolicyValidateBeforeCall(policyId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a device settings profile (asynchronously)
     * Deletes a device settings profile and fetches a list of the remaining profiles for an account.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeleteDeviceSettingsPolicyAsync(String policyId, Object accountId, final ApiCallback<TeamsDevicesDeviceSettingsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesDeleteDeviceSettingsPolicyValidateBeforeCall(policyId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesDeviceDetails
     * @param deviceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeviceDetailsCall(String deviceId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesDeviceDetailsValidateBeforeCall(String deviceId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesDeviceDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesDeviceDetails(Async)");
        }

        return devicesDeviceDetailsCall(deviceId, accountId, _callback);

    }

    /**
     * Get device details
     * Fetches details for a single device.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceResponse devicesDeviceDetails(String deviceId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDeviceResponse> localVarResp = devicesDeviceDetailsWithHttpInfo(deviceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get device details
     * Fetches details for a single device.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceResponse> devicesDeviceDetailsWithHttpInfo(String deviceId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesDeviceDetailsValidateBeforeCall(deviceId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device details (asynchronously)
     * Fetches details for a single device.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeviceDetailsAsync(String deviceId, Object accountId, final ApiCallback<TeamsDevicesDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesDeviceDetailsValidateBeforeCall(deviceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetDefaultDeviceSettingsPolicy
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetDefaultDeviceSettingsPolicyCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetDefaultDeviceSettingsPolicyValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetDefaultDeviceSettingsPolicy(Async)");
        }

        return devicesGetDefaultDeviceSettingsPolicyCall(accountId, _callback);

    }

    /**
     * Get the default device settings profile
     * Fetches the default device settings profile for an account.
     * @param accountId  (required)
     * @return TeamsDevicesDefaultDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDefaultDeviceSettingsResponse devicesGetDefaultDeviceSettingsPolicy(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDefaultDeviceSettingsResponse> localVarResp = devicesGetDefaultDeviceSettingsPolicyWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get the default device settings profile
     * Fetches the default device settings profile for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDefaultDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDefaultDeviceSettingsResponse> devicesGetDefaultDeviceSettingsPolicyWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetDefaultDeviceSettingsPolicyValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDefaultDeviceSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the default device settings profile (asynchronously)
     * Fetches the default device settings profile for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetDefaultDeviceSettingsPolicyAsync(Object accountId, final ApiCallback<TeamsDevicesDefaultDeviceSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetDefaultDeviceSettingsPolicyValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDefaultDeviceSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetDeviceSettingsPolicyById
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device settings profile by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device settings profile by ID response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetDeviceSettingsPolicyByIdCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetDeviceSettingsPolicyByIdValidateBeforeCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesGetDeviceSettingsPolicyById(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetDeviceSettingsPolicyById(Async)");
        }

        return devicesGetDeviceSettingsPolicyByIdCall(policyId, accountId, _callback);

    }

    /**
     * Get device settings profile by ID
     * Fetches a device settings profile by ID.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device settings profile by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device settings profile by ID response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceSettingsResponse devicesGetDeviceSettingsPolicyById(String policyId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDeviceSettingsResponse> localVarResp = devicesGetDeviceSettingsPolicyByIdWithHttpInfo(policyId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get device settings profile by ID
     * Fetches a device settings profile by ID.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device settings profile by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device settings profile by ID response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceSettingsResponse> devicesGetDeviceSettingsPolicyByIdWithHttpInfo(String policyId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetDeviceSettingsPolicyByIdValidateBeforeCall(policyId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device settings profile by ID (asynchronously)
     * Fetches a device settings profile by ID.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device settings profile by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device settings profile by ID response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetDeviceSettingsPolicyByIdAsync(String policyId, Object accountId, final ApiCallback<TeamsDevicesDeviceSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetDeviceSettingsPolicyByIdValidateBeforeCall(policyId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetLocalDomainFallbackList
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetLocalDomainFallbackListCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/fallback_domains"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetLocalDomainFallbackListValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetLocalDomainFallbackList(Async)");
        }

        return devicesGetLocalDomainFallbackListCall(accountId, _callback);

    }

    /**
     * Get your Local Domain Fallback list
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @return TeamsDevicesFallbackDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesFallbackDomainResponseCollection devicesGetLocalDomainFallbackList(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesFallbackDomainResponseCollection> localVarResp = devicesGetLocalDomainFallbackListWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get your Local Domain Fallback list
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesFallbackDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesFallbackDomainResponseCollection> devicesGetLocalDomainFallbackListWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetLocalDomainFallbackListValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your Local Domain Fallback list (asynchronously)
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetLocalDomainFallbackListAsync(Object accountId, final ApiCallback<TeamsDevicesFallbackDomainResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetLocalDomainFallbackListValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetLocalDomainFallbackListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetLocalDomainFallbackListForADeviceSettingsPolicyCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/fallback_domains"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesGetLocalDomainFallbackListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetLocalDomainFallbackListForADeviceSettingsPolicy(Async)");
        }

        return devicesGetLocalDomainFallbackListForADeviceSettingsPolicyCall(policyId, accountId, _callback);

    }

    /**
     * Get the Local Domain Fallback list for a device settings profile
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified device settings profile. These domains will use the specified local DNS resolver instead.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesFallbackDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesFallbackDomainResponseCollection devicesGetLocalDomainFallbackListForADeviceSettingsPolicy(String policyId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesFallbackDomainResponseCollection> localVarResp = devicesGetLocalDomainFallbackListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get the Local Domain Fallback list for a device settings profile
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified device settings profile. These domains will use the specified local DNS resolver instead.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesFallbackDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesFallbackDomainResponseCollection> devicesGetLocalDomainFallbackListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Local Domain Fallback list for a device settings profile (asynchronously)
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified device settings profile. These domains will use the specified local DNS resolver instead.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetLocalDomainFallbackListForADeviceSettingsPolicyAsync(String policyId, Object accountId, final ApiCallback<TeamsDevicesFallbackDomainResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetSplitTunnelExcludeList
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelExcludeListCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/exclude"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetSplitTunnelExcludeListValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetSplitTunnelExcludeList(Async)");
        }

        return devicesGetSplitTunnelExcludeListCall(accountId, _callback);

    }

    /**
     * Get the Split Tunnel exclude list
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @return TeamsDevicesSplitTunnelResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelResponseCollection devicesGetSplitTunnelExcludeList(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelResponseCollection> localVarResp = devicesGetSplitTunnelExcludeListWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get the Split Tunnel exclude list
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelResponseCollection> devicesGetSplitTunnelExcludeListWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetSplitTunnelExcludeListValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Split Tunnel exclude list (asynchronously)
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelExcludeListAsync(Object accountId, final ApiCallback<TeamsDevicesSplitTunnelResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetSplitTunnelExcludeListValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/exclude"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy(Async)");
        }

        return devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyCall(policyId, accountId, _callback);

    }

    /**
     * Get the Split Tunnel exclude list for a device settings profile
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesSplitTunnelResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelResponseCollection devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy(String policyId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelResponseCollection> localVarResp = devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get the Split Tunnel exclude list for a device settings profile
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelResponseCollection> devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Split Tunnel exclude list for a device settings profile (asynchronously)
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyAsync(String policyId, Object accountId, final ApiCallback<TeamsDevicesSplitTunnelResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetSplitTunnelIncludeList
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelIncludeListCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/include"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetSplitTunnelIncludeListValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetSplitTunnelIncludeList(Async)");
        }

        return devicesGetSplitTunnelIncludeListCall(accountId, _callback);

    }

    /**
     * Get the Split Tunnel include list
     * Fetches the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @return TeamsDevicesSplitTunnelIncludeResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelIncludeResponseCollection devicesGetSplitTunnelIncludeList(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> localVarResp = devicesGetSplitTunnelIncludeListWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get the Split Tunnel include list
     * Fetches the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelIncludeResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> devicesGetSplitTunnelIncludeListWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetSplitTunnelIncludeListValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Split Tunnel include list (asynchronously)
     * Fetches the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelIncludeListAsync(Object accountId, final ApiCallback<TeamsDevicesSplitTunnelIncludeResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetSplitTunnelIncludeListValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/include"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy(Async)");
        }

        return devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyCall(policyId, accountId, _callback);

    }

    /**
     * Get the Split Tunnel include list for a device settings profile
     * Fetches the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesSplitTunnelIncludeResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelIncludeResponseCollection devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy(String policyId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> localVarResp = devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get the Split Tunnel include list for a device settings profile
     * Fetches the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelIncludeResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Split Tunnel include list for a device settings profile (asynchronously)
     * Fetches the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyAsync(String policyId, Object accountId, final ApiCallback<TeamsDevicesSplitTunnelIncludeResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesListAdminOverrideCodeForDevice
     * @param deviceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an admin override code for a device response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an admin override code for a device response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListAdminOverrideCodeForDeviceCall(String deviceId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/{device_id}/override_codes"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListAdminOverrideCodeForDeviceValidateBeforeCall(String deviceId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesListAdminOverrideCodeForDevice(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesListAdminOverrideCodeForDevice(Async)");
        }

        return devicesListAdminOverrideCodeForDeviceCall(deviceId, accountId, _callback);

    }

    /**
     * Get an admin override code for a device
     * Fetches a one-time use admin override code for a device. This relies on the **Admin Override** setting being enabled in your device configuration.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesOverrideCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an admin override code for a device response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an admin override code for a device response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesOverrideCodesResponse devicesListAdminOverrideCodeForDevice(String deviceId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesOverrideCodesResponse> localVarResp = devicesListAdminOverrideCodeForDeviceWithHttpInfo(deviceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an admin override code for a device
     * Fetches a one-time use admin override code for a device. This relies on the **Admin Override** setting being enabled in your device configuration.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesOverrideCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an admin override code for a device response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an admin override code for a device response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesOverrideCodesResponse> devicesListAdminOverrideCodeForDeviceWithHttpInfo(String deviceId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesListAdminOverrideCodeForDeviceValidateBeforeCall(deviceId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesOverrideCodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an admin override code for a device (asynchronously)
     * Fetches a one-time use admin override code for a device. This relies on the **Admin Override** setting being enabled in your device configuration.
     * @param deviceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an admin override code for a device response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an admin override code for a device response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListAdminOverrideCodeForDeviceAsync(String deviceId, Object accountId, final ApiCallback<TeamsDevicesOverrideCodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListAdminOverrideCodeForDeviceValidateBeforeCall(deviceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesOverrideCodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesListDeviceSettingsPolicies
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device settings profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List device settings profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListDeviceSettingsPoliciesCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policies"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListDeviceSettingsPoliciesValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesListDeviceSettingsPolicies(Async)");
        }

        return devicesListDeviceSettingsPoliciesCall(accountId, _callback);

    }

    /**
     * List device settings profiles
     * Fetches a list of the device settings profiles for an account.
     * @param accountId  (required)
     * @return TeamsDevicesDeviceSettingsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device settings profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List device settings profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceSettingsResponseCollection devicesListDeviceSettingsPolicies(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDeviceSettingsResponseCollection> localVarResp = devicesListDeviceSettingsPoliciesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List device settings profiles
     * Fetches a list of the device settings profiles for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceSettingsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device settings profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List device settings profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceSettingsResponseCollection> devicesListDeviceSettingsPoliciesWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesListDeviceSettingsPoliciesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List device settings profiles (asynchronously)
     * Fetches a list of the device settings profiles for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device settings profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List device settings profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListDeviceSettingsPoliciesAsync(Object accountId, final ApiCallback<TeamsDevicesDeviceSettingsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListDeviceSettingsPoliciesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesListDevices
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListDevicesCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListDevicesValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesListDevices(Async)");
        }

        return devicesListDevicesCall(accountId, _callback);

    }

    /**
     * List devices
     * Fetches a list of enrolled devices.
     * @param accountId  (required)
     * @return TeamsDevicesDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDevicesResponse devicesListDevices(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesDevicesResponse> localVarResp = devicesListDevicesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List devices
     * Fetches a list of enrolled devices.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDevicesResponse> devicesListDevicesWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = devicesListDevicesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List devices (asynchronously)
     * Fetches a list of enrolled devices.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListDevicesAsync(Object accountId, final ApiCallback<TeamsDevicesDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListDevicesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesRevokeDevices
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRevokeDevicesCall(Object accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/revoke"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesRevokeDevicesValidateBeforeCall(Object accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesRevokeDevices(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling devicesRevokeDevices(Async)");
        }

        return devicesRevokeDevicesCall(accountId, requestBody, _callback);

    }

    /**
     * Revoke devices
     * Revokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return TeamsDevicesApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesApiResponseSingle devicesRevokeDevices(Object accountId, List<String> requestBody) throws ApiException {
        ApiResponse<TeamsDevicesApiResponseSingle> localVarResp = devicesRevokeDevicesWithHttpInfo(accountId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Revoke devices
     * Revokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;TeamsDevicesApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesApiResponseSingle> devicesRevokeDevicesWithHttpInfo(Object accountId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = devicesRevokeDevicesValidateBeforeCall(accountId, requestBody, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke devices (asynchronously)
     * Revokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRevokeDevicesAsync(Object accountId, List<String> requestBody, final ApiCallback<TeamsDevicesApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesRevokeDevicesValidateBeforeCall(accountId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetLocalDomainFallbackList
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetLocalDomainFallbackListCall(Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesFallbackDomain;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/fallback_domains"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetLocalDomainFallbackListValidateBeforeCall(Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetLocalDomainFallbackList(Async)");
        }

        // verify the required parameter 'teamsDevicesFallbackDomain' is set
        if (teamsDevicesFallbackDomain == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesFallbackDomain' when calling devicesSetLocalDomainFallbackList(Async)");
        }

        return devicesSetLocalDomainFallbackListCall(accountId, teamsDevicesFallbackDomain, _callback);

    }

    /**
     * Set your Local Domain Fallback list
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @return TeamsDevicesFallbackDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesFallbackDomainResponseCollection devicesSetLocalDomainFallbackList(Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain) throws ApiException {
        ApiResponse<TeamsDevicesFallbackDomainResponseCollection> localVarResp = devicesSetLocalDomainFallbackListWithHttpInfo(accountId, teamsDevicesFallbackDomain);
        return localVarResp.getData();
    }

    /**
     * Set your Local Domain Fallback list
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @return ApiResponse&lt;TeamsDevicesFallbackDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesFallbackDomainResponseCollection> devicesSetLocalDomainFallbackListWithHttpInfo(Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain) throws ApiException {
        okhttp3.Call localVarCall = devicesSetLocalDomainFallbackListValidateBeforeCall(accountId, teamsDevicesFallbackDomain, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set your Local Domain Fallback list (asynchronously)
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set your Local Domain Fallback list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set your Local Domain Fallback list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetLocalDomainFallbackListAsync(Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback<TeamsDevicesFallbackDomainResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetLocalDomainFallbackListValidateBeforeCall(accountId, teamsDevicesFallbackDomain, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetLocalDomainFallbackListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetLocalDomainFallbackListForADeviceSettingsPolicyCall(String policyId, Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesFallbackDomain;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/fallback_domains"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'teamsDevicesFallbackDomain' is set
        if (teamsDevicesFallbackDomain == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesFallbackDomain' when calling devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(Async)");
        }

        return devicesSetLocalDomainFallbackListForADeviceSettingsPolicyCall(policyId, accountId, teamsDevicesFallbackDomain, _callback);

    }

    /**
     * Set the Local Domain Fallback list for a device settings profile
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead. This will only apply to the specified device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @return TeamsDevicesFallbackDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesFallbackDomainResponseCollection devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(String policyId, Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain) throws ApiException {
        ApiResponse<TeamsDevicesFallbackDomainResponseCollection> localVarResp = devicesSetLocalDomainFallbackListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId, teamsDevicesFallbackDomain);
        return localVarResp.getData();
    }

    /**
     * Set the Local Domain Fallback list for a device settings profile
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead. This will only apply to the specified device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @return ApiResponse&lt;TeamsDevicesFallbackDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesFallbackDomainResponseCollection> devicesSetLocalDomainFallbackListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain) throws ApiException {
        okhttp3.Call localVarCall = devicesSetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesFallbackDomain, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Local Domain Fallback list for a device settings profile (asynchronously)
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead. This will only apply to the specified device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesFallbackDomain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Local Domain Fallback list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Local Domain Fallback list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetLocalDomainFallbackListForADeviceSettingsPolicyAsync(String policyId, Object accountId, List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain, final ApiCallback<TeamsDevicesFallbackDomainResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetLocalDomainFallbackListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesFallbackDomain, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesFallbackDomainResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetSplitTunnelExcludeList
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelExcludeListCall(Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesSplitTunnel;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/exclude"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetSplitTunnelExcludeListValidateBeforeCall(Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetSplitTunnelExcludeList(Async)");
        }

        // verify the required parameter 'teamsDevicesSplitTunnel' is set
        if (teamsDevicesSplitTunnel == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesSplitTunnel' when calling devicesSetSplitTunnelExcludeList(Async)");
        }

        return devicesSetSplitTunnelExcludeListCall(accountId, teamsDevicesSplitTunnel, _callback);

    }

    /**
     * Set the Split Tunnel exclude list
     * Sets the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @return TeamsDevicesSplitTunnelResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelResponseCollection devicesSetSplitTunnelExcludeList(Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelResponseCollection> localVarResp = devicesSetSplitTunnelExcludeListWithHttpInfo(accountId, teamsDevicesSplitTunnel);
        return localVarResp.getData();
    }

    /**
     * Set the Split Tunnel exclude list
     * Sets the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelResponseCollection> devicesSetSplitTunnelExcludeListWithHttpInfo(Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel) throws ApiException {
        okhttp3.Call localVarCall = devicesSetSplitTunnelExcludeListValidateBeforeCall(accountId, teamsDevicesSplitTunnel, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Split Tunnel exclude list (asynchronously)
     * Sets the list of routes excluded from the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelExcludeListAsync(Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback<TeamsDevicesSplitTunnelResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetSplitTunnelExcludeListValidateBeforeCall(accountId, teamsDevicesSplitTunnel, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyCall(String policyId, Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesSplitTunnel;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/exclude"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'teamsDevicesSplitTunnel' is set
        if (teamsDevicesSplitTunnel == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesSplitTunnel' when calling devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(Async)");
        }

        return devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyCall(policyId, accountId, teamsDevicesSplitTunnel, _callback);

    }

    /**
     * Set the Split Tunnel exclude list for a device settings profile
     * Sets the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @return TeamsDevicesSplitTunnelResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelResponseCollection devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(String policyId, Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelResponseCollection> localVarResp = devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId, teamsDevicesSplitTunnel);
        return localVarResp.getData();
    }

    /**
     * Set the Split Tunnel exclude list for a device settings profile
     * Sets the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelResponseCollection> devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel) throws ApiException {
        okhttp3.Call localVarCall = devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesSplitTunnel, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Split Tunnel exclude list for a device settings profile (asynchronously)
     * Sets the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel exclude list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel exclude list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyAsync(String policyId, Object accountId, List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel, final ApiCallback<TeamsDevicesSplitTunnelResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesSplitTunnel, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetSplitTunnelIncludeList
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelIncludeListCall(Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesSplitTunnelInclude;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/include"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetSplitTunnelIncludeListValidateBeforeCall(Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetSplitTunnelIncludeList(Async)");
        }

        // verify the required parameter 'teamsDevicesSplitTunnelInclude' is set
        if (teamsDevicesSplitTunnelInclude == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesSplitTunnelInclude' when calling devicesSetSplitTunnelIncludeList(Async)");
        }

        return devicesSetSplitTunnelIncludeListCall(accountId, teamsDevicesSplitTunnelInclude, _callback);

    }

    /**
     * Set the Split Tunnel include list
     * Sets the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @return TeamsDevicesSplitTunnelIncludeResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelIncludeResponseCollection devicesSetSplitTunnelIncludeList(Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> localVarResp = devicesSetSplitTunnelIncludeListWithHttpInfo(accountId, teamsDevicesSplitTunnelInclude);
        return localVarResp.getData();
    }

    /**
     * Set the Split Tunnel include list
     * Sets the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelIncludeResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> devicesSetSplitTunnelIncludeListWithHttpInfo(Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude) throws ApiException {
        okhttp3.Call localVarCall = devicesSetSplitTunnelIncludeListValidateBeforeCall(accountId, teamsDevicesSplitTunnelInclude, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Split Tunnel include list (asynchronously)
     * Sets the list of routes included in the WARP client&#39;s tunnel.
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelIncludeListAsync(Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback<TeamsDevicesSplitTunnelIncludeResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetSplitTunnelIncludeListValidateBeforeCall(accountId, teamsDevicesSplitTunnelInclude, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyCall(String policyId, Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsDevicesSplitTunnelInclude;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}/include"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'teamsDevicesSplitTunnelInclude' is set
        if (teamsDevicesSplitTunnelInclude == null) {
            throw new ApiException("Missing the required parameter 'teamsDevicesSplitTunnelInclude' when calling devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(Async)");
        }

        return devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyCall(policyId, accountId, teamsDevicesSplitTunnelInclude, _callback);

    }

    /**
     * Set the Split Tunnel include list for a device settings profile
     * Sets the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @return TeamsDevicesSplitTunnelIncludeResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesSplitTunnelIncludeResponseCollection devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(String policyId, Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude) throws ApiException {
        ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> localVarResp = devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyWithHttpInfo(policyId, accountId, teamsDevicesSplitTunnelInclude);
        return localVarResp.getData();
    }

    /**
     * Set the Split Tunnel include list for a device settings profile
     * Sets the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @return ApiResponse&lt;TeamsDevicesSplitTunnelIncludeResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesSplitTunnelIncludeResponseCollection> devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude) throws ApiException {
        okhttp3.Call localVarCall = devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesSplitTunnelInclude, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Split Tunnel include list for a device settings profile (asynchronously)
     * Sets the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param teamsDevicesSplitTunnelInclude  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set the Split Tunnel include list for a device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set the Split Tunnel include list for a device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyAsync(String policyId, Object accountId, List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude, final ApiCallback<TeamsDevicesSplitTunnelIncludeResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyValidateBeforeCall(policyId, accountId, teamsDevicesSplitTunnelInclude, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesSplitTunnelIncludeResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUnrevokeDevices
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unrevoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unrevoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUnrevokeDevicesCall(Object accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/unrevoke"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUnrevokeDevicesValidateBeforeCall(Object accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesUnrevokeDevices(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling devicesUnrevokeDevices(Async)");
        }

        return devicesUnrevokeDevicesCall(accountId, requestBody, _callback);

    }

    /**
     * Unrevoke devices
     * Unrevokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return TeamsDevicesApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unrevoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unrevoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesApiResponseSingle devicesUnrevokeDevices(Object accountId, List<String> requestBody) throws ApiException {
        ApiResponse<TeamsDevicesApiResponseSingle> localVarResp = devicesUnrevokeDevicesWithHttpInfo(accountId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Unrevoke devices
     * Unrevokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;TeamsDevicesApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unrevoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unrevoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesApiResponseSingle> devicesUnrevokeDevicesWithHttpInfo(Object accountId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = devicesUnrevokeDevicesValidateBeforeCall(accountId, requestBody, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unrevoke devices (asynchronously)
     * Unrevokes a list of devices.
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unrevoke devices response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unrevoke devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUnrevokeDevicesAsync(Object accountId, List<String> requestBody, final ApiCallback<TeamsDevicesApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUnrevokeDevicesValidateBeforeCall(accountId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateDefaultDeviceSettingsPolicy
     * @param accountId  (required)
     * @param devicesUpdateDefaultDeviceSettingsPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateDefaultDeviceSettingsPolicyCall(Object accountId, DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesUpdateDefaultDeviceSettingsPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdateDefaultDeviceSettingsPolicyValidateBeforeCall(Object accountId, DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesUpdateDefaultDeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'devicesUpdateDefaultDeviceSettingsPolicyRequest' is set
        if (devicesUpdateDefaultDeviceSettingsPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'devicesUpdateDefaultDeviceSettingsPolicyRequest' when calling devicesUpdateDefaultDeviceSettingsPolicy(Async)");
        }

        return devicesUpdateDefaultDeviceSettingsPolicyCall(accountId, devicesUpdateDefaultDeviceSettingsPolicyRequest, _callback);

    }

    /**
     * Update the default device settings profile
     * Updates the default device settings profile for an account.
     * @param accountId  (required)
     * @param devicesUpdateDefaultDeviceSettingsPolicyRequest  (required)
     * @return TeamsDevicesDefaultDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDefaultDeviceSettingsResponse devicesUpdateDefaultDeviceSettingsPolicy(Object accountId, DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest) throws ApiException {
        ApiResponse<TeamsDevicesDefaultDeviceSettingsResponse> localVarResp = devicesUpdateDefaultDeviceSettingsPolicyWithHttpInfo(accountId, devicesUpdateDefaultDeviceSettingsPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update the default device settings profile
     * Updates the default device settings profile for an account.
     * @param accountId  (required)
     * @param devicesUpdateDefaultDeviceSettingsPolicyRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesDefaultDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDefaultDeviceSettingsResponse> devicesUpdateDefaultDeviceSettingsPolicyWithHttpInfo(Object accountId, DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdateDefaultDeviceSettingsPolicyValidateBeforeCall(accountId, devicesUpdateDefaultDeviceSettingsPolicyRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDefaultDeviceSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the default device settings profile (asynchronously)
     * Updates the default device settings profile for an account.
     * @param accountId  (required)
     * @param devicesUpdateDefaultDeviceSettingsPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the default device settings profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the default device settings profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateDefaultDeviceSettingsPolicyAsync(Object accountId, DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest, final ApiCallback<TeamsDevicesDefaultDeviceSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdateDefaultDeviceSettingsPolicyValidateBeforeCall(accountId, devicesUpdateDefaultDeviceSettingsPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDefaultDeviceSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateDeviceSettingsPolicy
     * @param policyId  (required)
     * @param accountId  (required)
     * @param devicesUpdateDeviceSettingsPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device settings profile Policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device settings profile Policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateDeviceSettingsPolicyCall(String policyId, Object accountId, DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesUpdateDeviceSettingsPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/policy/{policy_id}"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdateDeviceSettingsPolicyValidateBeforeCall(String policyId, Object accountId, DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling devicesUpdateDeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling devicesUpdateDeviceSettingsPolicy(Async)");
        }

        // verify the required parameter 'devicesUpdateDeviceSettingsPolicyRequest' is set
        if (devicesUpdateDeviceSettingsPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'devicesUpdateDeviceSettingsPolicyRequest' when calling devicesUpdateDeviceSettingsPolicy(Async)");
        }

        return devicesUpdateDeviceSettingsPolicyCall(policyId, accountId, devicesUpdateDeviceSettingsPolicyRequest, _callback);

    }

    /**
     * Update a device settings profile
     * Updates a configured device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param devicesUpdateDeviceSettingsPolicyRequest  (required)
     * @return TeamsDevicesDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device settings profile Policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device settings profile Policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesDeviceSettingsResponse devicesUpdateDeviceSettingsPolicy(String policyId, Object accountId, DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest) throws ApiException {
        ApiResponse<TeamsDevicesDeviceSettingsResponse> localVarResp = devicesUpdateDeviceSettingsPolicyWithHttpInfo(policyId, accountId, devicesUpdateDeviceSettingsPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a device settings profile
     * Updates a configured device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param devicesUpdateDeviceSettingsPolicyRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device settings profile Policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device settings profile Policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesDeviceSettingsResponse> devicesUpdateDeviceSettingsPolicyWithHttpInfo(String policyId, Object accountId, DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdateDeviceSettingsPolicyValidateBeforeCall(policyId, accountId, devicesUpdateDeviceSettingsPolicyRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a device settings profile (asynchronously)
     * Updates a configured device settings profile.
     * @param policyId  (required)
     * @param accountId  (required)
     * @param devicesUpdateDeviceSettingsPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device settings profile Policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device settings profile Policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateDeviceSettingsPolicyAsync(String policyId, Object accountId, DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest, final ApiCallback<TeamsDevicesDeviceSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdateDeviceSettingsPolicyValidateBeforeCall(policyId, accountId, devicesUpdateDeviceSettingsPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesDeviceSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
