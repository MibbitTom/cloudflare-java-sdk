/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitorRequest;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsCreatePool4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsDeletePool4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsListPoolReferences4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsListPools4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsPatchPoolRequest;
import org.openapitools.client.model.AccountLoadBalancerPoolsPatchPoolsRequest;
import org.openapitools.client.model.AccountLoadBalancerPoolsPoolHealthDetails4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerPoolsUpdatePoolRequest;
import org.openapitools.client.model.LoadBalancerPoolsCreatePoolRequest;
import org.openapitools.client.model.LoadBalancingHealthDetails;
import org.openapitools.client.model.LoadBalancingPreviewResponse;
import org.openapitools.client.model.LoadBalancingSchemasIdResponse;
import org.openapitools.client.model.LoadBalancingSchemasReferencesResponse;
import org.openapitools.client.model.LoadBalancingSchemasResponseCollection;
import org.openapitools.client.model.LoadBalancingSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancerPoolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoadBalancerPoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancerPoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for loadBalancerPoolsCreatePool
     * @param loadBalancerPoolsCreatePoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsCreatePoolCall(LoadBalancerPoolsCreatePoolRequest loadBalancerPoolsCreatePoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadBalancerPoolsCreatePoolRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsCreatePoolValidateBeforeCall(LoadBalancerPoolsCreatePoolRequest loadBalancerPoolsCreatePoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loadBalancerPoolsCreatePoolRequest' is set
        if (loadBalancerPoolsCreatePoolRequest == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerPoolsCreatePoolRequest' when calling loadBalancerPoolsCreatePool(Async)");
        }

        return loadBalancerPoolsCreatePoolCall(loadBalancerPoolsCreatePoolRequest, _callback);

    }

    /**
     * Create Pool
     * Create a new pool.
     * @param loadBalancerPoolsCreatePoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse loadBalancerPoolsCreatePool(LoadBalancerPoolsCreatePoolRequest loadBalancerPoolsCreatePoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = loadBalancerPoolsCreatePoolWithHttpInfo(loadBalancerPoolsCreatePoolRequest);
        return localVarResp.getData();
    }

    /**
     * Create Pool
     * Create a new pool.
     * @param loadBalancerPoolsCreatePoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> loadBalancerPoolsCreatePoolWithHttpInfo(LoadBalancerPoolsCreatePoolRequest loadBalancerPoolsCreatePoolRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsCreatePoolValidateBeforeCall(loadBalancerPoolsCreatePoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Pool (asynchronously)
     * Create a new pool.
     * @param loadBalancerPoolsCreatePoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsCreatePoolAsync(LoadBalancerPoolsCreatePoolRequest loadBalancerPoolsCreatePoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsCreatePoolValidateBeforeCall(loadBalancerPoolsCreatePoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsDeletePool
     * @param poolId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsDeletePoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsDeletePoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsDeletePool(Async)");
        }

        return loadBalancerPoolsDeletePoolCall(poolId, _callback);

    }

    /**
     * Delete Pool
     * Delete a configured pool.
     * @param poolId  (required)
     * @return LoadBalancingSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasIdResponse loadBalancerPoolsDeletePool(String poolId) throws ApiException {
        ApiResponse<LoadBalancingSchemasIdResponse> localVarResp = loadBalancerPoolsDeletePoolWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Delete Pool
     * Delete a configured pool.
     * @param poolId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasIdResponse> loadBalancerPoolsDeletePoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsDeletePoolValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Pool (asynchronously)
     * Delete a configured pool.
     * @param poolId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsDeletePoolAsync(String poolId, final ApiCallback<LoadBalancingSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsDeletePoolValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsListPoolReferences
     * @param poolId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsListPoolReferencesCall(String poolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}/references"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsListPoolReferencesValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsListPoolReferences(Async)");
        }

        return loadBalancerPoolsListPoolReferencesCall(poolId, _callback);

    }

    /**
     * List Pool References
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @return LoadBalancingSchemasReferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasReferencesResponse loadBalancerPoolsListPoolReferences(String poolId) throws ApiException {
        ApiResponse<LoadBalancingSchemasReferencesResponse> localVarResp = loadBalancerPoolsListPoolReferencesWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * List Pool References
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasReferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasReferencesResponse> loadBalancerPoolsListPoolReferencesWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsListPoolReferencesValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasReferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pool References (asynchronously)
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsListPoolReferencesAsync(String poolId, final ApiCallback<LoadBalancingSchemasReferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsListPoolReferencesValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasReferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsListPools
     * @param monitor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsListPoolsCall(Object monitor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (monitor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitor", monitor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsListPoolsValidateBeforeCall(Object monitor, final ApiCallback _callback) throws ApiException {
        return loadBalancerPoolsListPoolsCall(monitor, _callback);

    }

    /**
     * List Pools
     * List configured pools.
     * @param monitor  (optional)
     * @return LoadBalancingSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasResponseCollection loadBalancerPoolsListPools(Object monitor) throws ApiException {
        ApiResponse<LoadBalancingSchemasResponseCollection> localVarResp = loadBalancerPoolsListPoolsWithHttpInfo(monitor);
        return localVarResp.getData();
    }

    /**
     * List Pools
     * List configured pools.
     * @param monitor  (optional)
     * @return ApiResponse&lt;LoadBalancingSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasResponseCollection> loadBalancerPoolsListPoolsWithHttpInfo(Object monitor) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsListPoolsValidateBeforeCall(monitor, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pools (asynchronously)
     * List configured pools.
     * @param monitor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsListPoolsAsync(Object monitor, final ApiCallback<LoadBalancingSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsListPoolsValidateBeforeCall(monitor, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsPatchPool
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPatchPoolCall(String poolId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsPatchPoolRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsPatchPoolValidateBeforeCall(String poolId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsPatchPool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsPatchPoolRequest' is set
        if (accountLoadBalancerPoolsPatchPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsPatchPoolRequest' when calling loadBalancerPoolsPatchPool(Async)");
        }

        return loadBalancerPoolsPatchPoolCall(poolId, accountLoadBalancerPoolsPatchPoolRequest, _callback);

    }

    /**
     * Patch Pool
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse loadBalancerPoolsPatchPool(String poolId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = loadBalancerPoolsPatchPoolWithHttpInfo(poolId, accountLoadBalancerPoolsPatchPoolRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Pool
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> loadBalancerPoolsPatchPoolWithHttpInfo(String poolId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsPatchPoolValidateBeforeCall(poolId, accountLoadBalancerPoolsPatchPoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Pool (asynchronously)
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPatchPoolAsync(String poolId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsPatchPoolValidateBeforeCall(poolId, accountLoadBalancerPoolsPatchPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsPatchPools
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPatchPoolsCall(AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsPatchPoolsRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsPatchPoolsValidateBeforeCall(AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountLoadBalancerPoolsPatchPoolsRequest' is set
        if (accountLoadBalancerPoolsPatchPoolsRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsPatchPoolsRequest' when calling loadBalancerPoolsPatchPools(Async)");
        }

        return loadBalancerPoolsPatchPoolsCall(accountLoadBalancerPoolsPatchPoolsRequest, _callback);

    }

    /**
     * Patch Pools
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @return LoadBalancingSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasResponseCollection loadBalancerPoolsPatchPools(AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasResponseCollection> localVarResp = loadBalancerPoolsPatchPoolsWithHttpInfo(accountLoadBalancerPoolsPatchPoolsRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Pools
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasResponseCollection> loadBalancerPoolsPatchPoolsWithHttpInfo(AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsPatchPoolsValidateBeforeCall(accountLoadBalancerPoolsPatchPoolsRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Pools (asynchronously)
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPatchPoolsAsync(AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback<LoadBalancingSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsPatchPoolsValidateBeforeCall(accountLoadBalancerPoolsPatchPoolsRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsPoolDetails
     * @param poolId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPoolDetailsCall(String poolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsPoolDetailsValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsPoolDetails(Async)");
        }

        return loadBalancerPoolsPoolDetailsCall(poolId, _callback);

    }

    /**
     * Pool Details
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse loadBalancerPoolsPoolDetails(String poolId) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = loadBalancerPoolsPoolDetailsWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Pool Details
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> loadBalancerPoolsPoolDetailsWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsPoolDetailsValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pool Details (asynchronously)
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPoolDetailsAsync(String poolId, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsPoolDetailsValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsPoolHealthDetails
     * @param poolId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPoolHealthDetailsCall(String poolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}/health"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsPoolHealthDetailsValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsPoolHealthDetails(Async)");
        }

        return loadBalancerPoolsPoolHealthDetailsCall(poolId, _callback);

    }

    /**
     * Pool Health Details
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @return LoadBalancingHealthDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingHealthDetails loadBalancerPoolsPoolHealthDetails(String poolId) throws ApiException {
        ApiResponse<LoadBalancingHealthDetails> localVarResp = loadBalancerPoolsPoolHealthDetailsWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Pool Health Details
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @return ApiResponse&lt;LoadBalancingHealthDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingHealthDetails> loadBalancerPoolsPoolHealthDetailsWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsPoolHealthDetailsValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingHealthDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pool Health Details (asynchronously)
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPoolHealthDetailsAsync(String poolId, final ApiCallback<LoadBalancingHealthDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsPoolHealthDetailsValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingHealthDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsPreviewPool
     * @param poolId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPreviewPoolCall(String poolId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}/preview"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsPreviewPoolValidateBeforeCall(String poolId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsPreviewPool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling loadBalancerPoolsPreviewPool(Async)");
        }

        return loadBalancerPoolsPreviewPoolCall(poolId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Preview Pool
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResponse loadBalancerPoolsPreviewPool(String poolId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingPreviewResponse> localVarResp = loadBalancerPoolsPreviewPoolWithHttpInfo(poolId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Preview Pool
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResponse> loadBalancerPoolsPreviewPoolWithHttpInfo(String poolId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsPreviewPoolValidateBeforeCall(poolId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Pool (asynchronously)
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsPreviewPoolAsync(String poolId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsPreviewPoolValidateBeforeCall(poolId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerPoolsUpdatePool
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsUpdatePoolCall(String poolId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsUpdatePoolRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerPoolsUpdatePoolValidateBeforeCall(String poolId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling loadBalancerPoolsUpdatePool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsUpdatePoolRequest' is set
        if (accountLoadBalancerPoolsUpdatePoolRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsUpdatePoolRequest' when calling loadBalancerPoolsUpdatePool(Async)");
        }

        return loadBalancerPoolsUpdatePoolCall(poolId, accountLoadBalancerPoolsUpdatePoolRequest, _callback);

    }

    /**
     * Update Pool
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse loadBalancerPoolsUpdatePool(String poolId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = loadBalancerPoolsUpdatePoolWithHttpInfo(poolId, accountLoadBalancerPoolsUpdatePoolRequest);
        return localVarResp.getData();
    }

    /**
     * Update Pool
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> loadBalancerPoolsUpdatePoolWithHttpInfo(String poolId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerPoolsUpdatePoolValidateBeforeCall(poolId, accountLoadBalancerPoolsUpdatePoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Pool (asynchronously)
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerPoolsUpdatePoolAsync(String poolId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerPoolsUpdatePoolValidateBeforeCall(poolId, accountLoadBalancerPoolsUpdatePoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
