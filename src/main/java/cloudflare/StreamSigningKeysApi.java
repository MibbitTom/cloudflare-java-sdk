/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamDeletedResponse;
import org.openapitools.client.model.StreamKeyGenerationResponse;
import org.openapitools.client.model.StreamKeyResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamSigningKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamSigningKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamSigningKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamSigningKeysCreateSigningKeys
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysCreateSigningKeysCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/keys"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSigningKeysCreateSigningKeysValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSigningKeysCreateSigningKeys(Async)");
        }

        return streamSigningKeysCreateSigningKeysCall(accountId, _callback);

    }

    /**
     * Create signing keys
     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
     * @param accountId  (required)
     * @return StreamKeyGenerationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamKeyGenerationResponse streamSigningKeysCreateSigningKeys(String accountId) throws ApiException {
        ApiResponse<StreamKeyGenerationResponse> localVarResp = streamSigningKeysCreateSigningKeysWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Create signing keys
     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamKeyGenerationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamKeyGenerationResponse> streamSigningKeysCreateSigningKeysWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSigningKeysCreateSigningKeysValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<StreamKeyGenerationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create signing keys (asynchronously)
     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysCreateSigningKeysAsync(String accountId, final ApiCallback<StreamKeyGenerationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSigningKeysCreateSigningKeysValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamKeyGenerationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSigningKeysDeleteSigningKeys
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysDeleteSigningKeysCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/keys/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSigningKeysDeleteSigningKeysValidateBeforeCall(String identifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling streamSigningKeysDeleteSigningKeys(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSigningKeysDeleteSigningKeys(Async)");
        }

        return streamSigningKeysDeleteSigningKeysCall(identifier, accountId, _callback);

    }

    /**
     * Delete signing keys
     * Deletes signing keys and revokes all signed URLs generated with the key.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return StreamDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDeletedResponse streamSigningKeysDeleteSigningKeys(String identifier, String accountId) throws ApiException {
        ApiResponse<StreamDeletedResponse> localVarResp = streamSigningKeysDeleteSigningKeysWithHttpInfo(identifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete signing keys
     * Deletes signing keys and revokes all signed URLs generated with the key.
     * @param identifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDeletedResponse> streamSigningKeysDeleteSigningKeysWithHttpInfo(String identifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSigningKeysDeleteSigningKeysValidateBeforeCall(identifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete signing keys (asynchronously)
     * Deletes signing keys and revokes all signed URLs generated with the key.
     * @param identifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysDeleteSigningKeysAsync(String identifier, String accountId, final ApiCallback<StreamDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSigningKeysDeleteSigningKeysValidateBeforeCall(identifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSigningKeysListSigningKeys
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysListSigningKeysCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/keys"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSigningKeysListSigningKeysValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamSigningKeysListSigningKeys(Async)");
        }

        return streamSigningKeysListSigningKeysCall(accountId, _callback);

    }

    /**
     * List signing keys
     * Lists the video ID and creation date and time when a signing key was created.
     * @param accountId  (required)
     * @return StreamKeyResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamKeyResponseCollection streamSigningKeysListSigningKeys(String accountId) throws ApiException {
        ApiResponse<StreamKeyResponseCollection> localVarResp = streamSigningKeysListSigningKeysWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List signing keys
     * Lists the video ID and creation date and time when a signing key was created.
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamKeyResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamKeyResponseCollection> streamSigningKeysListSigningKeysWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamSigningKeysListSigningKeysValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<StreamKeyResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List signing keys (asynchronously)
     * Lists the video ID and creation date and time when a signing key was created.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List signing keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List signing keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSigningKeysListSigningKeysAsync(String accountId, final ApiCallback<StreamKeyResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSigningKeysListSigningKeysValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamKeyResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
