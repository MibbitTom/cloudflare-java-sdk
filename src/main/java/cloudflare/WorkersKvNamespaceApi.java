/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.WorkersKvApiResponseSingle;
import org.openapitools.client.model.WorkersKvBulkWriteInner;
import org.openapitools.client.model.WorkersKvCreateRenameNamespaceBody;
import org.openapitools.client.model.WorkersKvNamespaceCreateANamespace200Response;
import org.openapitools.client.model.WorkersKvNamespaceCreateANamespace4XXResponse;
import org.openapitools.client.model.WorkersKvNamespaceListANamespaceSKeys200Response;
import org.openapitools.client.model.WorkersKvNamespaceListANamespaceSKeys4XXResponse;
import org.openapitools.client.model.WorkersKvNamespaceListNamespaces200Response;
import org.openapitools.client.model.WorkersKvNamespaceListNamespaces4XXResponse;
import org.openapitools.client.model.WorkersKvNamespaceReadKeyValuePair4XXResponse;
import org.openapitools.client.model.WorkersKvNamespaceReadTheMetadataForAKey200Response;
import org.openapitools.client.model.WorkersKvNamespaceReadTheMetadataForAKey4XXResponse;
import org.openapitools.client.model.WorkersKvNamespaceRenameANamespace4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersKvNamespaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersKvNamespaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersKvNamespaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workersKvNamespaceCreateANamespace
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceCreateANamespaceCall(String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersKvCreateRenameNamespaceBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceCreateANamespaceValidateBeforeCall(String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceCreateANamespace(Async)");
        }

        // verify the required parameter 'workersKvCreateRenameNamespaceBody' is set
        if (workersKvCreateRenameNamespaceBody == null) {
            throw new ApiException("Missing the required parameter 'workersKvCreateRenameNamespaceBody' when calling workersKvNamespaceCreateANamespace(Async)");
        }

        return workersKvNamespaceCreateANamespaceCall(accountId, workersKvCreateRenameNamespaceBody, _callback);

    }

    /**
     * Create a Namespace
     * Creates a namespace under the given title. A &#x60;400&#x60; is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @return WorkersKvNamespaceCreateANamespace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvNamespaceCreateANamespace200Response workersKvNamespaceCreateANamespace(String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody) throws ApiException {
        ApiResponse<WorkersKvNamespaceCreateANamespace200Response> localVarResp = workersKvNamespaceCreateANamespaceWithHttpInfo(accountId, workersKvCreateRenameNamespaceBody);
        return localVarResp.getData();
    }

    /**
     * Create a Namespace
     * Creates a namespace under the given title. A &#x60;400&#x60; is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @return ApiResponse&lt;WorkersKvNamespaceCreateANamespace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvNamespaceCreateANamespace200Response> workersKvNamespaceCreateANamespaceWithHttpInfo(String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceCreateANamespaceValidateBeforeCall(accountId, workersKvCreateRenameNamespaceBody, null);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceCreateANamespace200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Namespace (asynchronously)
     * Creates a namespace under the given title. A &#x60;400&#x60; is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceCreateANamespaceAsync(String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback<WorkersKvNamespaceCreateANamespace200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceCreateANamespaceValidateBeforeCall(accountId, workersKvCreateRenameNamespaceBody, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceCreateANamespace200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceDeleteKeyValuePair
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceDeleteKeyValuePairCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}"
            .replace("{" + "key_name" + "}", localVarApiClient.escapeString(keyName.toString()))
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }

        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }

        return workersKvNamespaceDeleteKeyValuePairCall(keyName, namespaceId, accountId, _callback);

    }

    /**
     * Delete key-value pair
     * Remove a KV pair from the namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceDeleteKeyValuePair(String keyName, String namespaceId, String accountId) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceDeleteKeyValuePairWithHttpInfo(keyName, namespaceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete key-value pair
     * Remove a KV pair from the namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceDeleteKeyValuePairWithHttpInfo(String keyName, String namespaceId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(keyName, namespaceId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete key-value pair (asynchronously)
     * Remove a KV pair from the namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceDeleteKeyValuePairAsync(String keyName, String namespaceId, String accountId, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(keyName, namespaceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceDeleteMultipleKeyValuePairs
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceDeleteMultipleKeyValuePairsCall(String namespaceId, String accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk"
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(String namespaceId, String accountId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }

        return workersKvNamespaceDeleteMultipleKeyValuePairsCall(namespaceId, accountId, requestBody, _callback);

    }

    /**
     * Delete multiple key-value pairs
     * Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceDeleteMultipleKeyValuePairs(String namespaceId, String accountId, List<String> requestBody) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceDeleteMultipleKeyValuePairsWithHttpInfo(namespaceId, accountId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Delete multiple key-value pairs
     * Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceDeleteMultipleKeyValuePairsWithHttpInfo(String namespaceId, String accountId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(namespaceId, accountId, requestBody, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete multiple key-value pairs (asynchronously)
     * Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceDeleteMultipleKeyValuePairsAsync(String namespaceId, String accountId, List<String> requestBody, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(namespaceId, accountId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceListANamespaceSKeys
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param limit  (optional, default to 1000)
     * @param prefix  (optional)
     * @param cursor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List a Namespace&#39;s Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List a Namespace&#39;s Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceListANamespaceSKeysCall(String namespaceId, String accountId, BigDecimal limit, String prefix, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/keys"
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceListANamespaceSKeysValidateBeforeCall(String namespaceId, String accountId, BigDecimal limit, String prefix, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceListANamespaceSKeys(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceListANamespaceSKeys(Async)");
        }

        return workersKvNamespaceListANamespaceSKeysCall(namespaceId, accountId, limit, prefix, cursor, _callback);

    }

    /**
     * List a Namespace&#39;s Keys
     * Lists a namespace&#39;s keys.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param limit  (optional, default to 1000)
     * @param prefix  (optional)
     * @param cursor  (optional)
     * @return WorkersKvNamespaceListANamespaceSKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List a Namespace&#39;s Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List a Namespace&#39;s Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvNamespaceListANamespaceSKeys200Response workersKvNamespaceListANamespaceSKeys(String namespaceId, String accountId, BigDecimal limit, String prefix, String cursor) throws ApiException {
        ApiResponse<WorkersKvNamespaceListANamespaceSKeys200Response> localVarResp = workersKvNamespaceListANamespaceSKeysWithHttpInfo(namespaceId, accountId, limit, prefix, cursor);
        return localVarResp.getData();
    }

    /**
     * List a Namespace&#39;s Keys
     * Lists a namespace&#39;s keys.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param limit  (optional, default to 1000)
     * @param prefix  (optional)
     * @param cursor  (optional)
     * @return ApiResponse&lt;WorkersKvNamespaceListANamespaceSKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List a Namespace&#39;s Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List a Namespace&#39;s Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvNamespaceListANamespaceSKeys200Response> workersKvNamespaceListANamespaceSKeysWithHttpInfo(String namespaceId, String accountId, BigDecimal limit, String prefix, String cursor) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceListANamespaceSKeysValidateBeforeCall(namespaceId, accountId, limit, prefix, cursor, null);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceListANamespaceSKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a Namespace&#39;s Keys (asynchronously)
     * Lists a namespace&#39;s keys.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param limit  (optional, default to 1000)
     * @param prefix  (optional)
     * @param cursor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List a Namespace&#39;s Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List a Namespace&#39;s Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceListANamespaceSKeysAsync(String namespaceId, String accountId, BigDecimal limit, String prefix, String cursor, final ApiCallback<WorkersKvNamespaceListANamespaceSKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceListANamespaceSKeysValidateBeforeCall(namespaceId, accountId, limit, prefix, cursor, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceListANamespaceSKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceListNamespaces
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Namespaces response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Namespaces response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceListNamespacesCall(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceListNamespacesValidateBeforeCall(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceListNamespaces(Async)");
        }

        return workersKvNamespaceListNamespacesCall(accountId, page, perPage, order, direction, _callback);

    }

    /**
     * List Namespaces
     * Returns the namespaces owned by an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @return WorkersKvNamespaceListNamespaces200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Namespaces response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Namespaces response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvNamespaceListNamespaces200Response workersKvNamespaceListNamespaces(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<WorkersKvNamespaceListNamespaces200Response> localVarResp = workersKvNamespaceListNamespacesWithHttpInfo(accountId, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List Namespaces
     * Returns the namespaces owned by an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;WorkersKvNamespaceListNamespaces200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Namespaces response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Namespaces response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvNamespaceListNamespaces200Response> workersKvNamespaceListNamespacesWithHttpInfo(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceListNamespacesValidateBeforeCall(accountId, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceListNamespaces200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Namespaces (asynchronously)
     * Returns the namespaces owned by an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Namespaces response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Namespaces response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceListNamespacesAsync(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<WorkersKvNamespaceListNamespaces200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceListNamespacesValidateBeforeCall(accountId, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceListNamespaces200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceReadKeyValuePair
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceReadKeyValuePairCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}"
            .replace("{" + "key_name" + "}", localVarApiClient.escapeString(keyName.toString()))
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceReadKeyValuePairValidateBeforeCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }

        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }

        return workersKvNamespaceReadKeyValuePairCall(keyName, namespaceId, accountId, _callback);

    }

    /**
     * Read key-value pair
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the &#x60;expiration&#x60; response header.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public String workersKvNamespaceReadKeyValuePair(String keyName, String namespaceId, String accountId) throws ApiException {
        ApiResponse<String> localVarResp = workersKvNamespaceReadKeyValuePairWithHttpInfo(keyName, namespaceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Read key-value pair
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the &#x60;expiration&#x60; response header.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> workersKvNamespaceReadKeyValuePairWithHttpInfo(String keyName, String namespaceId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceReadKeyValuePairValidateBeforeCall(keyName, namespaceId, accountId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read key-value pair (asynchronously)
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the &#x60;expiration&#x60; response header.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read key-value pair response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read key-value pair response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceReadKeyValuePairAsync(String keyName, String namespaceId, String accountId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceReadKeyValuePairValidateBeforeCall(keyName, namespaceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceReadTheMetadataForAKey
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read the metadata for a key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read the metadata for a key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceReadTheMetadataForAKeyCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/metadata/{key_name}"
            .replace("{" + "key_name" + "}", localVarApiClient.escapeString(keyName.toString()))
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(String keyName, String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }

        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }

        return workersKvNamespaceReadTheMetadataForAKeyCall(keyName, namespaceId, accountId, _callback);

    }

    /**
     * Read the metadata for a key
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return WorkersKvNamespaceReadTheMetadataForAKey200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read the metadata for a key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read the metadata for a key response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvNamespaceReadTheMetadataForAKey200Response workersKvNamespaceReadTheMetadataForAKey(String keyName, String namespaceId, String accountId) throws ApiException {
        ApiResponse<WorkersKvNamespaceReadTheMetadataForAKey200Response> localVarResp = workersKvNamespaceReadTheMetadataForAKeyWithHttpInfo(keyName, namespaceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Read the metadata for a key
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersKvNamespaceReadTheMetadataForAKey200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read the metadata for a key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read the metadata for a key response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvNamespaceReadTheMetadataForAKey200Response> workersKvNamespaceReadTheMetadataForAKeyWithHttpInfo(String keyName, String namespaceId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(keyName, namespaceId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceReadTheMetadataForAKey200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the metadata for a key (asynchronously)
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read the metadata for a key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read the metadata for a key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceReadTheMetadataForAKeyAsync(String keyName, String namespaceId, String accountId, final ApiCallback<WorkersKvNamespaceReadTheMetadataForAKey200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(keyName, namespaceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvNamespaceReadTheMetadataForAKey200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceRemoveANamespace
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceRemoveANamespaceCall(String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}"
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceRemoveANamespaceValidateBeforeCall(String namespaceId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceRemoveANamespace(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceRemoveANamespace(Async)");
        }

        return workersKvNamespaceRemoveANamespaceCall(namespaceId, accountId, _callback);

    }

    /**
     * Remove a Namespace
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceRemoveANamespace(String namespaceId, String accountId) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceRemoveANamespaceWithHttpInfo(namespaceId, accountId);
        return localVarResp.getData();
    }

    /**
     * Remove a Namespace
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceRemoveANamespaceWithHttpInfo(String namespaceId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceRemoveANamespaceValidateBeforeCall(namespaceId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a Namespace (asynchronously)
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceRemoveANamespaceAsync(String namespaceId, String accountId, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceRemoveANamespaceValidateBeforeCall(namespaceId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceRenameANamespace
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rename a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rename a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceRenameANamespaceCall(String namespaceId, String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersKvCreateRenameNamespaceBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}"
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceRenameANamespaceValidateBeforeCall(String namespaceId, String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceRenameANamespace(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceRenameANamespace(Async)");
        }

        // verify the required parameter 'workersKvCreateRenameNamespaceBody' is set
        if (workersKvCreateRenameNamespaceBody == null) {
            throw new ApiException("Missing the required parameter 'workersKvCreateRenameNamespaceBody' when calling workersKvNamespaceRenameANamespace(Async)");
        }

        return workersKvNamespaceRenameANamespaceCall(namespaceId, accountId, workersKvCreateRenameNamespaceBody, _callback);

    }

    /**
     * Rename a Namespace
     * Modifies a namespace&#39;s title.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rename a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rename a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceRenameANamespace(String namespaceId, String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceRenameANamespaceWithHttpInfo(namespaceId, accountId, workersKvCreateRenameNamespaceBody);
        return localVarResp.getData();
    }

    /**
     * Rename a Namespace
     * Modifies a namespace&#39;s title.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rename a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rename a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceRenameANamespaceWithHttpInfo(String namespaceId, String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceRenameANamespaceValidateBeforeCall(namespaceId, accountId, workersKvCreateRenameNamespaceBody, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename a Namespace (asynchronously)
     * Modifies a namespace&#39;s title.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvCreateRenameNamespaceBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rename a Namespace response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rename a Namespace response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceRenameANamespaceAsync(String namespaceId, String accountId, WorkersKvCreateRenameNamespaceBody workersKvCreateRenameNamespaceBody, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceRenameANamespaceValidateBeforeCall(namespaceId, accountId, workersKvCreateRenameNamespaceBody, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceWriteKeyValuePairWithMetadata
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param metadata Arbitrary JSON to be associated with a key/value pair. (required)
     * @param value A byte sequence to be stored, up to 25 MiB in length. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write key-value pair with metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write key-value pair with metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceWriteKeyValuePairWithMetadataCall(String keyName, String namespaceId, String accountId, String metadata, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}"
            .replace("{" + "key_name" + "}", localVarApiClient.escapeString(keyName.toString()))
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(String keyName, String namespaceId, String accountId, String metadata, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }

        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }

        return workersKvNamespaceWriteKeyValuePairWithMetadataCall(keyName, namespaceId, accountId, metadata, value, _callback);

    }

    /**
     * Write key-value pair with metadata
     * Write a value identified by a key. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. Body should be the value to be stored along with JSON metadata to be associated with the key/value pair. Existing values, expirations, and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param metadata Arbitrary JSON to be associated with a key/value pair. (required)
     * @param value A byte sequence to be stored, up to 25 MiB in length. (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write key-value pair with metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write key-value pair with metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceWriteKeyValuePairWithMetadata(String keyName, String namespaceId, String accountId, String metadata, String value) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceWriteKeyValuePairWithMetadataWithHttpInfo(keyName, namespaceId, accountId, metadata, value);
        return localVarResp.getData();
    }

    /**
     * Write key-value pair with metadata
     * Write a value identified by a key. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. Body should be the value to be stored along with JSON metadata to be associated with the key/value pair. Existing values, expirations, and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param metadata Arbitrary JSON to be associated with a key/value pair. (required)
     * @param value A byte sequence to be stored, up to 25 MiB in length. (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write key-value pair with metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write key-value pair with metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceWriteKeyValuePairWithMetadataWithHttpInfo(String keyName, String namespaceId, String accountId, String metadata, String value) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(keyName, namespaceId, accountId, metadata, value, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write key-value pair with metadata (asynchronously)
     * Write a value identified by a key. Use URL-encoding to use special characters (for example, &#x60;:&#x60;, &#x60;!&#x60;, &#x60;%&#x60;) in the key name. Body should be the value to be stored along with JSON metadata to be associated with the key/value pair. Existing values, expirations, and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param keyName  (required)
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param metadata Arbitrary JSON to be associated with a key/value pair. (required)
     * @param value A byte sequence to be stored, up to 25 MiB in length. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write key-value pair with metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write key-value pair with metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceWriteKeyValuePairWithMetadataAsync(String keyName, String namespaceId, String accountId, String metadata, String value, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(keyName, namespaceId, accountId, metadata, value, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersKvNamespaceWriteMultipleKeyValuePairs
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvBulkWriteInner  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceWriteMultipleKeyValuePairsCall(String namespaceId, String accountId, List<WorkersKvBulkWriteInner> workersKvBulkWriteInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersKvBulkWriteInner;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk"
            .replace("{" + "namespace_id" + "}", localVarApiClient.escapeString(namespaceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(String namespaceId, String accountId, List<WorkersKvBulkWriteInner> workersKvBulkWriteInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }

        // verify the required parameter 'workersKvBulkWriteInner' is set
        if (workersKvBulkWriteInner == null) {
            throw new ApiException("Missing the required parameter 'workersKvBulkWriteInner' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }

        return workersKvNamespaceWriteMultipleKeyValuePairsCall(namespaceId, accountId, workersKvBulkWriteInner, _callback);

    }

    /**
     * Write multiple key-value pairs
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvBulkWriteInner  (required)
     * @return WorkersKvApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersKvApiResponseSingle workersKvNamespaceWriteMultipleKeyValuePairs(String namespaceId, String accountId, List<WorkersKvBulkWriteInner> workersKvBulkWriteInner) throws ApiException {
        ApiResponse<WorkersKvApiResponseSingle> localVarResp = workersKvNamespaceWriteMultipleKeyValuePairsWithHttpInfo(namespaceId, accountId, workersKvBulkWriteInner);
        return localVarResp.getData();
    }

    /**
     * Write multiple key-value pairs
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvBulkWriteInner  (required)
     * @return ApiResponse&lt;WorkersKvApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersKvApiResponseSingle> workersKvNamespaceWriteMultipleKeyValuePairsWithHttpInfo(String namespaceId, String accountId, List<WorkersKvBulkWriteInner> workersKvBulkWriteInner) throws ApiException {
        okhttp3.Call localVarCall = workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(namespaceId, accountId, workersKvBulkWriteInner, null);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write multiple key-value pairs (asynchronously)
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param namespaceId  (required)
     * @param accountId  (required)
     * @param workersKvBulkWriteInner  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Write multiple key-value pairs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Write multiple key-value pairs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersKvNamespaceWriteMultipleKeyValuePairsAsync(String namespaceId, String accountId, List<WorkersKvBulkWriteInner> workersKvBulkWriteInner, final ApiCallback<WorkersKvApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(namespaceId, accountId, workersKvBulkWriteInner, _callback);
        Type localVarReturnType = new TypeToken<WorkersKvApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
