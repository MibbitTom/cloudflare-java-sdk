/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SecondaryDnsDisableTransferResponse;
import org.openapitools.client.model.SecondaryDnsEnableTransferResponse;
import org.openapitools.client.model.SecondaryDnsIdResponse;
import org.openapitools.client.model.SecondaryDnsPrimaryZoneDisableOutgoingZoneTransfers4XXResponse;
import org.openapitools.client.model.SecondaryDnsPrimaryZoneEnableOutgoingZoneTransfers4XXResponse;
import org.openapitools.client.model.SecondaryDnsPrimaryZoneForceDnsNotify4XXResponse;
import org.openapitools.client.model.SecondaryDnsPrimaryZonePrimaryZoneConfigurationDetails4XXResponse;
import org.openapitools.client.model.SecondaryDnsSchemasForceResponse;
import org.openapitools.client.model.SecondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration4XXResponse;
import org.openapitools.client.model.SecondaryDnsSingleRequestOutgoing;
import org.openapitools.client.model.SecondaryDnsSingleResponseOutgoing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecondaryDnsPrimaryZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecondaryDnsPrimaryZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecondaryDnsPrimaryZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationCall(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secondaryDnsSingleRequestOutgoing;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(Async)");
        }

        // verify the required parameter 'secondaryDnsSingleRequestOutgoing' is set
        if (secondaryDnsSingleRequestOutgoing == null) {
            throw new ApiException("Missing the required parameter 'secondaryDnsSingleRequestOutgoing' when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(Async)");
        }

        return secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationCall(zoneId, secondaryDnsSingleRequestOutgoing, _callback);

    }

    /**
     * Create Primary Zone Configuration
     * Create primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @return SecondaryDnsSingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponseOutgoing secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponseOutgoing> localVarResp = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationWithHttpInfo(zoneId, secondaryDnsSingleRequestOutgoing);
        return localVarResp.getData();
    }

    /**
     * Create Primary Zone Configuration
     * Create primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponseOutgoing> secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationWithHttpInfo(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(zoneId, secondaryDnsSingleRequestOutgoing, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Primary Zone Configuration (asynchronously)
     * Create primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationAsync(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback<SecondaryDnsSingleResponseOutgoing> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(zoneId, secondaryDnsSingleRequestOutgoing, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(Async)");
        }

        return secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationCall(zoneId, _callback);

    }

    /**
     * Delete Primary Zone Configuration
     * Delete primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @return SecondaryDnsIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsIdResponse secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsIdResponse> localVarResp = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Primary Zone Configuration
     * Delete primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsIdResponse> secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Primary Zone Configuration (asynchronously)
     * Delete primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationAsync(Object zoneId, final ApiCallback<SecondaryDnsIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Disable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing/disable"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(Async)");
        }

        return secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersCall(zoneId, _callback);

    }

    /**
     * Disable Outgoing Zone Transfers
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @return SecondaryDnsDisableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Disable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsDisableTransferResponse secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsDisableTransferResponse> localVarResp = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Disable Outgoing Zone Transfers
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsDisableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Disable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsDisableTransferResponse> secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsDisableTransferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Outgoing Zone Transfers (asynchronously)
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Disable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersAsync(Object zoneId, final ApiCallback<SecondaryDnsDisableTransferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsDisableTransferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing/enable"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(Async)");
        }

        return secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersCall(zoneId, _callback);

    }

    /**
     * Enable Outgoing Zone Transfers
     * Enable outgoing zone transfers for primary zone.
     * @param zoneId  (required)
     * @return SecondaryDnsEnableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsEnableTransferResponse secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsEnableTransferResponse> localVarResp = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Enable Outgoing Zone Transfers
     * Enable outgoing zone transfers for primary zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsEnableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsEnableTransferResponse> secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsEnableTransferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Outgoing Zone Transfers (asynchronously)
     * Enable outgoing zone transfers for primary zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Outgoing Zone Transfers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable Outgoing Zone Transfers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersAsync(Object zoneId, final ApiCallback<SecondaryDnsEnableTransferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsEnableTransferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneForceDnsNotify
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Force DNS NOTIFY response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Force DNS NOTIFY response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneForceDnsNotifyCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing/force_notify"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneForceDnsNotify(Async)");
        }

        return secondaryDnsPrimaryZoneForceDnsNotifyCall(zoneId, _callback);

    }

    /**
     * Force DNS NOTIFY
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @return SecondaryDnsSchemasForceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Force DNS NOTIFY response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Force DNS NOTIFY response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSchemasForceResponse secondaryDnsPrimaryZoneForceDnsNotify(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsSchemasForceResponse> localVarResp = secondaryDnsPrimaryZoneForceDnsNotifyWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Force DNS NOTIFY
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsSchemasForceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Force DNS NOTIFY response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Force DNS NOTIFY response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSchemasForceResponse> secondaryDnsPrimaryZoneForceDnsNotifyWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSchemasForceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force DNS NOTIFY (asynchronously)
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Force DNS NOTIFY response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Force DNS NOTIFY response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneForceDnsNotifyAsync(Object zoneId, final ApiCallback<SecondaryDnsSchemasForceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSchemasForceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Outgoing Zone Transfer Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Outgoing Zone Transfer Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing/status"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(Async)");
        }

        return secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusCall(zoneId, _callback);

    }

    /**
     * Get Outgoing Zone Transfer Status
     * Get primary zone transfer status.
     * @param zoneId  (required)
     * @return SecondaryDnsEnableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Outgoing Zone Transfer Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Outgoing Zone Transfer Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsEnableTransferResponse secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsEnableTransferResponse> localVarResp = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Outgoing Zone Transfer Status
     * Get primary zone transfer status.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsEnableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Outgoing Zone Transfer Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Outgoing Zone Transfer Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsEnableTransferResponse> secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsEnableTransferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Outgoing Zone Transfer Status (asynchronously)
     * Get primary zone transfer status.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Outgoing Zone Transfer Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Outgoing Zone Transfer Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusAsync(Object zoneId, final ApiCallback<SecondaryDnsEnableTransferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsEnableTransferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Primary Zone Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Primary Zone Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(Object zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(Async)");
        }

        return secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsCall(zoneId, _callback);

    }

    /**
     * Primary Zone Configuration Details
     * Get primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @return SecondaryDnsSingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Primary Zone Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Primary Zone Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponseOutgoing secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(Object zoneId) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponseOutgoing> localVarResp = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Primary Zone Configuration Details
     * Get primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Primary Zone Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Primary Zone Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponseOutgoing> secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsWithHttpInfo(Object zoneId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Primary Zone Configuration Details (asynchronously)
     * Get primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Primary Zone Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Primary Zone Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsAsync(Object zoneId, final ApiCallback<SecondaryDnsSingleResponseOutgoing> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationCall(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secondaryDnsSingleRequestOutgoing;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/secondary_dns/outgoing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(Async)");
        }

        // verify the required parameter 'secondaryDnsSingleRequestOutgoing' is set
        if (secondaryDnsSingleRequestOutgoing == null) {
            throw new ApiException("Missing the required parameter 'secondaryDnsSingleRequestOutgoing' when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(Async)");
        }

        return secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationCall(zoneId, secondaryDnsSingleRequestOutgoing, _callback);

    }

    /**
     * Update Primary Zone Configuration
     * Update primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @return SecondaryDnsSingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponseOutgoing secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponseOutgoing> localVarResp = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationWithHttpInfo(zoneId, secondaryDnsSingleRequestOutgoing);
        return localVarResp.getData();
    }

    /**
     * Update Primary Zone Configuration
     * Update primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponseOutgoing> secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationWithHttpInfo(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(zoneId, secondaryDnsSingleRequestOutgoing, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Primary Zone Configuration (asynchronously)
     * Update primary zone configuration for outgoing zone transfers.
     * @param zoneId  (required)
     * @param secondaryDnsSingleRequestOutgoing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Primary Zone Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Primary Zone Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationAsync(Object zoneId, SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing, final ApiCallback<SecondaryDnsSingleResponseOutgoing> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(zoneId, secondaryDnsSingleRequestOutgoing, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponseOutgoing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
