/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OneOf;
import org.openapitools.client.model.WorkersAiPostRunCfBaaiBgeBaseEnV15400Response;
import org.openapitools.client.model.WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersAiTextGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersAiTextGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersAiTextGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workersAiPostRunCfDeepseekAiDeepseekMath7bInstruct
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfDeepseekAiDeepseekMath7bInstructCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/deepseek-ai/deepseek-math-7b-instruct"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfDeepseekAiDeepseekMath7bInstructValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfDeepseekAiDeepseekMath7bInstruct(Async)");
        }

        return workersAiPostRunCfDeepseekAiDeepseekMath7bInstructCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/deepseek-ai/deepseek-math-7b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfDeepseekAiDeepseekMath7bInstruct(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfDeepseekAiDeepseekMath7bInstructWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/deepseek-ai/deepseek-math-7b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfDeepseekAiDeepseekMath7bInstructWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfDeepseekAiDeepseekMath7bInstructValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/deepseek-ai/deepseek-math-7b-instruct model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfDeepseekAiDeepseekMath7bInstructAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfDeepseekAiDeepseekMath7bInstructValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfDefogSqlcoder7b2
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfDefogSqlcoder7b2Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/defog/sqlcoder-7b-2"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfDefogSqlcoder7b2ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfDefogSqlcoder7b2(Async)");
        }

        return workersAiPostRunCfDefogSqlcoder7b2Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/defog/sqlcoder-7b-2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfDefogSqlcoder7b2(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfDefogSqlcoder7b2WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/defog/sqlcoder-7b-2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfDefogSqlcoder7b2WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfDefogSqlcoder7b2ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/defog/sqlcoder-7b-2 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfDefogSqlcoder7b2Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfDefogSqlcoder7b2ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfGoogleGemma2bItLora
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfGoogleGemma2bItLoraCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/google/gemma-2b-it-lora"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfGoogleGemma2bItLoraValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfGoogleGemma2bItLora(Async)");
        }

        return workersAiPostRunCfGoogleGemma2bItLoraCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/google/gemma-2b-it-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfGoogleGemma2bItLora(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfGoogleGemma2bItLoraWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/google/gemma-2b-it-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfGoogleGemma2bItLoraWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfGoogleGemma2bItLoraValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/google/gemma-2b-it-lora model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfGoogleGemma2bItLoraAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfGoogleGemma2bItLoraValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfGoogleGemma7bItLora
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfGoogleGemma7bItLoraCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/google/gemma-7b-it-lora"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfGoogleGemma7bItLoraValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfGoogleGemma7bItLora(Async)");
        }

        return workersAiPostRunCfGoogleGemma7bItLoraCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/google/gemma-7b-it-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfGoogleGemma7bItLora(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfGoogleGemma7bItLoraWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/google/gemma-7b-it-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfGoogleGemma7bItLoraWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfGoogleGemma7bItLoraValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/google/gemma-7b-it-lora model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfGoogleGemma7bItLoraAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfGoogleGemma7bItLoraValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMetaLlama27bChatFp16
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama27bChatFp16Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/meta/llama-2-7b-chat-fp16"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMetaLlama27bChatFp16ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMetaLlama27bChatFp16(Async)");
        }

        return workersAiPostRunCfMetaLlama27bChatFp16Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-fp16 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMetaLlama27bChatFp16(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMetaLlama27bChatFp16WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-fp16 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMetaLlama27bChatFp16WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama27bChatFp16ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-fp16 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama27bChatFp16Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama27bChatFp16ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMetaLlama27bChatInt8
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama27bChatInt8Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/meta/llama-2-7b-chat-int8"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMetaLlama27bChatInt8ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMetaLlama27bChatInt8(Async)");
        }

        return workersAiPostRunCfMetaLlama27bChatInt8Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-int8 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMetaLlama27bChatInt8(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMetaLlama27bChatInt8WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-int8 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMetaLlama27bChatInt8WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama27bChatInt8ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/meta/llama-2-7b-chat-int8 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama27bChatInt8Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama27bChatInt8ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMetaLlama38bInstruct
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama38bInstructCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/meta/llama-3-8b-instruct"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMetaLlama38bInstructValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMetaLlama38bInstruct(Async)");
        }

        return workersAiPostRunCfMetaLlama38bInstructCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/meta/llama-3-8b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMetaLlama38bInstruct(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMetaLlama38bInstructWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/meta/llama-3-8b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMetaLlama38bInstructWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama38bInstructValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/meta/llama-3-8b-instruct model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlama38bInstructAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlama38bInstructValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMetaLlamaLlama27bChatHfLora
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlamaLlama27bChatHfLoraCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/meta-llama/llama-2-7b-chat-hf-lora"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMetaLlamaLlama27bChatHfLoraValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMetaLlamaLlama27bChatHfLora(Async)");
        }

        return workersAiPostRunCfMetaLlamaLlama27bChatHfLoraCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/meta-llama/llama-2-7b-chat-hf-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMetaLlamaLlama27bChatHfLora(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMetaLlamaLlama27bChatHfLoraWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/meta-llama/llama-2-7b-chat-hf-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMetaLlamaLlama27bChatHfLoraWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlamaLlama27bChatHfLoraValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/meta-llama/llama-2-7b-chat-hf-lora model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMetaLlamaLlama27bChatHfLoraAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMetaLlamaLlama27bChatHfLoraValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMicrosoftPhi2
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMicrosoftPhi2Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/microsoft/phi-2"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMicrosoftPhi2ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMicrosoftPhi2(Async)");
        }

        return workersAiPostRunCfMicrosoftPhi2Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/microsoft/phi-2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMicrosoftPhi2(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMicrosoftPhi2WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/microsoft/phi-2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMicrosoftPhi2WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMicrosoftPhi2ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/microsoft/phi-2 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMicrosoftPhi2Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMicrosoftPhi2ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMistralMistral7bInstructV01
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/mistral/mistral-7b-instruct-v0.1"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMistralMistral7bInstructV01(Async)");
        }

        return workersAiPostRunCfMistralMistral7bInstructV01Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMistralMistral7bInstructV01(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMistralMistral7bInstructV01WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMistralMistral7bInstructV01WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV01ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV01ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMistralMistral7bInstructV01Vllm
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01VllmCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/mistral/mistral-7b-instruct-v0.1-vllm"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01VllmValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMistralMistral7bInstructV01Vllm(Async)");
        }

        return workersAiPostRunCfMistralMistral7bInstructV01VllmCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1-vllm model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMistralMistral7bInstructV01Vllm(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMistralMistral7bInstructV01VllmWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1-vllm model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMistralMistral7bInstructV01VllmWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV01VllmValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.1-vllm model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV01VllmAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV01VllmValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMistralMistral7bInstructV02Lora
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV02LoraCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/mistral/mistral-7b-instruct-v0.2-lora"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV02LoraValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMistralMistral7bInstructV02Lora(Async)");
        }

        return workersAiPostRunCfMistralMistral7bInstructV02LoraCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.2-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMistralMistral7bInstructV02Lora(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMistralMistral7bInstructV02LoraWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.2-lora model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMistralMistral7bInstructV02LoraWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV02LoraValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/mistral/mistral-7b-instruct-v0.2-lora model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMistral7bInstructV02LoraAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMistralMistral7bInstructV02LoraValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfMistralMixtral8x7bInstructV01Awq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMixtral8x7bInstructV01AwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/mistral/mixtral-8x7b-instruct-v0.1-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfMistralMixtral8x7bInstructV01AwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfMistralMixtral8x7bInstructV01Awq(Async)");
        }

        return workersAiPostRunCfMistralMixtral8x7bInstructV01AwqCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/mistral/mixtral-8x7b-instruct-v0.1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfMistralMixtral8x7bInstructV01Awq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfMistralMixtral8x7bInstructV01AwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/mistral/mixtral-8x7b-instruct-v0.1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfMistralMixtral8x7bInstructV01AwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfMistralMixtral8x7bInstructV01AwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/mistral/mixtral-8x7b-instruct-v0.1-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfMistralMixtral8x7bInstructV01AwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfMistralMixtral8x7bInstructV01AwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfOpenchatOpenchat350106
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfOpenchatOpenchat350106Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/openchat/openchat-3.5-0106"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfOpenchatOpenchat350106ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfOpenchatOpenchat350106(Async)");
        }

        return workersAiPostRunCfOpenchatOpenchat350106Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/openchat/openchat-3.5-0106 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfOpenchatOpenchat350106(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfOpenchatOpenchat350106WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/openchat/openchat-3.5-0106 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfOpenchatOpenchat350106WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfOpenchatOpenchat350106ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/openchat/openchat-3.5-0106 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfOpenchatOpenchat350106Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfOpenchatOpenchat350106ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfQwenQwen1505bChat
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1505bChatCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-0.5b-chat"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfQwenQwen1505bChatValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfQwenQwen1505bChat(Async)");
        }

        return workersAiPostRunCfQwenQwen1505bChatCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/qwen/qwen1.5-0.5b-chat model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfQwenQwen1505bChat(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfQwenQwen1505bChatWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/qwen/qwen1.5-0.5b-chat model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfQwenQwen1505bChatWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1505bChatValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/qwen/qwen1.5-0.5b-chat model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1505bChatAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1505bChatValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfQwenQwen1514bChatAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1514bChatAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-14b-chat-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfQwenQwen1514bChatAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfQwenQwen1514bChatAwq(Async)");
        }

        return workersAiPostRunCfQwenQwen1514bChatAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/qwen/qwen1.5-14b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfQwenQwen1514bChatAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfQwenQwen1514bChatAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/qwen/qwen1.5-14b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfQwenQwen1514bChatAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1514bChatAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/qwen/qwen1.5-14b-chat-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1514bChatAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1514bChatAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfQwenQwen1518bChat
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1518bChatCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-1.8b-chat"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfQwenQwen1518bChatValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfQwenQwen1518bChat(Async)");
        }

        return workersAiPostRunCfQwenQwen1518bChatCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/qwen/qwen1.5-1.8b-chat model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfQwenQwen1518bChat(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfQwenQwen1518bChatWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/qwen/qwen1.5-1.8b-chat model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfQwenQwen1518bChatWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1518bChatValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/qwen/qwen1.5-1.8b-chat model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen1518bChatAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen1518bChatValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfQwenQwen157bChatAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen157bChatAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-7b-chat-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfQwenQwen157bChatAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfQwenQwen157bChatAwq(Async)");
        }

        return workersAiPostRunCfQwenQwen157bChatAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/qwen/qwen1.5-7b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfQwenQwen157bChatAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfQwenQwen157bChatAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/qwen/qwen1.5-7b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfQwenQwen157bChatAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen157bChatAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/qwen/qwen1.5-7b-chat-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfQwenQwen157bChatAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfQwenQwen157bChatAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfSvenTest
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfSvenTestCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/sven/test"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfSvenTestValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfSvenTest(Async)");
        }

        return workersAiPostRunCfSvenTestCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/sven/test model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfSvenTest(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfSvenTestWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/sven/test model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfSvenTestWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfSvenTestValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/sven/test model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfSvenTestAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfSvenTestValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfTheblokeDiscolmGerman7bV1Awq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/thebloke/discolm-german-7b-v1-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfTheblokeDiscolmGerman7bV1Awq(Async)");
        }

        return workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/thebloke/discolm-german-7b-v1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfTheblokeDiscolmGerman7bV1Awq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/thebloke/discolm-german-7b-v1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/thebloke/discolm-german-7b-v1-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfTheblokeDiscolmGerman7bV1AwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfTiiuaeFalcon7bInstruct
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTiiuaeFalcon7bInstructCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/tiiuae/falcon-7b-instruct"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfTiiuaeFalcon7bInstructValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfTiiuaeFalcon7bInstruct(Async)");
        }

        return workersAiPostRunCfTiiuaeFalcon7bInstructCall(accountId, body, _callback);

    }

    /**
     * Execute @cf/tiiuae/falcon-7b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfTiiuaeFalcon7bInstruct(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfTiiuaeFalcon7bInstructWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/tiiuae/falcon-7b-instruct model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfTiiuaeFalcon7bInstructWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfTiiuaeFalcon7bInstructValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/tiiuae/falcon-7b-instruct model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTiiuaeFalcon7bInstructAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfTiiuaeFalcon7bInstructValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfTinyllamaTinyllama11bChatV10
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTinyllamaTinyllama11bChatV10Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/tinyllama/tinyllama-1.1b-chat-v1.0"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfTinyllamaTinyllama11bChatV10ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfTinyllamaTinyllama11bChatV10(Async)");
        }

        return workersAiPostRunCfTinyllamaTinyllama11bChatV10Call(accountId, body, _callback);

    }

    /**
     * Execute @cf/tinyllama/tinyllama-1.1b-chat-v1.0 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunCfTinyllamaTinyllama11bChatV10(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunCfTinyllamaTinyllama11bChatV10WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/tinyllama/tinyllama-1.1b-chat-v1.0 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunCfTinyllamaTinyllama11bChatV10WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfTinyllamaTinyllama11bChatV10ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/tinyllama/tinyllama-1.1b-chat-v1.0 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfTinyllamaTinyllama11bChatV10Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfTinyllamaTinyllama11bChatV10ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfGoogleGemma7bIt
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfGoogleGemma7bItCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/google/gemma-7b-it"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfGoogleGemma7bItValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfGoogleGemma7bIt(Async)");
        }

        return workersAiPostRunHfGoogleGemma7bItCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/google/gemma-7b-it model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfGoogleGemma7bIt(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfGoogleGemma7bItWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/google/gemma-7b-it model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfGoogleGemma7bItWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfGoogleGemma7bItValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/google/gemma-7b-it model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfGoogleGemma7bItAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfGoogleGemma7bItValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfMistralMistral7bInstructV02
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfMistralMistral7bInstructV02Call(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/mistral/mistral-7b-instruct-v0.2"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfMistralMistral7bInstructV02ValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfMistralMistral7bInstructV02(Async)");
        }

        return workersAiPostRunHfMistralMistral7bInstructV02Call(accountId, body, _callback);

    }

    /**
     * Execute @hf/mistral/mistral-7b-instruct-v0.2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfMistralMistral7bInstructV02(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfMistralMistral7bInstructV02WithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/mistral/mistral-7b-instruct-v0.2 model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfMistralMistral7bInstructV02WithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfMistralMistral7bInstructV02ValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/mistral/mistral-7b-instruct-v0.2 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfMistralMistral7bInstructV02Async(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfMistralMistral7bInstructV02ValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfNexusflowStarlingLm7bBeta
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfNexusflowStarlingLm7bBetaCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/nexusflow/starling-lm-7b-beta"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfNexusflowStarlingLm7bBetaValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfNexusflowStarlingLm7bBeta(Async)");
        }

        return workersAiPostRunHfNexusflowStarlingLm7bBetaCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/nexusflow/starling-lm-7b-beta model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfNexusflowStarlingLm7bBeta(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfNexusflowStarlingLm7bBetaWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/nexusflow/starling-lm-7b-beta model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfNexusflowStarlingLm7bBetaWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfNexusflowStarlingLm7bBetaValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/nexusflow/starling-lm-7b-beta model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfNexusflowStarlingLm7bBetaAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfNexusflowStarlingLm7bBetaValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfNousresearchHermes2ProMistral7b
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfNousresearchHermes2ProMistral7bCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/nousresearch/hermes-2-pro-mistral-7b"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfNousresearchHermes2ProMistral7bValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfNousresearchHermes2ProMistral7b(Async)");
        }

        return workersAiPostRunHfNousresearchHermes2ProMistral7bCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/nousresearch/hermes-2-pro-mistral-7b model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfNousresearchHermes2ProMistral7b(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfNousresearchHermes2ProMistral7bWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/nousresearch/hermes-2-pro-mistral-7b model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfNousresearchHermes2ProMistral7bWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfNousresearchHermes2ProMistral7bValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/nousresearch/hermes-2-pro-mistral-7b model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfNousresearchHermes2ProMistral7bAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfNousresearchHermes2ProMistral7bValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeCodellama7bInstructAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeCodellama7bInstructAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/codellama-7b-instruct-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeCodellama7bInstructAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeCodellama7bInstructAwq(Async)");
        }

        return workersAiPostRunHfTheblokeCodellama7bInstructAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/codellama-7b-instruct-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeCodellama7bInstructAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeCodellama7bInstructAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/codellama-7b-instruct-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeCodellama7bInstructAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeCodellama7bInstructAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/codellama-7b-instruct-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeCodellama7bInstructAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeCodellama7bInstructAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/deepseek-coder-6.7b-base-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwq(Async)");
        }

        return workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-base-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-base-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-base-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeDeepseekCoder67bBaseAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/deepseek-coder-6.7b-instruct-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwq(Async)");
        }

        return workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-instruct-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-instruct-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/deepseek-coder-6.7b-instruct-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeDeepseekCoder67bInstructAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeLlama213bChatAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeLlama213bChatAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/llama-2-13b-chat-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeLlama213bChatAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeLlama213bChatAwq(Async)");
        }

        return workersAiPostRunHfTheblokeLlama213bChatAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/llama-2-13b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeLlama213bChatAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeLlama213bChatAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/llama-2-13b-chat-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeLlama213bChatAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeLlama213bChatAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/llama-2-13b-chat-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeLlama213bChatAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeLlama213bChatAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeLlamaguard7bAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeLlamaguard7bAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/llamaguard-7b-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeLlamaguard7bAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeLlamaguard7bAwq(Async)");
        }

        return workersAiPostRunHfTheblokeLlamaguard7bAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/llamaguard-7b-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeLlamaguard7bAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeLlamaguard7bAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/llamaguard-7b-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeLlamaguard7bAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeLlamaguard7bAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/llamaguard-7b-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeLlamaguard7bAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeLlamaguard7bAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeMistral7bInstructV01Awq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeMistral7bInstructV01AwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/mistral-7b-instruct-v0.1-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeMistral7bInstructV01AwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeMistral7bInstructV01Awq(Async)");
        }

        return workersAiPostRunHfTheblokeMistral7bInstructV01AwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/mistral-7b-instruct-v0.1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeMistral7bInstructV01Awq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeMistral7bInstructV01AwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/mistral-7b-instruct-v0.1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeMistral7bInstructV01AwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeMistral7bInstructV01AwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/mistral-7b-instruct-v0.1-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeMistral7bInstructV01AwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeMistral7bInstructV01AwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeNeuralChat7bV31Awq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeNeuralChat7bV31AwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/neural-chat-7b-v3-1-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeNeuralChat7bV31AwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeNeuralChat7bV31Awq(Async)");
        }

        return workersAiPostRunHfTheblokeNeuralChat7bV31AwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/neural-chat-7b-v3-1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeNeuralChat7bV31Awq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeNeuralChat7bV31AwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/neural-chat-7b-v3-1-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeNeuralChat7bV31AwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeNeuralChat7bV31AwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/neural-chat-7b-v3-1-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeNeuralChat7bV31AwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeNeuralChat7bV31AwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeOpenchat35Awq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeOpenchat35AwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/openchat_3.5-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeOpenchat35AwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeOpenchat35Awq(Async)");
        }

        return workersAiPostRunHfTheblokeOpenchat35AwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/openchat_3.5-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeOpenchat35Awq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeOpenchat35AwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/openchat_3.5-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeOpenchat35AwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeOpenchat35AwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/openchat_3.5-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeOpenchat35AwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeOpenchat35AwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/openhermes-2.5-mistral-7b-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwq(Async)");
        }

        return workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/openhermes-2.5-mistral-7b-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/openhermes-2.5-mistral-7b-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/openhermes-2.5-mistral-7b-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeOpenhermes25Mistral7bAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunHfTheblokeZephyr7bBetaAwq
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeZephyr7bBetaAwqCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@hf/thebloke/zephyr-7b-beta-awq"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunHfTheblokeZephyr7bBetaAwqValidateBeforeCall(String accountId, OneOf body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunHfTheblokeZephyr7bBetaAwq(Async)");
        }

        return workersAiPostRunHfTheblokeZephyr7bBetaAwqCall(accountId, body, _callback);

    }

    /**
     * Execute @hf/thebloke/zephyr-7b-beta-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response workersAiPostRunHfTheblokeZephyr7bBetaAwq(String accountId, OneOf body) throws ApiException {
        ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> localVarResp = workersAiPostRunHfTheblokeZephyr7bBetaAwqWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Execute @hf/thebloke/zephyr-7b-beta-awq model.
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> workersAiPostRunHfTheblokeZephyr7bBetaAwqWithHttpInfo(String accountId, OneOf body) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeZephyr7bBetaAwqValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @hf/thebloke/zephyr-7b-beta-awq model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunHfTheblokeZephyr7bBetaAwqAsync(String accountId, OneOf body, final ApiCallback<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunHfTheblokeZephyr7bBetaAwqValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfDeepseekAiDeepseekMath7bInstruct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
