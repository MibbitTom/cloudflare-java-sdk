/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsTurnstileWidgetCreate200Response;
import org.openapitools.client.model.AccountsTurnstileWidgetCreateRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetGet200Response;
import org.openapitools.client.model.AccountsTurnstileWidgetRotateSecretRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetUpdateRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetsList200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.TurnstileApiResponseCommonFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TurnstileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TurnstileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TurnstileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsTurnstileWidgetCreate
     * @param accountId  (required)
     * @param accountsTurnstileWidgetCreateRequest  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetCreateCall(String accountId, AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsTurnstileWidgetCreateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetCreateValidateBeforeCall(String accountId, AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetCreate(Async)");
        }

        // verify the required parameter 'accountsTurnstileWidgetCreateRequest' is set
        if (accountsTurnstileWidgetCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsTurnstileWidgetCreateRequest' when calling accountsTurnstileWidgetCreate(Async)");
        }

        return accountsTurnstileWidgetCreateCall(accountId, accountsTurnstileWidgetCreateRequest, page, perPage, order, direction, _callback);

    }

    /**
     * Create a Turnstile Widget
     * Lists challenge widgets.
     * @param accountId  (required)
     * @param accountsTurnstileWidgetCreateRequest  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @return AccountsTurnstileWidgetCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetCreate200Response accountsTurnstileWidgetCreate(String accountId, AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetCreate200Response> localVarResp = accountsTurnstileWidgetCreateWithHttpInfo(accountId, accountsTurnstileWidgetCreateRequest, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * Create a Turnstile Widget
     * Lists challenge widgets.
     * @param accountId  (required)
     * @param accountsTurnstileWidgetCreateRequest  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;AccountsTurnstileWidgetCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetCreate200Response> accountsTurnstileWidgetCreateWithHttpInfo(String accountId, AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetCreateValidateBeforeCall(accountId, accountsTurnstileWidgetCreateRequest, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Turnstile Widget (asynchronously)
     * Lists challenge widgets.
     * @param accountId  (required)
     * @param accountsTurnstileWidgetCreateRequest  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetCreateAsync(String accountId, AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<AccountsTurnstileWidgetCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetCreateValidateBeforeCall(accountId, accountsTurnstileWidgetCreateRequest, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsTurnstileWidgetDelete
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetDeleteCall(String accountId, String sitekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets/{sitekey}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "sitekey" + "}", localVarApiClient.escapeString(sitekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetDeleteValidateBeforeCall(String accountId, String sitekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetDelete(Async)");
        }

        // verify the required parameter 'sitekey' is set
        if (sitekey == null) {
            throw new ApiException("Missing the required parameter 'sitekey' when calling accountsTurnstileWidgetDelete(Async)");
        }

        return accountsTurnstileWidgetDeleteCall(accountId, sitekey, _callback);

    }

    /**
     * Delete a Turnstile Widget
     * Destroy a Turnstile Widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @return AccountsTurnstileWidgetGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetGet200Response accountsTurnstileWidgetDelete(String accountId, String sitekey) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetGet200Response> localVarResp = accountsTurnstileWidgetDeleteWithHttpInfo(accountId, sitekey);
        return localVarResp.getData();
    }

    /**
     * Delete a Turnstile Widget
     * Destroy a Turnstile Widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @return ApiResponse&lt;AccountsTurnstileWidgetGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetGet200Response> accountsTurnstileWidgetDeleteWithHttpInfo(String accountId, String sitekey) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetDeleteValidateBeforeCall(accountId, sitekey, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Turnstile Widget (asynchronously)
     * Destroy a Turnstile Widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Turnstile Widget Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetDeleteAsync(String accountId, String sitekey, final ApiCallback<AccountsTurnstileWidgetGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetDeleteValidateBeforeCall(accountId, sitekey, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsTurnstileWidgetGet
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnstile Widget Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Turnstile Widget Details Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetGetCall(String accountId, String sitekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets/{sitekey}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "sitekey" + "}", localVarApiClient.escapeString(sitekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetGetValidateBeforeCall(String accountId, String sitekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetGet(Async)");
        }

        // verify the required parameter 'sitekey' is set
        if (sitekey == null) {
            throw new ApiException("Missing the required parameter 'sitekey' when calling accountsTurnstileWidgetGet(Async)");
        }

        return accountsTurnstileWidgetGetCall(accountId, sitekey, _callback);

    }

    /**
     * Turnstile Widget Details
     * Show a single challenge widget configuration.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @return AccountsTurnstileWidgetGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnstile Widget Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Turnstile Widget Details Response Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetGet200Response accountsTurnstileWidgetGet(String accountId, String sitekey) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetGet200Response> localVarResp = accountsTurnstileWidgetGetWithHttpInfo(accountId, sitekey);
        return localVarResp.getData();
    }

    /**
     * Turnstile Widget Details
     * Show a single challenge widget configuration.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @return ApiResponse&lt;AccountsTurnstileWidgetGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnstile Widget Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Turnstile Widget Details Response Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetGet200Response> accountsTurnstileWidgetGetWithHttpInfo(String accountId, String sitekey) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetGetValidateBeforeCall(accountId, sitekey, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Turnstile Widget Details (asynchronously)
     * Show a single challenge widget configuration.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Turnstile Widget Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Turnstile Widget Details Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetGetAsync(String accountId, String sitekey, final ApiCallback<AccountsTurnstileWidgetGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetGetValidateBeforeCall(accountId, sitekey, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsTurnstileWidgetRotateSecret
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetRotateSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Secret Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Secret Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetRotateSecretCall(String accountId, String sitekey, AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsTurnstileWidgetRotateSecretRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets/{sitekey}/rotate_secret"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "sitekey" + "}", localVarApiClient.escapeString(sitekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetRotateSecretValidateBeforeCall(String accountId, String sitekey, AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetRotateSecret(Async)");
        }

        // verify the required parameter 'sitekey' is set
        if (sitekey == null) {
            throw new ApiException("Missing the required parameter 'sitekey' when calling accountsTurnstileWidgetRotateSecret(Async)");
        }

        // verify the required parameter 'accountsTurnstileWidgetRotateSecretRequest' is set
        if (accountsTurnstileWidgetRotateSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsTurnstileWidgetRotateSecretRequest' when calling accountsTurnstileWidgetRotateSecret(Async)");
        }

        return accountsTurnstileWidgetRotateSecretCall(accountId, sitekey, accountsTurnstileWidgetRotateSecretRequest, _callback);

    }

    /**
     * Rotate Secret for a Turnstile Widget
     * Generate a new secret key for this widget. If &#x60;invalidate_immediately&#x60; is set to &#x60;false&#x60;, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetRotateSecretRequest  (required)
     * @return AccountsTurnstileWidgetGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Secret Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Secret Response Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetGet200Response accountsTurnstileWidgetRotateSecret(String accountId, String sitekey, AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetGet200Response> localVarResp = accountsTurnstileWidgetRotateSecretWithHttpInfo(accountId, sitekey, accountsTurnstileWidgetRotateSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Rotate Secret for a Turnstile Widget
     * Generate a new secret key for this widget. If &#x60;invalidate_immediately&#x60; is set to &#x60;false&#x60;, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetRotateSecretRequest  (required)
     * @return ApiResponse&lt;AccountsTurnstileWidgetGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Secret Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Secret Response Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetGet200Response> accountsTurnstileWidgetRotateSecretWithHttpInfo(String accountId, String sitekey, AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetRotateSecretValidateBeforeCall(accountId, sitekey, accountsTurnstileWidgetRotateSecretRequest, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate Secret for a Turnstile Widget (asynchronously)
     * Generate a new secret key for this widget. If &#x60;invalidate_immediately&#x60; is set to &#x60;false&#x60;, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetRotateSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Secret Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Secret Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetRotateSecretAsync(String accountId, String sitekey, AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest, final ApiCallback<AccountsTurnstileWidgetGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetRotateSecretValidateBeforeCall(accountId, sitekey, accountsTurnstileWidgetRotateSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsTurnstileWidgetUpdate
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetUpdateCall(String accountId, String sitekey, AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsTurnstileWidgetUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets/{sitekey}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "sitekey" + "}", localVarApiClient.escapeString(sitekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetUpdateValidateBeforeCall(String accountId, String sitekey, AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetUpdate(Async)");
        }

        // verify the required parameter 'sitekey' is set
        if (sitekey == null) {
            throw new ApiException("Missing the required parameter 'sitekey' when calling accountsTurnstileWidgetUpdate(Async)");
        }

        // verify the required parameter 'accountsTurnstileWidgetUpdateRequest' is set
        if (accountsTurnstileWidgetUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsTurnstileWidgetUpdateRequest' when calling accountsTurnstileWidgetUpdate(Async)");
        }

        return accountsTurnstileWidgetUpdateCall(accountId, sitekey, accountsTurnstileWidgetUpdateRequest, _callback);

    }

    /**
     * Update a Turnstile Widget
     * Update the configuration of a widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetUpdateRequest  (required)
     * @return AccountsTurnstileWidgetGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetGet200Response accountsTurnstileWidgetUpdate(String accountId, String sitekey, AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetGet200Response> localVarResp = accountsTurnstileWidgetUpdateWithHttpInfo(accountId, sitekey, accountsTurnstileWidgetUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Turnstile Widget
     * Update the configuration of a widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetUpdateRequest  (required)
     * @return ApiResponse&lt;AccountsTurnstileWidgetGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetGet200Response> accountsTurnstileWidgetUpdateWithHttpInfo(String accountId, String sitekey, AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetUpdateValidateBeforeCall(accountId, sitekey, accountsTurnstileWidgetUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Turnstile Widget (asynchronously)
     * Update the configuration of a widget.
     * @param accountId  (required)
     * @param sitekey  (required)
     * @param accountsTurnstileWidgetUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Turnstile Widget Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Turnstile Widget Response Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetUpdateAsync(String accountId, String sitekey, AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest, final ApiCallback<AccountsTurnstileWidgetGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetUpdateValidateBeforeCall(accountId, sitekey, accountsTurnstileWidgetUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsTurnstileWidgetsList
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Turnstile Widgets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Turnstile Widgets Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetsListCall(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/challenges/widgets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsTurnstileWidgetsListValidateBeforeCall(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsTurnstileWidgetsList(Async)");
        }

        return accountsTurnstileWidgetsListCall(accountId, page, perPage, order, direction, _callback);

    }

    /**
     * List Turnstile Widgets
     * Lists all turnstile widgets of an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @return AccountsTurnstileWidgetsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Turnstile Widgets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Turnstile Widgets Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountsTurnstileWidgetsList200Response accountsTurnstileWidgetsList(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<AccountsTurnstileWidgetsList200Response> localVarResp = accountsTurnstileWidgetsListWithHttpInfo(accountId, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List Turnstile Widgets
     * Lists all turnstile widgets of an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;AccountsTurnstileWidgetsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Turnstile Widgets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Turnstile Widgets Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsTurnstileWidgetsList200Response> accountsTurnstileWidgetsListWithHttpInfo(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = accountsTurnstileWidgetsListValidateBeforeCall(accountId, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Turnstile Widgets (asynchronously)
     * Lists all turnstile widgets of an account.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Turnstile Widgets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Turnstile Widgets Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsTurnstileWidgetsListAsync(String accountId, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<AccountsTurnstileWidgetsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsTurnstileWidgetsListValidateBeforeCall(accountId, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<AccountsTurnstileWidgetsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
