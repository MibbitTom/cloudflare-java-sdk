/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PagesNewProjectResponse;
import org.openapitools.client.model.PagesProjectCreateProject4XXResponse;
import org.openapitools.client.model.PagesProjectDeleteProject4XXResponse;
import org.openapitools.client.model.PagesProjectGetProject4XXResponse;
import org.openapitools.client.model.PagesProjectGetProjects4XXResponse;
import org.openapitools.client.model.PagesProjectResponse;
import org.openapitools.client.model.PagesProjects;
import org.openapitools.client.model.PagesProjectsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PagesProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PagesProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PagesProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pagesProjectCreateProject
     * @param accountId  (required)
     * @param pagesProjects  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectCreateProjectCall(String accountId, PagesProjects pagesProjects, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pagesProjects;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesProjectCreateProjectValidateBeforeCall(String accountId, PagesProjects pagesProjects, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesProjectCreateProject(Async)");
        }

        // verify the required parameter 'pagesProjects' is set
        if (pagesProjects == null) {
            throw new ApiException("Missing the required parameter 'pagesProjects' when calling pagesProjectCreateProject(Async)");
        }

        return pagesProjectCreateProjectCall(accountId, pagesProjects, _callback);

    }

    /**
     * Create project
     * Create a new project.
     * @param accountId  (required)
     * @param pagesProjects  (required)
     * @return PagesNewProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesNewProjectResponse pagesProjectCreateProject(String accountId, PagesProjects pagesProjects) throws ApiException {
        ApiResponse<PagesNewProjectResponse> localVarResp = pagesProjectCreateProjectWithHttpInfo(accountId, pagesProjects);
        return localVarResp.getData();
    }

    /**
     * Create project
     * Create a new project.
     * @param accountId  (required)
     * @param pagesProjects  (required)
     * @return ApiResponse&lt;PagesNewProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesNewProjectResponse> pagesProjectCreateProjectWithHttpInfo(String accountId, PagesProjects pagesProjects) throws ApiException {
        okhttp3.Call localVarCall = pagesProjectCreateProjectValidateBeforeCall(accountId, pagesProjects, null);
        Type localVarReturnType = new TypeToken<PagesNewProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project (asynchronously)
     * Create a new project.
     * @param accountId  (required)
     * @param pagesProjects  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectCreateProjectAsync(String accountId, PagesProjects pagesProjects, final ApiCallback<PagesNewProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesProjectCreateProjectValidateBeforeCall(accountId, pagesProjects, _callback);
        Type localVarReturnType = new TypeToken<PagesNewProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesProjectDeleteProject
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectDeleteProjectCall(String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}"
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesProjectDeleteProjectValidateBeforeCall(String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesProjectDeleteProject(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesProjectDeleteProject(Async)");
        }

        return pagesProjectDeleteProjectCall(projectName, accountId, _callback);

    }

    /**
     * Delete project
     * Delete a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public Object pagesProjectDeleteProject(String projectName, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = pagesProjectDeleteProjectWithHttpInfo(projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete project
     * Delete a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pagesProjectDeleteProjectWithHttpInfo(String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesProjectDeleteProjectValidateBeforeCall(projectName, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete project (asynchronously)
     * Delete a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectDeleteProjectAsync(String projectName, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesProjectDeleteProjectValidateBeforeCall(projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesProjectGetProject
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectGetProjectCall(String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}"
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesProjectGetProjectValidateBeforeCall(String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesProjectGetProject(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesProjectGetProject(Async)");
        }

        return pagesProjectGetProjectCall(projectName, accountId, _callback);

    }

    /**
     * Get project
     * Fetch a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @return PagesProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesProjectResponse pagesProjectGetProject(String projectName, String accountId) throws ApiException {
        ApiResponse<PagesProjectResponse> localVarResp = pagesProjectGetProjectWithHttpInfo(projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Get project
     * Fetch a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesProjectResponse> pagesProjectGetProjectWithHttpInfo(String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesProjectGetProjectValidateBeforeCall(projectName, accountId, null);
        Type localVarReturnType = new TypeToken<PagesProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project (asynchronously)
     * Fetch a project by name.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectGetProjectAsync(String projectName, String accountId, final ApiCallback<PagesProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesProjectGetProjectValidateBeforeCall(projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesProjectGetProjects
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get projects response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get projects response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectGetProjectsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesProjectGetProjectsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesProjectGetProjects(Async)");
        }

        return pagesProjectGetProjectsCall(accountId, _callback);

    }

    /**
     * Get projects
     * Fetch a list of all user projects.
     * @param accountId  (required)
     * @return PagesProjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get projects response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get projects response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesProjectsResponse pagesProjectGetProjects(String accountId) throws ApiException {
        ApiResponse<PagesProjectsResponse> localVarResp = pagesProjectGetProjectsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get projects
     * Fetch a list of all user projects.
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesProjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get projects response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get projects response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesProjectsResponse> pagesProjectGetProjectsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesProjectGetProjectsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<PagesProjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projects (asynchronously)
     * Fetch a list of all user projects.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get projects response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get projects response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectGetProjectsAsync(String accountId, final ApiCallback<PagesProjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesProjectGetProjectsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesProjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesProjectUpdateProject
     * @param projectName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectUpdateProjectCall(String projectName, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}"
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesProjectUpdateProjectValidateBeforeCall(String projectName, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesProjectUpdateProject(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesProjectUpdateProject(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pagesProjectUpdateProject(Async)");
        }

        return pagesProjectUpdateProjectCall(projectName, accountId, body, _callback);

    }

    /**
     * Update project
     * Set new attributes for an existing project. Modify environment variables. To delete an environment variable, set the key to null.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return PagesNewProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesNewProjectResponse pagesProjectUpdateProject(String projectName, String accountId, Object body) throws ApiException {
        ApiResponse<PagesNewProjectResponse> localVarResp = pagesProjectUpdateProjectWithHttpInfo(projectName, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Update project
     * Set new attributes for an existing project. Modify environment variables. To delete an environment variable, set the key to null.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;PagesNewProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesNewProjectResponse> pagesProjectUpdateProjectWithHttpInfo(String projectName, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = pagesProjectUpdateProjectValidateBeforeCall(projectName, accountId, body, null);
        Type localVarReturnType = new TypeToken<PagesNewProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project (asynchronously)
     * Set new attributes for an existing project. Modify environment variables. To delete an environment variable, set the key to null.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update project response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesProjectUpdateProjectAsync(String projectName, String accountId, Object body, final ApiCallback<PagesNewProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesProjectUpdateProjectValidateBeforeCall(projectName, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<PagesNewProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
