/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CustomSslForAZoneCreateSslConfiguration4XXResponse;
import org.openapitools.client.model.CustomSslForAZoneCreateSslConfigurationRequest;
import org.openapitools.client.model.CustomSslForAZoneDeleteSslConfiguration4XXResponse;
import org.openapitools.client.model.CustomSslForAZoneEditSslConfigurationRequest;
import org.openapitools.client.model.CustomSslForAZoneListSslConfigurations4XXResponse;
import org.openapitools.client.model.CustomSslForAZoneRePrioritizeSslCertificatesRequest;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificateResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificateResponseIdOnly;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificateResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomSslForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomSslForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomSslForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customSslForAZoneCreateSslConfiguration
     * @param zoneId  (required)
     * @param customSslForAZoneCreateSslConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneCreateSslConfigurationCall(String zoneId, CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customSslForAZoneCreateSslConfigurationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneCreateSslConfigurationValidateBeforeCall(String zoneId, CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneCreateSslConfiguration(Async)");
        }

        // verify the required parameter 'customSslForAZoneCreateSslConfigurationRequest' is set
        if (customSslForAZoneCreateSslConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'customSslForAZoneCreateSslConfigurationRequest' when calling customSslForAZoneCreateSslConfiguration(Async)");
        }

        return customSslForAZoneCreateSslConfigurationCall(zoneId, customSslForAZoneCreateSslConfigurationRequest, _callback);

    }

    /**
     * Create SSL Configuration
     * Upload a new SSL certificate for a zone.
     * @param zoneId  (required)
     * @param customSslForAZoneCreateSslConfigurationRequest  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle customSslForAZoneCreateSslConfiguration(String zoneId, CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = customSslForAZoneCreateSslConfigurationWithHttpInfo(zoneId, customSslForAZoneCreateSslConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Create SSL Configuration
     * Upload a new SSL certificate for a zone.
     * @param zoneId  (required)
     * @param customSslForAZoneCreateSslConfigurationRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> customSslForAZoneCreateSslConfigurationWithHttpInfo(String zoneId, CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneCreateSslConfigurationValidateBeforeCall(zoneId, customSslForAZoneCreateSslConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create SSL Configuration (asynchronously)
     * Upload a new SSL certificate for a zone.
     * @param zoneId  (required)
     * @param customSslForAZoneCreateSslConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneCreateSslConfigurationAsync(String zoneId, CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneCreateSslConfigurationValidateBeforeCall(zoneId, customSslForAZoneCreateSslConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customSslForAZoneDeleteSslConfiguration
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneDeleteSslConfigurationCall(String customCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates/{custom_certificate_id}"
            .replace("{" + "custom_certificate_id" + "}", localVarApiClient.escapeString(customCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneDeleteSslConfigurationValidateBeforeCall(String customCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customCertificateId' is set
        if (customCertificateId == null) {
            throw new ApiException("Missing the required parameter 'customCertificateId' when calling customSslForAZoneDeleteSslConfiguration(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneDeleteSslConfiguration(Async)");
        }

        return customSslForAZoneDeleteSslConfigurationCall(customCertificateId, zoneId, _callback);

    }

    /**
     * Delete SSL Configuration
     * Remove a SSL certificate from a zone.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseIdOnly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseIdOnly customSslForAZoneDeleteSslConfiguration(String customCertificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseIdOnly> localVarResp = customSslForAZoneDeleteSslConfigurationWithHttpInfo(customCertificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete SSL Configuration
     * Remove a SSL certificate from a zone.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseIdOnly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseIdOnly> customSslForAZoneDeleteSslConfigurationWithHttpInfo(String customCertificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneDeleteSslConfigurationValidateBeforeCall(customCertificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseIdOnly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete SSL Configuration (asynchronously)
     * Remove a SSL certificate from a zone.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneDeleteSslConfigurationAsync(String customCertificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseIdOnly> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneDeleteSslConfigurationValidateBeforeCall(customCertificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseIdOnly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customSslForAZoneEditSslConfiguration
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param customSslForAZoneEditSslConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneEditSslConfigurationCall(String customCertificateId, String zoneId, CustomSslForAZoneEditSslConfigurationRequest customSslForAZoneEditSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customSslForAZoneEditSslConfigurationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates/{custom_certificate_id}"
            .replace("{" + "custom_certificate_id" + "}", localVarApiClient.escapeString(customCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneEditSslConfigurationValidateBeforeCall(String customCertificateId, String zoneId, CustomSslForAZoneEditSslConfigurationRequest customSslForAZoneEditSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customCertificateId' is set
        if (customCertificateId == null) {
            throw new ApiException("Missing the required parameter 'customCertificateId' when calling customSslForAZoneEditSslConfiguration(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneEditSslConfiguration(Async)");
        }

        // verify the required parameter 'customSslForAZoneEditSslConfigurationRequest' is set
        if (customSslForAZoneEditSslConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'customSslForAZoneEditSslConfigurationRequest' when calling customSslForAZoneEditSslConfiguration(Async)");
        }

        return customSslForAZoneEditSslConfigurationCall(customCertificateId, zoneId, customSslForAZoneEditSslConfigurationRequest, _callback);

    }

    /**
     * Edit SSL Configuration
     * Upload a new private key and/or PEM/CRT for the SSL certificate. Note: PATCHing a configuration for sni_custom certificates will result in a new resource id being returned, and the previous one being deleted.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param customSslForAZoneEditSslConfigurationRequest  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle customSslForAZoneEditSslConfiguration(String customCertificateId, String zoneId, CustomSslForAZoneEditSslConfigurationRequest customSslForAZoneEditSslConfigurationRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = customSslForAZoneEditSslConfigurationWithHttpInfo(customCertificateId, zoneId, customSslForAZoneEditSslConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Edit SSL Configuration
     * Upload a new private key and/or PEM/CRT for the SSL certificate. Note: PATCHing a configuration for sni_custom certificates will result in a new resource id being returned, and the previous one being deleted.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param customSslForAZoneEditSslConfigurationRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> customSslForAZoneEditSslConfigurationWithHttpInfo(String customCertificateId, String zoneId, CustomSslForAZoneEditSslConfigurationRequest customSslForAZoneEditSslConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneEditSslConfigurationValidateBeforeCall(customCertificateId, zoneId, customSslForAZoneEditSslConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit SSL Configuration (asynchronously)
     * Upload a new private key and/or PEM/CRT for the SSL certificate. Note: PATCHing a configuration for sni_custom certificates will result in a new resource id being returned, and the previous one being deleted.
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param customSslForAZoneEditSslConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneEditSslConfigurationAsync(String customCertificateId, String zoneId, CustomSslForAZoneEditSslConfigurationRequest customSslForAZoneEditSslConfigurationRequest, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneEditSslConfigurationValidateBeforeCall(customCertificateId, zoneId, customSslForAZoneEditSslConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customSslForAZoneListSslConfigurations
     * @param zoneId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneListSslConfigurationsCall(String zoneId, BigDecimal page, BigDecimal perPage, String match, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneListSslConfigurationsValidateBeforeCall(String zoneId, BigDecimal page, BigDecimal perPage, String match, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneListSslConfigurations(Async)");
        }

        return customSslForAZoneListSslConfigurationsCall(zoneId, page, perPage, match, status, _callback);

    }

    /**
     * List SSL Configurations
     * List, search, and filter all of your custom SSL certificates. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates, but &#39;legacy_custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
     * @param zoneId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @return TlsCertificatesAndHostnamesCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseCollection customSslForAZoneListSslConfigurations(String zoneId, BigDecimal page, BigDecimal perPage, String match, String status) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseCollection> localVarResp = customSslForAZoneListSslConfigurationsWithHttpInfo(zoneId, page, perPage, match, status);
        return localVarResp.getData();
    }

    /**
     * List SSL Configurations
     * List, search, and filter all of your custom SSL certificates. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates, but &#39;legacy_custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
     * @param zoneId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseCollection> customSslForAZoneListSslConfigurationsWithHttpInfo(String zoneId, BigDecimal page, BigDecimal perPage, String match, String status) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneListSslConfigurationsValidateBeforeCall(zoneId, page, perPage, match, status, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List SSL Configurations (asynchronously)
     * List, search, and filter all of your custom SSL certificates. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates, but &#39;legacy_custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
     * @param zoneId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param match  (optional, default to all)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneListSslConfigurationsAsync(String zoneId, BigDecimal page, BigDecimal perPage, String match, String status, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneListSslConfigurationsValidateBeforeCall(zoneId, page, perPage, match, status, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customSslForAZoneRePrioritizeSslCertificates
     * @param zoneId  (required)
     * @param customSslForAZoneRePrioritizeSslCertificatesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Re-prioritize SSL Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Re-prioritize SSL Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneRePrioritizeSslCertificatesCall(String zoneId, CustomSslForAZoneRePrioritizeSslCertificatesRequest customSslForAZoneRePrioritizeSslCertificatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customSslForAZoneRePrioritizeSslCertificatesRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates/prioritize"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneRePrioritizeSslCertificatesValidateBeforeCall(String zoneId, CustomSslForAZoneRePrioritizeSslCertificatesRequest customSslForAZoneRePrioritizeSslCertificatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneRePrioritizeSslCertificates(Async)");
        }

        // verify the required parameter 'customSslForAZoneRePrioritizeSslCertificatesRequest' is set
        if (customSslForAZoneRePrioritizeSslCertificatesRequest == null) {
            throw new ApiException("Missing the required parameter 'customSslForAZoneRePrioritizeSslCertificatesRequest' when calling customSslForAZoneRePrioritizeSslCertificates(Async)");
        }

        return customSslForAZoneRePrioritizeSslCertificatesCall(zoneId, customSslForAZoneRePrioritizeSslCertificatesRequest, _callback);

    }

    /**
     * Re-prioritize SSL Certificates
     * If a zone has multiple SSL certificates, you can set the order in which they should be used during a request. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates.
     * @param zoneId  (required)
     * @param customSslForAZoneRePrioritizeSslCertificatesRequest  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Re-prioritize SSL Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Re-prioritize SSL Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseCollection customSslForAZoneRePrioritizeSslCertificates(String zoneId, CustomSslForAZoneRePrioritizeSslCertificatesRequest customSslForAZoneRePrioritizeSslCertificatesRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseCollection> localVarResp = customSslForAZoneRePrioritizeSslCertificatesWithHttpInfo(zoneId, customSslForAZoneRePrioritizeSslCertificatesRequest);
        return localVarResp.getData();
    }

    /**
     * Re-prioritize SSL Certificates
     * If a zone has multiple SSL certificates, you can set the order in which they should be used during a request. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates.
     * @param zoneId  (required)
     * @param customSslForAZoneRePrioritizeSslCertificatesRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Re-prioritize SSL Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Re-prioritize SSL Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseCollection> customSslForAZoneRePrioritizeSslCertificatesWithHttpInfo(String zoneId, CustomSslForAZoneRePrioritizeSslCertificatesRequest customSslForAZoneRePrioritizeSslCertificatesRequest) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneRePrioritizeSslCertificatesValidateBeforeCall(zoneId, customSslForAZoneRePrioritizeSslCertificatesRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-prioritize SSL Certificates (asynchronously)
     * If a zone has multiple SSL certificates, you can set the order in which they should be used during a request. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates.
     * @param zoneId  (required)
     * @param customSslForAZoneRePrioritizeSslCertificatesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Re-prioritize SSL Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Re-prioritize SSL Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneRePrioritizeSslCertificatesAsync(String zoneId, CustomSslForAZoneRePrioritizeSslCertificatesRequest customSslForAZoneRePrioritizeSslCertificatesRequest, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneRePrioritizeSslCertificatesValidateBeforeCall(zoneId, customSslForAZoneRePrioritizeSslCertificatesRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customSslForAZoneSslConfigurationDetails
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSL Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> SSL Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneSslConfigurationDetailsCall(String customCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_certificates/{custom_certificate_id}"
            .replace("{" + "custom_certificate_id" + "}", localVarApiClient.escapeString(customCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customSslForAZoneSslConfigurationDetailsValidateBeforeCall(String customCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customCertificateId' is set
        if (customCertificateId == null) {
            throw new ApiException("Missing the required parameter 'customCertificateId' when calling customSslForAZoneSslConfigurationDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customSslForAZoneSslConfigurationDetails(Async)");
        }

        return customSslForAZoneSslConfigurationDetailsCall(customCertificateId, zoneId, _callback);

    }

    /**
     * SSL Configuration Details
     * 
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSL Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> SSL Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle customSslForAZoneSslConfigurationDetails(String customCertificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = customSslForAZoneSslConfigurationDetailsWithHttpInfo(customCertificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * SSL Configuration Details
     * 
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSL Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> SSL Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> customSslForAZoneSslConfigurationDetailsWithHttpInfo(String customCertificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = customSslForAZoneSslConfigurationDetailsValidateBeforeCall(customCertificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SSL Configuration Details (asynchronously)
     * 
     * @param customCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SSL Configuration Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> SSL Configuration Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customSslForAZoneSslConfigurationDetailsAsync(String customCertificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customSslForAZoneSslConfigurationDetailsValidateBeforeCall(customCertificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
