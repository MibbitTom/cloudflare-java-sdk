/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiShieldApiResponseCommonFailure;
import org.openapitools.client.model.ApiShieldApiResponseSingle;
import org.openapitools.client.model.ApiShieldKind;
import org.openapitools.client.model.ApiShieldOperationSchemaValidationSettings;
import org.openapitools.client.model.ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry;
import org.openapitools.client.model.ApiShieldSchemaUploadFailure;
import org.openapitools.client.model.ApiShieldSchemaValidationEnableValidationForASchemaRequest;
import org.openapitools.client.model.ApiShieldSchemaValidationExtractOperationsFromSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationPostSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettings;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettingsPatch;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettingsPut;
import java.io.File;
import java.util.Set;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiShieldSchemaValidation20Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiShieldSchemaValidation20Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiShieldSchemaValidation20Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiShieldSchemaDeleteASchema
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaDeleteASchemaCall(String zoneId, UUID schemaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas/{schema_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "schema_id" + "}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaDeleteASchemaValidateBeforeCall(String zoneId, UUID schemaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaDeleteASchema(Async)");
        }

        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling apiShieldSchemaDeleteASchema(Async)");
        }

        return apiShieldSchemaDeleteASchemaCall(zoneId, schemaId, _callback);

    }

    /**
     * Delete a schema
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @return ApiShieldApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldApiResponseSingle apiShieldSchemaDeleteASchema(String zoneId, UUID schemaId) throws ApiException {
        ApiResponse<ApiShieldApiResponseSingle> localVarResp = apiShieldSchemaDeleteASchemaWithHttpInfo(zoneId, schemaId);
        return localVarResp.getData();
    }

    /**
     * Delete a schema
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @return ApiResponse&lt;ApiShieldApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldApiResponseSingle> apiShieldSchemaDeleteASchemaWithHttpInfo(String zoneId, UUID schemaId) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaDeleteASchemaValidateBeforeCall(zoneId, schemaId, null);
        Type localVarReturnType = new TypeToken<ApiShieldApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a schema (asynchronously)
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaDeleteASchemaAsync(String zoneId, UUID schemaId, final ApiCallback<ApiShieldApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaDeleteASchemaValidateBeforeCall(zoneId, schemaId, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationEnableValidationForASchema
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param apiShieldSchemaValidationEnableValidationForASchemaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable validation for a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable validation for a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationEnableValidationForASchemaCall(String zoneId, UUID schemaId, ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiShieldSchemaValidationEnableValidationForASchemaRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas/{schema_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "schema_id" + "}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationEnableValidationForASchemaValidateBeforeCall(String zoneId, UUID schemaId, ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationEnableValidationForASchema(Async)");
        }

        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling apiShieldSchemaValidationEnableValidationForASchema(Async)");
        }

        // verify the required parameter 'apiShieldSchemaValidationEnableValidationForASchemaRequest' is set
        if (apiShieldSchemaValidationEnableValidationForASchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'apiShieldSchemaValidationEnableValidationForASchemaRequest' when calling apiShieldSchemaValidationEnableValidationForASchema(Async)");
        }

        return apiShieldSchemaValidationEnableValidationForASchemaCall(zoneId, schemaId, apiShieldSchemaValidationEnableValidationForASchemaRequest, _callback);

    }

    /**
     * Enable validation for a schema
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param apiShieldSchemaValidationEnableValidationForASchemaRequest  (required)
     * @return ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable validation for a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable validation for a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response apiShieldSchemaValidationEnableValidationForASchema(String zoneId, UUID schemaId, ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> localVarResp = apiShieldSchemaValidationEnableValidationForASchemaWithHttpInfo(zoneId, schemaId, apiShieldSchemaValidationEnableValidationForASchemaRequest);
        return localVarResp.getData();
    }

    /**
     * Enable validation for a schema
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param apiShieldSchemaValidationEnableValidationForASchemaRequest  (required)
     * @return ApiResponse&lt;ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable validation for a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable validation for a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> apiShieldSchemaValidationEnableValidationForASchemaWithHttpInfo(String zoneId, UUID schemaId, ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationEnableValidationForASchemaValidateBeforeCall(zoneId, schemaId, apiShieldSchemaValidationEnableValidationForASchemaRequest, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable validation for a schema (asynchronously)
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param apiShieldSchemaValidationEnableValidationForASchemaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable validation for a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable validation for a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationEnableValidationForASchemaAsync(String zoneId, UUID schemaId, ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest, final ApiCallback<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationEnableValidationForASchemaValidateBeforeCall(zoneId, schemaId, apiShieldSchemaValidationEnableValidationForASchemaRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationExtractOperationsFromSchema
     * @param schemaId Identifier for the schema-ID (required)
     * @param zoneId  (required)
     * @param feature Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning. (optional)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param operationStatus Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all operations from a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve all operations from a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationExtractOperationsFromSchemaCall(UUID schemaId, String zoneId, Set<String> feature, Set<String> host, Set<String> method, String endpoint, Object page, Object perPage, String operationStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas/{schema_id}/operations"
            .replace("{" + "schema_id" + "}", localVarApiClient.escapeString(schemaId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (feature != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "feature", feature));
        }

        if (host != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "host", host));
        }

        if (method != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "method", method));
        }

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint", endpoint));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (operationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation_status", operationStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationExtractOperationsFromSchemaValidateBeforeCall(UUID schemaId, String zoneId, Set<String> feature, Set<String> host, Set<String> method, String endpoint, Object page, Object perPage, String operationStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling apiShieldSchemaValidationExtractOperationsFromSchema(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationExtractOperationsFromSchema(Async)");
        }

        return apiShieldSchemaValidationExtractOperationsFromSchemaCall(schemaId, zoneId, feature, host, method, endpoint, page, perPage, operationStatus, _callback);

    }

    /**
     * Retrieve all operations from a schema.
     * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
     * @param schemaId Identifier for the schema-ID (required)
     * @param zoneId  (required)
     * @param feature Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning. (optional)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param operationStatus Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management. (optional)
     * @return ApiShieldSchemaValidationExtractOperationsFromSchema200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all operations from a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve all operations from a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationExtractOperationsFromSchema200Response apiShieldSchemaValidationExtractOperationsFromSchema(UUID schemaId, String zoneId, Set<String> feature, Set<String> host, Set<String> method, String endpoint, Object page, Object perPage, String operationStatus) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationExtractOperationsFromSchema200Response> localVarResp = apiShieldSchemaValidationExtractOperationsFromSchemaWithHttpInfo(schemaId, zoneId, feature, host, method, endpoint, page, perPage, operationStatus);
        return localVarResp.getData();
    }

    /**
     * Retrieve all operations from a schema.
     * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
     * @param schemaId Identifier for the schema-ID (required)
     * @param zoneId  (required)
     * @param feature Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning. (optional)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param operationStatus Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management. (optional)
     * @return ApiResponse&lt;ApiShieldSchemaValidationExtractOperationsFromSchema200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all operations from a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve all operations from a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationExtractOperationsFromSchema200Response> apiShieldSchemaValidationExtractOperationsFromSchemaWithHttpInfo(UUID schemaId, String zoneId, Set<String> feature, Set<String> host, Set<String> method, String endpoint, Object page, Object perPage, String operationStatus) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationExtractOperationsFromSchemaValidateBeforeCall(schemaId, zoneId, feature, host, method, endpoint, page, perPage, operationStatus, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationExtractOperationsFromSchema200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all operations from a schema. (asynchronously)
     * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
     * @param schemaId Identifier for the schema-ID (required)
     * @param zoneId  (required)
     * @param feature Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning. (optional)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param operationStatus Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all operations from a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve all operations from a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationExtractOperationsFromSchemaAsync(UUID schemaId, String zoneId, Set<String> feature, Set<String> host, Set<String> method, String endpoint, Object page, Object perPage, String operationStatus, final ApiCallback<ApiShieldSchemaValidationExtractOperationsFromSchema200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationExtractOperationsFromSchemaValidateBeforeCall(schemaId, zoneId, feature, host, method, endpoint, page, perPage, operationStatus, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationExtractOperationsFromSchema200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationPatchZoneLevelSettings
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationPatchZoneLevelSettingsCall(String zoneId, ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiShieldZoneSchemaValidationSettingsPatch;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/settings/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationPatchZoneLevelSettingsValidateBeforeCall(String zoneId, ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationPatchZoneLevelSettings(Async)");
        }

        // verify the required parameter 'apiShieldZoneSchemaValidationSettingsPatch' is set
        if (apiShieldZoneSchemaValidationSettingsPatch == null) {
            throw new ApiException("Missing the required parameter 'apiShieldZoneSchemaValidationSettingsPatch' when calling apiShieldSchemaValidationPatchZoneLevelSettings(Async)");
        }

        return apiShieldSchemaValidationPatchZoneLevelSettingsCall(zoneId, apiShieldZoneSchemaValidationSettingsPatch, _callback);

    }

    /**
     * Update zone level schema validation settings
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPatch  (required)
     * @return ApiShieldZoneSchemaValidationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldZoneSchemaValidationSettings apiShieldSchemaValidationPatchZoneLevelSettings(String zoneId, ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch) throws ApiException {
        ApiResponse<ApiShieldZoneSchemaValidationSettings> localVarResp = apiShieldSchemaValidationPatchZoneLevelSettingsWithHttpInfo(zoneId, apiShieldZoneSchemaValidationSettingsPatch);
        return localVarResp.getData();
    }

    /**
     * Update zone level schema validation settings
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPatch  (required)
     * @return ApiResponse&lt;ApiShieldZoneSchemaValidationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldZoneSchemaValidationSettings> apiShieldSchemaValidationPatchZoneLevelSettingsWithHttpInfo(String zoneId, ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationPatchZoneLevelSettingsValidateBeforeCall(zoneId, apiShieldZoneSchemaValidationSettingsPatch, null);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update zone level schema validation settings (asynchronously)
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationPatchZoneLevelSettingsAsync(String zoneId, ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch, final ApiCallback<ApiShieldZoneSchemaValidationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationPatchZoneLevelSettingsValidateBeforeCall(zoneId, apiShieldZoneSchemaValidationSettingsPatch, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationPostSchema
     * @param zoneId  (required)
     * @param _file Schema file bytes (required)
     * @param kind  (required)
     * @param name Name of the schema (optional)
     * @param validationEnabled Flag whether schema is enabled for validation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationPostSchemaCall(String zoneId, File _file, ApiShieldKind kind, String name, String validationEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (kind != null) {
            localVarFormParams.put("kind", kind);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (validationEnabled != null) {
            localVarFormParams.put("validation_enabled", validationEnabled);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationPostSchemaValidateBeforeCall(String zoneId, File _file, ApiShieldKind kind, String name, String validationEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationPostSchema(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling apiShieldSchemaValidationPostSchema(Async)");
        }

        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling apiShieldSchemaValidationPostSchema(Async)");
        }

        return apiShieldSchemaValidationPostSchemaCall(zoneId, _file, kind, name, validationEnabled, _callback);

    }

    /**
     * Upload a schema to a zone
     * 
     * @param zoneId  (required)
     * @param _file Schema file bytes (required)
     * @param kind  (required)
     * @param name Name of the schema (optional)
     * @param validationEnabled Flag whether schema is enabled for validation. (optional)
     * @return ApiShieldSchemaValidationPostSchema200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationPostSchema200Response apiShieldSchemaValidationPostSchema(String zoneId, File _file, ApiShieldKind kind, String name, String validationEnabled) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationPostSchema200Response> localVarResp = apiShieldSchemaValidationPostSchemaWithHttpInfo(zoneId, _file, kind, name, validationEnabled);
        return localVarResp.getData();
    }

    /**
     * Upload a schema to a zone
     * 
     * @param zoneId  (required)
     * @param _file Schema file bytes (required)
     * @param kind  (required)
     * @param name Name of the schema (optional)
     * @param validationEnabled Flag whether schema is enabled for validation. (optional)
     * @return ApiResponse&lt;ApiShieldSchemaValidationPostSchema200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationPostSchema200Response> apiShieldSchemaValidationPostSchemaWithHttpInfo(String zoneId, File _file, ApiShieldKind kind, String name, String validationEnabled) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationPostSchemaValidateBeforeCall(zoneId, _file, kind, name, validationEnabled, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationPostSchema200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a schema to a zone (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _file Schema file bytes (required)
     * @param kind  (required)
     * @param name Name of the schema (optional)
     * @param validationEnabled Flag whether schema is enabled for validation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a schema response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a schema response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationPostSchemaAsync(String zoneId, File _file, ApiShieldKind kind, String name, String validationEnabled, final ApiCallback<ApiShieldSchemaValidationPostSchema200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationPostSchemaValidateBeforeCall(zoneId, _file, kind, name, validationEnabled, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationPostSchema200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationRetrieveInformationAboutAllSchemas
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param validationEnabled  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about all schemas on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about all schemas on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutAllSchemasCall(String zoneId, Object page, Object perPage, Boolean omitSource, Boolean validationEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (omitSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omit_source", omitSource));
        }

        if (validationEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validation_enabled", validationEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutAllSchemasValidateBeforeCall(String zoneId, Object page, Object perPage, Boolean omitSource, Boolean validationEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(Async)");
        }

        return apiShieldSchemaValidationRetrieveInformationAboutAllSchemasCall(zoneId, page, perPage, omitSource, validationEnabled, _callback);

    }

    /**
     * Retrieve information about all schemas on a zone
     * 
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param validationEnabled  (optional)
     * @return ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about all schemas on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about all schemas on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(String zoneId, Object page, Object perPage, Boolean omitSource, Boolean validationEnabled) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response> localVarResp = apiShieldSchemaValidationRetrieveInformationAboutAllSchemasWithHttpInfo(zoneId, page, perPage, omitSource, validationEnabled);
        return localVarResp.getData();
    }

    /**
     * Retrieve information about all schemas on a zone
     * 
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param validationEnabled  (optional)
     * @return ApiResponse&lt;ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about all schemas on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about all schemas on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response> apiShieldSchemaValidationRetrieveInformationAboutAllSchemasWithHttpInfo(String zoneId, Object page, Object perPage, Boolean omitSource, Boolean validationEnabled) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveInformationAboutAllSchemasValidateBeforeCall(zoneId, page, perPage, omitSource, validationEnabled, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information about all schemas on a zone (asynchronously)
     * 
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param validationEnabled  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about all schemas on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about all schemas on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutAllSchemasAsync(String zoneId, Object page, Object perPage, Boolean omitSource, Boolean validationEnabled, final ApiCallback<ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveInformationAboutAllSchemasValidateBeforeCall(zoneId, page, perPage, omitSource, validationEnabled, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about a specific schema on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about a specific schema zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaCall(String zoneId, UUID schemaId, Boolean omitSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/user_schemas/{schema_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "schema_id" + "}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (omitSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omit_source", omitSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaValidateBeforeCall(String zoneId, UUID schemaId, Boolean omitSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(Async)");
        }

        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(Async)");
        }

        return apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaCall(zoneId, schemaId, omitSource, _callback);

    }

    /**
     * Retrieve information about a specific schema on a zone
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @return ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about a specific schema on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about a specific schema zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(String zoneId, UUID schemaId, Boolean omitSource) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> localVarResp = apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaWithHttpInfo(zoneId, schemaId, omitSource);
        return localVarResp.getData();
    }

    /**
     * Retrieve information about a specific schema on a zone
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @return ApiResponse&lt;ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about a specific schema on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about a specific schema zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaWithHttpInfo(String zoneId, UUID schemaId, Boolean omitSource) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaValidateBeforeCall(zoneId, schemaId, omitSource, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information about a specific schema on a zone (asynchronously)
     * 
     * @param zoneId  (required)
     * @param schemaId Identifier for the schema-ID (required)
     * @param omitSource Omit the source-files of schemas and only retrieve their meta-data. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve information about a specific schema on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve information about a specific schema zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaAsync(String zoneId, UUID schemaId, Boolean omitSource, final ApiCallback<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaValidateBeforeCall(zoneId, schemaId, omitSource, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationRetrieveOperationLevelSettings
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveOperationLevelSettingsCall(String zoneId, UUID operationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "operation_id" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationRetrieveOperationLevelSettingsValidateBeforeCall(String zoneId, UUID operationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationRetrieveOperationLevelSettings(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiShieldSchemaValidationRetrieveOperationLevelSettings(Async)");
        }

        return apiShieldSchemaValidationRetrieveOperationLevelSettingsCall(zoneId, operationId, _callback);

    }

    /**
     * Retrieve operation-level schema validation settings
     * Retrieves operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @return ApiShieldOperationSchemaValidationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldOperationSchemaValidationSettings apiShieldSchemaValidationRetrieveOperationLevelSettings(String zoneId, UUID operationId) throws ApiException {
        ApiResponse<ApiShieldOperationSchemaValidationSettings> localVarResp = apiShieldSchemaValidationRetrieveOperationLevelSettingsWithHttpInfo(zoneId, operationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve operation-level schema validation settings
     * Retrieves operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @return ApiResponse&lt;ApiShieldOperationSchemaValidationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldOperationSchemaValidationSettings> apiShieldSchemaValidationRetrieveOperationLevelSettingsWithHttpInfo(String zoneId, UUID operationId) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveOperationLevelSettingsValidateBeforeCall(zoneId, operationId, null);
        Type localVarReturnType = new TypeToken<ApiShieldOperationSchemaValidationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve operation-level schema validation settings (asynchronously)
     * Retrieves operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Operation-level schema validation settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveOperationLevelSettingsAsync(String zoneId, UUID operationId, final ApiCallback<ApiShieldOperationSchemaValidationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveOperationLevelSettingsValidateBeforeCall(zoneId, operationId, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldOperationSchemaValidationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationRetrieveZoneLevelSettings
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveZoneLevelSettingsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/settings/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationRetrieveZoneLevelSettingsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationRetrieveZoneLevelSettings(Async)");
        }

        return apiShieldSchemaValidationRetrieveZoneLevelSettingsCall(zoneId, _callback);

    }

    /**
     * Retrieve zone level schema validation settings
     * Retrieves zone level schema validation settings currently set on the zone
     * @param zoneId  (required)
     * @return ApiShieldZoneSchemaValidationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldZoneSchemaValidationSettings apiShieldSchemaValidationRetrieveZoneLevelSettings(String zoneId) throws ApiException {
        ApiResponse<ApiShieldZoneSchemaValidationSettings> localVarResp = apiShieldSchemaValidationRetrieveZoneLevelSettingsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Retrieve zone level schema validation settings
     * Retrieves zone level schema validation settings currently set on the zone
     * @param zoneId  (required)
     * @return ApiResponse&lt;ApiShieldZoneSchemaValidationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldZoneSchemaValidationSettings> apiShieldSchemaValidationRetrieveZoneLevelSettingsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveZoneLevelSettingsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve zone level schema validation settings (asynchronously)
     * Retrieves zone level schema validation settings currently set on the zone
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationRetrieveZoneLevelSettingsAsync(String zoneId, final ApiCallback<ApiShieldZoneSchemaValidationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationRetrieveZoneLevelSettingsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationUpdateMultipleOperationLevelSettings
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsCall(String zoneId, Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsValidateBeforeCall(String zoneId, Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationUpdateMultipleOperationLevelSettings(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling apiShieldSchemaValidationUpdateMultipleOperationLevelSettings(Async)");
        }

        return apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsCall(zoneId, requestBody, _callback);

    }

    /**
     * Update multiple operation-level schema validation settings
     * Updates multiple operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @return ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response apiShieldSchemaValidationUpdateMultipleOperationLevelSettings(String zoneId, Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody) throws ApiException {
        ApiResponse<ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response> localVarResp = apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsWithHttpInfo(zoneId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update multiple operation-level schema validation settings
     * Updates multiple operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response> apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsWithHttpInfo(String zoneId, Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsValidateBeforeCall(zoneId, requestBody, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update multiple operation-level schema validation settings (asynchronously)
     * Updates multiple operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update multiple operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update multiple operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsAsync(String zoneId, Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody, final ApiCallback<ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsValidateBeforeCall(zoneId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationUpdateOperationLevelSettings
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param apiShieldOperationSchemaValidationSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateOperationLevelSettingsCall(String zoneId, UUID operationId, ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiShieldOperationSchemaValidationSettings;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "operation_id" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationUpdateOperationLevelSettingsValidateBeforeCall(String zoneId, UUID operationId, ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationUpdateOperationLevelSettings(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiShieldSchemaValidationUpdateOperationLevelSettings(Async)");
        }

        // verify the required parameter 'apiShieldOperationSchemaValidationSettings' is set
        if (apiShieldOperationSchemaValidationSettings == null) {
            throw new ApiException("Missing the required parameter 'apiShieldOperationSchemaValidationSettings' when calling apiShieldSchemaValidationUpdateOperationLevelSettings(Async)");
        }

        return apiShieldSchemaValidationUpdateOperationLevelSettingsCall(zoneId, operationId, apiShieldOperationSchemaValidationSettings, _callback);

    }

    /**
     * Update operation-level schema validation settings
     * Updates operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param apiShieldOperationSchemaValidationSettings  (required)
     * @return ApiShieldOperationSchemaValidationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldOperationSchemaValidationSettings apiShieldSchemaValidationUpdateOperationLevelSettings(String zoneId, UUID operationId, ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings) throws ApiException {
        ApiResponse<ApiShieldOperationSchemaValidationSettings> localVarResp = apiShieldSchemaValidationUpdateOperationLevelSettingsWithHttpInfo(zoneId, operationId, apiShieldOperationSchemaValidationSettings);
        return localVarResp.getData();
    }

    /**
     * Update operation-level schema validation settings
     * Updates operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param apiShieldOperationSchemaValidationSettings  (required)
     * @return ApiResponse&lt;ApiShieldOperationSchemaValidationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldOperationSchemaValidationSettings> apiShieldSchemaValidationUpdateOperationLevelSettingsWithHttpInfo(String zoneId, UUID operationId, ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateOperationLevelSettingsValidateBeforeCall(zoneId, operationId, apiShieldOperationSchemaValidationSettings, null);
        Type localVarReturnType = new TypeToken<ApiShieldOperationSchemaValidationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update operation-level schema validation settings (asynchronously)
     * Updates operation-level schema validation settings on the zone
     * @param zoneId  (required)
     * @param operationId Identifier for the operation (required)
     * @param apiShieldOperationSchemaValidationSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update operation-level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update operation-level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateOperationLevelSettingsAsync(String zoneId, UUID operationId, ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings, final ApiCallback<ApiShieldOperationSchemaValidationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateOperationLevelSettingsValidateBeforeCall(zoneId, operationId, apiShieldOperationSchemaValidationSettings, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldOperationSchemaValidationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldSchemaValidationUpdateZoneLevelSettings
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPut  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateZoneLevelSettingsCall(String zoneId, ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiShieldZoneSchemaValidationSettingsPut;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/settings/schema_validation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldSchemaValidationUpdateZoneLevelSettingsValidateBeforeCall(String zoneId, ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldSchemaValidationUpdateZoneLevelSettings(Async)");
        }

        // verify the required parameter 'apiShieldZoneSchemaValidationSettingsPut' is set
        if (apiShieldZoneSchemaValidationSettingsPut == null) {
            throw new ApiException("Missing the required parameter 'apiShieldZoneSchemaValidationSettingsPut' when calling apiShieldSchemaValidationUpdateZoneLevelSettings(Async)");
        }

        return apiShieldSchemaValidationUpdateZoneLevelSettingsCall(zoneId, apiShieldZoneSchemaValidationSettingsPut, _callback);

    }

    /**
     * Update zone level schema validation settings
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPut  (required)
     * @return ApiShieldZoneSchemaValidationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldZoneSchemaValidationSettings apiShieldSchemaValidationUpdateZoneLevelSettings(String zoneId, ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut) throws ApiException {
        ApiResponse<ApiShieldZoneSchemaValidationSettings> localVarResp = apiShieldSchemaValidationUpdateZoneLevelSettingsWithHttpInfo(zoneId, apiShieldZoneSchemaValidationSettingsPut);
        return localVarResp.getData();
    }

    /**
     * Update zone level schema validation settings
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPut  (required)
     * @return ApiResponse&lt;ApiShieldZoneSchemaValidationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldZoneSchemaValidationSettings> apiShieldSchemaValidationUpdateZoneLevelSettingsWithHttpInfo(String zoneId, ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut) throws ApiException {
        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateZoneLevelSettingsValidateBeforeCall(zoneId, apiShieldZoneSchemaValidationSettingsPut, null);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update zone level schema validation settings (asynchronously)
     * Updates zone level schema validation settings on the zone
     * @param zoneId  (required)
     * @param apiShieldZoneSchemaValidationSettingsPut  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update zone level schema validation settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update zone level schema validation settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldSchemaValidationUpdateZoneLevelSettingsAsync(String zoneId, ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut, final ApiCallback<ApiShieldZoneSchemaValidationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldSchemaValidationUpdateZoneLevelSettingsValidateBeforeCall(zoneId, apiShieldZoneSchemaValidationSettingsPut, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldZoneSchemaValidationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
