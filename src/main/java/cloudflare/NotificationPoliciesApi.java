/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AaaApiResponseCollection;
import org.openapitools.client.model.AaaIdResponse;
import org.openapitools.client.model.AaaPoliciesComponentsSchemasResponseCollection;
import org.openapitools.client.model.AaaSingleResponse;
import org.openapitools.client.model.NotificationDestinationsWithPagerDutyConnectPagerDuty4XXResponse;
import org.openapitools.client.model.NotificationDestinationsWithPagerDutyDeletePagerDutyServices4XXResponse;
import org.openapitools.client.model.NotificationPoliciesCreateANotificationPolicyRequest;
import org.openapitools.client.model.NotificationPoliciesGetANotificationPolicy4XXResponse;
import org.openapitools.client.model.NotificationPoliciesListNotificationPolicies4XXResponse;
import org.openapitools.client.model.NotificationPoliciesUpdateANotificationPolicyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationPoliciesCreateANotificationPolicy
     * @param accountId  (required)
     * @param notificationPoliciesCreateANotificationPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesCreateANotificationPolicyCall(String accountId, NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationPoliciesCreateANotificationPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/policies"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPoliciesCreateANotificationPolicyValidateBeforeCall(String accountId, NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationPoliciesCreateANotificationPolicy(Async)");
        }

        // verify the required parameter 'notificationPoliciesCreateANotificationPolicyRequest' is set
        if (notificationPoliciesCreateANotificationPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationPoliciesCreateANotificationPolicyRequest' when calling notificationPoliciesCreateANotificationPolicy(Async)");
        }

        return notificationPoliciesCreateANotificationPolicyCall(accountId, notificationPoliciesCreateANotificationPolicyRequest, _callback);

    }

    /**
     * Create a Notification policy
     * Creates a new Notification policy.
     * @param accountId  (required)
     * @param notificationPoliciesCreateANotificationPolicyRequest  (required)
     * @return AaaIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaIdResponse notificationPoliciesCreateANotificationPolicy(String accountId, NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest) throws ApiException {
        ApiResponse<AaaIdResponse> localVarResp = notificationPoliciesCreateANotificationPolicyWithHttpInfo(accountId, notificationPoliciesCreateANotificationPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Notification policy
     * Creates a new Notification policy.
     * @param accountId  (required)
     * @param notificationPoliciesCreateANotificationPolicyRequest  (required)
     * @return ApiResponse&lt;AaaIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaIdResponse> notificationPoliciesCreateANotificationPolicyWithHttpInfo(String accountId, NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationPoliciesCreateANotificationPolicyValidateBeforeCall(accountId, notificationPoliciesCreateANotificationPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Notification policy (asynchronously)
     * Creates a new Notification policy.
     * @param accountId  (required)
     * @param notificationPoliciesCreateANotificationPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesCreateANotificationPolicyAsync(String accountId, NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest, final ApiCallback<AaaIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPoliciesCreateANotificationPolicyValidateBeforeCall(accountId, notificationPoliciesCreateANotificationPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPoliciesDeleteANotificationPolicy
     * @param accountId  (required)
     * @param policyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesDeleteANotificationPolicyCall(String accountId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/policies/{policy_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPoliciesDeleteANotificationPolicyValidateBeforeCall(String accountId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationPoliciesDeleteANotificationPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling notificationPoliciesDeleteANotificationPolicy(Async)");
        }

        return notificationPoliciesDeleteANotificationPolicyCall(accountId, policyId, _callback);

    }

    /**
     * Delete a Notification policy
     * Delete a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @return AaaApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaApiResponseCollection notificationPoliciesDeleteANotificationPolicy(String accountId, String policyId) throws ApiException {
        ApiResponse<AaaApiResponseCollection> localVarResp = notificationPoliciesDeleteANotificationPolicyWithHttpInfo(accountId, policyId);
        return localVarResp.getData();
    }

    /**
     * Delete a Notification policy
     * Delete a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @return ApiResponse&lt;AaaApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaApiResponseCollection> notificationPoliciesDeleteANotificationPolicyWithHttpInfo(String accountId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = notificationPoliciesDeleteANotificationPolicyValidateBeforeCall(accountId, policyId, null);
        Type localVarReturnType = new TypeToken<AaaApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Notification policy (asynchronously)
     * Delete a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesDeleteANotificationPolicyAsync(String accountId, String policyId, final ApiCallback<AaaApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPoliciesDeleteANotificationPolicyValidateBeforeCall(accountId, policyId, _callback);
        Type localVarReturnType = new TypeToken<AaaApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPoliciesGetANotificationPolicy
     * @param accountId  (required)
     * @param policyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesGetANotificationPolicyCall(String accountId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/policies/{policy_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPoliciesGetANotificationPolicyValidateBeforeCall(String accountId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationPoliciesGetANotificationPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling notificationPoliciesGetANotificationPolicy(Async)");
        }

        return notificationPoliciesGetANotificationPolicyCall(accountId, policyId, _callback);

    }

    /**
     * Get a Notification policy
     * Get details for a single policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @return AaaSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaSingleResponse notificationPoliciesGetANotificationPolicy(String accountId, String policyId) throws ApiException {
        ApiResponse<AaaSingleResponse> localVarResp = notificationPoliciesGetANotificationPolicyWithHttpInfo(accountId, policyId);
        return localVarResp.getData();
    }

    /**
     * Get a Notification policy
     * Get details for a single policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @return ApiResponse&lt;AaaSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaSingleResponse> notificationPoliciesGetANotificationPolicyWithHttpInfo(String accountId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = notificationPoliciesGetANotificationPolicyValidateBeforeCall(accountId, policyId, null);
        Type localVarReturnType = new TypeToken<AaaSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Notification policy (asynchronously)
     * Get details for a single policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesGetANotificationPolicyAsync(String accountId, String policyId, final ApiCallback<AaaSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPoliciesGetANotificationPolicyValidateBeforeCall(accountId, policyId, _callback);
        Type localVarReturnType = new TypeToken<AaaSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPoliciesListNotificationPolicies
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Notification policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Notification policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesListNotificationPoliciesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/policies"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPoliciesListNotificationPoliciesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationPoliciesListNotificationPolicies(Async)");
        }

        return notificationPoliciesListNotificationPoliciesCall(accountId, _callback);

    }

    /**
     * List Notification policies
     * Get a list of all Notification policies.
     * @param accountId  (required)
     * @return AaaPoliciesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Notification policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Notification policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaPoliciesComponentsSchemasResponseCollection notificationPoliciesListNotificationPolicies(String accountId) throws ApiException {
        ApiResponse<AaaPoliciesComponentsSchemasResponseCollection> localVarResp = notificationPoliciesListNotificationPoliciesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Notification policies
     * Get a list of all Notification policies.
     * @param accountId  (required)
     * @return ApiResponse&lt;AaaPoliciesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Notification policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Notification policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaPoliciesComponentsSchemasResponseCollection> notificationPoliciesListNotificationPoliciesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = notificationPoliciesListNotificationPoliciesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AaaPoliciesComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Notification policies (asynchronously)
     * Get a list of all Notification policies.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Notification policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Notification policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesListNotificationPoliciesAsync(String accountId, final ApiCallback<AaaPoliciesComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPoliciesListNotificationPoliciesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AaaPoliciesComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPoliciesUpdateANotificationPolicy
     * @param accountId  (required)
     * @param policyId  (required)
     * @param notificationPoliciesUpdateANotificationPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesUpdateANotificationPolicyCall(String accountId, String policyId, NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationPoliciesUpdateANotificationPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/policies/{policy_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPoliciesUpdateANotificationPolicyValidateBeforeCall(String accountId, String policyId, NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationPoliciesUpdateANotificationPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling notificationPoliciesUpdateANotificationPolicy(Async)");
        }

        // verify the required parameter 'notificationPoliciesUpdateANotificationPolicyRequest' is set
        if (notificationPoliciesUpdateANotificationPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationPoliciesUpdateANotificationPolicyRequest' when calling notificationPoliciesUpdateANotificationPolicy(Async)");
        }

        return notificationPoliciesUpdateANotificationPolicyCall(accountId, policyId, notificationPoliciesUpdateANotificationPolicyRequest, _callback);

    }

    /**
     * Update a Notification policy
     * Update a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @param notificationPoliciesUpdateANotificationPolicyRequest  (required)
     * @return AaaIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaIdResponse notificationPoliciesUpdateANotificationPolicy(String accountId, String policyId, NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest) throws ApiException {
        ApiResponse<AaaIdResponse> localVarResp = notificationPoliciesUpdateANotificationPolicyWithHttpInfo(accountId, policyId, notificationPoliciesUpdateANotificationPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Notification policy
     * Update a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @param notificationPoliciesUpdateANotificationPolicyRequest  (required)
     * @return ApiResponse&lt;AaaIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaIdResponse> notificationPoliciesUpdateANotificationPolicyWithHttpInfo(String accountId, String policyId, NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationPoliciesUpdateANotificationPolicyValidateBeforeCall(accountId, policyId, notificationPoliciesUpdateANotificationPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Notification policy (asynchronously)
     * Update a Notification policy.
     * @param accountId  (required)
     * @param policyId  (required)
     * @param notificationPoliciesUpdateANotificationPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPoliciesUpdateANotificationPolicyAsync(String accountId, String policyId, NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest, final ApiCallback<AaaIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPoliciesUpdateANotificationPolicyValidateBeforeCall(accountId, policyId, notificationPoliciesUpdateANotificationPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
