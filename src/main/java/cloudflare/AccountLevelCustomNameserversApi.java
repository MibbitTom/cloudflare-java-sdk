/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountLevelCustomNameserversAddAccountCustomNameserver4XXResponse;
import org.openapitools.client.model.AccountLevelCustomNameserversDeleteAccountCustomNameserver4XXResponse;
import org.openapitools.client.model.AccountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers4XXResponse;
import org.openapitools.client.model.AccountLevelCustomNameserversListAccountCustomNameservers4XXResponse;
import org.openapitools.client.model.DnsCustomNameserversAcnsResponseCollection;
import org.openapitools.client.model.DnsCustomNameserversAcnsResponseSingle;
import org.openapitools.client.model.DnsCustomNameserversAvailabilityResponse;
import org.openapitools.client.model.DnsCustomNameserversCustomNSInput;
import org.openapitools.client.model.DnsCustomNameserversEmptyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountLevelCustomNameserversApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountLevelCustomNameserversApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountLevelCustomNameserversApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountLevelCustomNameserversAddAccountCustomNameserver
     * @param accountId  (required)
     * @param dnsCustomNameserversCustomNSInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversAddAccountCustomNameserverCall(String accountId, DnsCustomNameserversCustomNSInput dnsCustomNameserversCustomNSInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsCustomNameserversCustomNSInput;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/custom_ns"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversAddAccountCustomNameserverValidateBeforeCall(String accountId, DnsCustomNameserversCustomNSInput dnsCustomNameserversCustomNSInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLevelCustomNameserversAddAccountCustomNameserver(Async)");
        }

        // verify the required parameter 'dnsCustomNameserversCustomNSInput' is set
        if (dnsCustomNameserversCustomNSInput == null) {
            throw new ApiException("Missing the required parameter 'dnsCustomNameserversCustomNSInput' when calling accountLevelCustomNameserversAddAccountCustomNameserver(Async)");
        }

        return accountLevelCustomNameserversAddAccountCustomNameserverCall(accountId, dnsCustomNameserversCustomNSInput, _callback);

    }

    /**
     * Add Account Custom Nameserver
     * 
     * @param accountId  (required)
     * @param dnsCustomNameserversCustomNSInput  (required)
     * @return DnsCustomNameserversAcnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversAcnsResponseSingle accountLevelCustomNameserversAddAccountCustomNameserver(String accountId, DnsCustomNameserversCustomNSInput dnsCustomNameserversCustomNSInput) throws ApiException {
        ApiResponse<DnsCustomNameserversAcnsResponseSingle> localVarResp = accountLevelCustomNameserversAddAccountCustomNameserverWithHttpInfo(accountId, dnsCustomNameserversCustomNSInput);
        return localVarResp.getData();
    }

    /**
     * Add Account Custom Nameserver
     * 
     * @param accountId  (required)
     * @param dnsCustomNameserversCustomNSInput  (required)
     * @return ApiResponse&lt;DnsCustomNameserversAcnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversAcnsResponseSingle> accountLevelCustomNameserversAddAccountCustomNameserverWithHttpInfo(String accountId, DnsCustomNameserversCustomNSInput dnsCustomNameserversCustomNSInput) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversAddAccountCustomNameserverValidateBeforeCall(accountId, dnsCustomNameserversCustomNSInput, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Custom Nameserver (asynchronously)
     * 
     * @param accountId  (required)
     * @param dnsCustomNameserversCustomNSInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversAddAccountCustomNameserverAsync(String accountId, DnsCustomNameserversCustomNSInput dnsCustomNameserversCustomNSInput, final ApiCallback<DnsCustomNameserversAcnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversAddAccountCustomNameserverValidateBeforeCall(accountId, dnsCustomNameserversCustomNSInput, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLevelCustomNameserversDeleteAccountCustomNameserver
     * @param customNsId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversDeleteAccountCustomNameserverCall(String customNsId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/custom_ns/{custom_ns_id}"
            .replace("{" + "custom_ns_id" + "}", localVarApiClient.escapeString(customNsId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversDeleteAccountCustomNameserverValidateBeforeCall(String customNsId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customNsId' is set
        if (customNsId == null) {
            throw new ApiException("Missing the required parameter 'customNsId' when calling accountLevelCustomNameserversDeleteAccountCustomNameserver(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLevelCustomNameserversDeleteAccountCustomNameserver(Async)");
        }

        return accountLevelCustomNameserversDeleteAccountCustomNameserverCall(customNsId, accountId, _callback);

    }

    /**
     * Delete Account Custom Nameserver
     * 
     * @param customNsId  (required)
     * @param accountId  (required)
     * @return DnsCustomNameserversEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversEmptyResponse accountLevelCustomNameserversDeleteAccountCustomNameserver(String customNsId, String accountId) throws ApiException {
        ApiResponse<DnsCustomNameserversEmptyResponse> localVarResp = accountLevelCustomNameserversDeleteAccountCustomNameserverWithHttpInfo(customNsId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Account Custom Nameserver
     * 
     * @param customNsId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsCustomNameserversEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversEmptyResponse> accountLevelCustomNameserversDeleteAccountCustomNameserverWithHttpInfo(String customNsId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversDeleteAccountCustomNameserverValidateBeforeCall(customNsId, accountId, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Account Custom Nameserver (asynchronously)
     * 
     * @param customNsId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Account Custom Nameserver response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Account Custom Nameserver response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversDeleteAccountCustomNameserverAsync(String customNsId, String accountId, final ApiCallback<DnsCustomNameserversEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversDeleteAccountCustomNameserverValidateBeforeCall(customNsId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Eligible Zones for Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Eligible Zones for Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/custom_ns/availability"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(Async)");
        }

        return accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversCall(accountId, _callback);

    }

    /**
     * Get Eligible Zones for Account Custom Nameservers
     * 
     * @param accountId  (required)
     * @return DnsCustomNameserversAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Eligible Zones for Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Eligible Zones for Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversAvailabilityResponse accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(String accountId) throws ApiException {
        ApiResponse<DnsCustomNameserversAvailabilityResponse> localVarResp = accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Eligible Zones for Account Custom Nameservers
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsCustomNameserversAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Eligible Zones for Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Eligible Zones for Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversAvailabilityResponse> accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Eligible Zones for Account Custom Nameservers (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Eligible Zones for Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Eligible Zones for Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversAsync(String accountId, final ApiCallback<DnsCustomNameserversAvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameserversValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLevelCustomNameserversListAccountCustomNameservers
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversListAccountCustomNameserversCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/custom_ns"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversListAccountCustomNameserversValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLevelCustomNameserversListAccountCustomNameservers(Async)");
        }

        return accountLevelCustomNameserversListAccountCustomNameserversCall(accountId, _callback);

    }

    /**
     * List Account Custom Nameservers
     * List an account&#39;s custom nameservers.
     * @param accountId  (required)
     * @return DnsCustomNameserversAcnsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversAcnsResponseCollection accountLevelCustomNameserversListAccountCustomNameservers(String accountId) throws ApiException {
        ApiResponse<DnsCustomNameserversAcnsResponseCollection> localVarResp = accountLevelCustomNameserversListAccountCustomNameserversWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Account Custom Nameservers
     * List an account&#39;s custom nameservers.
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsCustomNameserversAcnsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversAcnsResponseCollection> accountLevelCustomNameserversListAccountCustomNameserversWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversListAccountCustomNameserversValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Account Custom Nameservers (asynchronously)
     * List an account&#39;s custom nameservers.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Account Custom Nameservers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Account Custom Nameservers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversListAccountCustomNameserversAsync(String accountId, final ApiCallback<DnsCustomNameserversAcnsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversListAccountCustomNameserversValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Account Custom Nameserver Glue Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Account Custom Nameserver Glue Records response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/custom_ns/verify"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(Async)");
        }

        return accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsCall(accountId, _callback);

    }

    /**
     * Verify Account Custom Nameserver Glue Records
     * 
     * @param accountId  (required)
     * @return DnsCustomNameserversAcnsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Account Custom Nameserver Glue Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Account Custom Nameserver Glue Records response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DnsCustomNameserversAcnsResponseCollection accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(String accountId) throws ApiException {
        ApiResponse<DnsCustomNameserversAcnsResponseCollection> localVarResp = accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Verify Account Custom Nameserver Glue Records
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;DnsCustomNameserversAcnsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Account Custom Nameserver Glue Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Account Custom Nameserver Glue Records response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DnsCustomNameserversAcnsResponseCollection> accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Account Custom Nameserver Glue Records (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Account Custom Nameserver Glue Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Account Custom Nameserver Glue Records response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsAsync(String accountId, final ApiCallback<DnsCustomNameserversAcnsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecordsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversAcnsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
