/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.KeylessSslForAZoneCreateKeylessSslConfiguration4XXResponse;
import org.openapitools.client.model.KeylessSslForAZoneCreateKeylessSslConfigurationRequest;
import org.openapitools.client.model.KeylessSslForAZoneDeleteKeylessSslConfiguration4XXResponse;
import org.openapitools.client.model.KeylessSslForAZoneEditKeylessSslConfigurationRequest;
import org.openapitools.client.model.KeylessSslForAZoneListKeylessSslConfigurations4XXResponse;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseSingleId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeylessSslForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeylessSslForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeylessSslForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keylessSslForAZoneCreateKeylessSslConfiguration
     * @param zoneId  (required)
     * @param keylessSslForAZoneCreateKeylessSslConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneCreateKeylessSslConfigurationCall(String zoneId, KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keylessSslForAZoneCreateKeylessSslConfigurationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/keyless_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(String zoneId, KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling keylessSslForAZoneCreateKeylessSslConfiguration(Async)");
        }

        // verify the required parameter 'keylessSslForAZoneCreateKeylessSslConfigurationRequest' is set
        if (keylessSslForAZoneCreateKeylessSslConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'keylessSslForAZoneCreateKeylessSslConfigurationRequest' when calling keylessSslForAZoneCreateKeylessSslConfiguration(Async)");
        }

        return keylessSslForAZoneCreateKeylessSslConfigurationCall(zoneId, keylessSslForAZoneCreateKeylessSslConfigurationRequest, _callback);

    }

    /**
     * Create Keyless SSL Configuration
     * 
     * @param zoneId  (required)
     * @param keylessSslForAZoneCreateKeylessSslConfigurationRequest  (required)
     * @return TlsCertificatesAndHostnamesKeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesKeylessResponseSingle keylessSslForAZoneCreateKeylessSslConfiguration(String zoneId, KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> localVarResp = keylessSslForAZoneCreateKeylessSslConfigurationWithHttpInfo(zoneId, keylessSslForAZoneCreateKeylessSslConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Create Keyless SSL Configuration
     * 
     * @param zoneId  (required)
     * @param keylessSslForAZoneCreateKeylessSslConfigurationRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesKeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> keylessSslForAZoneCreateKeylessSslConfigurationWithHttpInfo(String zoneId, KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(zoneId, keylessSslForAZoneCreateKeylessSslConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Keyless SSL Configuration (asynchronously)
     * 
     * @param zoneId  (required)
     * @param keylessSslForAZoneCreateKeylessSslConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneCreateKeylessSslConfigurationAsync(String zoneId, KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest, final ApiCallback<TlsCertificatesAndHostnamesKeylessResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(zoneId, keylessSslForAZoneCreateKeylessSslConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keylessSslForAZoneDeleteKeylessSslConfiguration
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneDeleteKeylessSslConfigurationCall(String keylessCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/keyless_certificates/{keyless_certificate_id}"
            .replace("{" + "keyless_certificate_id" + "}", localVarApiClient.escapeString(keylessCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(String keylessCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keylessCertificateId' is set
        if (keylessCertificateId == null) {
            throw new ApiException("Missing the required parameter 'keylessCertificateId' when calling keylessSslForAZoneDeleteKeylessSslConfiguration(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling keylessSslForAZoneDeleteKeylessSslConfiguration(Async)");
        }

        return keylessSslForAZoneDeleteKeylessSslConfigurationCall(keylessCertificateId, zoneId, _callback);

    }

    /**
     * Delete Keyless SSL Configuration
     * 
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesKeylessResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesKeylessResponseSingleId keylessSslForAZoneDeleteKeylessSslConfiguration(String keylessCertificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingleId> localVarResp = keylessSslForAZoneDeleteKeylessSslConfigurationWithHttpInfo(keylessCertificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Keyless SSL Configuration
     * 
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesKeylessResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingleId> keylessSslForAZoneDeleteKeylessSslConfigurationWithHttpInfo(String keylessCertificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Keyless SSL Configuration (asynchronously)
     * 
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneDeleteKeylessSslConfigurationAsync(String keylessCertificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesKeylessResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keylessSslForAZoneEditKeylessSslConfiguration
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param keylessSslForAZoneEditKeylessSslConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneEditKeylessSslConfigurationCall(String keylessCertificateId, String zoneId, KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keylessSslForAZoneEditKeylessSslConfigurationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/keyless_certificates/{keyless_certificate_id}"
            .replace("{" + "keyless_certificate_id" + "}", localVarApiClient.escapeString(keylessCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(String keylessCertificateId, String zoneId, KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keylessCertificateId' is set
        if (keylessCertificateId == null) {
            throw new ApiException("Missing the required parameter 'keylessCertificateId' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }

        // verify the required parameter 'keylessSslForAZoneEditKeylessSslConfigurationRequest' is set
        if (keylessSslForAZoneEditKeylessSslConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'keylessSslForAZoneEditKeylessSslConfigurationRequest' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }

        return keylessSslForAZoneEditKeylessSslConfigurationCall(keylessCertificateId, zoneId, keylessSslForAZoneEditKeylessSslConfigurationRequest, _callback);

    }

    /**
     * Edit Keyless SSL Configuration
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param keylessSslForAZoneEditKeylessSslConfigurationRequest  (required)
     * @return TlsCertificatesAndHostnamesKeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesKeylessResponseSingle keylessSslForAZoneEditKeylessSslConfiguration(String keylessCertificateId, String zoneId, KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> localVarResp = keylessSslForAZoneEditKeylessSslConfigurationWithHttpInfo(keylessCertificateId, zoneId, keylessSslForAZoneEditKeylessSslConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Keyless SSL Configuration
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param keylessSslForAZoneEditKeylessSslConfigurationRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesKeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> keylessSslForAZoneEditKeylessSslConfigurationWithHttpInfo(String keylessCertificateId, String zoneId, KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, keylessSslForAZoneEditKeylessSslConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Keyless SSL Configuration (asynchronously)
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param keylessSslForAZoneEditKeylessSslConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneEditKeylessSslConfigurationAsync(String keylessCertificateId, String zoneId, KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest, final ApiCallback<TlsCertificatesAndHostnamesKeylessResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, keylessSslForAZoneEditKeylessSslConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keylessSslForAZoneGetKeylessSslConfiguration
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneGetKeylessSslConfigurationCall(String keylessCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/keyless_certificates/{keyless_certificate_id}"
            .replace("{" + "keyless_certificate_id" + "}", localVarApiClient.escapeString(keylessCertificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(String keylessCertificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keylessCertificateId' is set
        if (keylessCertificateId == null) {
            throw new ApiException("Missing the required parameter 'keylessCertificateId' when calling keylessSslForAZoneGetKeylessSslConfiguration(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling keylessSslForAZoneGetKeylessSslConfiguration(Async)");
        }

        return keylessSslForAZoneGetKeylessSslConfigurationCall(keylessCertificateId, zoneId, _callback);

    }

    /**
     * Get Keyless SSL Configuration
     * Get details for one Keyless SSL configuration.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesKeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesKeylessResponseSingle keylessSslForAZoneGetKeylessSslConfiguration(String keylessCertificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> localVarResp = keylessSslForAZoneGetKeylessSslConfigurationWithHttpInfo(keylessCertificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Keyless SSL Configuration
     * Get details for one Keyless SSL configuration.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesKeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesKeylessResponseSingle> keylessSslForAZoneGetKeylessSslConfigurationWithHttpInfo(String keylessCertificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Keyless SSL Configuration (asynchronously)
     * Get details for one Keyless SSL configuration.
     * @param keylessCertificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Keyless SSL Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Keyless SSL Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneGetKeylessSslConfigurationAsync(String keylessCertificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesKeylessResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(keylessCertificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keylessSslForAZoneListKeylessSslConfigurations
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Keyless SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Keyless SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneListKeylessSslConfigurationsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/keyless_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling keylessSslForAZoneListKeylessSslConfigurations(Async)");
        }

        return keylessSslForAZoneListKeylessSslConfigurationsCall(zoneId, _callback);

    }

    /**
     * List Keyless SSL Configurations
     * List all Keyless SSL configurations for a given zone.
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesKeylessResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Keyless SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Keyless SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesKeylessResponseCollection keylessSslForAZoneListKeylessSslConfigurations(String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesKeylessResponseCollection> localVarResp = keylessSslForAZoneListKeylessSslConfigurationsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Keyless SSL Configurations
     * List all Keyless SSL configurations for a given zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesKeylessResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Keyless SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Keyless SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesKeylessResponseCollection> keylessSslForAZoneListKeylessSslConfigurationsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Keyless SSL Configurations (asynchronously)
     * List all Keyless SSL configurations for a given zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Keyless SSL Configurations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Keyless SSL Configurations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keylessSslForAZoneListKeylessSslConfigurationsAsync(String zoneId, final ApiCallback<TlsCertificatesAndHostnamesKeylessResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesKeylessResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
