/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PostZonesZoneIdentifierZarazPublish200Response;
import org.openapitools.client.model.ZarazApiResponseCommonFailure;
import org.openapitools.client.model.ZarazZarazConfigBody;
import org.openapitools.client.model.ZarazZarazConfigHistoryResponse;
import org.openapitools.client.model.ZarazZarazConfigResponse;
import org.openapitools.client.model.ZarazZarazConfigReturn;
import org.openapitools.client.model.ZarazZarazHistoryResponse;
import org.openapitools.client.model.ZarazZarazWorkflow;
import org.openapitools.client.model.ZarazZarazWorkflowResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZarazApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZarazApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZarazApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getZonesZoneIdentifierZarazConfig
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazConfigCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/config"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazConfigValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazConfig(Async)");
        }

        return getZonesZoneIdentifierZarazConfigCall(zoneId, _callback);

    }

    /**
     * Get Zaraz configuration
     * Gets latest Zaraz configuration for a zone. It can be preview or published configuration, whichever was the last updated. Secret variables values will not be included.
     * @param zoneId  (required)
     * @return ZarazZarazConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigResponse getZonesZoneIdentifierZarazConfig(String zoneId) throws ApiException {
        ApiResponse<ZarazZarazConfigResponse> localVarResp = getZonesZoneIdentifierZarazConfigWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Zaraz configuration
     * Gets latest Zaraz configuration for a zone. It can be preview or published configuration, whichever was the last updated. Secret variables values will not be included.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZarazZarazConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigResponse> getZonesZoneIdentifierZarazConfigWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazConfigValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zaraz configuration (asynchronously)
     * Gets latest Zaraz configuration for a zone. It can be preview or published configuration, whichever was the last updated. Secret variables values will not be included.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazConfigAsync(String zoneId, final ApiCallback<ZarazZarazConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazConfigValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierZarazConfigHistory
     * @param zoneId  (required)
     * @param ids Comma separated list of Zaraz configuration IDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz historical configurations by ID(s) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz historical configurations by ID(s) failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazConfigHistoryCall(String zoneId, List<Integer> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/history/configs"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazConfigHistoryValidateBeforeCall(String zoneId, List<Integer> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazConfigHistory(Async)");
        }

        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getZonesZoneIdentifierZarazConfigHistory(Async)");
        }

        return getZonesZoneIdentifierZarazConfigHistoryCall(zoneId, ids, _callback);

    }

    /**
     * Get Zaraz historical configurations by ID(s)
     * Gets a history of published Zaraz configurations by ID(s) for a zone.
     * @param zoneId  (required)
     * @param ids Comma separated list of Zaraz configuration IDs (required)
     * @return ZarazZarazConfigHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz historical configurations by ID(s) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz historical configurations by ID(s) failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigHistoryResponse getZonesZoneIdentifierZarazConfigHistory(String zoneId, List<Integer> ids) throws ApiException {
        ApiResponse<ZarazZarazConfigHistoryResponse> localVarResp = getZonesZoneIdentifierZarazConfigHistoryWithHttpInfo(zoneId, ids);
        return localVarResp.getData();
    }

    /**
     * Get Zaraz historical configurations by ID(s)
     * Gets a history of published Zaraz configurations by ID(s) for a zone.
     * @param zoneId  (required)
     * @param ids Comma separated list of Zaraz configuration IDs (required)
     * @return ApiResponse&lt;ZarazZarazConfigHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz historical configurations by ID(s) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz historical configurations by ID(s) failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigHistoryResponse> getZonesZoneIdentifierZarazConfigHistoryWithHttpInfo(String zoneId, List<Integer> ids) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazConfigHistoryValidateBeforeCall(zoneId, ids, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zaraz historical configurations by ID(s) (asynchronously)
     * Gets a history of published Zaraz configurations by ID(s) for a zone.
     * @param zoneId  (required)
     * @param ids Comma separated list of Zaraz configuration IDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz historical configurations by ID(s) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz historical configurations by ID(s) failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazConfigHistoryAsync(String zoneId, List<Integer> ids, final ApiCallback<ZarazZarazConfigHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazConfigHistoryValidateBeforeCall(zoneId, ids, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierZarazDefault
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz default configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz default configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazDefaultCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/default"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazDefaultValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazDefault(Async)");
        }

        return getZonesZoneIdentifierZarazDefaultCall(zoneId, _callback);

    }

    /**
     * Get default Zaraz configuration
     * Gets default Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @return ZarazZarazConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz default configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz default configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigResponse getZonesZoneIdentifierZarazDefault(String zoneId) throws ApiException {
        ApiResponse<ZarazZarazConfigResponse> localVarResp = getZonesZoneIdentifierZarazDefaultWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get default Zaraz configuration
     * Gets default Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZarazZarazConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz default configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz default configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigResponse> getZonesZoneIdentifierZarazDefaultWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazDefaultValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default Zaraz configuration (asynchronously)
     * Gets default Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz default configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz default configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazDefaultAsync(String zoneId, final ApiCallback<ZarazZarazConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazDefaultValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierZarazExport
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazExportCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/export"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazExportValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazExport(Async)");
        }

        return getZonesZoneIdentifierZarazExportCall(zoneId, _callback);

    }

    /**
     * Export Zaraz configuration
     * Exports full current published Zaraz configuration for a zone, secret variables included.
     * @param zoneId  (required)
     * @return ZarazZarazConfigReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigReturn getZonesZoneIdentifierZarazExport(String zoneId) throws ApiException {
        ApiResponse<ZarazZarazConfigReturn> localVarResp = getZonesZoneIdentifierZarazExportWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Export Zaraz configuration
     * Exports full current published Zaraz configuration for a zone, secret variables included.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZarazZarazConfigReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigReturn> getZonesZoneIdentifierZarazExportWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazExportValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Zaraz configuration (asynchronously)
     * Exports full current published Zaraz configuration for a zone, secret variables included.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz configuration response </td><td>  * Content-Disposition -  <br>  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazExportAsync(String zoneId, final ApiCallback<ZarazZarazConfigReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazExportValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierZarazHistory
     * @param zoneId  (required)
     * @param offset Ordinal number to start listing the results with. Default value is 0. (optional)
     * @param limit Maximum amount of results to list. Default value is 10. (optional)
     * @param sortField The field to sort by. Default is updated_at. (optional)
     * @param sortOrder Sorting order. Default is DESC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zaraz historical configuration records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zaraz historical configuration records failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazHistoryCall(String zoneId, Integer offset, Integer limit, String sortField, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/history"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazHistoryValidateBeforeCall(String zoneId, Integer offset, Integer limit, String sortField, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazHistory(Async)");
        }

        return getZonesZoneIdentifierZarazHistoryCall(zoneId, offset, limit, sortField, sortOrder, _callback);

    }

    /**
     * List Zaraz historical configuration records
     * Lists a history of published Zaraz configuration records for a zone.
     * @param zoneId  (required)
     * @param offset Ordinal number to start listing the results with. Default value is 0. (optional)
     * @param limit Maximum amount of results to list. Default value is 10. (optional)
     * @param sortField The field to sort by. Default is updated_at. (optional)
     * @param sortOrder Sorting order. Default is DESC. (optional)
     * @return ZarazZarazHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zaraz historical configuration records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zaraz historical configuration records failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazHistoryResponse getZonesZoneIdentifierZarazHistory(String zoneId, Integer offset, Integer limit, String sortField, String sortOrder) throws ApiException {
        ApiResponse<ZarazZarazHistoryResponse> localVarResp = getZonesZoneIdentifierZarazHistoryWithHttpInfo(zoneId, offset, limit, sortField, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List Zaraz historical configuration records
     * Lists a history of published Zaraz configuration records for a zone.
     * @param zoneId  (required)
     * @param offset Ordinal number to start listing the results with. Default value is 0. (optional)
     * @param limit Maximum amount of results to list. Default value is 10. (optional)
     * @param sortField The field to sort by. Default is updated_at. (optional)
     * @param sortOrder Sorting order. Default is DESC. (optional)
     * @return ApiResponse&lt;ZarazZarazHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zaraz historical configuration records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zaraz historical configuration records failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazHistoryResponse> getZonesZoneIdentifierZarazHistoryWithHttpInfo(String zoneId, Integer offset, Integer limit, String sortField, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazHistoryValidateBeforeCall(zoneId, offset, limit, sortField, sortOrder, null);
        Type localVarReturnType = new TypeToken<ZarazZarazHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Zaraz historical configuration records (asynchronously)
     * Lists a history of published Zaraz configuration records for a zone.
     * @param zoneId  (required)
     * @param offset Ordinal number to start listing the results with. Default value is 0. (optional)
     * @param limit Maximum amount of results to list. Default value is 10. (optional)
     * @param sortField The field to sort by. Default is updated_at. (optional)
     * @param sortOrder Sorting order. Default is DESC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zaraz historical configuration records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zaraz historical configuration records failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazHistoryAsync(String zoneId, Integer offset, Integer limit, String sortField, String sortOrder, final ApiCallback<ZarazZarazHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazHistoryValidateBeforeCall(zoneId, offset, limit, sortField, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierZarazWorkflow
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazWorkflowCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/workflow"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierZarazWorkflowValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierZarazWorkflow(Async)");
        }

        return getZonesZoneIdentifierZarazWorkflowCall(zoneId, _callback);

    }

    /**
     * Get Zaraz workflow
     * Gets Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @return ZarazZarazWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazWorkflowResponse getZonesZoneIdentifierZarazWorkflow(String zoneId) throws ApiException {
        ApiResponse<ZarazZarazWorkflowResponse> localVarResp = getZonesZoneIdentifierZarazWorkflowWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Zaraz workflow
     * Gets Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZarazZarazWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazWorkflowResponse> getZonesZoneIdentifierZarazWorkflowWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazWorkflowValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZarazZarazWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zaraz workflow (asynchronously)
     * Gets Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierZarazWorkflowAsync(String zoneId, final ApiCallback<ZarazZarazWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierZarazWorkflowValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierZarazPublish
     * @param zoneId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierZarazPublishCall(String zoneId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/publish"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierZarazPublishValidateBeforeCall(String zoneId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierZarazPublish(Async)");
        }

        return postZonesZoneIdentifierZarazPublishCall(zoneId, body, _callback);

    }

    /**
     * Publish Zaraz preview configuration
     * Publish current Zaraz preview configuration for a zone.
     * @param zoneId  (required)
     * @param body  (optional)
     * @return PostZonesZoneIdentifierZarazPublish200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public PostZonesZoneIdentifierZarazPublish200Response postZonesZoneIdentifierZarazPublish(String zoneId, String body) throws ApiException {
        ApiResponse<PostZonesZoneIdentifierZarazPublish200Response> localVarResp = postZonesZoneIdentifierZarazPublishWithHttpInfo(zoneId, body);
        return localVarResp.getData();
    }

    /**
     * Publish Zaraz preview configuration
     * Publish current Zaraz preview configuration for a zone.
     * @param zoneId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PostZonesZoneIdentifierZarazPublish200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostZonesZoneIdentifierZarazPublish200Response> postZonesZoneIdentifierZarazPublishWithHttpInfo(String zoneId, String body) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierZarazPublishValidateBeforeCall(zoneId, body, null);
        Type localVarReturnType = new TypeToken<PostZonesZoneIdentifierZarazPublish200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish Zaraz preview configuration (asynchronously)
     * Publish current Zaraz preview configuration for a zone.
     * @param zoneId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierZarazPublishAsync(String zoneId, String body, final ApiCallback<PostZonesZoneIdentifierZarazPublish200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierZarazPublishValidateBeforeCall(zoneId, body, _callback);
        Type localVarReturnType = new TypeToken<PostZonesZoneIdentifierZarazPublish200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putZonesZoneIdentifierZarazConfig
     * @param zoneId  (required)
     * @param zarazZarazConfigBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazConfigCall(String zoneId, ZarazZarazConfigBody zarazZarazConfigBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zarazZarazConfigBody;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/config"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZonesZoneIdentifierZarazConfigValidateBeforeCall(String zoneId, ZarazZarazConfigBody zarazZarazConfigBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZonesZoneIdentifierZarazConfig(Async)");
        }

        // verify the required parameter 'zarazZarazConfigBody' is set
        if (zarazZarazConfigBody == null) {
            throw new ApiException("Missing the required parameter 'zarazZarazConfigBody' when calling putZonesZoneIdentifierZarazConfig(Async)");
        }

        return putZonesZoneIdentifierZarazConfigCall(zoneId, zarazZarazConfigBody, _callback);

    }

    /**
     * Update Zaraz configuration
     * Updates Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @param zarazZarazConfigBody  (required)
     * @return ZarazZarazConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigResponse putZonesZoneIdentifierZarazConfig(String zoneId, ZarazZarazConfigBody zarazZarazConfigBody) throws ApiException {
        ApiResponse<ZarazZarazConfigResponse> localVarResp = putZonesZoneIdentifierZarazConfigWithHttpInfo(zoneId, zarazZarazConfigBody);
        return localVarResp.getData();
    }

    /**
     * Update Zaraz configuration
     * Updates Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @param zarazZarazConfigBody  (required)
     * @return ApiResponse&lt;ZarazZarazConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigResponse> putZonesZoneIdentifierZarazConfigWithHttpInfo(String zoneId, ZarazZarazConfigBody zarazZarazConfigBody) throws ApiException {
        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazConfigValidateBeforeCall(zoneId, zarazZarazConfigBody, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Zaraz configuration (asynchronously)
     * Updates Zaraz configuration for a zone.
     * @param zoneId  (required)
     * @param zarazZarazConfigBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazConfigAsync(String zoneId, ZarazZarazConfigBody zarazZarazConfigBody, final ApiCallback<ZarazZarazConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazConfigValidateBeforeCall(zoneId, zarazZarazConfigBody, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putZonesZoneIdentifierZarazHistory
     * @param zoneId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore Zaraz historical configuration by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restore Zaraz historical configuration by ID failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazHistoryCall(String zoneId, Integer body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/history"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZonesZoneIdentifierZarazHistoryValidateBeforeCall(String zoneId, Integer body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZonesZoneIdentifierZarazHistory(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putZonesZoneIdentifierZarazHistory(Async)");
        }

        return putZonesZoneIdentifierZarazHistoryCall(zoneId, body, _callback);

    }

    /**
     * Restore Zaraz historical configuration by ID
     * Restores a historical published Zaraz configuration by ID for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @return ZarazZarazConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore Zaraz historical configuration by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restore Zaraz historical configuration by ID failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazConfigResponse putZonesZoneIdentifierZarazHistory(String zoneId, Integer body) throws ApiException {
        ApiResponse<ZarazZarazConfigResponse> localVarResp = putZonesZoneIdentifierZarazHistoryWithHttpInfo(zoneId, body);
        return localVarResp.getData();
    }

    /**
     * Restore Zaraz historical configuration by ID
     * Restores a historical published Zaraz configuration by ID for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ZarazZarazConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore Zaraz historical configuration by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restore Zaraz historical configuration by ID failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazConfigResponse> putZonesZoneIdentifierZarazHistoryWithHttpInfo(String zoneId, Integer body) throws ApiException {
        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazHistoryValidateBeforeCall(zoneId, body, null);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restore Zaraz historical configuration by ID (asynchronously)
     * Restores a historical published Zaraz configuration by ID for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore Zaraz historical configuration by ID response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restore Zaraz historical configuration by ID failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazHistoryAsync(String zoneId, Integer body, final ApiCallback<ZarazZarazConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazHistoryValidateBeforeCall(zoneId, body, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putZonesZoneIdentifierZarazWorkflow
     * @param zoneId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazWorkflowCall(String zoneId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/zaraz/workflow"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZonesZoneIdentifierZarazWorkflowValidateBeforeCall(String zoneId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZonesZoneIdentifierZarazWorkflow(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putZonesZoneIdentifierZarazWorkflow(Async)");
        }

        return putZonesZoneIdentifierZarazWorkflowCall(zoneId, body, _callback);

    }

    /**
     * Update Zaraz workflow
     * Updates Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @return ZarazZarazWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZarazZarazWorkflowResponse putZonesZoneIdentifierZarazWorkflow(String zoneId, String body) throws ApiException {
        ApiResponse<ZarazZarazWorkflowResponse> localVarResp = putZonesZoneIdentifierZarazWorkflowWithHttpInfo(zoneId, body);
        return localVarResp.getData();
    }

    /**
     * Update Zaraz workflow
     * Updates Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ZarazZarazWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZarazZarazWorkflowResponse> putZonesZoneIdentifierZarazWorkflowWithHttpInfo(String zoneId, String body) throws ApiException {
        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazWorkflowValidateBeforeCall(zoneId, body, null);
        Type localVarReturnType = new TypeToken<ZarazZarazWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Zaraz workflow (asynchronously)
     * Updates Zaraz workflow for a zone.
     * @param zoneId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zaraz workflow response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zaraz workflow response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierZarazWorkflowAsync(String zoneId, String body, final ApiCallback<ZarazZarazWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZonesZoneIdentifierZarazWorkflowValidateBeforeCall(zoneId, body, _callback);
        Type localVarReturnType = new TypeToken<ZarazZarazWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
