/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.NamespaceWorkerPutScriptContentRequestMetadata;
import org.openapitools.client.model.NamespaceWorkerScriptUploadWorkerModule200Response;
import org.openapitools.client.model.NamespaceWorkerScriptUploadWorkerModule4XXResponse;
import org.openapitools.client.model.NamespaceWorkerScriptUploadWorkerModuleRequest;
import org.openapitools.client.model.WorkerScriptFetchUsageModel4XXResponse;
import org.openapitools.client.model.WorkerScriptListWorkers4XXResponse;
import org.openapitools.client.model.WorkersApiResponseCommon;
import org.openapitools.client.model.WorkersApiResponseCommonFailure;
import org.openapitools.client.model.WorkersScriptAndVersionSettingsItem;
import org.openapitools.client.model.WorkersScriptAndVersionSettingsResponse;
import org.openapitools.client.model.WorkersScriptResponseCollection;
import org.openapitools.client.model.WorkersScriptResponseSingle;
import org.openapitools.client.model.WorkersScriptSettingsItem;
import org.openapitools.client.model.WorkersScriptSettingsResponse;
import org.openapitools.client.model.WorkersUsageModelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerScriptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerScriptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerScriptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerScriptDeleteWorker
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptDeleteWorkerCall(String scriptName, String accountId, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptDeleteWorkerValidateBeforeCall(String scriptName, String accountId, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptDeleteWorker(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptDeleteWorker(Async)");
        }

        return workerScriptDeleteWorkerCall(scriptName, accountId, force, _callback);

    }

    /**
     * Delete Worker
     * Delete your worker. This call has no response body on a successful delete.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public void workerScriptDeleteWorker(String scriptName, String accountId, Boolean force) throws ApiException {
        workerScriptDeleteWorkerWithHttpInfo(scriptName, accountId, force);
    }

    /**
     * Delete Worker
     * Delete your worker. This call has no response body on a successful delete.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workerScriptDeleteWorkerWithHttpInfo(String scriptName, String accountId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = workerScriptDeleteWorkerValidateBeforeCall(scriptName, accountId, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Worker (asynchronously)
     * Delete your worker. This call has no response body on a successful delete.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptDeleteWorkerAsync(String scriptName, String accountId, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptDeleteWorkerValidateBeforeCall(scriptName, accountId, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptDownloadWorker
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptDownloadWorkerCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "undefined"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptDownloadWorkerValidateBeforeCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptDownloadWorker(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptDownloadWorker(Async)");
        }

        return workerScriptDownloadWorkerCall(scriptName, accountId, _callback);

    }

    /**
     * Download Worker
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public Object workerScriptDownloadWorker(String scriptName, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = workerScriptDownloadWorkerWithHttpInfo(scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * Download Worker
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> workerScriptDownloadWorkerWithHttpInfo(String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerScriptDownloadWorkerValidateBeforeCall(scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Worker (asynchronously)
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptDownloadWorkerAsync(String scriptName, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptDownloadWorkerValidateBeforeCall(scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptFetchUsageModel
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptFetchUsageModelCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/usage-model"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptFetchUsageModelValidateBeforeCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptFetchUsageModel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptFetchUsageModel(Async)");
        }

        return workerScriptFetchUsageModelCall(scriptName, accountId, _callback);

    }

    /**
     * Fetch Usage Model
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return WorkersUsageModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersUsageModelResponse workerScriptFetchUsageModel(String scriptName, String accountId) throws ApiException {
        ApiResponse<WorkersUsageModelResponse> localVarResp = workerScriptFetchUsageModelWithHttpInfo(scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * Fetch Usage Model
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersUsageModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersUsageModelResponse> workerScriptFetchUsageModelWithHttpInfo(String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerScriptFetchUsageModelValidateBeforeCall(scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersUsageModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Usage Model (asynchronously)
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptFetchUsageModelAsync(String scriptName, String accountId, final ApiCallback<WorkersUsageModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptFetchUsageModelValidateBeforeCall(scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersUsageModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptGetContent
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptGetContentCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/content/v2"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "string",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptGetContentValidateBeforeCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptGetContent(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptGetContent(Async)");
        }

        return workerScriptGetContentCall(accountId, scriptName, _callback);

    }

    /**
     * Get script content
     * Fetch script content only
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script content failure </td><td>  -  </td></tr>
     </table>
     */
    public Object workerScriptGetContent(String accountId, String scriptName) throws ApiException {
        ApiResponse<Object> localVarResp = workerScriptGetContentWithHttpInfo(accountId, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get script content
     * Fetch script content only
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> workerScriptGetContentWithHttpInfo(String accountId, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = workerScriptGetContentValidateBeforeCall(accountId, scriptName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get script content (asynchronously)
     * Fetch script content only
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptGetContentAsync(String accountId, String scriptName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptGetContentValidateBeforeCall(accountId, scriptName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptGetSettings
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptGetSettingsCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptGetSettingsValidateBeforeCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptGetSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptGetSettings(Async)");
        }

        return workerScriptGetSettingsCall(accountId, scriptName, _callback);

    }

    /**
     * Get Settings
     * Get metadata and config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return WorkersScriptAndVersionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptAndVersionSettingsResponse workerScriptGetSettings(String accountId, String scriptName) throws ApiException {
        ApiResponse<WorkersScriptAndVersionSettingsResponse> localVarResp = workerScriptGetSettingsWithHttpInfo(accountId, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Settings
     * Get metadata and config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;WorkersScriptAndVersionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptAndVersionSettingsResponse> workerScriptGetSettingsWithHttpInfo(String accountId, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = workerScriptGetSettingsValidateBeforeCall(accountId, scriptName, null);
        Type localVarReturnType = new TypeToken<WorkersScriptAndVersionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Settings (asynchronously)
     * Get metadata and config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptGetSettingsAsync(String accountId, String scriptName, final ApiCallback<WorkersScriptAndVersionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptGetSettingsValidateBeforeCall(accountId, scriptName, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptAndVersionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptListWorkers
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Workers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Workers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptListWorkersCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptListWorkersValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptListWorkers(Async)");
        }

        return workerScriptListWorkersCall(accountId, _callback);

    }

    /**
     * List Workers
     * Fetch a list of uploaded workers.
     * @param accountId  (required)
     * @return WorkersScriptResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Workers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Workers response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptResponseCollection workerScriptListWorkers(String accountId) throws ApiException {
        ApiResponse<WorkersScriptResponseCollection> localVarResp = workerScriptListWorkersWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Workers
     * Fetch a list of uploaded workers.
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersScriptResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Workers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Workers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptResponseCollection> workerScriptListWorkersWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerScriptListWorkersValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Workers (asynchronously)
     * Fetch a list of uploaded workers.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Workers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Workers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptListWorkersAsync(String accountId, final ApiCallback<WorkersScriptResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptListWorkersValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptPatchSettings
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptPatchSettingsCall(String accountId, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptPatchSettingsValidateBeforeCall(String accountId, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptPatchSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptPatchSettings(Async)");
        }

        return workerScriptPatchSettingsCall(accountId, scriptName, settings, _callback);

    }

    /**
     * Patch Settings
     * Patch metadata or config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @return WorkersScriptAndVersionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptAndVersionSettingsResponse workerScriptPatchSettings(String accountId, String scriptName, WorkersScriptAndVersionSettingsItem settings) throws ApiException {
        ApiResponse<WorkersScriptAndVersionSettingsResponse> localVarResp = workerScriptPatchSettingsWithHttpInfo(accountId, scriptName, settings);
        return localVarResp.getData();
    }

    /**
     * Patch Settings
     * Patch metadata or config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @return ApiResponse&lt;WorkersScriptAndVersionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptAndVersionSettingsResponse> workerScriptPatchSettingsWithHttpInfo(String accountId, String scriptName, WorkersScriptAndVersionSettingsItem settings) throws ApiException {
        okhttp3.Call localVarCall = workerScriptPatchSettingsValidateBeforeCall(accountId, scriptName, settings, null);
        Type localVarReturnType = new TypeToken<WorkersScriptAndVersionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Settings (asynchronously)
     * Patch metadata or config, such as bindings or usage model
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptPatchSettingsAsync(String accountId, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback<WorkersScriptAndVersionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptPatchSettingsValidateBeforeCall(accountId, scriptName, settings, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptAndVersionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptPutContent
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptPutContentCall(String accountId, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/content"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lessThanAnyPartNameGreaterThan != null) {
            localVarFormParams.put("&lt;any part name&gt;", lessThanAnyPartNameGreaterThan);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (CF_WORKER_BODY_PART != null) {
            localVarHeaderParams.put("CF-WORKER-BODY-PART", localVarApiClient.parameterToString(CF_WORKER_BODY_PART));
        }

        if (CF_WORKER_MAIN_MODULE_PART != null) {
            localVarHeaderParams.put("CF-WORKER-MAIN-MODULE-PART", localVarApiClient.parameterToString(CF_WORKER_MAIN_MODULE_PART));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptPutContentValidateBeforeCall(String accountId, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptPutContent(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptPutContent(Async)");
        }

        return workerScriptPutContentCall(accountId, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);

    }

    /**
     * Put script content
     * Put script content without touching config or metadata
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return WorkersScriptResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptResponseSingle workerScriptPutContent(String accountId, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        ApiResponse<WorkersScriptResponseSingle> localVarResp = workerScriptPutContentWithHttpInfo(accountId, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata);
        return localVarResp.getData();
    }

    /**
     * Put script content
     * Put script content without touching config or metadata
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return ApiResponse&lt;WorkersScriptResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptResponseSingle> workerScriptPutContentWithHttpInfo(String accountId, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        okhttp3.Call localVarCall = workerScriptPutContentValidateBeforeCall(accountId, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, null);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put script content (asynchronously)
     * Put script content without touching config or metadata
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptPutContentAsync(String accountId, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback<WorkersScriptResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptPutContentValidateBeforeCall(accountId, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptSettingsGetSettings
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptSettingsGetSettingsCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/script-settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptSettingsGetSettingsValidateBeforeCall(String accountId, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptSettingsGetSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptSettingsGetSettings(Async)");
        }

        return workerScriptSettingsGetSettingsCall(accountId, scriptName, _callback);

    }

    /**
     * Get Script Settings
     * Get script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return WorkersScriptSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptSettingsResponse workerScriptSettingsGetSettings(String accountId, String scriptName) throws ApiException {
        ApiResponse<WorkersScriptSettingsResponse> localVarResp = workerScriptSettingsGetSettingsWithHttpInfo(accountId, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Settings
     * Get script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;WorkersScriptSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptSettingsResponse> workerScriptSettingsGetSettingsWithHttpInfo(String accountId, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = workerScriptSettingsGetSettingsValidateBeforeCall(accountId, scriptName, null);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Settings (asynchronously)
     * Get script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptSettingsGetSettingsAsync(String accountId, String scriptName, final ApiCallback<WorkersScriptSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptSettingsGetSettingsValidateBeforeCall(accountId, scriptName, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptSettingsPatchSettings
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param workersScriptSettingsItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptSettingsPatchSettingsCall(String accountId, String scriptName, WorkersScriptSettingsItem workersScriptSettingsItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersScriptSettingsItem;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/script-settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptSettingsPatchSettingsValidateBeforeCall(String accountId, String scriptName, WorkersScriptSettingsItem workersScriptSettingsItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptSettingsPatchSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptSettingsPatchSettings(Async)");
        }

        // verify the required parameter 'workersScriptSettingsItem' is set
        if (workersScriptSettingsItem == null) {
            throw new ApiException("Missing the required parameter 'workersScriptSettingsItem' when calling workerScriptSettingsPatchSettings(Async)");
        }

        return workerScriptSettingsPatchSettingsCall(accountId, scriptName, workersScriptSettingsItem, _callback);

    }

    /**
     * Patch Script Settings
     * Patch script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param workersScriptSettingsItem  (required)
     * @return WorkersScriptSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptSettingsResponse workerScriptSettingsPatchSettings(String accountId, String scriptName, WorkersScriptSettingsItem workersScriptSettingsItem) throws ApiException {
        ApiResponse<WorkersScriptSettingsResponse> localVarResp = workerScriptSettingsPatchSettingsWithHttpInfo(accountId, scriptName, workersScriptSettingsItem);
        return localVarResp.getData();
    }

    /**
     * Patch Script Settings
     * Patch script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param workersScriptSettingsItem  (required)
     * @return ApiResponse&lt;WorkersScriptSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptSettingsResponse> workerScriptSettingsPatchSettingsWithHttpInfo(String accountId, String scriptName, WorkersScriptSettingsItem workersScriptSettingsItem) throws ApiException {
        okhttp3.Call localVarCall = workerScriptSettingsPatchSettingsValidateBeforeCall(accountId, scriptName, workersScriptSettingsItem, null);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Script Settings (asynchronously)
     * Patch script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.
     * @param accountId  (required)
     * @param scriptName  (required)
     * @param workersScriptSettingsItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptSettingsPatchSettingsAsync(String accountId, String scriptName, WorkersScriptSettingsItem workersScriptSettingsItem, final ApiCallback<WorkersScriptSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptSettingsPatchSettingsValidateBeforeCall(accountId, scriptName, workersScriptSettingsItem, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptUpdateUsageModel
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptUpdateUsageModelCall(String scriptName, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/usage-model"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptUpdateUsageModelValidateBeforeCall(String scriptName, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptUpdateUsageModel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptUpdateUsageModel(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workerScriptUpdateUsageModel(Async)");
        }

        return workerScriptUpdateUsageModelCall(scriptName, accountId, body, _callback);

    }

    /**
     * Update Usage Model
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return WorkersUsageModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersUsageModelResponse workerScriptUpdateUsageModel(String scriptName, String accountId, Object body) throws ApiException {
        ApiResponse<WorkersUsageModelResponse> localVarResp = workerScriptUpdateUsageModelWithHttpInfo(scriptName, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Update Usage Model
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;WorkersUsageModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersUsageModelResponse> workerScriptUpdateUsageModelWithHttpInfo(String scriptName, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = workerScriptUpdateUsageModelValidateBeforeCall(scriptName, accountId, body, null);
        Type localVarReturnType = new TypeToken<WorkersUsageModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Usage Model (asynchronously)
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Usage Model response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Usage Model response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptUpdateUsageModelAsync(String scriptName, String accountId, Object body, final ApiCallback<WorkersUsageModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptUpdateUsageModelValidateBeforeCall(scriptName, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<WorkersUsageModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptUploadWorkerModule
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param rollbackTo Rollback to provided deployment based on deployment ID. Request body will only parse a \&quot;message\&quot; part. You can learn more about deployments [here](https://developers.cloudflare.com/workers/platform/deployments/). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptUploadWorkerModuleCall(String scriptName, String accountId, String body, String rollbackTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rollbackTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rollback_to", rollbackTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/javascript",
            "multipart/form-data",
            "text/javascript"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptUploadWorkerModuleValidateBeforeCall(String scriptName, String accountId, String body, String rollbackTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptUploadWorkerModule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptUploadWorkerModule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workerScriptUploadWorkerModule(Async)");
        }

        return workerScriptUploadWorkerModuleCall(scriptName, accountId, body, rollbackTo, _callback);

    }

    /**
     * Upload Worker Module
     * Upload a worker module.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param rollbackTo Rollback to provided deployment based on deployment ID. Request body will only parse a \&quot;message\&quot; part. You can learn more about deployments [here](https://developers.cloudflare.com/workers/platform/deployments/). (optional)
     * @return NamespaceWorkerScriptUploadWorkerModule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerScriptUploadWorkerModule200Response workerScriptUploadWorkerModule(String scriptName, String accountId, String body, String rollbackTo) throws ApiException {
        ApiResponse<NamespaceWorkerScriptUploadWorkerModule200Response> localVarResp = workerScriptUploadWorkerModuleWithHttpInfo(scriptName, accountId, body, rollbackTo);
        return localVarResp.getData();
    }

    /**
     * Upload Worker Module
     * Upload a worker module.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param rollbackTo Rollback to provided deployment based on deployment ID. Request body will only parse a \&quot;message\&quot; part. You can learn more about deployments [here](https://developers.cloudflare.com/workers/platform/deployments/). (optional)
     * @return ApiResponse&lt;NamespaceWorkerScriptUploadWorkerModule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerScriptUploadWorkerModule200Response> workerScriptUploadWorkerModuleWithHttpInfo(String scriptName, String accountId, String body, String rollbackTo) throws ApiException {
        okhttp3.Call localVarCall = workerScriptUploadWorkerModuleValidateBeforeCall(scriptName, accountId, body, rollbackTo, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerScriptUploadWorkerModule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Worker Module (asynchronously)
     * Upload a worker module.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param rollbackTo Rollback to provided deployment based on deployment ID. Request body will only parse a \&quot;message\&quot; part. You can learn more about deployments [here](https://developers.cloudflare.com/workers/platform/deployments/). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptUploadWorkerModuleAsync(String scriptName, String accountId, String body, String rollbackTo, final ApiCallback<NamespaceWorkerScriptUploadWorkerModule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptUploadWorkerModuleValidateBeforeCall(scriptName, accountId, body, rollbackTo, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerScriptUploadWorkerModule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
