/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DnsSettingsDnsResponseSingle;
import org.openapitools.client.model.DnsSettingsDnsSettings;
import org.openapitools.client.model.DnsSettingsForAZoneListDnsSettings4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnsSettingsForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnsSettingsForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnsSettingsForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dnsSettingsForAZoneListDnsSettings
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsSettingsForAZoneListDnsSettingsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsSettingsForAZoneListDnsSettingsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsSettingsForAZoneListDnsSettings(Async)");
        }

        return dnsSettingsForAZoneListDnsSettingsCall(zoneId, _callback);

    }

    /**
     * Show DNS Settings
     * Show DNS settings for a zone
     * @param zoneId  (required)
     * @return DnsSettingsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsSettingsDnsResponseSingle dnsSettingsForAZoneListDnsSettings(String zoneId) throws ApiException {
        ApiResponse<DnsSettingsDnsResponseSingle> localVarResp = dnsSettingsForAZoneListDnsSettingsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Show DNS Settings
     * Show DNS settings for a zone
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnsSettingsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsSettingsDnsResponseSingle> dnsSettingsForAZoneListDnsSettingsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnsSettingsForAZoneListDnsSettingsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DnsSettingsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show DNS Settings (asynchronously)
     * Show DNS settings for a zone
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsSettingsForAZoneListDnsSettingsAsync(String zoneId, final ApiCallback<DnsSettingsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsSettingsForAZoneListDnsSettingsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnsSettingsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsSettingsForAZoneUpdateDnsSettings
     * @param zoneId  (required)
     * @param dnsSettingsDnsSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsSettingsForAZoneUpdateDnsSettingsCall(String zoneId, DnsSettingsDnsSettings dnsSettingsDnsSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsSettingsDnsSettings;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsSettingsForAZoneUpdateDnsSettingsValidateBeforeCall(String zoneId, DnsSettingsDnsSettings dnsSettingsDnsSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsSettingsForAZoneUpdateDnsSettings(Async)");
        }

        // verify the required parameter 'dnsSettingsDnsSettings' is set
        if (dnsSettingsDnsSettings == null) {
            throw new ApiException("Missing the required parameter 'dnsSettingsDnsSettings' when calling dnsSettingsForAZoneUpdateDnsSettings(Async)");
        }

        return dnsSettingsForAZoneUpdateDnsSettingsCall(zoneId, dnsSettingsDnsSettings, _callback);

    }

    /**
     * Update DNS Settings
     * Update DNS settings for a zone
     * @param zoneId  (required)
     * @param dnsSettingsDnsSettings  (required)
     * @return DnsSettingsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsSettingsDnsResponseSingle dnsSettingsForAZoneUpdateDnsSettings(String zoneId, DnsSettingsDnsSettings dnsSettingsDnsSettings) throws ApiException {
        ApiResponse<DnsSettingsDnsResponseSingle> localVarResp = dnsSettingsForAZoneUpdateDnsSettingsWithHttpInfo(zoneId, dnsSettingsDnsSettings);
        return localVarResp.getData();
    }

    /**
     * Update DNS Settings
     * Update DNS settings for a zone
     * @param zoneId  (required)
     * @param dnsSettingsDnsSettings  (required)
     * @return ApiResponse&lt;DnsSettingsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsSettingsDnsResponseSingle> dnsSettingsForAZoneUpdateDnsSettingsWithHttpInfo(String zoneId, DnsSettingsDnsSettings dnsSettingsDnsSettings) throws ApiException {
        okhttp3.Call localVarCall = dnsSettingsForAZoneUpdateDnsSettingsValidateBeforeCall(zoneId, dnsSettingsDnsSettings, null);
        Type localVarReturnType = new TypeToken<DnsSettingsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DNS Settings (asynchronously)
     * Update DNS settings for a zone
     * @param zoneId  (required)
     * @param dnsSettingsDnsSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show DNS Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Show DNS Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsSettingsForAZoneUpdateDnsSettingsAsync(String zoneId, DnsSettingsDnsSettings dnsSettingsDnsSettings, final ApiCallback<DnsSettingsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsSettingsForAZoneUpdateDnsSettingsValidateBeforeCall(zoneId, dnsSettingsDnsSettings, _callback);
        Type localVarReturnType = new TypeToken<DnsSettingsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
