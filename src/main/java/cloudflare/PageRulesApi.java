/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PageRulesCreateAPageRule4XXResponse;
import org.openapitools.client.model.PageRulesCreateAPageRuleRequest;
import org.openapitools.client.model.PageRulesDeleteAPageRule4XXResponse;
import org.openapitools.client.model.PageRulesEditAPageRuleRequest;
import org.openapitools.client.model.PageRulesListPageRules4XXResponse;
import org.openapitools.client.model.ZonesPageruleResponseCollection;
import org.openapitools.client.model.ZonesPageruleResponseSingle;
import org.openapitools.client.model.ZonesSchemasApiResponseSingleId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PageRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pageRulesCreateAPageRule
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesCreateAPageRuleCall(String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageRulesCreateAPageRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesCreateAPageRuleValidateBeforeCall(String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesCreateAPageRule(Async)");
        }

        // verify the required parameter 'pageRulesCreateAPageRuleRequest' is set
        if (pageRulesCreateAPageRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'pageRulesCreateAPageRuleRequest' when calling pageRulesCreateAPageRule(Async)");
        }

        return pageRulesCreateAPageRuleCall(zoneId, pageRulesCreateAPageRuleRequest, _callback);

    }

    /**
     * Create a Page Rule
     * Creates a new Page Rule.
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @return ZonesPageruleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPageruleResponseSingle pageRulesCreateAPageRule(String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest) throws ApiException {
        ApiResponse<ZonesPageruleResponseSingle> localVarResp = pageRulesCreateAPageRuleWithHttpInfo(zoneId, pageRulesCreateAPageRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Page Rule
     * Creates a new Page Rule.
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @return ApiResponse&lt;ZonesPageruleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPageruleResponseSingle> pageRulesCreateAPageRuleWithHttpInfo(String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = pageRulesCreateAPageRuleValidateBeforeCall(zoneId, pageRulesCreateAPageRuleRequest, null);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Page Rule (asynchronously)
     * Creates a new Page Rule.
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesCreateAPageRuleAsync(String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback<ZonesPageruleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesCreateAPageRuleValidateBeforeCall(zoneId, pageRulesCreateAPageRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageRulesDeleteAPageRule
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesDeleteAPageRuleCall(String pageruleId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules/{pagerule_id}"
            .replace("{" + "pagerule_id" + "}", localVarApiClient.escapeString(pageruleId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesDeleteAPageRuleValidateBeforeCall(String pageruleId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageruleId' is set
        if (pageruleId == null) {
            throw new ApiException("Missing the required parameter 'pageruleId' when calling pageRulesDeleteAPageRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesDeleteAPageRule(Async)");
        }

        return pageRulesDeleteAPageRuleCall(pageruleId, zoneId, _callback);

    }

    /**
     * Delete a Page Rule
     * Deletes an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @return ZonesSchemasApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesSchemasApiResponseSingleId pageRulesDeleteAPageRule(String pageruleId, String zoneId) throws ApiException {
        ApiResponse<ZonesSchemasApiResponseSingleId> localVarResp = pageRulesDeleteAPageRuleWithHttpInfo(pageruleId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete a Page Rule
     * Deletes an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZonesSchemasApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesSchemasApiResponseSingleId> pageRulesDeleteAPageRuleWithHttpInfo(String pageruleId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = pageRulesDeleteAPageRuleValidateBeforeCall(pageruleId, zoneId, null);
        Type localVarReturnType = new TypeToken<ZonesSchemasApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Page Rule (asynchronously)
     * Deletes an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesDeleteAPageRuleAsync(String pageruleId, String zoneId, final ApiCallback<ZonesSchemasApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesDeleteAPageRuleValidateBeforeCall(pageruleId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZonesSchemasApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageRulesEditAPageRule
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesEditAPageRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesEditAPageRuleCall(String pageruleId, String zoneId, PageRulesEditAPageRuleRequest pageRulesEditAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageRulesEditAPageRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules/{pagerule_id}"
            .replace("{" + "pagerule_id" + "}", localVarApiClient.escapeString(pageruleId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesEditAPageRuleValidateBeforeCall(String pageruleId, String zoneId, PageRulesEditAPageRuleRequest pageRulesEditAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageruleId' is set
        if (pageruleId == null) {
            throw new ApiException("Missing the required parameter 'pageruleId' when calling pageRulesEditAPageRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesEditAPageRule(Async)");
        }

        // verify the required parameter 'pageRulesEditAPageRuleRequest' is set
        if (pageRulesEditAPageRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'pageRulesEditAPageRuleRequest' when calling pageRulesEditAPageRule(Async)");
        }

        return pageRulesEditAPageRuleCall(pageruleId, zoneId, pageRulesEditAPageRuleRequest, _callback);

    }

    /**
     * Edit a Page Rule
     * Updates one or more fields of an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesEditAPageRuleRequest  (required)
     * @return ZonesPageruleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPageruleResponseSingle pageRulesEditAPageRule(String pageruleId, String zoneId, PageRulesEditAPageRuleRequest pageRulesEditAPageRuleRequest) throws ApiException {
        ApiResponse<ZonesPageruleResponseSingle> localVarResp = pageRulesEditAPageRuleWithHttpInfo(pageruleId, zoneId, pageRulesEditAPageRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a Page Rule
     * Updates one or more fields of an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesEditAPageRuleRequest  (required)
     * @return ApiResponse&lt;ZonesPageruleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPageruleResponseSingle> pageRulesEditAPageRuleWithHttpInfo(String pageruleId, String zoneId, PageRulesEditAPageRuleRequest pageRulesEditAPageRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = pageRulesEditAPageRuleValidateBeforeCall(pageruleId, zoneId, pageRulesEditAPageRuleRequest, null);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a Page Rule (asynchronously)
     * Updates one or more fields of an existing Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesEditAPageRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesEditAPageRuleAsync(String pageruleId, String zoneId, PageRulesEditAPageRuleRequest pageRulesEditAPageRuleRequest, final ApiCallback<ZonesPageruleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesEditAPageRuleValidateBeforeCall(pageruleId, zoneId, pageRulesEditAPageRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageRulesGetAPageRule
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesGetAPageRuleCall(String pageruleId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules/{pagerule_id}"
            .replace("{" + "pagerule_id" + "}", localVarApiClient.escapeString(pageruleId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesGetAPageRuleValidateBeforeCall(String pageruleId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageruleId' is set
        if (pageruleId == null) {
            throw new ApiException("Missing the required parameter 'pageruleId' when calling pageRulesGetAPageRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesGetAPageRule(Async)");
        }

        return pageRulesGetAPageRuleCall(pageruleId, zoneId, _callback);

    }

    /**
     * Get a Page Rule
     * Fetches the details of a Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @return ZonesPageruleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPageruleResponseSingle pageRulesGetAPageRule(String pageruleId, String zoneId) throws ApiException {
        ApiResponse<ZonesPageruleResponseSingle> localVarResp = pageRulesGetAPageRuleWithHttpInfo(pageruleId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a Page Rule
     * Fetches the details of a Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZonesPageruleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPageruleResponseSingle> pageRulesGetAPageRuleWithHttpInfo(String pageruleId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = pageRulesGetAPageRuleValidateBeforeCall(pageruleId, zoneId, null);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Page Rule (asynchronously)
     * Fetches the details of a Page Rule.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesGetAPageRuleAsync(String pageruleId, String zoneId, final ApiCallback<ZonesPageruleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesGetAPageRuleValidateBeforeCall(pageruleId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageRulesListPageRules
     * @param zoneId  (required)
     * @param order  (optional, default to priority)
     * @param direction  (optional, default to desc)
     * @param match  (optional, default to all)
     * @param status  (optional, default to disabled)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesListPageRulesCall(String zoneId, String order, String direction, String match, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesListPageRulesValidateBeforeCall(String zoneId, String order, String direction, String match, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesListPageRules(Async)");
        }

        return pageRulesListPageRulesCall(zoneId, order, direction, match, status, _callback);

    }

    /**
     * List Page Rules
     * Fetches Page Rules in a zone.
     * @param zoneId  (required)
     * @param order  (optional, default to priority)
     * @param direction  (optional, default to desc)
     * @param match  (optional, default to all)
     * @param status  (optional, default to disabled)
     * @return ZonesPageruleResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPageruleResponseCollection pageRulesListPageRules(String zoneId, String order, String direction, String match, String status) throws ApiException {
        ApiResponse<ZonesPageruleResponseCollection> localVarResp = pageRulesListPageRulesWithHttpInfo(zoneId, order, direction, match, status);
        return localVarResp.getData();
    }

    /**
     * List Page Rules
     * Fetches Page Rules in a zone.
     * @param zoneId  (required)
     * @param order  (optional, default to priority)
     * @param direction  (optional, default to desc)
     * @param match  (optional, default to all)
     * @param status  (optional, default to disabled)
     * @return ApiResponse&lt;ZonesPageruleResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPageruleResponseCollection> pageRulesListPageRulesWithHttpInfo(String zoneId, String order, String direction, String match, String status) throws ApiException {
        okhttp3.Call localVarCall = pageRulesListPageRulesValidateBeforeCall(zoneId, order, direction, match, status, null);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Page Rules (asynchronously)
     * Fetches Page Rules in a zone.
     * @param zoneId  (required)
     * @param order  (optional, default to priority)
     * @param direction  (optional, default to desc)
     * @param match  (optional, default to all)
     * @param status  (optional, default to disabled)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesListPageRulesAsync(String zoneId, String order, String direction, String match, String status, final ApiCallback<ZonesPageruleResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesListPageRulesValidateBeforeCall(zoneId, order, direction, match, status, _callback);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageRulesUpdateAPageRule
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesUpdateAPageRuleCall(String pageruleId, String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageRulesCreateAPageRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/pagerules/{pagerule_id}"
            .replace("{" + "pagerule_id" + "}", localVarApiClient.escapeString(pageruleId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageRulesUpdateAPageRuleValidateBeforeCall(String pageruleId, String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageruleId' is set
        if (pageruleId == null) {
            throw new ApiException("Missing the required parameter 'pageruleId' when calling pageRulesUpdateAPageRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageRulesUpdateAPageRule(Async)");
        }

        // verify the required parameter 'pageRulesCreateAPageRuleRequest' is set
        if (pageRulesCreateAPageRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'pageRulesCreateAPageRuleRequest' when calling pageRulesUpdateAPageRule(Async)");
        }

        return pageRulesUpdateAPageRuleCall(pageruleId, zoneId, pageRulesCreateAPageRuleRequest, _callback);

    }

    /**
     * Update a Page Rule
     * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @return ZonesPageruleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPageruleResponseSingle pageRulesUpdateAPageRule(String pageruleId, String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest) throws ApiException {
        ApiResponse<ZonesPageruleResponseSingle> localVarResp = pageRulesUpdateAPageRuleWithHttpInfo(pageruleId, zoneId, pageRulesCreateAPageRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Page Rule
     * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @return ApiResponse&lt;ZonesPageruleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPageruleResponseSingle> pageRulesUpdateAPageRuleWithHttpInfo(String pageruleId, String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = pageRulesUpdateAPageRuleValidateBeforeCall(pageruleId, zoneId, pageRulesCreateAPageRuleRequest, null);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Page Rule (asynchronously)
     * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
     * @param pageruleId  (required)
     * @param zoneId  (required)
     * @param pageRulesCreateAPageRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageRulesUpdateAPageRuleAsync(String pageruleId, String zoneId, PageRulesCreateAPageRuleRequest pageRulesCreateAPageRuleRequest, final ApiCallback<ZonesPageruleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageRulesUpdateAPageRuleValidateBeforeCall(pageruleId, zoneId, pageRulesCreateAPageRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesPageruleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
