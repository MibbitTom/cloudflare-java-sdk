/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkersAiPostRunCfBaaiBgeBaseEnV15400Response;
import org.openapitools.client.model.WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response;
import org.openapitools.client.model.WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersAiTextToImageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersAiTextToImageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersAiTextToImageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workersAiPostRunCfBytedanceStableDiffusionXlLightning
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfBytedanceStableDiffusionXlLightningCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/bytedance/stable-diffusion-xl-lightning"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfBytedanceStableDiffusionXlLightningValidateBeforeCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfBytedanceStableDiffusionXlLightning(Async)");
        }

        return workersAiPostRunCfBytedanceStableDiffusionXlLightningCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);

    }

    /**
     * Execute @cf/bytedance/stable-diffusion-xl-lightning model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response workersAiPostRunCfBytedanceStableDiffusionXlLightning(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> localVarResp = workersAiPostRunCfBytedanceStableDiffusionXlLightningWithHttpInfo(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/bytedance/stable-diffusion-xl-lightning model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> workersAiPostRunCfBytedanceStableDiffusionXlLightningWithHttpInfo(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfBytedanceStableDiffusionXlLightningValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/bytedance/stable-diffusion-xl-lightning model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfBytedanceStableDiffusionXlLightningAsync(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfBytedanceStableDiffusionXlLightningValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfLykonDreamshaper8Lcm
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfLykonDreamshaper8LcmCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/lykon/dreamshaper-8-lcm"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfLykonDreamshaper8LcmValidateBeforeCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfLykonDreamshaper8Lcm(Async)");
        }

        return workersAiPostRunCfLykonDreamshaper8LcmCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);

    }

    /**
     * Execute @cf/lykon/dreamshaper-8-lcm model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response workersAiPostRunCfLykonDreamshaper8Lcm(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> localVarResp = workersAiPostRunCfLykonDreamshaper8LcmWithHttpInfo(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/lykon/dreamshaper-8-lcm model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> workersAiPostRunCfLykonDreamshaper8LcmWithHttpInfo(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfLykonDreamshaper8LcmValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/lykon/dreamshaper-8-lcm model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfLykonDreamshaper8LcmAsync(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfLykonDreamshaper8LcmValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfRunwaymlStableDiffusionV15Img2img
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/runwayml/stable-diffusion-v1-5-img2img"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgValidateBeforeCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfRunwaymlStableDiffusionV15Img2img(Async)");
        }

        return workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);

    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-img2img model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response workersAiPostRunCfRunwaymlStableDiffusionV15Img2img(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> localVarResp = workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgWithHttpInfo(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-img2img model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgWithHttpInfo(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-img2img model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgAsync(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfRunwaymlStableDiffusionV15Img2imgValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfRunwaymlStableDiffusionV15Inpainting
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/runwayml/stable-diffusion-v1-5-inpainting"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingValidateBeforeCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfRunwaymlStableDiffusionV15Inpainting(Async)");
        }

        return workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);

    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-inpainting model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response workersAiPostRunCfRunwaymlStableDiffusionV15Inpainting(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> localVarResp = workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingWithHttpInfo(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-inpainting model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingWithHttpInfo(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/runwayml/stable-diffusion-v1-5-inpainting model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingAsync(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfRunwaymlStableDiffusionV15InpaintingValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfStabilityaiStableDiffusionXlBase10
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfStabilityaiStableDiffusionXlBase10Call(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/stabilityai/stable-diffusion-xl-base-1.0"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfStabilityaiStableDiffusionXlBase10ValidateBeforeCall(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfStabilityaiStableDiffusionXlBase10(Async)");
        }

        return workersAiPostRunCfStabilityaiStableDiffusionXlBase10Call(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);

    }

    /**
     * Execute @cf/stabilityai/stable-diffusion-xl-base-1.0 model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response workersAiPostRunCfStabilityaiStableDiffusionXlBase10(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> localVarResp = workersAiPostRunCfStabilityaiStableDiffusionXlBase10WithHttpInfo(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/stabilityai/stable-diffusion-xl-base-1.0 model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> workersAiPostRunCfStabilityaiStableDiffusionXlBase10WithHttpInfo(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfStabilityaiStableDiffusionXlBase10ValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/stabilityai/stable-diffusion-xl-base-1.0 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfStabilityaiStableDiffusionXlBase10Async(String accountId, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, final ApiCallback<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfStabilityaiStableDiffusionXlBase10ValidateBeforeCall(accountId, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfBytedanceStableDiffusionXlLightning200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
