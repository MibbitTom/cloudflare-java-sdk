/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DnsRecordsApiResponseCommonFailure;
import org.openapitools.client.model.DnsRecordsDirection;
import org.openapitools.client.model.DnsRecordsDnsRecord;
import org.openapitools.client.model.DnsRecordsDnsResponseCollection;
import org.openapitools.client.model.DnsRecordsDnsResponseImportScan;
import org.openapitools.client.model.DnsRecordsDnsResponseSingle;
import org.openapitools.client.model.DnsRecordsForAZoneCreateDnsRecord4xxResponse;
import org.openapitools.client.model.DnsRecordsForAZoneDeleteDnsRecord200Response;
import org.openapitools.client.model.DnsRecordsForAZoneDeleteDnsRecord4xxResponse;
import org.openapitools.client.model.DnsRecordsForAZoneImportDnsRecords4XXResponse;
import org.openapitools.client.model.DnsRecordsForAZoneListDnsRecords4xxResponse;
import org.openapitools.client.model.DnsRecordsMatch;
import org.openapitools.client.model.DnsRecordsOrder;
import org.openapitools.client.model.DnsRecordsTagMatch;
import org.openapitools.client.model.DnsRecordsType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnsRecordsForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnsRecordsForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnsRecordsForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dnsRecordsForAZoneCreateDnsRecord
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Create DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneCreateDnsRecordCall(String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsRecordsDnsRecord;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneCreateDnsRecordValidateBeforeCall(String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneCreateDnsRecord(Async)");
        }

        // verify the required parameter 'dnsRecordsDnsRecord' is set
        if (dnsRecordsDnsRecord == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordsDnsRecord' when calling dnsRecordsForAZoneCreateDnsRecord(Async)");
        }

        return dnsRecordsForAZoneCreateDnsRecordCall(zoneId, dnsRecordsDnsRecord, _callback);

    }

    /**
     * Create DNS Record
     * Create a new DNS record for a zone.  Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return DnsRecordsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Create DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseSingle dnsRecordsForAZoneCreateDnsRecord(String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseSingle> localVarResp = dnsRecordsForAZoneCreateDnsRecordWithHttpInfo(zoneId, dnsRecordsDnsRecord);
        return localVarResp.getData();
    }

    /**
     * Create DNS Record
     * Create a new DNS record for a zone.  Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return ApiResponse&lt;DnsRecordsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Create DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseSingle> dnsRecordsForAZoneCreateDnsRecordWithHttpInfo(String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneCreateDnsRecordValidateBeforeCall(zoneId, dnsRecordsDnsRecord, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create DNS Record (asynchronously)
     * Create a new DNS record for a zone.  Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Create DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneCreateDnsRecordAsync(String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback<DnsRecordsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneCreateDnsRecordValidateBeforeCall(zoneId, dnsRecordsDnsRecord, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneDeleteDnsRecord
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Delete DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneDeleteDnsRecordCall(String dnsRecordId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/{dns_record_id}"
            .replace("{" + "dns_record_id" + "}", localVarApiClient.escapeString(dnsRecordId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneDeleteDnsRecordValidateBeforeCall(String dnsRecordId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsRecordId' is set
        if (dnsRecordId == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordId' when calling dnsRecordsForAZoneDeleteDnsRecord(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneDeleteDnsRecord(Async)");
        }

        return dnsRecordsForAZoneDeleteDnsRecordCall(dnsRecordId, zoneId, _callback);

    }

    /**
     * Delete DNS Record
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @return DnsRecordsForAZoneDeleteDnsRecord200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Delete DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsForAZoneDeleteDnsRecord200Response dnsRecordsForAZoneDeleteDnsRecord(String dnsRecordId, String zoneId) throws ApiException {
        ApiResponse<DnsRecordsForAZoneDeleteDnsRecord200Response> localVarResp = dnsRecordsForAZoneDeleteDnsRecordWithHttpInfo(dnsRecordId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete DNS Record
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnsRecordsForAZoneDeleteDnsRecord200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Delete DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsForAZoneDeleteDnsRecord200Response> dnsRecordsForAZoneDeleteDnsRecordWithHttpInfo(String dnsRecordId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneDeleteDnsRecordValidateBeforeCall(dnsRecordId, zoneId, null);
        Type localVarReturnType = new TypeToken<DnsRecordsForAZoneDeleteDnsRecord200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete DNS Record (asynchronously)
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Delete DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneDeleteDnsRecordAsync(String dnsRecordId, String zoneId, final ApiCallback<DnsRecordsForAZoneDeleteDnsRecord200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneDeleteDnsRecordValidateBeforeCall(dnsRecordId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsForAZoneDeleteDnsRecord200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneDnsRecordDetails
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Record Details response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DNS Record Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneDnsRecordDetailsCall(String dnsRecordId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/{dns_record_id}"
            .replace("{" + "dns_record_id" + "}", localVarApiClient.escapeString(dnsRecordId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneDnsRecordDetailsValidateBeforeCall(String dnsRecordId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsRecordId' is set
        if (dnsRecordId == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordId' when calling dnsRecordsForAZoneDnsRecordDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneDnsRecordDetails(Async)");
        }

        return dnsRecordsForAZoneDnsRecordDetailsCall(dnsRecordId, zoneId, _callback);

    }

    /**
     * DNS Record Details
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @return DnsRecordsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Record Details response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DNS Record Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseSingle dnsRecordsForAZoneDnsRecordDetails(String dnsRecordId, String zoneId) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseSingle> localVarResp = dnsRecordsForAZoneDnsRecordDetailsWithHttpInfo(dnsRecordId, zoneId);
        return localVarResp.getData();
    }

    /**
     * DNS Record Details
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnsRecordsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Record Details response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DNS Record Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseSingle> dnsRecordsForAZoneDnsRecordDetailsWithHttpInfo(String dnsRecordId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneDnsRecordDetailsValidateBeforeCall(dnsRecordId, zoneId, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DNS Record Details (asynchronously)
     * 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNS Record Details response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DNS Record Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneDnsRecordDetailsAsync(String dnsRecordId, String zoneId, final ApiCallback<DnsRecordsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneDnsRecordDetailsValidateBeforeCall(dnsRecordId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneExportDnsRecords
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Export DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneExportDnsRecordsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/export"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneExportDnsRecordsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneExportDnsRecords(Async)");
        }

        return dnsRecordsForAZoneExportDnsRecordsCall(zoneId, _callback);

    }

    /**
     * Export DNS Records
     * You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Export DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public String dnsRecordsForAZoneExportDnsRecords(String zoneId) throws ApiException {
        ApiResponse<String> localVarResp = dnsRecordsForAZoneExportDnsRecordsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Export DNS Records
     * You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Export DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> dnsRecordsForAZoneExportDnsRecordsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneExportDnsRecordsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export DNS Records (asynchronously)
     * You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Export DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneExportDnsRecordsAsync(String zoneId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneExportDnsRecordsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneImportDnsRecords
     * @param zoneId  (required)
     * @param _file BIND config to import.  **Tip:** When using cURL, a file can be uploaded using &#x60;--form &#39;file&#x3D;@bind_config.txt&#39;&#x60;.  (required)
     * @param proxied Whether or not proxiable records should receive the performance and security benefits of Cloudflare.  The value should be either &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Import DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneImportDnsRecordsCall(String zoneId, String _file, String proxied, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/import"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (proxied != null) {
            localVarFormParams.put("proxied", proxied);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneImportDnsRecordsValidateBeforeCall(String zoneId, String _file, String proxied, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneImportDnsRecords(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling dnsRecordsForAZoneImportDnsRecords(Async)");
        }

        return dnsRecordsForAZoneImportDnsRecordsCall(zoneId, _file, proxied, _callback);

    }

    /**
     * Import DNS Records
     * You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @param _file BIND config to import.  **Tip:** When using cURL, a file can be uploaded using &#x60;--form &#39;file&#x3D;@bind_config.txt&#39;&#x60;.  (required)
     * @param proxied Whether or not proxiable records should receive the performance and security benefits of Cloudflare.  The value should be either &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @return DnsRecordsDnsResponseImportScan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Import DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseImportScan dnsRecordsForAZoneImportDnsRecords(String zoneId, String _file, String proxied) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseImportScan> localVarResp = dnsRecordsForAZoneImportDnsRecordsWithHttpInfo(zoneId, _file, proxied);
        return localVarResp.getData();
    }

    /**
     * Import DNS Records
     * You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @param _file BIND config to import.  **Tip:** When using cURL, a file can be uploaded using &#x60;--form &#39;file&#x3D;@bind_config.txt&#39;&#x60;.  (required)
     * @param proxied Whether or not proxiable records should receive the performance and security benefits of Cloudflare.  The value should be either &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @return ApiResponse&lt;DnsRecordsDnsResponseImportScan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Import DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseImportScan> dnsRecordsForAZoneImportDnsRecordsWithHttpInfo(String zoneId, String _file, String proxied) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneImportDnsRecordsValidateBeforeCall(zoneId, _file, proxied, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseImportScan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import DNS Records (asynchronously)
     * You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     * @param zoneId  (required)
     * @param _file BIND config to import.  **Tip:** When using cURL, a file can be uploaded using &#x60;--form &#39;file&#x3D;@bind_config.txt&#39;&#x60;.  (required)
     * @param proxied Whether or not proxiable records should receive the performance and security benefits of Cloudflare.  The value should be either &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Import DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneImportDnsRecordsAsync(String zoneId, String _file, String proxied, final ApiCallback<DnsRecordsDnsResponseImportScan> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneImportDnsRecordsValidateBeforeCall(zoneId, _file, proxied, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseImportScan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneListDnsRecords
     * @param zoneId  (required)
     * @param name  (optional)
     * @param type  (optional)
     * @param content  (optional)
     * @param proxied  (optional)
     * @param match  (optional, default to all)
     * @param comment  (optional)
     * @param commentPresent  (optional)
     * @param commentAbsent  (optional)
     * @param commentExact  (optional)
     * @param commentContains  (optional)
     * @param commentStartswith  (optional)
     * @param commentEndswith  (optional)
     * @param tag  (optional)
     * @param tagPresent  (optional)
     * @param tagAbsent  (optional)
     * @param tagExact  (optional)
     * @param tagContains  (optional)
     * @param tagStartswith  (optional)
     * @param tagEndswith  (optional)
     * @param search  (optional)
     * @param tagMatch  (optional, default to all)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param order  (optional, default to type)
     * @param direction  (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneListDnsRecordsCall(String zoneId, String name, DnsRecordsType type, String content, Boolean proxied, DnsRecordsMatch match, String comment, String commentPresent, String commentAbsent, String commentExact, String commentContains, String commentStartswith, String commentEndswith, String tag, String tagPresent, String tagAbsent, String tagExact, String tagContains, String tagStartswith, String tagEndswith, String search, DnsRecordsTagMatch tagMatch, BigDecimal page, BigDecimal perPage, DnsRecordsOrder order, DnsRecordsDirection direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (proxied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proxied", proxied));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (commentPresent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.present", commentPresent));
        }

        if (commentAbsent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.absent", commentAbsent));
        }

        if (commentExact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.exact", commentExact));
        }

        if (commentContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.contains", commentContains));
        }

        if (commentStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.startswith", commentStartswith));
        }

        if (commentEndswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment.endswith", commentEndswith));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tagPresent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.present", tagPresent));
        }

        if (tagAbsent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.absent", tagAbsent));
        }

        if (tagExact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.exact", tagExact));
        }

        if (tagContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.contains", tagContains));
        }

        if (tagStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.startswith", tagStartswith));
        }

        if (tagEndswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag.endswith", tagEndswith));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tagMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_match", tagMatch));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneListDnsRecordsValidateBeforeCall(String zoneId, String name, DnsRecordsType type, String content, Boolean proxied, DnsRecordsMatch match, String comment, String commentPresent, String commentAbsent, String commentExact, String commentContains, String commentStartswith, String commentEndswith, String tag, String tagPresent, String tagAbsent, String tagExact, String tagContains, String tagStartswith, String tagEndswith, String search, DnsRecordsTagMatch tagMatch, BigDecimal page, BigDecimal perPage, DnsRecordsOrder order, DnsRecordsDirection direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneListDnsRecords(Async)");
        }

        return dnsRecordsForAZoneListDnsRecordsCall(zoneId, name, type, content, proxied, match, comment, commentPresent, commentAbsent, commentExact, commentContains, commentStartswith, commentEndswith, tag, tagPresent, tagAbsent, tagExact, tagContains, tagStartswith, tagEndswith, search, tagMatch, page, perPage, order, direction, _callback);

    }

    /**
     * List DNS Records
     * List, search, sort, and filter a zones&#39; DNS records.
     * @param zoneId  (required)
     * @param name  (optional)
     * @param type  (optional)
     * @param content  (optional)
     * @param proxied  (optional)
     * @param match  (optional, default to all)
     * @param comment  (optional)
     * @param commentPresent  (optional)
     * @param commentAbsent  (optional)
     * @param commentExact  (optional)
     * @param commentContains  (optional)
     * @param commentStartswith  (optional)
     * @param commentEndswith  (optional)
     * @param tag  (optional)
     * @param tagPresent  (optional)
     * @param tagAbsent  (optional)
     * @param tagExact  (optional)
     * @param tagContains  (optional)
     * @param tagStartswith  (optional)
     * @param tagEndswith  (optional)
     * @param search  (optional)
     * @param tagMatch  (optional, default to all)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param order  (optional, default to type)
     * @param direction  (optional, default to asc)
     * @return DnsRecordsDnsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseCollection dnsRecordsForAZoneListDnsRecords(String zoneId, String name, DnsRecordsType type, String content, Boolean proxied, DnsRecordsMatch match, String comment, String commentPresent, String commentAbsent, String commentExact, String commentContains, String commentStartswith, String commentEndswith, String tag, String tagPresent, String tagAbsent, String tagExact, String tagContains, String tagStartswith, String tagEndswith, String search, DnsRecordsTagMatch tagMatch, BigDecimal page, BigDecimal perPage, DnsRecordsOrder order, DnsRecordsDirection direction) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseCollection> localVarResp = dnsRecordsForAZoneListDnsRecordsWithHttpInfo(zoneId, name, type, content, proxied, match, comment, commentPresent, commentAbsent, commentExact, commentContains, commentStartswith, commentEndswith, tag, tagPresent, tagAbsent, tagExact, tagContains, tagStartswith, tagEndswith, search, tagMatch, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List DNS Records
     * List, search, sort, and filter a zones&#39; DNS records.
     * @param zoneId  (required)
     * @param name  (optional)
     * @param type  (optional)
     * @param content  (optional)
     * @param proxied  (optional)
     * @param match  (optional, default to all)
     * @param comment  (optional)
     * @param commentPresent  (optional)
     * @param commentAbsent  (optional)
     * @param commentExact  (optional)
     * @param commentContains  (optional)
     * @param commentStartswith  (optional)
     * @param commentEndswith  (optional)
     * @param tag  (optional)
     * @param tagPresent  (optional)
     * @param tagAbsent  (optional)
     * @param tagExact  (optional)
     * @param tagContains  (optional)
     * @param tagStartswith  (optional)
     * @param tagEndswith  (optional)
     * @param search  (optional)
     * @param tagMatch  (optional, default to all)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param order  (optional, default to type)
     * @param direction  (optional, default to asc)
     * @return ApiResponse&lt;DnsRecordsDnsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseCollection> dnsRecordsForAZoneListDnsRecordsWithHttpInfo(String zoneId, String name, DnsRecordsType type, String content, Boolean proxied, DnsRecordsMatch match, String comment, String commentPresent, String commentAbsent, String commentExact, String commentContains, String commentStartswith, String commentEndswith, String tag, String tagPresent, String tagAbsent, String tagExact, String tagContains, String tagStartswith, String tagEndswith, String search, DnsRecordsTagMatch tagMatch, BigDecimal page, BigDecimal perPage, DnsRecordsOrder order, DnsRecordsDirection direction) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneListDnsRecordsValidateBeforeCall(zoneId, name, type, content, proxied, match, comment, commentPresent, commentAbsent, commentExact, commentContains, commentStartswith, commentEndswith, tag, tagPresent, tagAbsent, tagExact, tagContains, tagStartswith, tagEndswith, search, tagMatch, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DNS Records (asynchronously)
     * List, search, sort, and filter a zones&#39; DNS records.
     * @param zoneId  (required)
     * @param name  (optional)
     * @param type  (optional)
     * @param content  (optional)
     * @param proxied  (optional)
     * @param match  (optional, default to all)
     * @param comment  (optional)
     * @param commentPresent  (optional)
     * @param commentAbsent  (optional)
     * @param commentExact  (optional)
     * @param commentContains  (optional)
     * @param commentStartswith  (optional)
     * @param commentEndswith  (optional)
     * @param tag  (optional)
     * @param tagPresent  (optional)
     * @param tagAbsent  (optional)
     * @param tagExact  (optional)
     * @param tagContains  (optional)
     * @param tagStartswith  (optional)
     * @param tagEndswith  (optional)
     * @param search  (optional)
     * @param tagMatch  (optional, default to all)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 100)
     * @param order  (optional, default to type)
     * @param direction  (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneListDnsRecordsAsync(String zoneId, String name, DnsRecordsType type, String content, Boolean proxied, DnsRecordsMatch match, String comment, String commentPresent, String commentAbsent, String commentExact, String commentContains, String commentStartswith, String commentEndswith, String tag, String tagPresent, String tagAbsent, String tagExact, String tagContains, String tagStartswith, String tagEndswith, String search, DnsRecordsTagMatch tagMatch, BigDecimal page, BigDecimal perPage, DnsRecordsOrder order, DnsRecordsDirection direction, final ApiCallback<DnsRecordsDnsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneListDnsRecordsValidateBeforeCall(zoneId, name, type, content, proxied, match, comment, commentPresent, commentAbsent, commentExact, commentContains, commentStartswith, commentEndswith, tag, tagPresent, tagAbsent, tagExact, tagContains, tagStartswith, tagEndswith, search, tagMatch, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZonePatchDnsRecord
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Patch DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZonePatchDnsRecordCall(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsRecordsDnsRecord;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/{dns_record_id}"
            .replace("{" + "dns_record_id" + "}", localVarApiClient.escapeString(dnsRecordId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZonePatchDnsRecordValidateBeforeCall(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsRecordId' is set
        if (dnsRecordId == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordId' when calling dnsRecordsForAZonePatchDnsRecord(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZonePatchDnsRecord(Async)");
        }

        // verify the required parameter 'dnsRecordsDnsRecord' is set
        if (dnsRecordsDnsRecord == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordsDnsRecord' when calling dnsRecordsForAZonePatchDnsRecord(Async)");
        }

        return dnsRecordsForAZonePatchDnsRecordCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, _callback);

    }

    /**
     * Update DNS Record
     * Update an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return DnsRecordsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Patch DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseSingle dnsRecordsForAZonePatchDnsRecord(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseSingle> localVarResp = dnsRecordsForAZonePatchDnsRecordWithHttpInfo(dnsRecordId, zoneId, dnsRecordsDnsRecord);
        return localVarResp.getData();
    }

    /**
     * Update DNS Record
     * Update an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return ApiResponse&lt;DnsRecordsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Patch DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseSingle> dnsRecordsForAZonePatchDnsRecordWithHttpInfo(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZonePatchDnsRecordValidateBeforeCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update DNS Record (asynchronously)
     * Update an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Patch DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZonePatchDnsRecordAsync(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback<DnsRecordsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZonePatchDnsRecordValidateBeforeCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneScanDnsRecords
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Scan DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneScanDnsRecordsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/scan"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneScanDnsRecordsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneScanDnsRecords(Async)");
        }

        return dnsRecordsForAZoneScanDnsRecordsCall(zoneId, _callback);

    }

    /**
     * Scan DNS Records
     * Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven&#39;t updated your nameservers yet.
     * @param zoneId  (required)
     * @return DnsRecordsDnsResponseImportScan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Scan DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseImportScan dnsRecordsForAZoneScanDnsRecords(String zoneId) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseImportScan> localVarResp = dnsRecordsForAZoneScanDnsRecordsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Scan DNS Records
     * Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven&#39;t updated your nameservers yet.
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnsRecordsDnsResponseImportScan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Scan DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseImportScan> dnsRecordsForAZoneScanDnsRecordsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneScanDnsRecordsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseImportScan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan DNS Records (asynchronously)
     * Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven&#39;t updated your nameservers yet.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan DNS Records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Scan DNS Records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneScanDnsRecordsAsync(String zoneId, final ApiCallback<DnsRecordsDnsResponseImportScan> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneScanDnsRecordsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseImportScan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsRecordsForAZoneUpdateDnsRecord
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Update DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneUpdateDnsRecordCall(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsRecordsDnsRecord;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dns_records/{dns_record_id}"
            .replace("{" + "dns_record_id" + "}", localVarApiClient.escapeString(dnsRecordId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsRecordsForAZoneUpdateDnsRecordValidateBeforeCall(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnsRecordId' is set
        if (dnsRecordId == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordId' when calling dnsRecordsForAZoneUpdateDnsRecord(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnsRecordsForAZoneUpdateDnsRecord(Async)");
        }

        // verify the required parameter 'dnsRecordsDnsRecord' is set
        if (dnsRecordsDnsRecord == null) {
            throw new ApiException("Missing the required parameter 'dnsRecordsDnsRecord' when calling dnsRecordsForAZoneUpdateDnsRecord(Async)");
        }

        return dnsRecordsForAZoneUpdateDnsRecordCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, _callback);

    }

    /**
     * Overwrite DNS Record
     * Overwrite an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return DnsRecordsDnsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Update DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsRecordsDnsResponseSingle dnsRecordsForAZoneUpdateDnsRecord(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        ApiResponse<DnsRecordsDnsResponseSingle> localVarResp = dnsRecordsForAZoneUpdateDnsRecordWithHttpInfo(dnsRecordId, zoneId, dnsRecordsDnsRecord);
        return localVarResp.getData();
    }

    /**
     * Overwrite DNS Record
     * Overwrite an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @return ApiResponse&lt;DnsRecordsDnsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Update DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsRecordsDnsResponseSingle> dnsRecordsForAZoneUpdateDnsRecordWithHttpInfo(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord) throws ApiException {
        okhttp3.Call localVarCall = dnsRecordsForAZoneUpdateDnsRecordValidateBeforeCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, null);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Overwrite DNS Record (asynchronously)
     * Overwrite an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     * @param dnsRecordId  (required)
     * @param zoneId  (required)
     * @param dnsRecordsDnsRecord  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update DNS Record response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Update DNS Record response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsRecordsForAZoneUpdateDnsRecordAsync(String dnsRecordId, String zoneId, DnsRecordsDnsRecord dnsRecordsDnsRecord, final ApiCallback<DnsRecordsDnsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsRecordsForAZoneUpdateDnsRecordValidateBeforeCall(dnsRecordId, zoneId, dnsRecordsDnsRecord, _callback);
        Type localVarReturnType = new TypeToken<DnsRecordsDnsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
