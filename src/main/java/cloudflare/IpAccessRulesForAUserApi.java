/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FirewallEgsPagination;
import org.openapitools.client.model.FirewallFilters;
import org.openapitools.client.model.FirewallRuleCollectionResponse;
import org.openapitools.client.model.FirewallRuleSingleIdResponse;
import org.openapitools.client.model.FirewallRuleSingleResponse;
import org.openapitools.client.model.IpAccessRulesForAUserCreateAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserDeleteAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserListIpAccessRules4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserUpdateAnIpAccessRuleRequest;
import org.openapitools.client.model.IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAccessRulesForAUserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAccessRulesForAUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAccessRulesForAUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAccessRulesForAUserCreateAnIpAccessRule
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserCreateAnIpAccessRuleCall(IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/user/firewall/access_rules/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAUserCreateAnIpAccessRuleValidateBeforeCall(IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest' when calling ipAccessRulesForAUserCreateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAUserCreateAnIpAccessRuleCall(ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, _callback);

    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @return FirewallRuleSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleResponse ipAccessRulesForAUserCreateAnIpAccessRule(IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallRuleSingleResponse> localVarResp = ipAccessRulesForAUserCreateAnIpAccessRuleWithHttpInfo(ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallRuleSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleResponse> ipAccessRulesForAUserCreateAnIpAccessRuleWithHttpInfo(IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAUserCreateAnIpAccessRuleValidateBeforeCall(ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an IP Access rule (asynchronously)
     * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserCreateAnIpAccessRuleAsync(IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback<FirewallRuleSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAUserCreateAnIpAccessRuleValidateBeforeCall(ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAUserDeleteAnIpAccessRule
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserDeleteAnIpAccessRuleCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAUserDeleteAnIpAccessRuleValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAUserDeleteAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAUserDeleteAnIpAccessRuleCall(identifier, _callback);

    }

    /**
     * Delete an IP Access rule
     * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
     * @param identifier  (required)
     * @return FirewallRuleSingleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleIdResponse ipAccessRulesForAUserDeleteAnIpAccessRule(String identifier) throws ApiException {
        ApiResponse<FirewallRuleSingleIdResponse> localVarResp = ipAccessRulesForAUserDeleteAnIpAccessRuleWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an IP Access rule
     * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
     * @param identifier  (required)
     * @return ApiResponse&lt;FirewallRuleSingleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleIdResponse> ipAccessRulesForAUserDeleteAnIpAccessRuleWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAUserDeleteAnIpAccessRuleValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an IP Access rule (asynchronously)
     * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserDeleteAnIpAccessRuleAsync(String identifier, final ApiCallback<FirewallRuleSingleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAUserDeleteAnIpAccessRuleValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAUserListIpAccessRules
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserListIpAccessRulesCall(FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/firewall/access_rules/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (egsPaginationJson != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("egs-pagination.json", egsPaginationJson));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAUserListIpAccessRulesValidateBeforeCall(FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        return ipAccessRulesForAUserListIpAccessRulesCall(filters, egsPaginationJson, page, perPage, order, direction, _callback);

    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return FirewallRuleCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleCollectionResponse ipAccessRulesForAUserListIpAccessRules(FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<FirewallRuleCollectionResponse> localVarResp = ipAccessRulesForAUserListIpAccessRulesWithHttpInfo(filters, egsPaginationJson, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;FirewallRuleCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleCollectionResponse> ipAccessRulesForAUserListIpAccessRulesWithHttpInfo(FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAUserListIpAccessRulesValidateBeforeCall(filters, egsPaginationJson, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<FirewallRuleCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List IP Access rules (asynchronously)
     * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserListIpAccessRulesAsync(FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<FirewallRuleCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAUserListIpAccessRulesValidateBeforeCall(filters, egsPaginationJson, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAUserUpdateAnIpAccessRule
     * @param identifier  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserUpdateAnIpAccessRuleCall(String identifier, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAUserUpdateAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/user/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAUserUpdateAnIpAccessRuleValidateBeforeCall(String identifier, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAUserUpdateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'ipAccessRulesForAUserUpdateAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAUserUpdateAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAUserUpdateAnIpAccessRuleRequest' when calling ipAccessRulesForAUserUpdateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAUserUpdateAnIpAccessRuleCall(identifier, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, _callback);

    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the user level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @return FirewallRuleSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleResponse ipAccessRulesForAUserUpdateAnIpAccessRule(String identifier, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallRuleSingleResponse> localVarResp = ipAccessRulesForAUserUpdateAnIpAccessRuleWithHttpInfo(identifier, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the user level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallRuleSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleResponse> ipAccessRulesForAUserUpdateAnIpAccessRuleWithHttpInfo(String identifier, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAUserUpdateAnIpAccessRuleValidateBeforeCall(identifier, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an IP Access rule (asynchronously)
     * Updates an IP Access rule defined at the user level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAUserUpdateAnIpAccessRuleAsync(String identifier, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback<FirewallRuleSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAUserUpdateAnIpAccessRuleValidateBeforeCall(identifier, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
