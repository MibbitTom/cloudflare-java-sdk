/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CacheResponseSingle;
import org.openapitools.client.model.CacheSchemasPatch;
import org.openapitools.client.model.TieredCachingGetTieredCachingSetting4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmartTieredCacheApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmartTieredCacheApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmartTieredCacheApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for smartTieredCacheDeleteSmartTieredCacheSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCacheDeleteSmartTieredCacheSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/tiered_cache_smart_topology_enable"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartTieredCacheDeleteSmartTieredCacheSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling smartTieredCacheDeleteSmartTieredCacheSetting(Async)");
        }

        return smartTieredCacheDeleteSmartTieredCacheSettingCall(zoneId, _callback);

    }

    /**
     * Delete Smart Tiered Cache setting
     * Remvoves enablement of Smart Tiered Cache
     * @param zoneId  (required)
     * @return CacheResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public CacheResponseSingle smartTieredCacheDeleteSmartTieredCacheSetting(String zoneId) throws ApiException {
        ApiResponse<CacheResponseSingle> localVarResp = smartTieredCacheDeleteSmartTieredCacheSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Smart Tiered Cache setting
     * Remvoves enablement of Smart Tiered Cache
     * @param zoneId  (required)
     * @return ApiResponse&lt;CacheResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheResponseSingle> smartTieredCacheDeleteSmartTieredCacheSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = smartTieredCacheDeleteSmartTieredCacheSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Smart Tiered Cache setting (asynchronously)
     * Remvoves enablement of Smart Tiered Cache
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCacheDeleteSmartTieredCacheSettingAsync(String zoneId, final ApiCallback<CacheResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartTieredCacheDeleteSmartTieredCacheSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartTieredCacheGetSmartTieredCacheSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCacheGetSmartTieredCacheSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/tiered_cache_smart_topology_enable"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartTieredCacheGetSmartTieredCacheSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling smartTieredCacheGetSmartTieredCacheSetting(Async)");
        }

        return smartTieredCacheGetSmartTieredCacheSettingCall(zoneId, _callback);

    }

    /**
     * Get Smart Tiered Cache setting
     * 
     * @param zoneId  (required)
     * @return CacheResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public CacheResponseSingle smartTieredCacheGetSmartTieredCacheSetting(String zoneId) throws ApiException {
        ApiResponse<CacheResponseSingle> localVarResp = smartTieredCacheGetSmartTieredCacheSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Smart Tiered Cache setting
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;CacheResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheResponseSingle> smartTieredCacheGetSmartTieredCacheSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = smartTieredCacheGetSmartTieredCacheSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Smart Tiered Cache setting (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCacheGetSmartTieredCacheSettingAsync(String zoneId, final ApiCallback<CacheResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartTieredCacheGetSmartTieredCacheSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartTieredCachePatchSmartTieredCacheSetting
     * @param zoneId  (required)
     * @param cacheSchemasPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCachePatchSmartTieredCacheSettingCall(String zoneId, CacheSchemasPatch cacheSchemasPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cacheSchemasPatch;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/tiered_cache_smart_topology_enable"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartTieredCachePatchSmartTieredCacheSettingValidateBeforeCall(String zoneId, CacheSchemasPatch cacheSchemasPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling smartTieredCachePatchSmartTieredCacheSetting(Async)");
        }

        // verify the required parameter 'cacheSchemasPatch' is set
        if (cacheSchemasPatch == null) {
            throw new ApiException("Missing the required parameter 'cacheSchemasPatch' when calling smartTieredCachePatchSmartTieredCacheSetting(Async)");
        }

        return smartTieredCachePatchSmartTieredCacheSettingCall(zoneId, cacheSchemasPatch, _callback);

    }

    /**
     * Patch Smart Tiered Cache setting
     * Updates enablement of Tiered Cache
     * @param zoneId  (required)
     * @param cacheSchemasPatch  (required)
     * @return CacheResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public CacheResponseSingle smartTieredCachePatchSmartTieredCacheSetting(String zoneId, CacheSchemasPatch cacheSchemasPatch) throws ApiException {
        ApiResponse<CacheResponseSingle> localVarResp = smartTieredCachePatchSmartTieredCacheSettingWithHttpInfo(zoneId, cacheSchemasPatch);
        return localVarResp.getData();
    }

    /**
     * Patch Smart Tiered Cache setting
     * Updates enablement of Tiered Cache
     * @param zoneId  (required)
     * @param cacheSchemasPatch  (required)
     * @return ApiResponse&lt;CacheResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheResponseSingle> smartTieredCachePatchSmartTieredCacheSettingWithHttpInfo(String zoneId, CacheSchemasPatch cacheSchemasPatch) throws ApiException {
        okhttp3.Call localVarCall = smartTieredCachePatchSmartTieredCacheSettingValidateBeforeCall(zoneId, cacheSchemasPatch, null);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Smart Tiered Cache setting (asynchronously)
     * Updates enablement of Tiered Cache
     * @param zoneId  (required)
     * @param cacheSchemasPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Smart Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Smart Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartTieredCachePatchSmartTieredCacheSettingAsync(String zoneId, CacheSchemasPatch cacheSchemasPatch, final ApiCallback<CacheResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartTieredCachePatchSmartTieredCacheSettingValidateBeforeCall(zoneId, cacheSchemasPatch, _callback);
        Type localVarReturnType = new TypeToken<CacheResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
