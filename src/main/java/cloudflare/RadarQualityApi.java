/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetQualityIndexSummary200Response;
import org.openapitools.client.model.RadarGetQualityIndexTimeseriesGroup200Response;
import org.openapitools.client.model.RadarGetQualitySpeedHistogram200Response;
import org.openapitools.client.model.RadarGetQualitySpeedSummary200Response;
import org.openapitools.client.model.RadarGetQualitySpeedTopAses200Response;
import org.openapitools.client.model.RadarGetQualitySpeedTopLocations200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarQualityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarQualityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarQualityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetQualityIndexSummary
     * @param metric  (required)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualityIndexSummaryCall(String metric, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/iqi/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualityIndexSummaryValidateBeforeCall(String metric, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling radarGetQualityIndexSummary(Async)");
        }

        return radarGetQualityIndexSummaryCall(metric, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get IQI Summary
     * Get a summary (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetQualityIndexSummary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualityIndexSummary200Response radarGetQualityIndexSummary(String metric, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetQualityIndexSummary200Response> localVarResp = radarGetQualityIndexSummaryWithHttpInfo(metric, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get IQI Summary
     * Get a summary (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualityIndexSummary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualityIndexSummary200Response> radarGetQualityIndexSummaryWithHttpInfo(String metric, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualityIndexSummaryValidateBeforeCall(metric, name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualityIndexSummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IQI Summary (asynchronously)
     * Get a summary (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualityIndexSummaryAsync(String metric, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetQualityIndexSummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualityIndexSummaryValidateBeforeCall(metric, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualityIndexSummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetQualityIndexTimeseriesGroup
     * @param metric  (required)
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param interpolation  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualityIndexTimeseriesGroupCall(String metric, String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Boolean interpolation, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/iqi/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (interpolation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interpolation", interpolation));
        }

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualityIndexTimeseriesGroupValidateBeforeCall(String metric, String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Boolean interpolation, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling radarGetQualityIndexTimeseriesGroup(Async)");
        }

        return radarGetQualityIndexTimeseriesGroupCall(metric, aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, interpolation, format, _callback);

    }

    /**
     * Get IQI Time Series
     * Get a time series (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param interpolation  (optional)
     * @param format  (optional)
     * @return RadarGetQualityIndexTimeseriesGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualityIndexTimeseriesGroup200Response radarGetQualityIndexTimeseriesGroup(String metric, String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Boolean interpolation, String format) throws ApiException {
        ApiResponse<RadarGetQualityIndexTimeseriesGroup200Response> localVarResp = radarGetQualityIndexTimeseriesGroupWithHttpInfo(metric, aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, interpolation, format);
        return localVarResp.getData();
    }

    /**
     * Get IQI Time Series
     * Get a time series (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param interpolation  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualityIndexTimeseriesGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualityIndexTimeseriesGroup200Response> radarGetQualityIndexTimeseriesGroupWithHttpInfo(String metric, String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Boolean interpolation, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualityIndexTimeseriesGroupValidateBeforeCall(metric, aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, interpolation, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualityIndexTimeseriesGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IQI Time Series (asynchronously)
     * Get a time series (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     * @param metric  (required)
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param interpolation  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualityIndexTimeseriesGroupAsync(String metric, String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Boolean interpolation, String format, final ApiCallback<RadarGetQualityIndexTimeseriesGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualityIndexTimeseriesGroupValidateBeforeCall(metric, aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, interpolation, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualityIndexTimeseriesGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetQualitySpeedHistogram
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param bucketSize  (optional)
     * @param metricGroup  (optional, default to bandwidth)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedHistogramCall(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Integer bucketSize, String metricGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/speed/histogram";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (bucketSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bucketSize", bucketSize));
        }

        if (metricGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metricGroup", metricGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualitySpeedHistogramValidateBeforeCall(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Integer bucketSize, String metricGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetQualitySpeedHistogramCall(name, dateEnd, asn, location, continent, bucketSize, metricGroup, format, _callback);

    }

    /**
     * Get Speed Tests Histogram
     * Get an histogram from the previous 90 days of Cloudflare Speed Test data, split into fixed bandwidth (Mbps), latency (ms) or jitter (ms) buckets.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param bucketSize  (optional)
     * @param metricGroup  (optional, default to bandwidth)
     * @param format  (optional)
     * @return RadarGetQualitySpeedHistogram200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualitySpeedHistogram200Response radarGetQualitySpeedHistogram(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Integer bucketSize, String metricGroup, String format) throws ApiException {
        ApiResponse<RadarGetQualitySpeedHistogram200Response> localVarResp = radarGetQualitySpeedHistogramWithHttpInfo(name, dateEnd, asn, location, continent, bucketSize, metricGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Speed Tests Histogram
     * Get an histogram from the previous 90 days of Cloudflare Speed Test data, split into fixed bandwidth (Mbps), latency (ms) or jitter (ms) buckets.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param bucketSize  (optional)
     * @param metricGroup  (optional, default to bandwidth)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualitySpeedHistogram200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualitySpeedHistogram200Response> radarGetQualitySpeedHistogramWithHttpInfo(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Integer bucketSize, String metricGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualitySpeedHistogramValidateBeforeCall(name, dateEnd, asn, location, continent, bucketSize, metricGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedHistogram200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Speed Tests Histogram (asynchronously)
     * Get an histogram from the previous 90 days of Cloudflare Speed Test data, split into fixed bandwidth (Mbps), latency (ms) or jitter (ms) buckets.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param bucketSize  (optional)
     * @param metricGroup  (optional, default to bandwidth)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedHistogramAsync(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, Integer bucketSize, String metricGroup, String format, final ApiCallback<RadarGetQualitySpeedHistogram200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualitySpeedHistogramValidateBeforeCall(name, dateEnd, asn, location, continent, bucketSize, metricGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedHistogram200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetQualitySpeedSummary
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedSummaryCall(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/speed/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualitySpeedSummaryValidateBeforeCall(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetQualitySpeedSummaryCall(name, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get Speed Tests Summary
     * Get a summary of bandwidth, latency, jitter and packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetQualitySpeedSummary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualitySpeedSummary200Response radarGetQualitySpeedSummary(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetQualitySpeedSummary200Response> localVarResp = radarGetQualitySpeedSummaryWithHttpInfo(name, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Speed Tests Summary
     * Get a summary of bandwidth, latency, jitter and packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualitySpeedSummary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualitySpeedSummary200Response> radarGetQualitySpeedSummaryWithHttpInfo(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualitySpeedSummaryValidateBeforeCall(name, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedSummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Speed Tests Summary (asynchronously)
     * Get a summary of bandwidth, latency, jitter and packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedSummaryAsync(List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetQualitySpeedSummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualitySpeedSummaryValidateBeforeCall(name, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedSummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetQualitySpeedTopAses
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedTopAsesCall(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/speed/top/ases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualitySpeedTopAsesValidateBeforeCall(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback _callback) throws ApiException {
        return radarGetQualitySpeedTopAsesCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, _callback);

    }

    /**
     * Get Top Speed Test Autonomous Systems
     * Get the top autonomous systems by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @return RadarGetQualitySpeedTopAses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualitySpeedTopAses200Response radarGetQualitySpeedTopAses(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format) throws ApiException {
        ApiResponse<RadarGetQualitySpeedTopAses200Response> localVarResp = radarGetQualitySpeedTopAsesWithHttpInfo(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Speed Test Autonomous Systems
     * Get the top autonomous systems by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualitySpeedTopAses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualitySpeedTopAses200Response> radarGetQualitySpeedTopAsesWithHttpInfo(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualitySpeedTopAsesValidateBeforeCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedTopAses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Speed Test Autonomous Systems (asynchronously)
     * Get the top autonomous systems by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedTopAsesAsync(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback<RadarGetQualitySpeedTopAses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualitySpeedTopAsesValidateBeforeCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedTopAses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetQualitySpeedTopLocations
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedTopLocationsCall(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/quality/speed/top/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetQualitySpeedTopLocationsValidateBeforeCall(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback _callback) throws ApiException {
        return radarGetQualitySpeedTopLocationsCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, _callback);

    }

    /**
     * Get Top Speed Test Locations
     * Get the top locations by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @return RadarGetQualitySpeedTopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetQualitySpeedTopLocations200Response radarGetQualitySpeedTopLocations(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format) throws ApiException {
        ApiResponse<RadarGetQualitySpeedTopLocations200Response> localVarResp = radarGetQualitySpeedTopLocationsWithHttpInfo(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Speed Test Locations
     * Get the top locations by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetQualitySpeedTopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetQualitySpeedTopLocations200Response> radarGetQualitySpeedTopLocationsWithHttpInfo(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetQualitySpeedTopLocationsValidateBeforeCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, null);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedTopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Speed Test Locations (asynchronously)
     * Get the top locations by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param orderBy  (optional, default to BANDWIDTH_DOWNLOAD)
     * @param reverse  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetQualitySpeedTopLocationsAsync(Integer limit, List<String> name, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String orderBy, Boolean reverse, String format, final ApiCallback<RadarGetQualitySpeedTopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetQualitySpeedTopLocationsValidateBeforeCall(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetQualitySpeedTopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
