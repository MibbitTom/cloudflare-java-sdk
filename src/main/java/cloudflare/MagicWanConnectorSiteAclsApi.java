/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicAclDeletedResponse;
import org.openapitools.client.model.MagicAclModifiedResponse;
import org.openapitools.client.model.MagicAclSingleResponse;
import org.openapitools.client.model.MagicAclUpdateRequest;
import org.openapitools.client.model.MagicAclsAddSingleRequest;
import org.openapitools.client.model.MagicAclsCollectionResponse;
import org.openapitools.client.model.MagicApiResponseCommonFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicWanConnectorSiteAclsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicWanConnectorSiteAclsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicWanConnectorSiteAclsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicSiteAclsAclDetails
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Site ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsAclDetailsCall(String siteId, String accountId, String aclIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/acls/{acl_identifier}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "acl_identifier" + "}", localVarApiClient.escapeString(aclIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicSiteAclsAclDetailsValidateBeforeCall(String siteId, String accountId, String aclIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicSiteAclsAclDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicSiteAclsAclDetails(Async)");
        }

        // verify the required parameter 'aclIdentifier' is set
        if (aclIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aclIdentifier' when calling magicSiteAclsAclDetails(Async)");
        }

        return magicSiteAclsAclDetailsCall(siteId, accountId, aclIdentifier, _callback);

    }

    /**
     * Site ACL Details
     * Get a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @return MagicAclSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Site ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicAclSingleResponse magicSiteAclsAclDetails(String siteId, String accountId, String aclIdentifier) throws ApiException {
        ApiResponse<MagicAclSingleResponse> localVarResp = magicSiteAclsAclDetailsWithHttpInfo(siteId, accountId, aclIdentifier);
        return localVarResp.getData();
    }

    /**
     * Site ACL Details
     * Get a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @return ApiResponse&lt;MagicAclSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Site ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicAclSingleResponse> magicSiteAclsAclDetailsWithHttpInfo(String siteId, String accountId, String aclIdentifier) throws ApiException {
        okhttp3.Call localVarCall = magicSiteAclsAclDetailsValidateBeforeCall(siteId, accountId, aclIdentifier, null);
        Type localVarReturnType = new TypeToken<MagicAclSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Site ACL Details (asynchronously)
     * Get a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Site ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsAclDetailsAsync(String siteId, String accountId, String aclIdentifier, final ApiCallback<MagicAclSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicSiteAclsAclDetailsValidateBeforeCall(siteId, accountId, aclIdentifier, _callback);
        Type localVarReturnType = new TypeToken<MagicAclSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicSiteAclsCreateSiteAcl
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicAclsAddSingleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsCreateSiteAclCall(String accountId, String siteId, MagicAclsAddSingleRequest magicAclsAddSingleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicAclsAddSingleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/acls"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicSiteAclsCreateSiteAclValidateBeforeCall(String accountId, String siteId, MagicAclsAddSingleRequest magicAclsAddSingleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicSiteAclsCreateSiteAcl(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicSiteAclsCreateSiteAcl(Async)");
        }

        // verify the required parameter 'magicAclsAddSingleRequest' is set
        if (magicAclsAddSingleRequest == null) {
            throw new ApiException("Missing the required parameter 'magicAclsAddSingleRequest' when calling magicSiteAclsCreateSiteAcl(Async)");
        }

        return magicSiteAclsCreateSiteAclCall(accountId, siteId, magicAclsAddSingleRequest, _callback);

    }

    /**
     * Create a new Site ACL
     * Creates a new Site ACL.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicAclsAddSingleRequest  (required)
     * @return MagicAclsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicAclsCollectionResponse magicSiteAclsCreateSiteAcl(String accountId, String siteId, MagicAclsAddSingleRequest magicAclsAddSingleRequest) throws ApiException {
        ApiResponse<MagicAclsCollectionResponse> localVarResp = magicSiteAclsCreateSiteAclWithHttpInfo(accountId, siteId, magicAclsAddSingleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new Site ACL
     * Creates a new Site ACL.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicAclsAddSingleRequest  (required)
     * @return ApiResponse&lt;MagicAclsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicAclsCollectionResponse> magicSiteAclsCreateSiteAclWithHttpInfo(String accountId, String siteId, MagicAclsAddSingleRequest magicAclsAddSingleRequest) throws ApiException {
        okhttp3.Call localVarCall = magicSiteAclsCreateSiteAclValidateBeforeCall(accountId, siteId, magicAclsAddSingleRequest, null);
        Type localVarReturnType = new TypeToken<MagicAclsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Site ACL (asynchronously)
     * Creates a new Site ACL.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicAclsAddSingleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsCreateSiteAclAsync(String accountId, String siteId, MagicAclsAddSingleRequest magicAclsAddSingleRequest, final ApiCallback<MagicAclsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicSiteAclsCreateSiteAclValidateBeforeCall(accountId, siteId, magicAclsAddSingleRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicAclsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicSiteAclsDeleteAcl
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsDeleteAclCall(String siteId, String accountId, String aclIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/acls/{acl_identifier}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "acl_identifier" + "}", localVarApiClient.escapeString(aclIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicSiteAclsDeleteAclValidateBeforeCall(String siteId, String accountId, String aclIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicSiteAclsDeleteAcl(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicSiteAclsDeleteAcl(Async)");
        }

        // verify the required parameter 'aclIdentifier' is set
        if (aclIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aclIdentifier' when calling magicSiteAclsDeleteAcl(Async)");
        }

        return magicSiteAclsDeleteAclCall(siteId, accountId, aclIdentifier, _callback);

    }

    /**
     * Delete Site ACL
     * Remove a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @return MagicAclDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicAclDeletedResponse magicSiteAclsDeleteAcl(String siteId, String accountId, String aclIdentifier) throws ApiException {
        ApiResponse<MagicAclDeletedResponse> localVarResp = magicSiteAclsDeleteAclWithHttpInfo(siteId, accountId, aclIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete Site ACL
     * Remove a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @return ApiResponse&lt;MagicAclDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicAclDeletedResponse> magicSiteAclsDeleteAclWithHttpInfo(String siteId, String accountId, String aclIdentifier) throws ApiException {
        okhttp3.Call localVarCall = magicSiteAclsDeleteAclValidateBeforeCall(siteId, accountId, aclIdentifier, null);
        Type localVarReturnType = new TypeToken<MagicAclDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Site ACL (asynchronously)
     * Remove a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsDeleteAclAsync(String siteId, String accountId, String aclIdentifier, final ApiCallback<MagicAclDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicSiteAclsDeleteAclValidateBeforeCall(siteId, accountId, aclIdentifier, _callback);
        Type localVarReturnType = new TypeToken<MagicAclDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicSiteAclsListAcls
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Site ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Site ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsListAclsCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/acls"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicSiteAclsListAclsValidateBeforeCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicSiteAclsListAcls(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicSiteAclsListAcls(Async)");
        }

        return magicSiteAclsListAclsCall(accountId, siteId, _callback);

    }

    /**
     * List Site ACLs
     * Lists Site ACLs associated with an account.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return MagicAclsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Site ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Site ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicAclsCollectionResponse magicSiteAclsListAcls(String accountId, String siteId) throws ApiException {
        ApiResponse<MagicAclsCollectionResponse> localVarResp = magicSiteAclsListAclsWithHttpInfo(accountId, siteId);
        return localVarResp.getData();
    }

    /**
     * List Site ACLs
     * Lists Site ACLs associated with an account.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;MagicAclsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Site ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Site ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicAclsCollectionResponse> magicSiteAclsListAclsWithHttpInfo(String accountId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = magicSiteAclsListAclsValidateBeforeCall(accountId, siteId, null);
        Type localVarReturnType = new TypeToken<MagicAclsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Site ACLs (asynchronously)
     * Lists Site ACLs associated with an account.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Site ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Site ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsListAclsAsync(String accountId, String siteId, final ApiCallback<MagicAclsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicSiteAclsListAclsValidateBeforeCall(accountId, siteId, _callback);
        Type localVarReturnType = new TypeToken<MagicAclsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicSiteAclsUpdateAcl
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param magicAclUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsUpdateAclCall(String siteId, String accountId, String aclIdentifier, MagicAclUpdateRequest magicAclUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicAclUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/acls/{acl_identifier}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "acl_identifier" + "}", localVarApiClient.escapeString(aclIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicSiteAclsUpdateAclValidateBeforeCall(String siteId, String accountId, String aclIdentifier, MagicAclUpdateRequest magicAclUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicSiteAclsUpdateAcl(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicSiteAclsUpdateAcl(Async)");
        }

        // verify the required parameter 'aclIdentifier' is set
        if (aclIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aclIdentifier' when calling magicSiteAclsUpdateAcl(Async)");
        }

        // verify the required parameter 'magicAclUpdateRequest' is set
        if (magicAclUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicAclUpdateRequest' when calling magicSiteAclsUpdateAcl(Async)");
        }

        return magicSiteAclsUpdateAclCall(siteId, accountId, aclIdentifier, magicAclUpdateRequest, _callback);

    }

    /**
     * Update Site ACL
     * Update a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param magicAclUpdateRequest  (required)
     * @return MagicAclModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicAclModifiedResponse magicSiteAclsUpdateAcl(String siteId, String accountId, String aclIdentifier, MagicAclUpdateRequest magicAclUpdateRequest) throws ApiException {
        ApiResponse<MagicAclModifiedResponse> localVarResp = magicSiteAclsUpdateAclWithHttpInfo(siteId, accountId, aclIdentifier, magicAclUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Site ACL
     * Update a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param magicAclUpdateRequest  (required)
     * @return ApiResponse&lt;MagicAclModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicAclModifiedResponse> magicSiteAclsUpdateAclWithHttpInfo(String siteId, String accountId, String aclIdentifier, MagicAclUpdateRequest magicAclUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicSiteAclsUpdateAclValidateBeforeCall(siteId, accountId, aclIdentifier, magicAclUpdateRequest, null);
        Type localVarReturnType = new TypeToken<MagicAclModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Site ACL (asynchronously)
     * Update a specific Site ACL.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param aclIdentifier  (required)
     * @param magicAclUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Site ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Site ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicSiteAclsUpdateAclAsync(String siteId, String accountId, String aclIdentifier, MagicAclUpdateRequest magicAclUpdateRequest, final ApiCallback<MagicAclModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicSiteAclsUpdateAclValidateBeforeCall(siteId, accountId, aclIdentifier, magicAclUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicAclModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
