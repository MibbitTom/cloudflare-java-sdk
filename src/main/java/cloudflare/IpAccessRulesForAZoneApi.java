/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FirewallEgsPagination;
import org.openapitools.client.model.FirewallFilters;
import org.openapitools.client.model.FirewallRuleCollectionResponse;
import org.openapitools.client.model.FirewallRuleSingleIdResponse;
import org.openapitools.client.model.FirewallRuleSingleResponse;
import org.openapitools.client.model.IpAccessRulesForAUserCreateAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserDeleteAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserListIpAccessRules4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAUserUpdateAnIpAccessRuleRequest;
import org.openapitools.client.model.IpAccessRulesForAZoneCreateAnIpAccessRuleRequest;
import org.openapitools.client.model.IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAccessRulesForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAccessRulesForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAccessRulesForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAccessRulesForAZoneCreateAnIpAccessRule
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneCreateAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneCreateAnIpAccessRuleCall(String zoneId, IpAccessRulesForAZoneCreateAnIpAccessRuleRequest ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAZoneCreateAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/access_rules/rules"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAZoneCreateAnIpAccessRuleValidateBeforeCall(String zoneId, IpAccessRulesForAZoneCreateAnIpAccessRuleRequest ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAccessRulesForAZoneCreateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'ipAccessRulesForAZoneCreateAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAZoneCreateAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAZoneCreateAnIpAccessRuleRequest' when calling ipAccessRulesForAZoneCreateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAZoneCreateAnIpAccessRuleCall(zoneId, ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, _callback);

    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for a zone.  Note: To create an IP Access rule that applies to multiple zones, refer to [IP Access rules for a user](#ip-access-rules-for-a-user) or [IP Access rules for an account](#ip-access-rules-for-an-account) as appropriate.
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneCreateAnIpAccessRuleRequest  (required)
     * @return FirewallRuleSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleResponse ipAccessRulesForAZoneCreateAnIpAccessRule(String zoneId, IpAccessRulesForAZoneCreateAnIpAccessRuleRequest ipAccessRulesForAZoneCreateAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallRuleSingleResponse> localVarResp = ipAccessRulesForAZoneCreateAnIpAccessRuleWithHttpInfo(zoneId, ipAccessRulesForAZoneCreateAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for a zone.  Note: To create an IP Access rule that applies to multiple zones, refer to [IP Access rules for a user](#ip-access-rules-for-a-user) or [IP Access rules for an account](#ip-access-rules-for-an-account) as appropriate.
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneCreateAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallRuleSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleResponse> ipAccessRulesForAZoneCreateAnIpAccessRuleWithHttpInfo(String zoneId, IpAccessRulesForAZoneCreateAnIpAccessRuleRequest ipAccessRulesForAZoneCreateAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAZoneCreateAnIpAccessRuleValidateBeforeCall(zoneId, ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an IP Access rule (asynchronously)
     * Creates a new IP Access rule for a zone.  Note: To create an IP Access rule that applies to multiple zones, refer to [IP Access rules for a user](#ip-access-rules-for-a-user) or [IP Access rules for an account](#ip-access-rules-for-an-account) as appropriate.
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneCreateAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneCreateAnIpAccessRuleAsync(String zoneId, IpAccessRulesForAZoneCreateAnIpAccessRuleRequest ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, final ApiCallback<FirewallRuleSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAZoneCreateAnIpAccessRuleValidateBeforeCall(zoneId, ipAccessRulesForAZoneCreateAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAZoneDeleteAnIpAccessRule
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneDeleteAnIpAccessRuleCall(String identifier, String zoneId, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAZoneDeleteAnIpAccessRuleValidateBeforeCall(String identifier, String zoneId, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAZoneDeleteAnIpAccessRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAccessRulesForAZoneDeleteAnIpAccessRule(Async)");
        }

        // verify the required parameter 'ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest' when calling ipAccessRulesForAZoneDeleteAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAZoneDeleteAnIpAccessRuleCall(identifier, zoneId, ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, _callback);

    }

    /**
     * Delete an IP Access rule
     * Deletes an IP Access rule defined at the zone level.  Optionally, you can use the &#x60;cascade&#x60; property to specify that you wish to delete similar rules in other zones managed by the same zone owner.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest  (required)
     * @return FirewallRuleSingleIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleIdResponse ipAccessRulesForAZoneDeleteAnIpAccessRule(String identifier, String zoneId, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallRuleSingleIdResponse> localVarResp = ipAccessRulesForAZoneDeleteAnIpAccessRuleWithHttpInfo(identifier, zoneId, ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an IP Access rule
     * Deletes an IP Access rule defined at the zone level.  Optionally, you can use the &#x60;cascade&#x60; property to specify that you wish to delete similar rules in other zones managed by the same zone owner.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallRuleSingleIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleIdResponse> ipAccessRulesForAZoneDeleteAnIpAccessRuleWithHttpInfo(String identifier, String zoneId, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAZoneDeleteAnIpAccessRuleValidateBeforeCall(identifier, zoneId, ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an IP Access rule (asynchronously)
     * Deletes an IP Access rule defined at the zone level.  Optionally, you can use the &#x60;cascade&#x60; property to specify that you wish to delete similar rules in other zones managed by the same zone owner.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneDeleteAnIpAccessRuleAsync(String identifier, String zoneId, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, final ApiCallback<FirewallRuleSingleIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAZoneDeleteAnIpAccessRuleValidateBeforeCall(identifier, zoneId, ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAZoneListIpAccessRules
     * @param zoneId  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneListIpAccessRulesCall(String zoneId, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/access_rules/rules"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (egsPaginationJson != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("egs-pagination.json", egsPaginationJson));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAZoneListIpAccessRulesValidateBeforeCall(String zoneId, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAccessRulesForAZoneListIpAccessRules(Async)");
        }

        return ipAccessRulesForAZoneListIpAccessRulesCall(zoneId, filters, egsPaginationJson, page, perPage, order, direction, _callback);

    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of a zone. You can filter the results using several optional parameters.
     * @param zoneId  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return FirewallRuleCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleCollectionResponse ipAccessRulesForAZoneListIpAccessRules(String zoneId, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<FirewallRuleCollectionResponse> localVarResp = ipAccessRulesForAZoneListIpAccessRulesWithHttpInfo(zoneId, filters, egsPaginationJson, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of a zone. You can filter the results using several optional parameters.
     * @param zoneId  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;FirewallRuleCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleCollectionResponse> ipAccessRulesForAZoneListIpAccessRulesWithHttpInfo(String zoneId, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAZoneListIpAccessRulesValidateBeforeCall(zoneId, filters, egsPaginationJson, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<FirewallRuleCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List IP Access rules (asynchronously)
     * Fetches IP Access rules of a zone. You can filter the results using several optional parameters.
     * @param zoneId  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneListIpAccessRulesAsync(String zoneId, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<FirewallRuleCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAZoneListIpAccessRulesValidateBeforeCall(zoneId, filters, egsPaginationJson, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAZoneUpdateAnIpAccessRule
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneUpdateAnIpAccessRuleCall(String identifier, String zoneId, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAUserUpdateAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAZoneUpdateAnIpAccessRuleValidateBeforeCall(String identifier, String zoneId, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAZoneUpdateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAccessRulesForAZoneUpdateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'ipAccessRulesForAUserUpdateAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAUserUpdateAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAUserUpdateAnIpAccessRuleRequest' when calling ipAccessRulesForAZoneUpdateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAZoneUpdateAnIpAccessRuleCall(identifier, zoneId, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, _callback);

    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the zone level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @return FirewallRuleSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallRuleSingleResponse ipAccessRulesForAZoneUpdateAnIpAccessRule(String identifier, String zoneId, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallRuleSingleResponse> localVarResp = ipAccessRulesForAZoneUpdateAnIpAccessRuleWithHttpInfo(identifier, zoneId, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the zone level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallRuleSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallRuleSingleResponse> ipAccessRulesForAZoneUpdateAnIpAccessRuleWithHttpInfo(String identifier, String zoneId, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAZoneUpdateAnIpAccessRuleValidateBeforeCall(identifier, zoneId, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an IP Access rule (asynchronously)
     * Updates an IP Access rule defined at the zone level. You can only update the rule action (&#x60;mode&#x60; parameter) and notes.
     * @param identifier  (required)
     * @param zoneId  (required)
     * @param ipAccessRulesForAUserUpdateAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAZoneUpdateAnIpAccessRuleAsync(String identifier, String zoneId, IpAccessRulesForAUserUpdateAnIpAccessRuleRequest ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, final ApiCallback<FirewallRuleSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAZoneUpdateAnIpAccessRuleValidateBeforeCall(identifier, zoneId, ipAccessRulesForAUserUpdateAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallRuleSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
