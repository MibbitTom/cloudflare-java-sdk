/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessAppId;
import org.openapitools.client.model.AccessAppsComponentsSchemasResponseCollection2;
import org.openapitools.client.model.AccessAppsComponentsSchemasSingleResponse2;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.AccessSchemasApps;
import org.openapitools.client.model.AccessSchemasEmptyResponse;
import org.openapitools.client.model.AccessSchemasPolicyCheckResponse;
import org.openapitools.client.model.ZoneLevelAccessApplicationsAddABookmarkApplication201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAccessApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAccessApplicationsAddABookmarkApplication
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsAddABookmarkApplicationCall(String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessSchemasApps;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsAddABookmarkApplication(Async)");
        }

        // verify the required parameter 'accessSchemasApps' is set
        if (accessSchemasApps == null) {
            throw new ApiException("Missing the required parameter 'accessSchemasApps' when calling zoneLevelAccessApplicationsAddABookmarkApplication(Async)");
        }

        return zoneLevelAccessApplicationsAddABookmarkApplicationCall(identifier, accessSchemasApps, _callback);

    }

    /**
     * Add an Access application
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @return ZoneLevelAccessApplicationsAddABookmarkApplication201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneLevelAccessApplicationsAddABookmarkApplication201Response zoneLevelAccessApplicationsAddABookmarkApplication(String identifier, AccessSchemasApps accessSchemasApps) throws ApiException {
        ApiResponse<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> localVarResp = zoneLevelAccessApplicationsAddABookmarkApplicationWithHttpInfo(identifier, accessSchemasApps);
        return localVarResp.getData();
    }

    /**
     * Add an Access application
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @return ApiResponse&lt;ZoneLevelAccessApplicationsAddABookmarkApplication201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> zoneLevelAccessApplicationsAddABookmarkApplicationWithHttpInfo(String identifier, AccessSchemasApps accessSchemasApps) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(identifier, accessSchemasApps, null);
        Type localVarReturnType = new TypeToken<ZoneLevelAccessApplicationsAddABookmarkApplication201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Access application (asynchronously)
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsAddABookmarkApplicationAsync(String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(identifier, accessSchemasApps, _callback);
        Type localVarReturnType = new TypeToken<ZoneLevelAccessApplicationsAddABookmarkApplication201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsDeleteAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsDeleteAnAccessApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsDeleteAnAccessApplication(Async)");
        }

        return zoneLevelAccessApplicationsDeleteAnAccessApplicationCall(appId, identifier, _callback);

    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse zoneLevelAccessApplicationsDeleteAnAccessApplication(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = zoneLevelAccessApplicationsDeleteAnAccessApplicationWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> zoneLevelAccessApplicationsDeleteAnAccessApplicationWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access application (asynchronously)
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationAsync(AccessAppId appId, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsGetAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsGetAnAccessApplicationCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsGetAnAccessApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsGetAnAccessApplication(Async)");
        }

        return zoneLevelAccessApplicationsGetAnAccessApplicationCall(appId, identifier, _callback);

    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessAppsComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessAppsComponentsSchemasSingleResponse2 zoneLevelAccessApplicationsGetAnAccessApplication(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessAppsComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessApplicationsGetAnAccessApplicationWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessAppsComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessAppsComponentsSchemasSingleResponse2> zoneLevelAccessApplicationsGetAnAccessApplicationWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access application (asynchronously)
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsGetAnAccessApplicationAsync(AccessAppId appId, String identifier, final ApiCallback<AccessAppsComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsListAccessApplications
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access Applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access Applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsListAccessApplicationsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsListAccessApplications(Async)");
        }

        return zoneLevelAccessApplicationsListAccessApplicationsCall(identifier, _callback);

    }

    /**
     * List Access Applications
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @return AccessAppsComponentsSchemasResponseCollection2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access Applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access Applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessAppsComponentsSchemasResponseCollection2 zoneLevelAccessApplicationsListAccessApplications(String identifier) throws ApiException {
        ApiResponse<AccessAppsComponentsSchemasResponseCollection2> localVarResp = zoneLevelAccessApplicationsListAccessApplicationsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Access Applications
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessAppsComponentsSchemasResponseCollection2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access Applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access Applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessAppsComponentsSchemasResponseCollection2> zoneLevelAccessApplicationsListAccessApplicationsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasResponseCollection2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access Applications (asynchronously)
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access Applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access Applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsListAccessApplicationsAsync(String identifier, final ApiCallback<AccessAppsComponentsSchemasResponseCollection2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasResponseCollection2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsRevokeServiceTokens
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsRevokeServiceTokensCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}/revoke_tokens"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsRevokeServiceTokens(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsRevokeServiceTokens(Async)");
        }

        return zoneLevelAccessApplicationsRevokeServiceTokensCall(appId, identifier, _callback);

    }

    /**
     * Revoke application tokens
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessSchemasEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasEmptyResponse zoneLevelAccessApplicationsRevokeServiceTokens(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessSchemasEmptyResponse> localVarResp = zoneLevelAccessApplicationsRevokeServiceTokensWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Revoke application tokens
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessSchemasEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasEmptyResponse> zoneLevelAccessApplicationsRevokeServiceTokensWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessSchemasEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke application tokens (asynchronously)
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsRevokeServiceTokensAsync(AccessAppId appId, String identifier, final ApiCallback<AccessSchemasEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsTestAccessPolicies
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsTestAccessPoliciesCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}/user_policy_checks"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsTestAccessPolicies(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsTestAccessPolicies(Async)");
        }

        return zoneLevelAccessApplicationsTestAccessPoliciesCall(appId, identifier, _callback);

    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessSchemasPolicyCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasPolicyCheckResponse zoneLevelAccessApplicationsTestAccessPolicies(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessSchemasPolicyCheckResponse> localVarResp = zoneLevelAccessApplicationsTestAccessPoliciesWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessSchemasPolicyCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasPolicyCheckResponse> zoneLevelAccessApplicationsTestAccessPoliciesWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessSchemasPolicyCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Access policies (asynchronously)
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsTestAccessPoliciesAsync(AccessAppId appId, String identifier, final ApiCallback<AccessSchemasPolicyCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasPolicyCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessApplicationsUpdateABookmarkApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationCall(AccessAppId appId, String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessSchemasApps;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(AccessAppId appId, String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }

        // verify the required parameter 'accessSchemasApps' is set
        if (accessSchemasApps == null) {
            throw new ApiException("Missing the required parameter 'accessSchemasApps' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }

        return zoneLevelAccessApplicationsUpdateABookmarkApplicationCall(appId, identifier, accessSchemasApps, _callback);

    }

    /**
     * Update an Access application
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @return ZoneLevelAccessApplicationsAddABookmarkApplication201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneLevelAccessApplicationsAddABookmarkApplication201Response zoneLevelAccessApplicationsUpdateABookmarkApplication(AccessAppId appId, String identifier, AccessSchemasApps accessSchemasApps) throws ApiException {
        ApiResponse<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> localVarResp = zoneLevelAccessApplicationsUpdateABookmarkApplicationWithHttpInfo(appId, identifier, accessSchemasApps);
        return localVarResp.getData();
    }

    /**
     * Update an Access application
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @return ApiResponse&lt;ZoneLevelAccessApplicationsAddABookmarkApplication201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> zoneLevelAccessApplicationsUpdateABookmarkApplicationWithHttpInfo(AccessAppId appId, String identifier, AccessSchemasApps accessSchemasApps) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(appId, identifier, accessSchemasApps, null);
        Type localVarReturnType = new TypeToken<ZoneLevelAccessApplicationsAddABookmarkApplication201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access application (asynchronously)
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessSchemasApps  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationAsync(AccessAppId appId, String identifier, AccessSchemasApps accessSchemasApps, final ApiCallback<ZoneLevelAccessApplicationsAddABookmarkApplication201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(appId, identifier, accessSchemasApps, _callback);
        Type localVarReturnType = new TypeToken<ZoneLevelAccessApplicationsAddABookmarkApplication201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
