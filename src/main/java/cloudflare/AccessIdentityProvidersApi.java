/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.AccessIdentityProviders;
import org.openapitools.client.model.AccessResponseCollection;
import org.openapitools.client.model.AccessSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessIdentityProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessIdentityProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessIdentityProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessIdentityProvidersAddAnAccessIdentityProvider
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersAddAnAccessIdentityProviderCall(String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessIdentityProviders;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'accessIdentityProviders' is set
        if (accessIdentityProviders == null) {
            throw new ApiException("Missing the required parameter 'accessIdentityProviders' when calling accessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }

        return accessIdentityProvidersAddAnAccessIdentityProviderCall(identifier, accessIdentityProviders, _callback);

    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @return AccessSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasSingleResponse accessIdentityProvidersAddAnAccessIdentityProvider(String identifier, AccessIdentityProviders accessIdentityProviders) throws ApiException {
        ApiResponse<AccessSchemasSingleResponse> localVarResp = accessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(identifier, accessIdentityProviders);
        return localVarResp.getData();
    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @return ApiResponse&lt;AccessSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasSingleResponse> accessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(String identifier, AccessIdentityProviders accessIdentityProviders) throws ApiException {
        okhttp3.Call localVarCall = accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(identifier, accessIdentityProviders, null);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Access identity provider (asynchronously)
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersAddAnAccessIdentityProviderAsync(String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback<AccessSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(identifier, accessIdentityProviders, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessIdentityProvidersDeleteAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersDeleteAnAccessIdentityProviderCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }

        return accessIdentityProvidersDeleteAnAccessIdentityProviderCall(uuid, identifier, _callback);

    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse accessIdentityProvidersDeleteAnAccessIdentityProvider(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = accessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> accessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access identity provider (asynchronously)
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersDeleteAnAccessIdentityProviderAsync(String uuid, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessIdentityProvidersGetAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersGetAnAccessIdentityProviderCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }

        return accessIdentityProvidersGetAnAccessIdentityProviderCall(uuid, identifier, _callback);

    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasSingleResponse accessIdentityProvidersGetAnAccessIdentityProvider(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessSchemasSingleResponse> localVarResp = accessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasSingleResponse> accessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access identity provider (asynchronously)
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersGetAnAccessIdentityProviderAsync(String uuid, String identifier, final ApiCallback<AccessSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessIdentityProvidersListAccessIdentityProviders
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersListAccessIdentityProvidersCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersListAccessIdentityProviders(Async)");
        }

        return accessIdentityProvidersListAccessIdentityProvidersCall(identifier, _callback);

    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return AccessResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessResponseCollection accessIdentityProvidersListAccessIdentityProviders(String identifier) throws ApiException {
        ApiResponse<AccessResponseCollection> localVarResp = accessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessResponseCollection> accessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access identity providers (asynchronously)
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersListAccessIdentityProvidersAsync(String identifier, final ApiCallback<AccessResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessIdentityProvidersUpdateAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersUpdateAnAccessIdentityProviderCall(String uuid, String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessIdentityProviders;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'accessIdentityProviders' is set
        if (accessIdentityProviders == null) {
            throw new ApiException("Missing the required parameter 'accessIdentityProviders' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        return accessIdentityProvidersUpdateAnAccessIdentityProviderCall(uuid, identifier, accessIdentityProviders, _callback);

    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @return AccessSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasSingleResponse accessIdentityProvidersUpdateAnAccessIdentityProvider(String uuid, String identifier, AccessIdentityProviders accessIdentityProviders) throws ApiException {
        ApiResponse<AccessSchemasSingleResponse> localVarResp = accessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(uuid, identifier, accessIdentityProviders);
        return localVarResp.getData();
    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @return ApiResponse&lt;AccessSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasSingleResponse> accessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier, AccessIdentityProviders accessIdentityProviders) throws ApiException {
        okhttp3.Call localVarCall = accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, accessIdentityProviders, null);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access identity provider (asynchronously)
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessIdentityProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessIdentityProvidersUpdateAnAccessIdentityProviderAsync(String uuid, String identifier, AccessIdentityProviders accessIdentityProviders, final ApiCallback<AccessSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, accessIdentityProviders, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
