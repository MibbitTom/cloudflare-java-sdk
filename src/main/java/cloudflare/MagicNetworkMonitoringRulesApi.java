/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicNetworkMonitoringRulesListRules4XXResponse;
import org.openapitools.client.model.MagicNetworkMonitoringRulesUpdateAdvertisementForRule4XXResponse;
import org.openapitools.client.model.MagicNetworkMonitoringRulesUpdateRules4XXResponse;
import org.openapitools.client.model.MagicVisibilityMnmRuleAdvertisementSingleResponse;
import org.openapitools.client.model.MagicVisibilityMnmRulesCollectionResponse;
import org.openapitools.client.model.MagicVisibilityMnmRulesSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicNetworkMonitoringRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicNetworkMonitoringRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicNetworkMonitoringRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicNetworkMonitoringRulesCreateRules
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesCreateRulesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesCreateRules(Async)");
        }

        return magicNetworkMonitoringRulesCreateRulesCall(accountId, _callback);

    }

    /**
     * Create rules
     * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesSingleResponse magicNetworkMonitoringRulesCreateRules(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesSingleResponse> localVarResp = magicNetworkMonitoringRulesCreateRulesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Create rules
     * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesSingleResponse> magicNetworkMonitoringRulesCreateRulesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create rules (asynchronously)
     * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesCreateRulesAsync(String accountId, final ApiCallback<MagicVisibilityMnmRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesDeleteRule
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesDeleteRuleCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling magicNetworkMonitoringRulesDeleteRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesDeleteRule(Async)");
        }

        return magicNetworkMonitoringRulesDeleteRuleCall(ruleId, accountId, _callback);

    }

    /**
     * Delete rule
     * Delete a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesSingleResponse magicNetworkMonitoringRulesDeleteRule(String ruleId, String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesSingleResponse> localVarResp = magicNetworkMonitoringRulesDeleteRuleWithHttpInfo(ruleId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete rule
     * Delete a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesSingleResponse> magicNetworkMonitoringRulesDeleteRuleWithHttpInfo(String ruleId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(ruleId, accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete rule (asynchronously)
     * Delete a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesDeleteRuleAsync(String ruleId, String accountId, final ApiCallback<MagicVisibilityMnmRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(ruleId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesGetRule
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesGetRuleCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesGetRuleValidateBeforeCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling magicNetworkMonitoringRulesGetRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesGetRule(Async)");
        }

        return magicNetworkMonitoringRulesGetRuleCall(ruleId, accountId, _callback);

    }

    /**
     * Get rule
     * List a single network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesSingleResponse magicNetworkMonitoringRulesGetRule(String ruleId, String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesSingleResponse> localVarResp = magicNetworkMonitoringRulesGetRuleWithHttpInfo(ruleId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get rule
     * List a single network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesSingleResponse> magicNetworkMonitoringRulesGetRuleWithHttpInfo(String ruleId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesGetRuleValidateBeforeCall(ruleId, accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rule (asynchronously)
     * List a single network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesGetRuleAsync(String ruleId, String accountId, final ApiCallback<MagicVisibilityMnmRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesGetRuleValidateBeforeCall(ruleId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesListRules
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesListRulesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesListRulesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesListRules(Async)");
        }

        return magicNetworkMonitoringRulesListRulesCall(accountId, _callback);

    }

    /**
     * List rules
     * Lists network monitoring rules for account.
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesCollectionResponse magicNetworkMonitoringRulesListRules(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesCollectionResponse> localVarResp = magicNetworkMonitoringRulesListRulesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List rules
     * Lists network monitoring rules for account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesCollectionResponse> magicNetworkMonitoringRulesListRulesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesListRulesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rules (asynchronously)
     * Lists network monitoring rules for account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesListRulesAsync(String accountId, final ApiCallback<MagicVisibilityMnmRulesCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesListRulesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateAdvertisementForRule
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update advertisement for rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update advertisement for rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules/{rule_id}/advertisement"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule(Async)");
        }

        return magicNetworkMonitoringRulesUpdateAdvertisementForRuleCall(ruleId, accountId, _callback);

    }

    /**
     * Update advertisement for rule
     * Update advertisement for rule.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return MagicVisibilityMnmRuleAdvertisementSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update advertisement for rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update advertisement for rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRuleAdvertisementSingleResponse magicNetworkMonitoringRulesUpdateAdvertisementForRule(String ruleId, String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRuleAdvertisementSingleResponse> localVarResp = magicNetworkMonitoringRulesUpdateAdvertisementForRuleWithHttpInfo(ruleId, accountId);
        return localVarResp.getData();
    }

    /**
     * Update advertisement for rule
     * Update advertisement for rule.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRuleAdvertisementSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update advertisement for rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update advertisement for rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRuleAdvertisementSingleResponse> magicNetworkMonitoringRulesUpdateAdvertisementForRuleWithHttpInfo(String ruleId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(ruleId, accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRuleAdvertisementSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update advertisement for rule (asynchronously)
     * Update advertisement for rule.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update advertisement for rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update advertisement for rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleAsync(String ruleId, String accountId, final ApiCallback<MagicVisibilityMnmRuleAdvertisementSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(ruleId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRuleAdvertisementSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateRule
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateRuleCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(String ruleId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling magicNetworkMonitoringRulesUpdateRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesUpdateRule(Async)");
        }

        return magicNetworkMonitoringRulesUpdateRuleCall(ruleId, accountId, _callback);

    }

    /**
     * Update rule
     * Update a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesSingleResponse magicNetworkMonitoringRulesUpdateRule(String ruleId, String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesSingleResponse> localVarResp = magicNetworkMonitoringRulesUpdateRuleWithHttpInfo(ruleId, accountId);
        return localVarResp.getData();
    }

    /**
     * Update rule
     * Update a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesSingleResponse> magicNetworkMonitoringRulesUpdateRuleWithHttpInfo(String ruleId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(ruleId, accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update rule (asynchronously)
     * Update a network monitoring rule for account.
     * @param ruleId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateRuleAsync(String ruleId, String accountId, final ApiCallback<MagicVisibilityMnmRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(ruleId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateRules
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateRulesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/rules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringRulesUpdateRules(Async)");
        }

        return magicNetworkMonitoringRulesUpdateRulesCall(accountId, _callback);

    }

    /**
     * Update rules
     * Update network monitoring rules for account.
     * @param accountId  (required)
     * @return MagicVisibilityMnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmRulesSingleResponse magicNetworkMonitoringRulesUpdateRules(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmRulesSingleResponse> localVarResp = magicNetworkMonitoringRulesUpdateRulesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Update rules
     * Update network monitoring rules for account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmRulesSingleResponse> magicNetworkMonitoringRulesUpdateRulesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update rules (asynchronously)
     * Update network monitoring rules for account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringRulesUpdateRulesAsync(String accountId, final ApiCallback<MagicVisibilityMnmRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
