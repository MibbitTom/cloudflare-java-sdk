/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateAccountRuleset200Response;
import org.openapitools.client.model.CreateAccountRulesetRequest;
import org.openapitools.client.model.CreateAccountRulesetRuleRequest;
import org.openapitools.client.model.ListAccountRulesets200Response;
import org.openapitools.client.model.ListAccountRulesets4XXResponse;
import org.openapitools.client.model.RulesetsRulesetPhase;
import org.openapitools.client.model.UpdateAccountEntrypointRulesetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountRulesetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountRulesetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountRulesetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAccountRuleset
     * @param accountId  (required)
     * @param createAccountRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountRulesetCall(String accountId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountRulesetValidateBeforeCall(String accountId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createAccountRuleset(Async)");
        }

        // verify the required parameter 'createAccountRulesetRequest' is set
        if (createAccountRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRequest' when calling createAccountRuleset(Async)");
        }

        return createAccountRulesetCall(accountId, createAccountRulesetRequest, _callback);

    }

    /**
     * Create an account ruleset
     * Creates a ruleset at the account level.
     * @param accountId  (required)
     * @param createAccountRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response createAccountRuleset(String accountId, CreateAccountRulesetRequest createAccountRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = createAccountRulesetWithHttpInfo(accountId, createAccountRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Create an account ruleset
     * Creates a ruleset at the account level.
     * @param accountId  (required)
     * @param createAccountRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> createAccountRulesetWithHttpInfo(String accountId, CreateAccountRulesetRequest createAccountRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = createAccountRulesetValidateBeforeCall(accountId, createAccountRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an account ruleset (asynchronously)
     * Creates a ruleset at the account level.
     * @param accountId  (required)
     * @param createAccountRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountRulesetAsync(String accountId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountRulesetValidateBeforeCall(accountId, createAccountRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccountRulesetRule
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountRulesetRuleCall(String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRuleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountRulesetRuleValidateBeforeCall(String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling createAccountRulesetRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createAccountRulesetRule(Async)");
        }

        // verify the required parameter 'createAccountRulesetRuleRequest' is set
        if (createAccountRulesetRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRuleRequest' when calling createAccountRulesetRule(Async)");
        }

        return createAccountRulesetRuleCall(rulesetId, accountId, createAccountRulesetRuleRequest, _callback);

    }

    /**
     * Create an account ruleset rule
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response createAccountRulesetRule(String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = createAccountRulesetRuleWithHttpInfo(rulesetId, accountId, createAccountRulesetRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create an account ruleset rule
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> createAccountRulesetRuleWithHttpInfo(String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createAccountRulesetRuleValidateBeforeCall(rulesetId, accountId, createAccountRulesetRuleRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an account ruleset rule (asynchronously)
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountRulesetRuleAsync(String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountRulesetRuleValidateBeforeCall(rulesetId, accountId, createAccountRulesetRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountRuleset
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountRulesetValidateBeforeCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteAccountRuleset(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountRuleset(Async)");
        }

        return deleteAccountRulesetCall(rulesetId, accountId, _callback);

    }

    /**
     * Delete an account ruleset
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountRuleset(String rulesetId, String accountId) throws ApiException {
        deleteAccountRulesetWithHttpInfo(rulesetId, accountId);
    }

    /**
     * Delete an account ruleset
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountRulesetWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountRulesetValidateBeforeCall(rulesetId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an account ruleset (asynchronously)
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetAsync(String rulesetId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountRulesetValidateBeforeCall(rulesetId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetRuleCall(String ruleId, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteAccountRulesetRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteAccountRulesetRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountRulesetRule(Async)");
        }

        return deleteAccountRulesetRuleCall(ruleId, rulesetId, accountId, _callback);

    }

    /**
     * Delete an account ruleset rule
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response deleteAccountRulesetRule(String ruleId, String rulesetId, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = deleteAccountRulesetRuleWithHttpInfo(ruleId, rulesetId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete an account ruleset rule
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> deleteAccountRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an account ruleset rule (asynchronously)
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetRuleAsync(String ruleId, String rulesetId, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetVersionCall(String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling deleteAccountRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteAccountRulesetVersion(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountRulesetVersion(Async)");
        }

        return deleteAccountRulesetVersionCall(rulesetVersion, rulesetId, accountId, _callback);

    }

    /**
     * Delete an account ruleset version
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountRulesetVersion(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        deleteAccountRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, accountId);
    }

    /**
     * Delete an account ruleset version
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an account ruleset version (asynchronously)
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountRulesetVersionAsync(String rulesetVersion, String rulesetId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountEntrypointRuleset
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountEntrypointRulesetCall(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountEntrypointRulesetValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling getAccountEntrypointRuleset(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountEntrypointRuleset(Async)");
        }

        return getAccountEntrypointRulesetCall(rulesetPhase, accountId, _callback);

    }

    /**
     * Get an account entry point ruleset
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getAccountEntrypointRuleset(RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getAccountEntrypointRulesetWithHttpInfo(rulesetPhase, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an account entry point ruleset
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getAccountEntrypointRulesetWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountEntrypointRulesetValidateBeforeCall(rulesetPhase, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an account entry point ruleset (asynchronously)
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountEntrypointRulesetAsync(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountEntrypointRulesetValidateBeforeCall(rulesetPhase, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountEntrypointRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountEntrypointRulesetVersionCall(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountEntrypointRulesetVersionValidateBeforeCall(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling getAccountEntrypointRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling getAccountEntrypointRulesetVersion(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountEntrypointRulesetVersion(Async)");
        }

        return getAccountEntrypointRulesetVersionCall(rulesetVersion, rulesetPhase, accountId, _callback);

    }

    /**
     * Get an account entry point ruleset version
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getAccountEntrypointRulesetVersion(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getAccountEntrypointRulesetVersionWithHttpInfo(rulesetVersion, rulesetPhase, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an account entry point ruleset version
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getAccountEntrypointRulesetVersionWithHttpInfo(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountEntrypointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an account entry point ruleset version (asynchronously)
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountEntrypointRulesetVersionAsync(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountEntrypointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountRuleset
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRulesetCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountRulesetValidateBeforeCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getAccountRuleset(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountRuleset(Async)");
        }

        return getAccountRulesetCall(rulesetId, accountId, _callback);

    }

    /**
     * Get an account ruleset
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getAccountRuleset(String rulesetId, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getAccountRulesetWithHttpInfo(rulesetId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an account ruleset
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getAccountRulesetWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountRulesetValidateBeforeCall(rulesetId, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an account ruleset (asynchronously)
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRulesetAsync(String rulesetId, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountRulesetValidateBeforeCall(rulesetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRulesetVersionCall(String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling getAccountRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getAccountRulesetVersion(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountRulesetVersion(Async)");
        }

        return getAccountRulesetVersionCall(rulesetVersion, rulesetId, accountId, _callback);

    }

    /**
     * Get an account ruleset version
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getAccountRulesetVersion(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getAccountRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an account ruleset version
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getAccountRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an account ruleset version (asynchronously)
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountRulesetVersionAsync(String rulesetVersion, String rulesetId, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountEntrypointRulesetVersions
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountEntrypointRulesetVersionsCall(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountEntrypointRulesetVersionsValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling listAccountEntrypointRulesetVersions(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountEntrypointRulesetVersions(Async)");
        }

        return listAccountEntrypointRulesetVersionsCall(rulesetPhase, accountId, _callback);

    }

    /**
     * List an account entry point ruleset&#39;s versions
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listAccountEntrypointRulesetVersions(RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listAccountEntrypointRulesetVersionsWithHttpInfo(rulesetPhase, accountId);
        return localVarResp.getData();
    }

    /**
     * List an account entry point ruleset&#39;s versions
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listAccountEntrypointRulesetVersionsWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String accountId) throws ApiException {
        okhttp3.Call localVarCall = listAccountEntrypointRulesetVersionsValidateBeforeCall(rulesetPhase, accountId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an account entry point ruleset&#39;s versions (asynchronously)
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountEntrypointRulesetVersionsAsync(RulesetsRulesetPhase rulesetPhase, String accountId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountEntrypointRulesetVersionsValidateBeforeCall(rulesetPhase, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountRulesetVersionRulesByTag
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetVersionRulesByTagCall(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}/by_tag/{rule_tag}"
            .replace("{" + "rule_tag" + "}", localVarApiClient.escapeString(ruleTag.toString()))
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountRulesetVersionRulesByTagValidateBeforeCall(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleTag' is set
        if (ruleTag == null) {
            throw new ApiException("Missing the required parameter 'ruleTag' when calling listAccountRulesetVersionRulesByTag(Async)");
        }

        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling listAccountRulesetVersionRulesByTag(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling listAccountRulesetVersionRulesByTag(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountRulesetVersionRulesByTag(Async)");
        }

        return listAccountRulesetVersionRulesByTagCall(ruleTag, rulesetVersion, rulesetId, accountId, _callback);

    }

    /**
     * List an account ruleset version&#39;s rules by tag
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response listAccountRulesetVersionRulesByTag(String ruleTag, String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = listAccountRulesetVersionRulesByTagWithHttpInfo(ruleTag, rulesetVersion, rulesetId, accountId);
        return localVarResp.getData();
    }

    /**
     * List an account ruleset version&#39;s rules by tag
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> listAccountRulesetVersionRulesByTagWithHttpInfo(String ruleTag, String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = listAccountRulesetVersionRulesByTagValidateBeforeCall(ruleTag, rulesetVersion, rulesetId, accountId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an account ruleset version&#39;s rules by tag (asynchronously)
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetVersionRulesByTagAsync(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountRulesetVersionRulesByTagValidateBeforeCall(ruleTag, rulesetVersion, rulesetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountRulesetVersions
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetVersionsCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountRulesetVersionsValidateBeforeCall(String rulesetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling listAccountRulesetVersions(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountRulesetVersions(Async)");
        }

        return listAccountRulesetVersionsCall(rulesetId, accountId, _callback);

    }

    /**
     * List an account ruleset&#39;s versions
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listAccountRulesetVersions(String rulesetId, String accountId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listAccountRulesetVersionsWithHttpInfo(rulesetId, accountId);
        return localVarResp.getData();
    }

    /**
     * List an account ruleset&#39;s versions
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listAccountRulesetVersionsWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = listAccountRulesetVersionsValidateBeforeCall(rulesetId, accountId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List an account ruleset&#39;s versions (asynchronously)
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetVersionsAsync(String rulesetId, String accountId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountRulesetVersionsValidateBeforeCall(rulesetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountRulesets
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountRulesetsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountRulesets(Async)");
        }

        return listAccountRulesetsCall(accountId, _callback);

    }

    /**
     * List account rulesets
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listAccountRulesets(String accountId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listAccountRulesetsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List account rulesets
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listAccountRulesetsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = listAccountRulesetsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List account rulesets (asynchronously)
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRulesetsAsync(String accountId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountRulesetsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountEntrypointRuleset
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountEntrypointRulesetCall(RulesetsRulesetPhase rulesetPhase, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountEntrypointRulesetRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountEntrypointRulesetValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling updateAccountEntrypointRuleset(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountEntrypointRuleset(Async)");
        }

        // verify the required parameter 'updateAccountEntrypointRulesetRequest' is set
        if (updateAccountEntrypointRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountEntrypointRulesetRequest' when calling updateAccountEntrypointRuleset(Async)");
        }

        return updateAccountEntrypointRulesetCall(rulesetPhase, accountId, updateAccountEntrypointRulesetRequest, _callback);

    }

    /**
     * Update an account entry point ruleset
     * Updates an account entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateAccountEntrypointRuleset(RulesetsRulesetPhase rulesetPhase, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateAccountEntrypointRulesetWithHttpInfo(rulesetPhase, accountId, updateAccountEntrypointRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Update an account entry point ruleset
     * Updates an account entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateAccountEntrypointRulesetWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountEntrypointRulesetValidateBeforeCall(rulesetPhase, accountId, updateAccountEntrypointRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an account entry point ruleset (asynchronously)
     * Updates an account entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountEntrypointRulesetAsync(RulesetsRulesetPhase rulesetPhase, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountEntrypointRulesetValidateBeforeCall(rulesetPhase, accountId, updateAccountEntrypointRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountRuleset
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountRulesetCall(String rulesetId, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountEntrypointRulesetRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountRulesetValidateBeforeCall(String rulesetId, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateAccountRuleset(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountRuleset(Async)");
        }

        // verify the required parameter 'updateAccountEntrypointRulesetRequest' is set
        if (updateAccountEntrypointRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountEntrypointRulesetRequest' when calling updateAccountRuleset(Async)");
        }

        return updateAccountRulesetCall(rulesetId, accountId, updateAccountEntrypointRulesetRequest, _callback);

    }

    /**
     * Update an account ruleset
     * Updates an account ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateAccountRuleset(String rulesetId, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateAccountRulesetWithHttpInfo(rulesetId, accountId, updateAccountEntrypointRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Update an account ruleset
     * Updates an account ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateAccountRulesetWithHttpInfo(String rulesetId, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountRulesetValidateBeforeCall(rulesetId, accountId, updateAccountEntrypointRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an account ruleset (asynchronously)
     * Updates an account ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountRulesetAsync(String rulesetId, String accountId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountRulesetValidateBeforeCall(rulesetId, accountId, updateAccountEntrypointRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountRulesetRuleCall(String ruleId, String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRuleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateAccountRulesetRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateAccountRulesetRule(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountRulesetRule(Async)");
        }

        // verify the required parameter 'createAccountRulesetRuleRequest' is set
        if (createAccountRulesetRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRuleRequest' when calling updateAccountRulesetRule(Async)");
        }

        return updateAccountRulesetRuleCall(ruleId, rulesetId, accountId, createAccountRulesetRuleRequest, _callback);

    }

    /**
     * Update an account ruleset rule
     * Updates an existing rule in an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateAccountRulesetRule(String ruleId, String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateAccountRulesetRuleWithHttpInfo(ruleId, rulesetId, accountId, createAccountRulesetRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update an account ruleset rule
     * Updates an existing rule in an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateAccountRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, createAccountRulesetRuleRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an account ruleset rule (asynchronously)
     * Updates an existing rule in an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountRulesetRuleAsync(String ruleId, String rulesetId, String accountId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, createAccountRulesetRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
