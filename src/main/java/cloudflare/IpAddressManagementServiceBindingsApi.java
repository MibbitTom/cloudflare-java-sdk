/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressingApiResponseCommon;
import org.openapitools.client.model.AddressingApiResponseCommonFailure;
import org.openapitools.client.model.AddressingCreateBindingRequest;
import org.openapitools.client.model.IpAddressManagementServiceBindingsCreateServiceBinding201Response;
import org.openapitools.client.model.IpAddressManagementServiceBindingsListServiceBindings200Response;
import org.openapitools.client.model.IpAddressManagementServiceBindingsListServices200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementServiceBindingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAddressManagementServiceBindingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementServiceBindingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAddressManagementServiceBindingsCreateServiceBinding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param addressingCreateBindingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Service Binding </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsCreateServiceBindingCall(String accountId, String prefixId, AddressingCreateBindingRequest addressingCreateBindingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addressingCreateBindingRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementServiceBindingsCreateServiceBindingValidateBeforeCall(String accountId, String prefixId, AddressingCreateBindingRequest addressingCreateBindingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementServiceBindingsCreateServiceBinding(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementServiceBindingsCreateServiceBinding(Async)");
        }

        return ipAddressManagementServiceBindingsCreateServiceBindingCall(accountId, prefixId, addressingCreateBindingRequest, _callback);

    }

    /**
     * Create Service Binding
     * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare&#39;s network. **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param addressingCreateBindingRequest  (optional)
     * @return IpAddressManagementServiceBindingsCreateServiceBinding201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Service Binding </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public IpAddressManagementServiceBindingsCreateServiceBinding201Response ipAddressManagementServiceBindingsCreateServiceBinding(String accountId, String prefixId, AddressingCreateBindingRequest addressingCreateBindingRequest) throws ApiException {
        ApiResponse<IpAddressManagementServiceBindingsCreateServiceBinding201Response> localVarResp = ipAddressManagementServiceBindingsCreateServiceBindingWithHttpInfo(accountId, prefixId, addressingCreateBindingRequest);
        return localVarResp.getData();
    }

    /**
     * Create Service Binding
     * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare&#39;s network. **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param addressingCreateBindingRequest  (optional)
     * @return ApiResponse&lt;IpAddressManagementServiceBindingsCreateServiceBinding201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Service Binding </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddressManagementServiceBindingsCreateServiceBinding201Response> ipAddressManagementServiceBindingsCreateServiceBindingWithHttpInfo(String accountId, String prefixId, AddressingCreateBindingRequest addressingCreateBindingRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsCreateServiceBindingValidateBeforeCall(accountId, prefixId, addressingCreateBindingRequest, null);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsCreateServiceBinding201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Service Binding (asynchronously)
     * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare&#39;s network. **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param addressingCreateBindingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Service Binding </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsCreateServiceBindingAsync(String accountId, String prefixId, AddressingCreateBindingRequest addressingCreateBindingRequest, final ApiCallback<IpAddressManagementServiceBindingsCreateServiceBinding201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsCreateServiceBindingValidateBeforeCall(accountId, prefixId, addressingCreateBindingRequest, _callback);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsCreateServiceBinding201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementServiceBindingsDeleteServiceBinding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Binding deleted </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsDeleteServiceBindingCall(String accountId, String prefixId, String bindingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings/{binding_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "binding_id" + "}", localVarApiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementServiceBindingsDeleteServiceBindingValidateBeforeCall(String accountId, String prefixId, String bindingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementServiceBindingsDeleteServiceBinding(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementServiceBindingsDeleteServiceBinding(Async)");
        }

        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling ipAddressManagementServiceBindingsDeleteServiceBinding(Async)");
        }

        return ipAddressManagementServiceBindingsDeleteServiceBindingCall(accountId, prefixId, bindingId, _callback);

    }

    /**
     * Delete Service Binding
     * Delete a Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @return AddressingApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Binding deleted </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCommon ipAddressManagementServiceBindingsDeleteServiceBinding(String accountId, String prefixId, String bindingId) throws ApiException {
        ApiResponse<AddressingApiResponseCommon> localVarResp = ipAddressManagementServiceBindingsDeleteServiceBindingWithHttpInfo(accountId, prefixId, bindingId);
        return localVarResp.getData();
    }

    /**
     * Delete Service Binding
     * Delete a Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Binding deleted </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCommon> ipAddressManagementServiceBindingsDeleteServiceBindingWithHttpInfo(String accountId, String prefixId, String bindingId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsDeleteServiceBindingValidateBeforeCall(accountId, prefixId, bindingId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Service Binding (asynchronously)
     * Delete a Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Binding deleted </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsDeleteServiceBindingAsync(String accountId, String prefixId, String bindingId, final ApiCallback<AddressingApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsDeleteServiceBindingValidateBeforeCall(accountId, prefixId, bindingId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementServiceBindingsGetServiceBinding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Service Binding with the requested ID </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsGetServiceBindingCall(String accountId, String prefixId, String bindingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings/{binding_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "binding_id" + "}", localVarApiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementServiceBindingsGetServiceBindingValidateBeforeCall(String accountId, String prefixId, String bindingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementServiceBindingsGetServiceBinding(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementServiceBindingsGetServiceBinding(Async)");
        }

        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling ipAddressManagementServiceBindingsGetServiceBinding(Async)");
        }

        return ipAddressManagementServiceBindingsGetServiceBindingCall(accountId, prefixId, bindingId, _callback);

    }

    /**
     * Get Service Binding
     * Fetch a single Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @return IpAddressManagementServiceBindingsCreateServiceBinding201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Service Binding with the requested ID </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public IpAddressManagementServiceBindingsCreateServiceBinding201Response ipAddressManagementServiceBindingsGetServiceBinding(String accountId, String prefixId, String bindingId) throws ApiException {
        ApiResponse<IpAddressManagementServiceBindingsCreateServiceBinding201Response> localVarResp = ipAddressManagementServiceBindingsGetServiceBindingWithHttpInfo(accountId, prefixId, bindingId);
        return localVarResp.getData();
    }

    /**
     * Get Service Binding
     * Fetch a single Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @return ApiResponse&lt;IpAddressManagementServiceBindingsCreateServiceBinding201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Service Binding with the requested ID </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddressManagementServiceBindingsCreateServiceBinding201Response> ipAddressManagementServiceBindingsGetServiceBindingWithHttpInfo(String accountId, String prefixId, String bindingId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsGetServiceBindingValidateBeforeCall(accountId, prefixId, bindingId, null);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsCreateServiceBinding201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service Binding (asynchronously)
     * Fetch a single Service Binding
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bindingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Service Binding with the requested ID </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Service Binding response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsGetServiceBindingAsync(String accountId, String prefixId, String bindingId, final ApiCallback<IpAddressManagementServiceBindingsCreateServiceBinding201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsGetServiceBindingValidateBeforeCall(accountId, prefixId, bindingId, _callback);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsCreateServiceBinding201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementServiceBindingsListServiceBindings
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Bindings attached to the Prefix </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Service Bindings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsListServiceBindingsCall(String accountId, String prefixId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementServiceBindingsListServiceBindingsValidateBeforeCall(String accountId, String prefixId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementServiceBindingsListServiceBindings(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementServiceBindingsListServiceBindings(Async)");
        }

        return ipAddressManagementServiceBindingsListServiceBindingsCall(accountId, prefixId, _callback);

    }

    /**
     * List Service Bindings
     * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address. **Example:** binding &#x60;192.0.2.0/24&#x60; to Cloudflare Magic Transit and &#x60;192.0.2.1/32&#x60; to the Cloudflare CDN would route traffic for &#x60;192.0.2.1&#x60; to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @return IpAddressManagementServiceBindingsListServiceBindings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Bindings attached to the Prefix </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Service Bindings response failure </td><td>  -  </td></tr>
     </table>
     */
    public IpAddressManagementServiceBindingsListServiceBindings200Response ipAddressManagementServiceBindingsListServiceBindings(String accountId, String prefixId) throws ApiException {
        ApiResponse<IpAddressManagementServiceBindingsListServiceBindings200Response> localVarResp = ipAddressManagementServiceBindingsListServiceBindingsWithHttpInfo(accountId, prefixId);
        return localVarResp.getData();
    }

    /**
     * List Service Bindings
     * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address. **Example:** binding &#x60;192.0.2.0/24&#x60; to Cloudflare Magic Transit and &#x60;192.0.2.1/32&#x60; to the Cloudflare CDN would route traffic for &#x60;192.0.2.1&#x60; to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @return ApiResponse&lt;IpAddressManagementServiceBindingsListServiceBindings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Bindings attached to the Prefix </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Service Bindings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddressManagementServiceBindingsListServiceBindings200Response> ipAddressManagementServiceBindingsListServiceBindingsWithHttpInfo(String accountId, String prefixId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsListServiceBindingsValidateBeforeCall(accountId, prefixId, null);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsListServiceBindings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Service Bindings (asynchronously)
     * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address. **Example:** binding &#x60;192.0.2.0/24&#x60; to Cloudflare Magic Transit and &#x60;192.0.2.1/32&#x60; to the Cloudflare CDN would route traffic for &#x60;192.0.2.1&#x60; to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Bindings attached to the Prefix </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Service Bindings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsListServiceBindingsAsync(String accountId, String prefixId, final ApiCallback<IpAddressManagementServiceBindingsListServiceBindings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsListServiceBindingsValidateBeforeCall(accountId, prefixId, _callback);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsListServiceBindings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementServiceBindingsListServices
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service names and IDs </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsListServicesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/services"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementServiceBindingsListServicesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementServiceBindingsListServices(Async)");
        }

        return ipAddressManagementServiceBindingsListServicesCall(accountId, _callback);

    }

    /**
     * List Services
     * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
     * @param accountId  (required)
     * @return IpAddressManagementServiceBindingsListServices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service names and IDs </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public IpAddressManagementServiceBindingsListServices200Response ipAddressManagementServiceBindingsListServices(String accountId) throws ApiException {
        ApiResponse<IpAddressManagementServiceBindingsListServices200Response> localVarResp = ipAddressManagementServiceBindingsListServicesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Services
     * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
     * @param accountId  (required)
     * @return ApiResponse&lt;IpAddressManagementServiceBindingsListServices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service names and IDs </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddressManagementServiceBindingsListServices200Response> ipAddressManagementServiceBindingsListServicesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsListServicesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsListServices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Services (asynchronously)
     * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service names and IDs </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementServiceBindingsListServicesAsync(String accountId, final ApiCallback<IpAddressManagementServiceBindingsListServices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementServiceBindingsListServicesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<IpAddressManagementServiceBindingsListServices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
