/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkerDomainAttachToDomain4XXResponse;
import org.openapitools.client.model.WorkerDomainAttachToDomainRequest;
import org.openapitools.client.model.WorkerDomainListDomains4XXResponse;
import org.openapitools.client.model.WorkersDomainResponseCollection;
import org.openapitools.client.model.WorkersDomainResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerDomainApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerDomainApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerDomainApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerDomainAttachToDomain
     * @param accountId  (required)
     * @param workerDomainAttachToDomainRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attach to Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Attach to Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainAttachToDomainCall(Object accountId, WorkerDomainAttachToDomainRequest workerDomainAttachToDomainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerDomainAttachToDomainRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/domains"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDomainAttachToDomainValidateBeforeCall(Object accountId, WorkerDomainAttachToDomainRequest workerDomainAttachToDomainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDomainAttachToDomain(Async)");
        }

        // verify the required parameter 'workerDomainAttachToDomainRequest' is set
        if (workerDomainAttachToDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'workerDomainAttachToDomainRequest' when calling workerDomainAttachToDomain(Async)");
        }

        return workerDomainAttachToDomainCall(accountId, workerDomainAttachToDomainRequest, _callback);

    }

    /**
     * Attach to Domain
     * Attaches a Worker to a zone and hostname.
     * @param accountId  (required)
     * @param workerDomainAttachToDomainRequest  (required)
     * @return WorkersDomainResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attach to Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Attach to Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersDomainResponseSingle workerDomainAttachToDomain(Object accountId, WorkerDomainAttachToDomainRequest workerDomainAttachToDomainRequest) throws ApiException {
        ApiResponse<WorkersDomainResponseSingle> localVarResp = workerDomainAttachToDomainWithHttpInfo(accountId, workerDomainAttachToDomainRequest);
        return localVarResp.getData();
    }

    /**
     * Attach to Domain
     * Attaches a Worker to a zone and hostname.
     * @param accountId  (required)
     * @param workerDomainAttachToDomainRequest  (required)
     * @return ApiResponse&lt;WorkersDomainResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attach to Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Attach to Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersDomainResponseSingle> workerDomainAttachToDomainWithHttpInfo(Object accountId, WorkerDomainAttachToDomainRequest workerDomainAttachToDomainRequest) throws ApiException {
        okhttp3.Call localVarCall = workerDomainAttachToDomainValidateBeforeCall(accountId, workerDomainAttachToDomainRequest, null);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach to Domain (asynchronously)
     * Attaches a Worker to a zone and hostname.
     * @param accountId  (required)
     * @param workerDomainAttachToDomainRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attach to Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Attach to Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainAttachToDomainAsync(Object accountId, WorkerDomainAttachToDomainRequest workerDomainAttachToDomainRequest, final ApiCallback<WorkersDomainResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDomainAttachToDomainValidateBeforeCall(accountId, workerDomainAttachToDomainRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerDomainDetachFromDomain
     * @param domainId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detach from Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Detach from Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainDetachFromDomainCall(Object domainId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDomainDetachFromDomainValidateBeforeCall(Object domainId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling workerDomainDetachFromDomain(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDomainDetachFromDomain(Async)");
        }

        return workerDomainDetachFromDomainCall(domainId, accountId, _callback);

    }

    /**
     * Detach from Domain
     * Detaches a Worker from a zone and hostname.
     * @param domainId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detach from Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Detach from Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public void workerDomainDetachFromDomain(Object domainId, Object accountId) throws ApiException {
        workerDomainDetachFromDomainWithHttpInfo(domainId, accountId);
    }

    /**
     * Detach from Domain
     * Detaches a Worker from a zone and hostname.
     * @param domainId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detach from Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Detach from Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workerDomainDetachFromDomainWithHttpInfo(Object domainId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = workerDomainDetachFromDomainValidateBeforeCall(domainId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Detach from Domain (asynchronously)
     * Detaches a Worker from a zone and hostname.
     * @param domainId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detach from Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Detach from Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainDetachFromDomainAsync(Object domainId, Object accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDomainDetachFromDomainValidateBeforeCall(domainId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerDomainGetADomain
     * @param domainId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainGetADomainCall(Object domainId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDomainGetADomainValidateBeforeCall(Object domainId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling workerDomainGetADomain(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDomainGetADomain(Async)");
        }

        return workerDomainGetADomainCall(domainId, accountId, _callback);

    }

    /**
     * Get a Domain
     * Gets a Worker domain.
     * @param domainId  (required)
     * @param accountId  (required)
     * @return WorkersDomainResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersDomainResponseSingle workerDomainGetADomain(Object domainId, Object accountId) throws ApiException {
        ApiResponse<WorkersDomainResponseSingle> localVarResp = workerDomainGetADomainWithHttpInfo(domainId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get a Domain
     * Gets a Worker domain.
     * @param domainId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersDomainResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersDomainResponseSingle> workerDomainGetADomainWithHttpInfo(Object domainId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = workerDomainGetADomainValidateBeforeCall(domainId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Domain (asynchronously)
     * Gets a Worker domain.
     * @param domainId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Domain response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Domain response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainGetADomainAsync(Object domainId, Object accountId, final ApiCallback<WorkersDomainResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDomainGetADomainValidateBeforeCall(domainId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerDomainListDomains
     * @param accountId  (required)
     * @param zoneName  (optional)
     * @param service  (optional)
     * @param zoneId  (optional)
     * @param hostname  (optional)
     * @param environment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Domains response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Domains response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainListDomainsCall(Object accountId, String zoneName, String service, Object zoneId, String hostname, String environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/domains"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zoneName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone_name", zoneName));
        }

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (zoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone_id", zoneId));
        }

        if (hostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostname", hostname));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDomainListDomainsValidateBeforeCall(Object accountId, String zoneName, String service, Object zoneId, String hostname, String environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDomainListDomains(Async)");
        }

        return workerDomainListDomainsCall(accountId, zoneName, service, zoneId, hostname, environment, _callback);

    }

    /**
     * List Domains
     * Lists all Worker Domains for an account.
     * @param accountId  (required)
     * @param zoneName  (optional)
     * @param service  (optional)
     * @param zoneId  (optional)
     * @param hostname  (optional)
     * @param environment  (optional)
     * @return WorkersDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Domains response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Domains response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersDomainResponseCollection workerDomainListDomains(Object accountId, String zoneName, String service, Object zoneId, String hostname, String environment) throws ApiException {
        ApiResponse<WorkersDomainResponseCollection> localVarResp = workerDomainListDomainsWithHttpInfo(accountId, zoneName, service, zoneId, hostname, environment);
        return localVarResp.getData();
    }

    /**
     * List Domains
     * Lists all Worker Domains for an account.
     * @param accountId  (required)
     * @param zoneName  (optional)
     * @param service  (optional)
     * @param zoneId  (optional)
     * @param hostname  (optional)
     * @param environment  (optional)
     * @return ApiResponse&lt;WorkersDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Domains response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Domains response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersDomainResponseCollection> workerDomainListDomainsWithHttpInfo(Object accountId, String zoneName, String service, Object zoneId, String hostname, String environment) throws ApiException {
        okhttp3.Call localVarCall = workerDomainListDomainsValidateBeforeCall(accountId, zoneName, service, zoneId, hostname, environment, null);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Domains (asynchronously)
     * Lists all Worker Domains for an account.
     * @param accountId  (required)
     * @param zoneName  (optional)
     * @param service  (optional)
     * @param zoneId  (optional)
     * @param hostname  (optional)
     * @param environment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Domains response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Domains response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDomainListDomainsAsync(Object accountId, String zoneName, String service, Object zoneId, String hostname, String environment, final ApiCallback<WorkersDomainResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDomainListDomainsValidateBeforeCall(accountId, zoneName, service, zoneId, hostname, environment, _callback);
        Type localVarReturnType = new TypeToken<WorkersDomainResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
