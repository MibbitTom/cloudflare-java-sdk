/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkerDeploymentsDeprecatedGetDeploymentDetail4XXResponse;
import org.openapitools.client.model.WorkerDeploymentsDeprecatedListDeployments4XXResponse;
import org.openapitools.client.model.WorkersDeploymentsListResponse;
import org.openapitools.client.model.WorkersDeploymentsSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerDeploymentsDeprecatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerDeploymentsDeprecatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerDeploymentsDeprecatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerDeploymentsDeprecatedGetDeploymentDetail
     * @param deploymentId  (required)
     * @param scriptId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Deployment Detail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Deployment Detail response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workerDeploymentsDeprecatedGetDeploymentDetailCall(String deploymentId, String scriptId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/deployments/by-script/{script_id}/detail/{deployment_id}"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "script_id" + "}", localVarApiClient.escapeString(scriptId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDeploymentsDeprecatedGetDeploymentDetailValidateBeforeCall(String deploymentId, String scriptId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling workerDeploymentsDeprecatedGetDeploymentDetail(Async)");
        }

        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling workerDeploymentsDeprecatedGetDeploymentDetail(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDeploymentsDeprecatedGetDeploymentDetail(Async)");
        }

        return workerDeploymentsDeprecatedGetDeploymentDetailCall(deploymentId, scriptId, accountId, _callback);

    }

    /**
     * Get Deployment Detail
     * 
     * @param deploymentId  (required)
     * @param scriptId  (required)
     * @param accountId  (required)
     * @return WorkersDeploymentsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Deployment Detail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Deployment Detail response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public WorkersDeploymentsSingleResponse workerDeploymentsDeprecatedGetDeploymentDetail(String deploymentId, String scriptId, String accountId) throws ApiException {
        ApiResponse<WorkersDeploymentsSingleResponse> localVarResp = workerDeploymentsDeprecatedGetDeploymentDetailWithHttpInfo(deploymentId, scriptId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get Deployment Detail
     * 
     * @param deploymentId  (required)
     * @param scriptId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersDeploymentsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Deployment Detail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Deployment Detail response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<WorkersDeploymentsSingleResponse> workerDeploymentsDeprecatedGetDeploymentDetailWithHttpInfo(String deploymentId, String scriptId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerDeploymentsDeprecatedGetDeploymentDetailValidateBeforeCall(deploymentId, scriptId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersDeploymentsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Deployment Detail (asynchronously)
     * 
     * @param deploymentId  (required)
     * @param scriptId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Deployment Detail response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Deployment Detail response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workerDeploymentsDeprecatedGetDeploymentDetailAsync(String deploymentId, String scriptId, String accountId, final ApiCallback<WorkersDeploymentsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDeploymentsDeprecatedGetDeploymentDetailValidateBeforeCall(deploymentId, scriptId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersDeploymentsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerDeploymentsDeprecatedListDeployments
     * @param scriptId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workerDeploymentsDeprecatedListDeploymentsCall(String scriptId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/deployments/by-script/{script_id}"
            .replace("{" + "script_id" + "}", localVarApiClient.escapeString(scriptId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDeploymentsDeprecatedListDeploymentsValidateBeforeCall(String scriptId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling workerDeploymentsDeprecatedListDeployments(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDeploymentsDeprecatedListDeployments(Async)");
        }

        return workerDeploymentsDeprecatedListDeploymentsCall(scriptId, accountId, _callback);

    }

    /**
     * List Deployments
     * 
     * @param scriptId  (required)
     * @param accountId  (required)
     * @return WorkersDeploymentsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public WorkersDeploymentsListResponse workerDeploymentsDeprecatedListDeployments(String scriptId, String accountId) throws ApiException {
        ApiResponse<WorkersDeploymentsListResponse> localVarResp = workerDeploymentsDeprecatedListDeploymentsWithHttpInfo(scriptId, accountId);
        return localVarResp.getData();
    }

    /**
     * List Deployments
     * 
     * @param scriptId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersDeploymentsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<WorkersDeploymentsListResponse> workerDeploymentsDeprecatedListDeploymentsWithHttpInfo(String scriptId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerDeploymentsDeprecatedListDeploymentsValidateBeforeCall(scriptId, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersDeploymentsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Deployments (asynchronously)
     * 
     * @param scriptId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workerDeploymentsDeprecatedListDeploymentsAsync(String scriptId, String accountId, final ApiCallback<WorkersDeploymentsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDeploymentsDeprecatedListDeploymentsValidateBeforeCall(scriptId, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersDeploymentsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
