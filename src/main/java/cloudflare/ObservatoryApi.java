/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ObservatoryApiResponseCommonFailure;
import org.openapitools.client.model.ObservatoryAvailabilitiesResponse;
import org.openapitools.client.model.ObservatoryCountResponse;
import org.openapitools.client.model.ObservatoryCreateScheduleResponse;
import org.openapitools.client.model.ObservatoryDeviceType;
import org.openapitools.client.model.ObservatoryPageTestResponseCollection;
import org.openapitools.client.model.ObservatoryPageTestResponseSingle;
import org.openapitools.client.model.ObservatoryPagesResponseCollection;
import org.openapitools.client.model.ObservatoryRegion;
import org.openapitools.client.model.ObservatoryScheduleResponseSingle;
import org.openapitools.client.model.ObservatoryTrendResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SpeedCreateTestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObservatoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObservatoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObservatoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for speedCreateScheduledTest
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedCreateScheduledTestCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/schedule/{url}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedCreateScheduledTestValidateBeforeCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedCreateScheduledTest(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedCreateScheduledTest(Async)");
        }

        return speedCreateScheduledTestCall(zoneId, url, region, _callback);

    }

    /**
     * Create scheduled page test
     * Creates a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ObservatoryCreateScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryCreateScheduleResponse speedCreateScheduledTest(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        ApiResponse<ObservatoryCreateScheduleResponse> localVarResp = speedCreateScheduledTestWithHttpInfo(zoneId, url, region);
        return localVarResp.getData();
    }

    /**
     * Create scheduled page test
     * Creates a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ApiResponse&lt;ObservatoryCreateScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryCreateScheduleResponse> speedCreateScheduledTestWithHttpInfo(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        okhttp3.Call localVarCall = speedCreateScheduledTestValidateBeforeCall(zoneId, url, region, null);
        Type localVarReturnType = new TypeToken<ObservatoryCreateScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create scheduled page test (asynchronously)
     * Creates a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedCreateScheduledTestAsync(String zoneId, String url, ObservatoryRegion region, final ApiCallback<ObservatoryCreateScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedCreateScheduledTestValidateBeforeCall(zoneId, url, region, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryCreateScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedCreateTest
     * @param zoneId  (required)
     * @param url  (required)
     * @param speedCreateTestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test details </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedCreateTestCall(String zoneId, String url, SpeedCreateTestRequest speedCreateTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = speedCreateTestRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages/{url}/tests"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedCreateTestValidateBeforeCall(String zoneId, String url, SpeedCreateTestRequest speedCreateTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedCreateTest(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedCreateTest(Async)");
        }

        return speedCreateTestCall(zoneId, url, speedCreateTestRequest, _callback);

    }

    /**
     * Start page test
     * Starts a test for a specific webpage, in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param speedCreateTestRequest  (optional)
     * @return ObservatoryPageTestResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test details </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryPageTestResponseSingle speedCreateTest(String zoneId, String url, SpeedCreateTestRequest speedCreateTestRequest) throws ApiException {
        ApiResponse<ObservatoryPageTestResponseSingle> localVarResp = speedCreateTestWithHttpInfo(zoneId, url, speedCreateTestRequest);
        return localVarResp.getData();
    }

    /**
     * Start page test
     * Starts a test for a specific webpage, in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param speedCreateTestRequest  (optional)
     * @return ApiResponse&lt;ObservatoryPageTestResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test details </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryPageTestResponseSingle> speedCreateTestWithHttpInfo(String zoneId, String url, SpeedCreateTestRequest speedCreateTestRequest) throws ApiException {
        okhttp3.Call localVarCall = speedCreateTestValidateBeforeCall(zoneId, url, speedCreateTestRequest, null);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start page test (asynchronously)
     * Starts a test for a specific webpage, in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param speedCreateTestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test details </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedCreateTestAsync(String zoneId, String url, SpeedCreateTestRequest speedCreateTestRequest, final ApiCallback<ObservatoryPageTestResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedCreateTestValidateBeforeCall(zoneId, url, speedCreateTestRequest, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedDeleteTestSchedule
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedDeleteTestScheduleCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/schedule/{url}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedDeleteTestScheduleValidateBeforeCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedDeleteTestSchedule(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedDeleteTestSchedule(Async)");
        }

        return speedDeleteTestScheduleCall(zoneId, url, region, _callback);

    }

    /**
     * Delete scheduled page test
     * Deletes a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ObservatoryCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryCountResponse speedDeleteTestSchedule(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        ApiResponse<ObservatoryCountResponse> localVarResp = speedDeleteTestScheduleWithHttpInfo(zoneId, url, region);
        return localVarResp.getData();
    }

    /**
     * Delete scheduled page test
     * Deletes a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ApiResponse&lt;ObservatoryCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryCountResponse> speedDeleteTestScheduleWithHttpInfo(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        okhttp3.Call localVarCall = speedDeleteTestScheduleValidateBeforeCall(zoneId, url, region, null);
        Type localVarReturnType = new TypeToken<ObservatoryCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete scheduled page test (asynchronously)
     * Deletes a scheduled test for a page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedDeleteTestScheduleAsync(String zoneId, String url, ObservatoryRegion region, final ApiCallback<ObservatoryCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedDeleteTestScheduleValidateBeforeCall(zoneId, url, region, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedDeleteTests
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedDeleteTestsCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages/{url}/tests"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedDeleteTestsValidateBeforeCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedDeleteTests(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedDeleteTests(Async)");
        }

        return speedDeleteTestsCall(zoneId, url, region, _callback);

    }

    /**
     * Delete all page tests
     * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ObservatoryCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryCountResponse speedDeleteTests(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        ApiResponse<ObservatoryCountResponse> localVarResp = speedDeleteTestsWithHttpInfo(zoneId, url, region);
        return localVarResp.getData();
    }

    /**
     * Delete all page tests
     * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ApiResponse&lt;ObservatoryCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryCountResponse> speedDeleteTestsWithHttpInfo(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        okhttp3.Call localVarCall = speedDeleteTestsValidateBeforeCall(zoneId, url, region, null);
        Type localVarReturnType = new TypeToken<ObservatoryCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all page tests (asynchronously)
     * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of deleted tests </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedDeleteTestsAsync(String zoneId, String url, ObservatoryRegion region, final ApiCallback<ObservatoryCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedDeleteTestsValidateBeforeCall(zoneId, url, region, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedGetAvailabilities
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test availability </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetAvailabilitiesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/availabilities"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedGetAvailabilitiesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedGetAvailabilities(Async)");
        }

        return speedGetAvailabilitiesCall(zoneId, _callback);

    }

    /**
     * Get quota and availability
     * Retrieves quota for all plans, as well as the current zone quota.
     * @param zoneId  (required)
     * @return ObservatoryAvailabilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test availability </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryAvailabilitiesResponse speedGetAvailabilities(String zoneId) throws ApiException {
        ApiResponse<ObservatoryAvailabilitiesResponse> localVarResp = speedGetAvailabilitiesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get quota and availability
     * Retrieves quota for all plans, as well as the current zone quota.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ObservatoryAvailabilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test availability </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryAvailabilitiesResponse> speedGetAvailabilitiesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = speedGetAvailabilitiesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ObservatoryAvailabilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get quota and availability (asynchronously)
     * Retrieves quota for all plans, as well as the current zone quota.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test availability </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetAvailabilitiesAsync(String zoneId, final ApiCallback<ObservatoryAvailabilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedGetAvailabilitiesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryAvailabilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedGetScheduledTest
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetScheduledTestCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/schedule/{url}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedGetScheduledTestValidateBeforeCall(String zoneId, String url, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedGetScheduledTest(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedGetScheduledTest(Async)");
        }

        return speedGetScheduledTestCall(zoneId, url, region, _callback);

    }

    /**
     * Get a page test schedule
     * Retrieves the test schedule for a page in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ObservatoryScheduleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryScheduleResponseSingle speedGetScheduledTest(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        ApiResponse<ObservatoryScheduleResponseSingle> localVarResp = speedGetScheduledTestWithHttpInfo(zoneId, url, region);
        return localVarResp.getData();
    }

    /**
     * Get a page test schedule
     * Retrieves the test schedule for a page in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @return ApiResponse&lt;ObservatoryScheduleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryScheduleResponseSingle> speedGetScheduledTestWithHttpInfo(String zoneId, String url, ObservatoryRegion region) throws ApiException {
        okhttp3.Call localVarCall = speedGetScheduledTestValidateBeforeCall(zoneId, url, region, null);
        Type localVarReturnType = new TypeToken<ObservatoryScheduleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a page test schedule (asynchronously)
     * Retrieves the test schedule for a page in a specific region.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test schedule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetScheduledTestAsync(String zoneId, String url, ObservatoryRegion region, final ApiCallback<ObservatoryScheduleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedGetScheduledTestValidateBeforeCall(zoneId, url, region, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryScheduleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedGetTest
     * @param zoneId  (required)
     * @param url  (required)
     * @param testId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test result </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetTestCall(String zoneId, String url, String testId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages/{url}/tests/{test_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedGetTestValidateBeforeCall(String zoneId, String url, String testId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedGetTest(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedGetTest(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling speedGetTest(Async)");
        }

        return speedGetTestCall(zoneId, url, testId, _callback);

    }

    /**
     * Get a page test result
     * Retrieves the result of a specific test.
     * @param zoneId  (required)
     * @param url  (required)
     * @param testId  (required)
     * @return ObservatoryPageTestResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test result </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryPageTestResponseSingle speedGetTest(String zoneId, String url, String testId) throws ApiException {
        ApiResponse<ObservatoryPageTestResponseSingle> localVarResp = speedGetTestWithHttpInfo(zoneId, url, testId);
        return localVarResp.getData();
    }

    /**
     * Get a page test result
     * Retrieves the result of a specific test.
     * @param zoneId  (required)
     * @param url  (required)
     * @param testId  (required)
     * @return ApiResponse&lt;ObservatoryPageTestResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test result </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryPageTestResponseSingle> speedGetTestWithHttpInfo(String zoneId, String url, String testId) throws ApiException {
        okhttp3.Call localVarCall = speedGetTestValidateBeforeCall(zoneId, url, testId, null);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a page test result (asynchronously)
     * Retrieves the result of a specific test.
     * @param zoneId  (required)
     * @param url  (required)
     * @param testId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page test result </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedGetTestAsync(String zoneId, String url, String testId, final ApiCallback<ObservatoryPageTestResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedGetTestValidateBeforeCall(zoneId, url, testId, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedListPageTrend
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (required)
     * @param deviceType  (required)
     * @param start  (required)
     * @param tz The timezone of the start and end timestamps. (required)
     * @param metrics A comma-separated list of metrics to include in the results. (required)
     * @param end  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page trend </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListPageTrendCall(String zoneId, String url, ObservatoryRegion region, ObservatoryDeviceType deviceType, OffsetDateTime start, String tz, String metrics, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages/{url}/trend"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceType", deviceType));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (tz != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tz", tz));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedListPageTrendValidateBeforeCall(String zoneId, String url, ObservatoryRegion region, ObservatoryDeviceType deviceType, OffsetDateTime start, String tz, String metrics, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'tz' is set
        if (tz == null) {
            throw new ApiException("Missing the required parameter 'tz' when calling speedListPageTrend(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling speedListPageTrend(Async)");
        }

        return speedListPageTrendCall(zoneId, url, region, deviceType, start, tz, metrics, end, _callback);

    }

    /**
     * List core web vital metrics trend
     * Lists the core web vital metrics trend over time for a specific page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (required)
     * @param deviceType  (required)
     * @param start  (required)
     * @param tz The timezone of the start and end timestamps. (required)
     * @param metrics A comma-separated list of metrics to include in the results. (required)
     * @param end  (optional)
     * @return ObservatoryTrendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page trend </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryTrendResponse speedListPageTrend(String zoneId, String url, ObservatoryRegion region, ObservatoryDeviceType deviceType, OffsetDateTime start, String tz, String metrics, OffsetDateTime end) throws ApiException {
        ApiResponse<ObservatoryTrendResponse> localVarResp = speedListPageTrendWithHttpInfo(zoneId, url, region, deviceType, start, tz, metrics, end);
        return localVarResp.getData();
    }

    /**
     * List core web vital metrics trend
     * Lists the core web vital metrics trend over time for a specific page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (required)
     * @param deviceType  (required)
     * @param start  (required)
     * @param tz The timezone of the start and end timestamps. (required)
     * @param metrics A comma-separated list of metrics to include in the results. (required)
     * @param end  (optional)
     * @return ApiResponse&lt;ObservatoryTrendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page trend </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryTrendResponse> speedListPageTrendWithHttpInfo(String zoneId, String url, ObservatoryRegion region, ObservatoryDeviceType deviceType, OffsetDateTime start, String tz, String metrics, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = speedListPageTrendValidateBeforeCall(zoneId, url, region, deviceType, start, tz, metrics, end, null);
        Type localVarReturnType = new TypeToken<ObservatoryTrendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List core web vital metrics trend (asynchronously)
     * Lists the core web vital metrics trend over time for a specific page.
     * @param zoneId  (required)
     * @param url  (required)
     * @param region  (required)
     * @param deviceType  (required)
     * @param start  (required)
     * @param tz The timezone of the start and end timestamps. (required)
     * @param metrics A comma-separated list of metrics to include in the results. (required)
     * @param end  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page trend </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListPageTrendAsync(String zoneId, String url, ObservatoryRegion region, ObservatoryDeviceType deviceType, OffsetDateTime start, String tz, String metrics, OffsetDateTime end, final ApiCallback<ObservatoryTrendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedListPageTrendValidateBeforeCall(zoneId, url, region, deviceType, start, tz, metrics, end, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryTrendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedListPages
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pages </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListPagesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedListPagesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedListPages(Async)");
        }

        return speedListPagesCall(zoneId, _callback);

    }

    /**
     * List tested webpages
     * Lists all webpages which have been tested.
     * @param zoneId  (required)
     * @return ObservatoryPagesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pages </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryPagesResponseCollection speedListPages(String zoneId) throws ApiException {
        ApiResponse<ObservatoryPagesResponseCollection> localVarResp = speedListPagesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List tested webpages
     * Lists all webpages which have been tested.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ObservatoryPagesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pages </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryPagesResponseCollection> speedListPagesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = speedListPagesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ObservatoryPagesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tested webpages (asynchronously)
     * Lists all webpages which have been tested.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pages </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListPagesAsync(String zoneId, final ApiCallback<ObservatoryPagesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedListPagesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryPagesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speedListTestHistory
     * @param zoneId  (required)
     * @param url  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test history for a page </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListTestHistoryCall(String zoneId, String url, Integer page, Integer perPage, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/speed_api/pages/{url}/tests"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speedListTestHistoryValidateBeforeCall(String zoneId, String url, Integer page, Integer perPage, ObservatoryRegion region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling speedListTestHistory(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling speedListTestHistory(Async)");
        }

        return speedListTestHistoryCall(zoneId, url, page, perPage, region, _callback);

    }

    /**
     * List page test history
     * Test history (list of tests) for a specific webpage.
     * @param zoneId  (required)
     * @param url  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param region  (optional)
     * @return ObservatoryPageTestResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test history for a page </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ObservatoryPageTestResponseCollection speedListTestHistory(String zoneId, String url, Integer page, Integer perPage, ObservatoryRegion region) throws ApiException {
        ApiResponse<ObservatoryPageTestResponseCollection> localVarResp = speedListTestHistoryWithHttpInfo(zoneId, url, page, perPage, region);
        return localVarResp.getData();
    }

    /**
     * List page test history
     * Test history (list of tests) for a specific webpage.
     * @param zoneId  (required)
     * @param url  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param region  (optional)
     * @return ApiResponse&lt;ObservatoryPageTestResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test history for a page </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObservatoryPageTestResponseCollection> speedListTestHistoryWithHttpInfo(String zoneId, String url, Integer page, Integer perPage, ObservatoryRegion region) throws ApiException {
        okhttp3.Call localVarCall = speedListTestHistoryValidateBeforeCall(zoneId, url, page, perPage, region, null);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List page test history (asynchronously)
     * Test history (list of tests) for a specific webpage.
     * @param zoneId  (required)
     * @param url  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of test history for a page </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speedListTestHistoryAsync(String zoneId, String url, Integer page, Integer perPage, ObservatoryRegion region, final ApiCallback<ObservatoryPageTestResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = speedListTestHistoryValidateBeforeCall(zoneId, url, page, perPage, region, _callback);
        Type localVarReturnType = new TypeToken<ObservatoryPageTestResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
