/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.NamespaceWorkerPutScriptContentRequestMetadata;
import org.openapitools.client.model.WorkersApiResponseCommon;
import org.openapitools.client.model.WorkersApiResponseCommonFailure;
import org.openapitools.client.model.WorkersScriptResponseSingle;
import org.openapitools.client.model.WorkersScriptSettingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerEnvironmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerEnvironmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerEnvironmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerEnvironmentGetScriptContent
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerEnvironmentGetScriptContentCall(String accountId, String serviceName, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "service_name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "string",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerEnvironmentGetScriptContentValidateBeforeCall(String accountId, String serviceName, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerEnvironmentGetScriptContent(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling workerEnvironmentGetScriptContent(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling workerEnvironmentGetScriptContent(Async)");
        }

        return workerEnvironmentGetScriptContentCall(accountId, serviceName, environmentName, _callback);

    }

    /**
     * Get script content
     * Get script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public Object workerEnvironmentGetScriptContent(String accountId, String serviceName, String environmentName) throws ApiException {
        ApiResponse<Object> localVarResp = workerEnvironmentGetScriptContentWithHttpInfo(accountId, serviceName, environmentName);
        return localVarResp.getData();
    }

    /**
     * Get script content
     * Get script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> workerEnvironmentGetScriptContentWithHttpInfo(String accountId, String serviceName, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = workerEnvironmentGetScriptContentValidateBeforeCall(accountId, serviceName, environmentName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get script content (asynchronously)
     * Get script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerEnvironmentGetScriptContentAsync(String accountId, String serviceName, String environmentName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerEnvironmentGetScriptContentValidateBeforeCall(accountId, serviceName, environmentName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerEnvironmentPutScriptContent
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerEnvironmentPutScriptContentCall(String accountId, String serviceName, String environmentName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "service_name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lessThanAnyPartNameGreaterThan != null) {
            localVarFormParams.put("&lt;any part name&gt;", lessThanAnyPartNameGreaterThan);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (CF_WORKER_BODY_PART != null) {
            localVarHeaderParams.put("CF-WORKER-BODY-PART", localVarApiClient.parameterToString(CF_WORKER_BODY_PART));
        }

        if (CF_WORKER_MAIN_MODULE_PART != null) {
            localVarHeaderParams.put("CF-WORKER-MAIN-MODULE-PART", localVarApiClient.parameterToString(CF_WORKER_MAIN_MODULE_PART));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerEnvironmentPutScriptContentValidateBeforeCall(String accountId, String serviceName, String environmentName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerEnvironmentPutScriptContent(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling workerEnvironmentPutScriptContent(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling workerEnvironmentPutScriptContent(Async)");
        }

        return workerEnvironmentPutScriptContentCall(accountId, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);

    }

    /**
     * Put script content
     * Put script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return WorkersScriptResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptResponseSingle workerEnvironmentPutScriptContent(String accountId, String serviceName, String environmentName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        ApiResponse<WorkersScriptResponseSingle> localVarResp = workerEnvironmentPutScriptContentWithHttpInfo(accountId, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata);
        return localVarResp.getData();
    }

    /**
     * Put script content
     * Put script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return ApiResponse&lt;WorkersScriptResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptResponseSingle> workerEnvironmentPutScriptContentWithHttpInfo(String accountId, String serviceName, String environmentName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        okhttp3.Call localVarCall = workerEnvironmentPutScriptContentValidateBeforeCall(accountId, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, null);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put script content (asynchronously)
     * Put script content from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerEnvironmentPutScriptContentAsync(String accountId, String serviceName, String environmentName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback<WorkersScriptResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerEnvironmentPutScriptContentValidateBeforeCall(accountId, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptEnvironmentGetSettings
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptEnvironmentGetSettingsCall(String accountId, String serviceName, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "service_name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptEnvironmentGetSettingsValidateBeforeCall(String accountId, String serviceName, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptEnvironmentGetSettings(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling workerScriptEnvironmentGetSettings(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling workerScriptEnvironmentGetSettings(Async)");
        }

        return workerScriptEnvironmentGetSettingsCall(accountId, serviceName, environmentName, _callback);

    }

    /**
     * Get Script Settings
     * Get script settings from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @return WorkersScriptSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptSettingsResponse workerScriptEnvironmentGetSettings(String accountId, String serviceName, String environmentName) throws ApiException {
        ApiResponse<WorkersScriptSettingsResponse> localVarResp = workerScriptEnvironmentGetSettingsWithHttpInfo(accountId, serviceName, environmentName);
        return localVarResp.getData();
    }

    /**
     * Get Script Settings
     * Get script settings from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @return ApiResponse&lt;WorkersScriptSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptSettingsResponse> workerScriptEnvironmentGetSettingsWithHttpInfo(String accountId, String serviceName, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = workerScriptEnvironmentGetSettingsValidateBeforeCall(accountId, serviceName, environmentName, null);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Settings (asynchronously)
     * Get script settings from a worker with an environment
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptEnvironmentGetSettingsAsync(String accountId, String serviceName, String environmentName, final ApiCallback<WorkersScriptSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptEnvironmentGetSettingsValidateBeforeCall(accountId, serviceName, environmentName, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerScriptEnvironmentPatchSettings
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param workersScriptSettingsResponse  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptEnvironmentPatchSettingsCall(String accountId, String serviceName, String environmentName, WorkersScriptSettingsResponse workersScriptSettingsResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersScriptSettingsResponse;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "service_name" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerScriptEnvironmentPatchSettingsValidateBeforeCall(String accountId, String serviceName, String environmentName, WorkersScriptSettingsResponse workersScriptSettingsResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerScriptEnvironmentPatchSettings(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling workerScriptEnvironmentPatchSettings(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling workerScriptEnvironmentPatchSettings(Async)");
        }

        // verify the required parameter 'workersScriptSettingsResponse' is set
        if (workersScriptSettingsResponse == null) {
            throw new ApiException("Missing the required parameter 'workersScriptSettingsResponse' when calling workerScriptEnvironmentPatchSettings(Async)");
        }

        return workerScriptEnvironmentPatchSettingsCall(accountId, serviceName, environmentName, workersScriptSettingsResponse, _callback);

    }

    /**
     * Patch Script Settings
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param workersScriptSettingsResponse  (required)
     * @return WorkersScriptSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptSettingsResponse workerScriptEnvironmentPatchSettings(String accountId, String serviceName, String environmentName, WorkersScriptSettingsResponse workersScriptSettingsResponse) throws ApiException {
        ApiResponse<WorkersScriptSettingsResponse> localVarResp = workerScriptEnvironmentPatchSettingsWithHttpInfo(accountId, serviceName, environmentName, workersScriptSettingsResponse);
        return localVarResp.getData();
    }

    /**
     * Patch Script Settings
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param workersScriptSettingsResponse  (required)
     * @return ApiResponse&lt;WorkersScriptSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptSettingsResponse> workerScriptEnvironmentPatchSettingsWithHttpInfo(String accountId, String serviceName, String environmentName, WorkersScriptSettingsResponse workersScriptSettingsResponse) throws ApiException {
        okhttp3.Call localVarCall = workerScriptEnvironmentPatchSettingsValidateBeforeCall(accountId, serviceName, environmentName, workersScriptSettingsResponse, null);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Script Settings (asynchronously)
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param serviceName  (required)
     * @param environmentName  (required)
     * @param workersScriptSettingsResponse  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerScriptEnvironmentPatchSettingsAsync(String accountId, String serviceName, String environmentName, WorkersScriptSettingsResponse workersScriptSettingsResponse, final ApiCallback<WorkersScriptSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerScriptEnvironmentPatchSettingsValidateBeforeCall(accountId, serviceName, environmentName, workersScriptSettingsResponse, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
