/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigRulesListConfigRules4XXResponse;
import org.openapitools.client.model.ConfigRulesUpdateConfigRules4XXResponse;
import org.openapitools.client.model.FirewallApiResponseSingle;
import org.openapitools.client.model.FirewallComponentsSchemasRuleset;
import org.openapitools.client.model.FirewallUpdateRuleset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for configRulesListConfigRules
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRulesListConfigRulesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/http_config_settings/entrypoint"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configRulesListConfigRulesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling configRulesListConfigRules(Async)");
        }

        return configRulesListConfigRulesCall(zoneId, _callback);

    }

    /**
     * List Config Rules
     * Fetches all Config Rules in a zone.
     * @param zoneId  (required)
     * @return FirewallComponentsSchemasRuleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallComponentsSchemasRuleset configRulesListConfigRules(String zoneId) throws ApiException {
        ApiResponse<FirewallComponentsSchemasRuleset> localVarResp = configRulesListConfigRulesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Config Rules
     * Fetches all Config Rules in a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;FirewallComponentsSchemasRuleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallComponentsSchemasRuleset> configRulesListConfigRulesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = configRulesListConfigRulesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<FirewallComponentsSchemasRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Config Rules (asynchronously)
     * Fetches all Config Rules in a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRulesListConfigRulesAsync(String zoneId, final ApiCallback<FirewallComponentsSchemasRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = configRulesListConfigRulesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<FirewallComponentsSchemasRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configRulesUpdateConfigRules
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRulesUpdateConfigRulesCall(String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallUpdateRuleset;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/http_config_settings/entrypoint"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configRulesUpdateConfigRulesValidateBeforeCall(String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling configRulesUpdateConfigRules(Async)");
        }

        // verify the required parameter 'firewallUpdateRuleset' is set
        if (firewallUpdateRuleset == null) {
            throw new ApiException("Missing the required parameter 'firewallUpdateRuleset' when calling configRulesUpdateConfigRules(Async)");
        }

        return configRulesUpdateConfigRulesCall(zoneId, firewallUpdateRuleset, _callback);

    }

    /**
     * Update Config Rules
     * Updates the Config Rules of a zone.
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @return FirewallApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallApiResponseSingle configRulesUpdateConfigRules(String zoneId, FirewallUpdateRuleset firewallUpdateRuleset) throws ApiException {
        ApiResponse<FirewallApiResponseSingle> localVarResp = configRulesUpdateConfigRulesWithHttpInfo(zoneId, firewallUpdateRuleset);
        return localVarResp.getData();
    }

    /**
     * Update Config Rules
     * Updates the Config Rules of a zone.
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @return ApiResponse&lt;FirewallApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallApiResponseSingle> configRulesUpdateConfigRulesWithHttpInfo(String zoneId, FirewallUpdateRuleset firewallUpdateRuleset) throws ApiException {
        okhttp3.Call localVarCall = configRulesUpdateConfigRulesValidateBeforeCall(zoneId, firewallUpdateRuleset, null);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Config Rules (asynchronously)
     * Updates the Config Rules of a zone.
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Config Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Config Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRulesUpdateConfigRulesAsync(String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback<FirewallApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = configRulesUpdateConfigRulesValidateBeforeCall(zoneId, firewallUpdateRuleset, _callback);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
