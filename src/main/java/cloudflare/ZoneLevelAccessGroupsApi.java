/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessGroupsComponentsSchemasResponseCollection;
import org.openapitools.client.model.AccessGroupsComponentsSchemasSingleResponse;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.ZoneLevelAccessGroupsCreateAnAccessGroupRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAccessGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAccessGroupsCreateAnAccessGroup
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsCreateAnAccessGroupCall(String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAccessGroupsCreateAnAccessGroupRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/groups"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessGroupsCreateAnAccessGroupValidateBeforeCall(String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessGroupsCreateAnAccessGroup(Async)");
        }

        // verify the required parameter 'zoneLevelAccessGroupsCreateAnAccessGroupRequest' is set
        if (zoneLevelAccessGroupsCreateAnAccessGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAccessGroupsCreateAnAccessGroupRequest' when calling zoneLevelAccessGroupsCreateAnAccessGroup(Async)");
        }

        return zoneLevelAccessGroupsCreateAnAccessGroupCall(identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, _callback);

    }

    /**
     * Create an Access group
     * Creates a new Access group.
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @return AccessGroupsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupsComponentsSchemasSingleResponse zoneLevelAccessGroupsCreateAnAccessGroup(String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest) throws ApiException {
        ApiResponse<AccessGroupsComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessGroupsCreateAnAccessGroupWithHttpInfo(identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Access group
     * Creates a new Access group.
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @return ApiResponse&lt;AccessGroupsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupsComponentsSchemasSingleResponse> zoneLevelAccessGroupsCreateAnAccessGroupWithHttpInfo(String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessGroupsCreateAnAccessGroupValidateBeforeCall(identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Access group (asynchronously)
     * Creates a new Access group.
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsCreateAnAccessGroupAsync(String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback<AccessGroupsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessGroupsCreateAnAccessGroupValidateBeforeCall(identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessGroupsDeleteAnAccessGroup
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsDeleteAnAccessGroupCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/groups/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessGroupsDeleteAnAccessGroupValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessGroupsDeleteAnAccessGroup(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessGroupsDeleteAnAccessGroup(Async)");
        }

        return zoneLevelAccessGroupsDeleteAnAccessGroupCall(uuid, identifier, _callback);

    }

    /**
     * Delete an Access group
     * Deletes an Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse zoneLevelAccessGroupsDeleteAnAccessGroup(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = zoneLevelAccessGroupsDeleteAnAccessGroupWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access group
     * Deletes an Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> zoneLevelAccessGroupsDeleteAnAccessGroupWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessGroupsDeleteAnAccessGroupValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access group (asynchronously)
     * Deletes an Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsDeleteAnAccessGroupAsync(String uuid, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessGroupsDeleteAnAccessGroupValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessGroupsGetAnAccessGroup
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsGetAnAccessGroupCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/groups/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessGroupsGetAnAccessGroupValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessGroupsGetAnAccessGroup(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessGroupsGetAnAccessGroup(Async)");
        }

        return zoneLevelAccessGroupsGetAnAccessGroupCall(uuid, identifier, _callback);

    }

    /**
     * Get an Access group
     * Fetches a single Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessGroupsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupsComponentsSchemasSingleResponse zoneLevelAccessGroupsGetAnAccessGroup(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessGroupsComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessGroupsGetAnAccessGroupWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access group
     * Fetches a single Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessGroupsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupsComponentsSchemasSingleResponse> zoneLevelAccessGroupsGetAnAccessGroupWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessGroupsGetAnAccessGroupValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access group (asynchronously)
     * Fetches a single Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsGetAnAccessGroupAsync(String uuid, String identifier, final ApiCallback<AccessGroupsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessGroupsGetAnAccessGroupValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessGroupsListAccessGroups
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsListAccessGroupsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/groups"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessGroupsListAccessGroupsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessGroupsListAccessGroups(Async)");
        }

        return zoneLevelAccessGroupsListAccessGroupsCall(identifier, _callback);

    }

    /**
     * List Access groups
     * Lists all Access groups.
     * @param identifier  (required)
     * @return AccessGroupsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupsComponentsSchemasResponseCollection zoneLevelAccessGroupsListAccessGroups(String identifier) throws ApiException {
        ApiResponse<AccessGroupsComponentsSchemasResponseCollection> localVarResp = zoneLevelAccessGroupsListAccessGroupsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Access groups
     * Lists all Access groups.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessGroupsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupsComponentsSchemasResponseCollection> zoneLevelAccessGroupsListAccessGroupsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessGroupsListAccessGroupsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access groups (asynchronously)
     * Lists all Access groups.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsListAccessGroupsAsync(String identifier, final ApiCallback<AccessGroupsComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessGroupsListAccessGroupsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessGroupsUpdateAnAccessGroup
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsUpdateAnAccessGroupCall(String uuid, String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAccessGroupsCreateAnAccessGroupRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/groups/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessGroupsUpdateAnAccessGroupValidateBeforeCall(String uuid, String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessGroupsUpdateAnAccessGroup(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessGroupsUpdateAnAccessGroup(Async)");
        }

        // verify the required parameter 'zoneLevelAccessGroupsCreateAnAccessGroupRequest' is set
        if (zoneLevelAccessGroupsCreateAnAccessGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAccessGroupsCreateAnAccessGroupRequest' when calling zoneLevelAccessGroupsUpdateAnAccessGroup(Async)");
        }

        return zoneLevelAccessGroupsUpdateAnAccessGroupCall(uuid, identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, _callback);

    }

    /**
     * Update an Access group
     * Updates a configured Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @return AccessGroupsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupsComponentsSchemasSingleResponse zoneLevelAccessGroupsUpdateAnAccessGroup(String uuid, String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest) throws ApiException {
        ApiResponse<AccessGroupsComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessGroupsUpdateAnAccessGroupWithHttpInfo(uuid, identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Access group
     * Updates a configured Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @return ApiResponse&lt;AccessGroupsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupsComponentsSchemasSingleResponse> zoneLevelAccessGroupsUpdateAnAccessGroupWithHttpInfo(String uuid, String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessGroupsUpdateAnAccessGroupValidateBeforeCall(uuid, identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access group (asynchronously)
     * Updates a configured Access group.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param zoneLevelAccessGroupsCreateAnAccessGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessGroupsUpdateAnAccessGroupAsync(String uuid, String identifier, ZoneLevelAccessGroupsCreateAnAccessGroupRequest zoneLevelAccessGroupsCreateAnAccessGroupRequest, final ApiCallback<AccessGroupsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessGroupsUpdateAnAccessGroupValidateBeforeCall(uuid, identifier, zoneLevelAccessGroupsCreateAnAccessGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
