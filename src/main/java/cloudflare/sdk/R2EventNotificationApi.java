/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.EventNotificationCreateQueueConfig200Response;
import cloudflare.sdk.models.EventNotificationCreateQueueConfigRequest;
import cloudflare.sdk.models.EventNotificationGetR2BucketConfigs200Response;
import cloudflare.sdk.models.MqApiResponseCommon;
import cloudflare.sdk.models.MqApiResponseCommonFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class R2EventNotificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public R2EventNotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public R2EventNotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventNotificationCreateQueueConfig
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param eventNotificationCreateQueueConfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Configuration response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Configuration failure </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationCreateQueueConfigCall(String queueId, String bucketName, String accountId, EventNotificationCreateQueueConfigRequest eventNotificationCreateQueueConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventNotificationCreateQueueConfigRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventNotificationCreateQueueConfigValidateBeforeCall(String queueId, String bucketName, String accountId, EventNotificationCreateQueueConfigRequest eventNotificationCreateQueueConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling eventNotificationCreateQueueConfig(Async)");
        }

        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling eventNotificationCreateQueueConfig(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling eventNotificationCreateQueueConfig(Async)");
        }

        // verify the required parameter 'eventNotificationCreateQueueConfigRequest' is set
        if (eventNotificationCreateQueueConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'eventNotificationCreateQueueConfigRequest' when calling eventNotificationCreateQueueConfig(Async)");
        }

        return eventNotificationCreateQueueConfigCall(queueId, bucketName, accountId, eventNotificationCreateQueueConfigRequest, _callback);

    }

    /**
     * Create Configuration
     * Define the rules for a given queue which will determine event notification production.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param eventNotificationCreateQueueConfigRequest  (required)
     * @return EventNotificationCreateQueueConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Configuration response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Configuration failure </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public EventNotificationCreateQueueConfig200Response eventNotificationCreateQueueConfig(String queueId, String bucketName, String accountId, EventNotificationCreateQueueConfigRequest eventNotificationCreateQueueConfigRequest) throws ApiException {
        ApiResponse<EventNotificationCreateQueueConfig200Response> localVarResp = eventNotificationCreateQueueConfigWithHttpInfo(queueId, bucketName, accountId, eventNotificationCreateQueueConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Create Configuration
     * Define the rules for a given queue which will determine event notification production.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param eventNotificationCreateQueueConfigRequest  (required)
     * @return ApiResponse&lt;EventNotificationCreateQueueConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Configuration response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Configuration failure </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventNotificationCreateQueueConfig200Response> eventNotificationCreateQueueConfigWithHttpInfo(String queueId, String bucketName, String accountId, EventNotificationCreateQueueConfigRequest eventNotificationCreateQueueConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = eventNotificationCreateQueueConfigValidateBeforeCall(queueId, bucketName, accountId, eventNotificationCreateQueueConfigRequest, null);
        Type localVarReturnType = new TypeToken<EventNotificationCreateQueueConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Configuration (asynchronously)
     * Define the rules for a given queue which will determine event notification production.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param eventNotificationCreateQueueConfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Configuration response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Configuration failure </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationCreateQueueConfigAsync(String queueId, String bucketName, String accountId, EventNotificationCreateQueueConfigRequest eventNotificationCreateQueueConfigRequest, final ApiCallback<EventNotificationCreateQueueConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventNotificationCreateQueueConfigValidateBeforeCall(queueId, bucketName, accountId, eventNotificationCreateQueueConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<EventNotificationCreateQueueConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventNotificationDeleteQueueConfig
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationDeleteQueueConfigCall(String queueId, String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventNotificationDeleteQueueConfigValidateBeforeCall(String queueId, String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling eventNotificationDeleteQueueConfig(Async)");
        }

        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling eventNotificationDeleteQueueConfig(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling eventNotificationDeleteQueueConfig(Async)");
        }

        return eventNotificationDeleteQueueConfigCall(queueId, bucketName, accountId, _callback);

    }

    /**
     * Delete Configuration
     * Turn off all event notifications configured for delivery to a given queue. No further notifications will be produced for the queue once complete.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return MqApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public MqApiResponseCommon eventNotificationDeleteQueueConfig(String queueId, String bucketName, String accountId) throws ApiException {
        ApiResponse<MqApiResponseCommon> localVarResp = eventNotificationDeleteQueueConfigWithHttpInfo(queueId, bucketName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Configuration
     * Turn off all event notifications configured for delivery to a given queue. No further notifications will be produced for the queue once complete.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MqApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MqApiResponseCommon> eventNotificationDeleteQueueConfigWithHttpInfo(String queueId, String bucketName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = eventNotificationDeleteQueueConfigValidateBeforeCall(queueId, bucketName, accountId, null);
        Type localVarReturnType = new TypeToken<MqApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Configuration (asynchronously)
     * Turn off all event notifications configured for delivery to a given queue. No further notifications will be produced for the queue once complete.
     * @param queueId  (required)
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationDeleteQueueConfigAsync(String queueId, String bucketName, String accountId, final ApiCallback<MqApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventNotificationDeleteQueueConfigValidateBeforeCall(queueId, bucketName, accountId, _callback);
        Type localVarReturnType = new TypeToken<MqApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventNotificationGetR2BucketConfigs
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read Configuration response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Configuration Found response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationGetR2BucketConfigsCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration"
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventNotificationGetR2BucketConfigsValidateBeforeCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling eventNotificationGetR2BucketConfigs(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling eventNotificationGetR2BucketConfigs(Async)");
        }

        return eventNotificationGetR2BucketConfigsCall(bucketName, accountId, _callback);

    }

    /**
     * Read Configuration
     * Returns all notification rules for each queue for which bucket notifications are produced.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return EventNotificationGetR2BucketConfigs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read Configuration response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Configuration Found response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public EventNotificationGetR2BucketConfigs200Response eventNotificationGetR2BucketConfigs(String bucketName, String accountId) throws ApiException {
        ApiResponse<EventNotificationGetR2BucketConfigs200Response> localVarResp = eventNotificationGetR2BucketConfigsWithHttpInfo(bucketName, accountId);
        return localVarResp.getData();
    }

    /**
     * Read Configuration
     * Returns all notification rules for each queue for which bucket notifications are produced.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;EventNotificationGetR2BucketConfigs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read Configuration response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Configuration Found response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventNotificationGetR2BucketConfigs200Response> eventNotificationGetR2BucketConfigsWithHttpInfo(String bucketName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = eventNotificationGetR2BucketConfigsValidateBeforeCall(bucketName, accountId, null);
        Type localVarReturnType = new TypeToken<EventNotificationGetR2BucketConfigs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read Configuration (asynchronously)
     * Returns all notification rules for each queue for which bucket notifications are produced.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read Configuration response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Configuration Found response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Read Configuration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNotificationGetR2BucketConfigsAsync(String bucketName, String accountId, final ApiCallback<EventNotificationGetR2BucketConfigs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventNotificationGetR2BucketConfigsValidateBeforeCall(bucketName, accountId, _callback);
        Type localVarReturnType = new TypeToken<EventNotificationGetR2BucketConfigs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
