/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.CreateAccountRuleset200Response;
import cloudflare.sdk.models.CreateAccountRulesetRequest;
import cloudflare.sdk.models.CreateAccountRulesetRuleRequest;
import cloudflare.sdk.models.ListAccountRulesets200Response;
import cloudflare.sdk.models.ListAccountRulesets4XXResponse;
import cloudflare.sdk.models.RulesetsRulesetPhase;
import cloudflare.sdk.models.UpdateAccountEntrypointRulesetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneRulesetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneRulesetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneRulesetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createZoneRuleset
     * @param zoneId  (required)
     * @param createAccountRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneRulesetCall(String zoneId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createZoneRulesetValidateBeforeCall(String zoneId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling createZoneRuleset(Async)");
        }

        // verify the required parameter 'createAccountRulesetRequest' is set
        if (createAccountRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRequest' when calling createZoneRuleset(Async)");
        }

        return createZoneRulesetCall(zoneId, createAccountRulesetRequest, _callback);

    }

    /**
     * Create a zone ruleset
     * Creates a ruleset at the zone level.
     * @param zoneId  (required)
     * @param createAccountRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response createZoneRuleset(String zoneId, CreateAccountRulesetRequest createAccountRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = createZoneRulesetWithHttpInfo(zoneId, createAccountRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Create a zone ruleset
     * Creates a ruleset at the zone level.
     * @param zoneId  (required)
     * @param createAccountRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> createZoneRulesetWithHttpInfo(String zoneId, CreateAccountRulesetRequest createAccountRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = createZoneRulesetValidateBeforeCall(zoneId, createAccountRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a zone ruleset (asynchronously)
     * Creates a ruleset at the zone level.
     * @param zoneId  (required)
     * @param createAccountRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneRulesetAsync(String zoneId, CreateAccountRulesetRequest createAccountRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createZoneRulesetValidateBeforeCall(zoneId, createAccountRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createZoneRulesetRule
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneRulesetRuleCall(String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createZoneRulesetRuleValidateBeforeCall(String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling createZoneRulesetRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling createZoneRulesetRule(Async)");
        }

        // verify the required parameter 'createAccountRulesetRuleRequest' is set
        if (createAccountRulesetRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRuleRequest' when calling createZoneRulesetRule(Async)");
        }

        return createZoneRulesetRuleCall(rulesetId, zoneId, createAccountRulesetRuleRequest, _callback);

    }

    /**
     * Create a zone ruleset rule
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response createZoneRulesetRule(String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = createZoneRulesetRuleWithHttpInfo(rulesetId, zoneId, createAccountRulesetRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a zone ruleset rule
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> createZoneRulesetRuleWithHttpInfo(String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createZoneRulesetRuleValidateBeforeCall(rulesetId, zoneId, createAccountRulesetRuleRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a zone ruleset rule (asynchronously)
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZoneRulesetRuleAsync(String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createZoneRulesetRuleValidateBeforeCall(rulesetId, zoneId, createAccountRulesetRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteZoneRuleset
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZoneRulesetValidateBeforeCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteZoneRuleset(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteZoneRuleset(Async)");
        }

        return deleteZoneRulesetCall(rulesetId, zoneId, _callback);

    }

    /**
     * Delete a zone ruleset
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteZoneRuleset(String rulesetId, String zoneId) throws ApiException {
        deleteZoneRulesetWithHttpInfo(rulesetId, zoneId);
    }

    /**
     * Delete a zone ruleset
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteZoneRulesetWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteZoneRulesetValidateBeforeCall(rulesetId, zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a zone ruleset (asynchronously)
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetAsync(String rulesetId, String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZoneRulesetValidateBeforeCall(rulesetId, zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteZoneRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetRuleCall(String ruleId, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZoneRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteZoneRulesetRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteZoneRulesetRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteZoneRulesetRule(Async)");
        }

        return deleteZoneRulesetRuleCall(ruleId, rulesetId, zoneId, _callback);

    }

    /**
     * Delete a zone ruleset rule
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response deleteZoneRulesetRule(String ruleId, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = deleteZoneRulesetRuleWithHttpInfo(ruleId, rulesetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete a zone ruleset rule
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> deleteZoneRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a zone ruleset rule (asynchronously)
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetRuleAsync(String ruleId, String rulesetId, String zoneId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteZoneRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetVersionCall(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZoneRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling deleteZoneRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteZoneRulesetVersion(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteZoneRulesetVersion(Async)");
        }

        return deleteZoneRulesetVersionCall(rulesetVersion, rulesetId, zoneId, _callback);

    }

    /**
     * Delete a zone ruleset version
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteZoneRulesetVersion(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        deleteZoneRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, zoneId);
    }

    /**
     * Delete a zone ruleset version
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteZoneRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a zone ruleset version (asynchronously)
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZoneRulesetVersionAsync(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZoneEntrypointRuleset
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneEntrypointRulesetCall(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZoneEntrypointRulesetValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling getZoneEntrypointRuleset(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZoneEntrypointRuleset(Async)");
        }

        return getZoneEntrypointRulesetCall(rulesetPhase, zoneId, _callback);

    }

    /**
     * Get a zone entry point ruleset
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getZoneEntrypointRuleset(RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getZoneEntrypointRulesetWithHttpInfo(rulesetPhase, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a zone entry point ruleset
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getZoneEntrypointRulesetWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZoneEntrypointRulesetValidateBeforeCall(rulesetPhase, zoneId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a zone entry point ruleset (asynchronously)
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneEntrypointRulesetAsync(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZoneEntrypointRulesetValidateBeforeCall(rulesetPhase, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZoneEntrypointRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneEntrypointRulesetVersionCall(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZoneEntrypointRulesetVersionValidateBeforeCall(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling getZoneEntrypointRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling getZoneEntrypointRulesetVersion(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZoneEntrypointRulesetVersion(Async)");
        }

        return getZoneEntrypointRulesetVersionCall(rulesetVersion, rulesetPhase, zoneId, _callback);

    }

    /**
     * Get a zone entry point ruleset version
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getZoneEntrypointRulesetVersion(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getZoneEntrypointRulesetVersionWithHttpInfo(rulesetVersion, rulesetPhase, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a zone entry point ruleset version
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getZoneEntrypointRulesetVersionWithHttpInfo(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZoneEntrypointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, zoneId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a zone entry point ruleset version (asynchronously)
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneEntrypointRulesetVersionAsync(String rulesetVersion, RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZoneEntrypointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZoneRuleset
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneRulesetCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZoneRulesetValidateBeforeCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getZoneRuleset(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZoneRuleset(Async)");
        }

        return getZoneRulesetCall(rulesetId, zoneId, _callback);

    }

    /**
     * Get a zone ruleset
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getZoneRuleset(String rulesetId, String zoneId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getZoneRulesetWithHttpInfo(rulesetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a zone ruleset
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getZoneRulesetWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZoneRulesetValidateBeforeCall(rulesetId, zoneId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a zone ruleset (asynchronously)
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneRulesetAsync(String rulesetId, String zoneId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZoneRulesetValidateBeforeCall(rulesetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZoneRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneRulesetVersionCall(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replace("{" + "ruleset_version" + "}", localVarApiClient.escapeString(rulesetVersion.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZoneRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling getZoneRulesetVersion(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getZoneRulesetVersion(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZoneRulesetVersion(Async)");
        }

        return getZoneRulesetVersionCall(rulesetVersion, rulesetId, zoneId, _callback);

    }

    /**
     * Get a zone ruleset version
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response getZoneRulesetVersion(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = getZoneRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a zone ruleset version
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> getZoneRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a zone ruleset version (asynchronously)
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZoneRulesetVersionAsync(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listZoneEntrypointRulesetVersions
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneEntrypointRulesetVersionsCall(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZoneEntrypointRulesetVersionsValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling listZoneEntrypointRulesetVersions(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listZoneEntrypointRulesetVersions(Async)");
        }

        return listZoneEntrypointRulesetVersionsCall(rulesetPhase, zoneId, _callback);

    }

    /**
     * List a zone entry point ruleset&#39;s versions
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listZoneEntrypointRulesetVersions(RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listZoneEntrypointRulesetVersionsWithHttpInfo(rulesetPhase, zoneId);
        return localVarResp.getData();
    }

    /**
     * List a zone entry point ruleset&#39;s versions
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listZoneEntrypointRulesetVersionsWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = listZoneEntrypointRulesetVersionsValidateBeforeCall(rulesetPhase, zoneId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a zone entry point ruleset&#39;s versions (asynchronously)
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneEntrypointRulesetVersionsAsync(RulesetsRulesetPhase rulesetPhase, String zoneId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZoneEntrypointRulesetVersionsValidateBeforeCall(rulesetPhase, zoneId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listZoneRulesetVersions
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneRulesetVersionsCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZoneRulesetVersionsValidateBeforeCall(String rulesetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling listZoneRulesetVersions(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listZoneRulesetVersions(Async)");
        }

        return listZoneRulesetVersionsCall(rulesetId, zoneId, _callback);

    }

    /**
     * List a zone ruleset&#39;s versions
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listZoneRulesetVersions(String rulesetId, String zoneId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listZoneRulesetVersionsWithHttpInfo(rulesetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * List a zone ruleset&#39;s versions
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listZoneRulesetVersionsWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = listZoneRulesetVersionsValidateBeforeCall(rulesetId, zoneId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a zone ruleset&#39;s versions (asynchronously)
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneRulesetVersionsAsync(String rulesetId, String zoneId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZoneRulesetVersionsValidateBeforeCall(rulesetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listZoneRulesets
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneRulesetsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZoneRulesetsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling listZoneRulesets(Async)");
        }

        return listZoneRulesetsCall(zoneId, _callback);

    }

    /**
     * List zone rulesets
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @return ListAccountRulesets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRulesets200Response listZoneRulesets(String zoneId) throws ApiException {
        ApiResponse<ListAccountRulesets200Response> localVarResp = listZoneRulesetsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List zone rulesets
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ListAccountRulesets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRulesets200Response> listZoneRulesetsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = listZoneRulesetsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List zone rulesets (asynchronously)
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rulesets response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listZoneRulesetsAsync(String zoneId, final ApiCallback<ListAccountRulesets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZoneRulesetsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRulesets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateZoneEntrypointRuleset
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneEntrypointRulesetCall(RulesetsRulesetPhase rulesetPhase, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountEntrypointRulesetRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replace("{" + "ruleset_phase" + "}", localVarApiClient.escapeString(rulesetPhase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZoneEntrypointRulesetValidateBeforeCall(RulesetsRulesetPhase rulesetPhase, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling updateZoneEntrypointRuleset(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling updateZoneEntrypointRuleset(Async)");
        }

        // verify the required parameter 'updateAccountEntrypointRulesetRequest' is set
        if (updateAccountEntrypointRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountEntrypointRulesetRequest' when calling updateZoneEntrypointRuleset(Async)");
        }

        return updateZoneEntrypointRulesetCall(rulesetPhase, zoneId, updateAccountEntrypointRulesetRequest, _callback);

    }

    /**
     * Update a zone entry point ruleset
     * Updates a zone entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateZoneEntrypointRuleset(RulesetsRulesetPhase rulesetPhase, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateZoneEntrypointRulesetWithHttpInfo(rulesetPhase, zoneId, updateAccountEntrypointRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Update a zone entry point ruleset
     * Updates a zone entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateZoneEntrypointRulesetWithHttpInfo(RulesetsRulesetPhase rulesetPhase, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateZoneEntrypointRulesetValidateBeforeCall(rulesetPhase, zoneId, updateAccountEntrypointRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a zone entry point ruleset (asynchronously)
     * Updates a zone entry point ruleset, creating a new version.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneEntrypointRulesetAsync(RulesetsRulesetPhase rulesetPhase, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZoneEntrypointRulesetValidateBeforeCall(rulesetPhase, zoneId, updateAccountEntrypointRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateZoneRuleset
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneRulesetCall(String rulesetId, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountEntrypointRulesetRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZoneRulesetValidateBeforeCall(String rulesetId, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateZoneRuleset(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling updateZoneRuleset(Async)");
        }

        // verify the required parameter 'updateAccountEntrypointRulesetRequest' is set
        if (updateAccountEntrypointRulesetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountEntrypointRulesetRequest' when calling updateZoneRuleset(Async)");
        }

        return updateZoneRulesetCall(rulesetId, zoneId, updateAccountEntrypointRulesetRequest, _callback);

    }

    /**
     * Update a zone ruleset
     * Updates a zone ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateZoneRuleset(String rulesetId, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateZoneRulesetWithHttpInfo(rulesetId, zoneId, updateAccountEntrypointRulesetRequest);
        return localVarResp.getData();
    }

    /**
     * Update a zone ruleset
     * Updates a zone ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateZoneRulesetWithHttpInfo(String rulesetId, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateZoneRulesetValidateBeforeCall(rulesetId, zoneId, updateAccountEntrypointRulesetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a zone ruleset (asynchronously)
     * Updates a zone ruleset, creating a new version.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param updateAccountEntrypointRulesetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneRulesetAsync(String rulesetId, String zoneId, UpdateAccountEntrypointRulesetRequest updateAccountEntrypointRulesetRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZoneRulesetValidateBeforeCall(rulesetId, zoneId, updateAccountEntrypointRulesetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateZoneRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneRulesetRuleCall(String ruleId, String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRulesetRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZoneRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateZoneRulesetRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateZoneRulesetRule(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling updateZoneRulesetRule(Async)");
        }

        // verify the required parameter 'createAccountRulesetRuleRequest' is set
        if (createAccountRulesetRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRulesetRuleRequest' when calling updateZoneRulesetRule(Async)");
        }

        return updateZoneRulesetRuleCall(ruleId, rulesetId, zoneId, createAccountRulesetRuleRequest, _callback);

    }

    /**
     * Update a zone ruleset rule
     * Updates an existing rule in a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return CreateAccountRuleset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountRuleset200Response updateZoneRulesetRule(String ruleId, String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        ApiResponse<CreateAccountRuleset200Response> localVarResp = updateZoneRulesetRuleWithHttpInfo(ruleId, rulesetId, zoneId, createAccountRulesetRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a zone ruleset rule
     * Updates an existing rule in a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @return ApiResponse&lt;CreateAccountRuleset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountRuleset200Response> updateZoneRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, createAccountRulesetRuleRequest, null);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a zone ruleset rule (asynchronously)
     * Updates an existing rule in a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param createAccountRulesetRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ruleset response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> A failure response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZoneRulesetRuleAsync(String ruleId, String rulesetId, String zoneId, CreateAccountRulesetRuleRequest createAccountRulesetRuleRequest, final ApiCallback<CreateAccountRuleset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, createAccountRulesetRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountRuleset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
