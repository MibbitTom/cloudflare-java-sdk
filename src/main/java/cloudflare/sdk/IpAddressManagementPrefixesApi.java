/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AddressingApiResponseCollection;
import cloudflare.sdk.models.AddressingLoaUploadResponse;
import cloudflare.sdk.models.AddressingResponseCollection;
import cloudflare.sdk.models.AddressingSingleResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsDeleteAddressMap4XXResponse;
import cloudflare.sdk.models.IpAddressManagementPrefixesAddPrefix4XXResponse;
import cloudflare.sdk.models.IpAddressManagementPrefixesAddPrefixRequest;
import cloudflare.sdk.models.IpAddressManagementPrefixesDownloadLoaDocument4XXResponse;
import cloudflare.sdk.models.IpAddressManagementPrefixesListPrefixes4XXResponse;
import cloudflare.sdk.models.IpAddressManagementPrefixesUpdatePrefixDescriptionRequest;
import cloudflare.sdk.models.IpAddressManagementPrefixesUploadLoaDocument4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementPrefixesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAddressManagementPrefixesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementPrefixesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAddressManagementPrefixesAddPrefix
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesAddPrefixRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesAddPrefixCall(String accountId, IpAddressManagementPrefixesAddPrefixRequest ipAddressManagementPrefixesAddPrefixRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressManagementPrefixesAddPrefixRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesAddPrefixValidateBeforeCall(String accountId, IpAddressManagementPrefixesAddPrefixRequest ipAddressManagementPrefixesAddPrefixRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesAddPrefix(Async)");
        }

        // verify the required parameter 'ipAddressManagementPrefixesAddPrefixRequest' is set
        if (ipAddressManagementPrefixesAddPrefixRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAddressManagementPrefixesAddPrefixRequest' when calling ipAddressManagementPrefixesAddPrefix(Async)");
        }

        return ipAddressManagementPrefixesAddPrefixCall(accountId, ipAddressManagementPrefixesAddPrefixRequest, _callback);

    }

    /**
     * Add Prefix
     * Add a new prefix under the account.
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesAddPrefixRequest  (required)
     * @return AddressingSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingSingleResponse ipAddressManagementPrefixesAddPrefix(String accountId, IpAddressManagementPrefixesAddPrefixRequest ipAddressManagementPrefixesAddPrefixRequest) throws ApiException {
        ApiResponse<AddressingSingleResponse> localVarResp = ipAddressManagementPrefixesAddPrefixWithHttpInfo(accountId, ipAddressManagementPrefixesAddPrefixRequest);
        return localVarResp.getData();
    }

    /**
     * Add Prefix
     * Add a new prefix under the account.
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesAddPrefixRequest  (required)
     * @return ApiResponse&lt;AddressingSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingSingleResponse> ipAddressManagementPrefixesAddPrefixWithHttpInfo(String accountId, IpAddressManagementPrefixesAddPrefixRequest ipAddressManagementPrefixesAddPrefixRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesAddPrefixValidateBeforeCall(accountId, ipAddressManagementPrefixesAddPrefixRequest, null);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Prefix (asynchronously)
     * Add a new prefix under the account.
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesAddPrefixRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesAddPrefixAsync(String accountId, IpAddressManagementPrefixesAddPrefixRequest ipAddressManagementPrefixesAddPrefixRequest, final ApiCallback<AddressingSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesAddPrefixValidateBeforeCall(accountId, ipAddressManagementPrefixesAddPrefixRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesDeletePrefix
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesDeletePrefixCall(String prefixId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}"
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(String prefixId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesDeletePrefix(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesDeletePrefix(Async)");
        }

        return ipAddressManagementPrefixesDeletePrefixCall(prefixId, accountId, _callback);

    }

    /**
     * Delete Prefix
     * Delete an unapproved prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementPrefixesDeletePrefix(String prefixId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementPrefixesDeletePrefixWithHttpInfo(prefixId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Prefix
     * Delete an unapproved prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementPrefixesDeletePrefixWithHttpInfo(String prefixId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(prefixId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Prefix (asynchronously)
     * Delete an unapproved prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesDeletePrefixAsync(String prefixId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(prefixId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesDownloadLoaDocument
     * @param loaDocumentId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesDownloadLoaDocumentCall(String loaDocumentId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/loa_documents/{loa_document_id}/download"
            .replace("{" + "loa_document_id" + "}", localVarApiClient.escapeString(loaDocumentId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(String loaDocumentId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loaDocumentId' is set
        if (loaDocumentId == null) {
            throw new ApiException("Missing the required parameter 'loaDocumentId' when calling ipAddressManagementPrefixesDownloadLoaDocument(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesDownloadLoaDocument(Async)");
        }

        return ipAddressManagementPrefixesDownloadLoaDocumentCall(loaDocumentId, accountId, _callback);

    }

    /**
     * Download LOA Document
     * Download specified LOA document under the account.
     * @param loaDocumentId  (required)
     * @param accountId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public Object ipAddressManagementPrefixesDownloadLoaDocument(String loaDocumentId, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = ipAddressManagementPrefixesDownloadLoaDocumentWithHttpInfo(loaDocumentId, accountId);
        return localVarResp.getData();
    }

    /**
     * Download LOA Document
     * Download specified LOA document under the account.
     * @param loaDocumentId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> ipAddressManagementPrefixesDownloadLoaDocumentWithHttpInfo(String loaDocumentId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(loaDocumentId, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download LOA Document (asynchronously)
     * Download specified LOA document under the account.
     * @param loaDocumentId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Download LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesDownloadLoaDocumentAsync(String loaDocumentId, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(loaDocumentId, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesListPrefixes
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesListPrefixesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesListPrefixesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesListPrefixes(Async)");
        }

        return ipAddressManagementPrefixesListPrefixesCall(accountId, _callback);

    }

    /**
     * List Prefixes
     * List all prefixes owned by the account.
     * @param accountId  (required)
     * @return AddressingResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingResponseCollection ipAddressManagementPrefixesListPrefixes(String accountId) throws ApiException {
        ApiResponse<AddressingResponseCollection> localVarResp = ipAddressManagementPrefixesListPrefixesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Prefixes
     * List all prefixes owned by the account.
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingResponseCollection> ipAddressManagementPrefixesListPrefixesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesListPrefixesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AddressingResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Prefixes (asynchronously)
     * List all prefixes owned by the account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesListPrefixesAsync(String accountId, final ApiCallback<AddressingResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesListPrefixesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesPrefixDetails
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prefix Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Prefix Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesPrefixDetailsCall(String prefixId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}"
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(String prefixId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesPrefixDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesPrefixDetails(Async)");
        }

        return ipAddressManagementPrefixesPrefixDetailsCall(prefixId, accountId, _callback);

    }

    /**
     * Prefix Details
     * List a particular prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @return AddressingSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prefix Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Prefix Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingSingleResponse ipAddressManagementPrefixesPrefixDetails(String prefixId, String accountId) throws ApiException {
        ApiResponse<AddressingSingleResponse> localVarResp = ipAddressManagementPrefixesPrefixDetailsWithHttpInfo(prefixId, accountId);
        return localVarResp.getData();
    }

    /**
     * Prefix Details
     * List a particular prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prefix Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Prefix Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingSingleResponse> ipAddressManagementPrefixesPrefixDetailsWithHttpInfo(String prefixId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(prefixId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prefix Details (asynchronously)
     * List a particular prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prefix Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Prefix Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesPrefixDetailsAsync(String prefixId, String accountId, final ApiCallback<AddressingSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(prefixId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesUpdatePrefixDescription
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesUpdatePrefixDescriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Prefix Description response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Prefix Description response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUpdatePrefixDescriptionCall(String prefixId, String accountId, IpAddressManagementPrefixesUpdatePrefixDescriptionRequest ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressManagementPrefixesUpdatePrefixDescriptionRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}"
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(String prefixId, String accountId, IpAddressManagementPrefixesUpdatePrefixDescriptionRequest ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }

        // verify the required parameter 'ipAddressManagementPrefixesUpdatePrefixDescriptionRequest' is set
        if (ipAddressManagementPrefixesUpdatePrefixDescriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAddressManagementPrefixesUpdatePrefixDescriptionRequest' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }

        return ipAddressManagementPrefixesUpdatePrefixDescriptionCall(prefixId, accountId, ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, _callback);

    }

    /**
     * Update Prefix Description
     * Modify the description for a prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesUpdatePrefixDescriptionRequest  (required)
     * @return AddressingSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Prefix Description response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Prefix Description response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingSingleResponse ipAddressManagementPrefixesUpdatePrefixDescription(String prefixId, String accountId, IpAddressManagementPrefixesUpdatePrefixDescriptionRequest ipAddressManagementPrefixesUpdatePrefixDescriptionRequest) throws ApiException {
        ApiResponse<AddressingSingleResponse> localVarResp = ipAddressManagementPrefixesUpdatePrefixDescriptionWithHttpInfo(prefixId, accountId, ipAddressManagementPrefixesUpdatePrefixDescriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Update Prefix Description
     * Modify the description for a prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesUpdatePrefixDescriptionRequest  (required)
     * @return ApiResponse&lt;AddressingSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Prefix Description response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Prefix Description response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingSingleResponse> ipAddressManagementPrefixesUpdatePrefixDescriptionWithHttpInfo(String prefixId, String accountId, IpAddressManagementPrefixesUpdatePrefixDescriptionRequest ipAddressManagementPrefixesUpdatePrefixDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(prefixId, accountId, ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Prefix Description (asynchronously)
     * Modify the description for a prefix owned by the account.
     * @param prefixId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementPrefixesUpdatePrefixDescriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Prefix Description response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Prefix Description response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUpdatePrefixDescriptionAsync(String prefixId, String accountId, IpAddressManagementPrefixesUpdatePrefixDescriptionRequest ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, final ApiCallback<AddressingSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(prefixId, accountId, ipAddressManagementPrefixesUpdatePrefixDescriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressingSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesUploadLoaDocument
     * @param accountId  (required)
     * @param loaDocument LOA document to upload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUploadLoaDocumentCall(String accountId, String loaDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/loa_documents"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loaDocument != null) {
            localVarFormParams.put("loa_document", loaDocument);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(String accountId, String loaDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesUploadLoaDocument(Async)");
        }

        // verify the required parameter 'loaDocument' is set
        if (loaDocument == null) {
            throw new ApiException("Missing the required parameter 'loaDocument' when calling ipAddressManagementPrefixesUploadLoaDocument(Async)");
        }

        return ipAddressManagementPrefixesUploadLoaDocumentCall(accountId, loaDocument, _callback);

    }

    /**
     * Upload LOA Document
     * Submit LOA document (pdf format) under the account.
     * @param accountId  (required)
     * @param loaDocument LOA document to upload. (required)
     * @return AddressingLoaUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingLoaUploadResponse ipAddressManagementPrefixesUploadLoaDocument(String accountId, String loaDocument) throws ApiException {
        ApiResponse<AddressingLoaUploadResponse> localVarResp = ipAddressManagementPrefixesUploadLoaDocumentWithHttpInfo(accountId, loaDocument);
        return localVarResp.getData();
    }

    /**
     * Upload LOA Document
     * Submit LOA document (pdf format) under the account.
     * @param accountId  (required)
     * @param loaDocument LOA document to upload. (required)
     * @return ApiResponse&lt;AddressingLoaUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingLoaUploadResponse> ipAddressManagementPrefixesUploadLoaDocumentWithHttpInfo(String accountId, String loaDocument) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(accountId, loaDocument, null);
        Type localVarReturnType = new TypeToken<AddressingLoaUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload LOA Document (asynchronously)
     * Submit LOA document (pdf format) under the account.
     * @param accountId  (required)
     * @param loaDocument LOA document to upload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload LOA Document response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload LOA Document response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUploadLoaDocumentAsync(String accountId, String loaDocument, final ApiCallback<AddressingLoaUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(accountId, loaDocument, _callback);
        Type localVarReturnType = new TypeToken<AddressingLoaUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
