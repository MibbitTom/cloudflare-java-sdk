/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import cloudflare.sdk.models.NamespaceWorkerCreateRequest;
import cloudflare.sdk.models.NamespaceWorkerGetScriptBindings200Response;
import cloudflare.sdk.models.NamespaceWorkerGetScriptSecrets200Response;
import cloudflare.sdk.models.NamespaceWorkerGetScriptSettings200Response;
import cloudflare.sdk.models.NamespaceWorkerGetScriptTags200Response;
import cloudflare.sdk.models.NamespaceWorkerPutScriptContentRequestMetadata;
import cloudflare.sdk.models.NamespaceWorkerPutScriptSecrets200Response;
import cloudflare.sdk.models.NamespaceWorkerPutScriptTag200Response;
import cloudflare.sdk.models.NamespaceWorkerPutScriptTags200Response;
import cloudflare.sdk.models.NamespaceWorkerScriptUploadWorkerModule200Response;
import cloudflare.sdk.models.NamespaceWorkerScriptUploadWorkerModule4XXResponse;
import cloudflare.sdk.models.NamespaceWorkerScriptUploadWorkerModuleRequest;
import cloudflare.sdk.models.WorkersApiResponseCommon;
import cloudflare.sdk.models.WorkersNamespaceDeleteResponse;
import cloudflare.sdk.models.WorkersNamespaceListResponse;
import cloudflare.sdk.models.WorkersNamespaceScriptResponseSingle;
import cloudflare.sdk.models.WorkersNamespaceSingleResponse;
import cloudflare.sdk.models.WorkersScriptAndVersionSettingsItem;
import cloudflare.sdk.models.WorkersScriptResponseSingle;
import cloudflare.sdk.models.WorkersSecret;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersForPlatformsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersForPlatformsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersForPlatformsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for namespaceWorkerCreate
     * @param accountId  (required)
     * @param namespaceWorkerCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerCreateCall(String accountId, NamespaceWorkerCreateRequest namespaceWorkerCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceWorkerCreateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerCreateValidateBeforeCall(String accountId, NamespaceWorkerCreateRequest namespaceWorkerCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerCreate(Async)");
        }

        // verify the required parameter 'namespaceWorkerCreateRequest' is set
        if (namespaceWorkerCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'namespaceWorkerCreateRequest' when calling namespaceWorkerCreate(Async)");
        }

        return namespaceWorkerCreateCall(accountId, namespaceWorkerCreateRequest, _callback);

    }

    /**
     * Create dispatch namespace
     * Create a new Workers for Platforms namespace.
     * @param accountId  (required)
     * @param namespaceWorkerCreateRequest  (required)
     * @return WorkersNamespaceSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public WorkersNamespaceSingleResponse namespaceWorkerCreate(String accountId, NamespaceWorkerCreateRequest namespaceWorkerCreateRequest) throws ApiException {
        ApiResponse<WorkersNamespaceSingleResponse> localVarResp = namespaceWorkerCreateWithHttpInfo(accountId, namespaceWorkerCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create dispatch namespace
     * Create a new Workers for Platforms namespace.
     * @param accountId  (required)
     * @param namespaceWorkerCreateRequest  (required)
     * @return ApiResponse&lt;WorkersNamespaceSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersNamespaceSingleResponse> namespaceWorkerCreateWithHttpInfo(String accountId, NamespaceWorkerCreateRequest namespaceWorkerCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerCreateValidateBeforeCall(accountId, namespaceWorkerCreateRequest, null);
        Type localVarReturnType = new TypeToken<WorkersNamespaceSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create dispatch namespace (asynchronously)
     * Create a new Workers for Platforms namespace.
     * @param accountId  (required)
     * @param namespaceWorkerCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerCreateAsync(String accountId, NamespaceWorkerCreateRequest namespaceWorkerCreateRequest, final ApiCallback<WorkersNamespaceSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerCreateValidateBeforeCall(accountId, namespaceWorkerCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkersNamespaceSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerDeleteNamespace
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to delete Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerDeleteNamespaceCall(String accountId, String dispatchNamespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerDeleteNamespaceValidateBeforeCall(String accountId, String dispatchNamespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerDeleteNamespace(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerDeleteNamespace(Async)");
        }

        return namespaceWorkerDeleteNamespaceCall(accountId, dispatchNamespace, _callback);

    }

    /**
     * Delete dispatch namespace
     * Delete a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @return WorkersNamespaceDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to delete Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public WorkersNamespaceDeleteResponse namespaceWorkerDeleteNamespace(String accountId, String dispatchNamespace) throws ApiException {
        ApiResponse<WorkersNamespaceDeleteResponse> localVarResp = namespaceWorkerDeleteNamespaceWithHttpInfo(accountId, dispatchNamespace);
        return localVarResp.getData();
    }

    /**
     * Delete dispatch namespace
     * Delete a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @return ApiResponse&lt;WorkersNamespaceDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to delete Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersNamespaceDeleteResponse> namespaceWorkerDeleteNamespaceWithHttpInfo(String accountId, String dispatchNamespace) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerDeleteNamespaceValidateBeforeCall(accountId, dispatchNamespace, null);
        Type localVarReturnType = new TypeToken<WorkersNamespaceDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete dispatch namespace (asynchronously)
     * Delete a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to delete Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerDeleteNamespaceAsync(String accountId, String dispatchNamespace, final ApiCallback<WorkersNamespaceDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerDeleteNamespaceValidateBeforeCall(accountId, dispatchNamespace, _callback);
        Type localVarReturnType = new TypeToken<WorkersNamespaceDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerDeleteScriptTag
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerDeleteScriptTagCall(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerDeleteScriptTagValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerDeleteScriptTag(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerDeleteScriptTag(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerDeleteScriptTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling namespaceWorkerDeleteScriptTag(Async)");
        }

        return namespaceWorkerDeleteScriptTagCall(accountId, dispatchNamespace, scriptName, tag, _callback);

    }

    /**
     * Delete Script Tag
     * Delete script tag for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @return NamespaceWorkerPutScriptTag200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerPutScriptTag200Response namespaceWorkerDeleteScriptTag(String accountId, String dispatchNamespace, String scriptName, String tag) throws ApiException {
        ApiResponse<NamespaceWorkerPutScriptTag200Response> localVarResp = namespaceWorkerDeleteScriptTagWithHttpInfo(accountId, dispatchNamespace, scriptName, tag);
        return localVarResp.getData();
    }

    /**
     * Delete Script Tag
     * Delete script tag for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;NamespaceWorkerPutScriptTag200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerPutScriptTag200Response> namespaceWorkerDeleteScriptTagWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, String tag) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerDeleteScriptTagValidateBeforeCall(accountId, dispatchNamespace, scriptName, tag, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTag200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Script Tag (asynchronously)
     * Delete script tag for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerDeleteScriptTagAsync(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback<NamespaceWorkerPutScriptTag200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerDeleteScriptTagValidateBeforeCall(accountId, dispatchNamespace, scriptName, tag, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTag200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetNamespace
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetNamespaceCall(String accountId, String dispatchNamespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetNamespaceValidateBeforeCall(String accountId, String dispatchNamespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetNamespace(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetNamespace(Async)");
        }

        return namespaceWorkerGetNamespaceCall(accountId, dispatchNamespace, _callback);

    }

    /**
     * Get dispatch namespace
     * Get a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @return WorkersNamespaceSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public WorkersNamespaceSingleResponse namespaceWorkerGetNamespace(String accountId, String dispatchNamespace) throws ApiException {
        ApiResponse<WorkersNamespaceSingleResponse> localVarResp = namespaceWorkerGetNamespaceWithHttpInfo(accountId, dispatchNamespace);
        return localVarResp.getData();
    }

    /**
     * Get dispatch namespace
     * Get a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @return ApiResponse&lt;WorkersNamespaceSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersNamespaceSingleResponse> namespaceWorkerGetNamespaceWithHttpInfo(String accountId, String dispatchNamespace) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetNamespaceValidateBeforeCall(accountId, dispatchNamespace, null);
        Type localVarReturnType = new TypeToken<WorkersNamespaceSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dispatch namespace (asynchronously)
     * Get a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Workers for Platforms namespace. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get Workers for Platforms namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetNamespaceAsync(String accountId, String dispatchNamespace, final ApiCallback<WorkersNamespaceSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetNamespaceValidateBeforeCall(accountId, dispatchNamespace, _callback);
        Type localVarReturnType = new TypeToken<WorkersNamespaceSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetScriptBindings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptBindingsCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/bindings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetScriptBindingsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetScriptBindings(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetScriptBindings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerGetScriptBindings(Async)");
        }

        return namespaceWorkerGetScriptBindingsCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Get Script Bindings
     * Fetch script bindings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return NamespaceWorkerGetScriptBindings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerGetScriptBindings200Response namespaceWorkerGetScriptBindings(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<NamespaceWorkerGetScriptBindings200Response> localVarResp = namespaceWorkerGetScriptBindingsWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Bindings
     * Fetch script bindings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;NamespaceWorkerGetScriptBindings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerGetScriptBindings200Response> namespaceWorkerGetScriptBindingsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetScriptBindingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptBindings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Bindings (asynchronously)
     * Fetch script bindings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptBindingsAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<NamespaceWorkerGetScriptBindings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetScriptBindingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptBindings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetScriptContent
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptContentCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "string",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetScriptContentValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetScriptContent(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetScriptContent(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerGetScriptContent(Async)");
        }

        return namespaceWorkerGetScriptContentCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Get Script Content
     * Fetch script content from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public Object namespaceWorkerGetScriptContent(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<Object> localVarResp = namespaceWorkerGetScriptContentWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Content
     * Fetch script content from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> namespaceWorkerGetScriptContentWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetScriptContentValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Content (asynchronously)
     * Fetch script content from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get script content </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get script content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptContentAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetScriptContentValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetScriptSecrets
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script secrets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script secrets failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptSecretsCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetScriptSecretsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetScriptSecrets(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetScriptSecrets(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerGetScriptSecrets(Async)");
        }

        return namespaceWorkerGetScriptSecretsCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Get Script Secrets
     * Fetch secrets from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return NamespaceWorkerGetScriptSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script secrets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script secrets failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerGetScriptSecrets200Response namespaceWorkerGetScriptSecrets(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<NamespaceWorkerGetScriptSecrets200Response> localVarResp = namespaceWorkerGetScriptSecretsWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Secrets
     * Fetch secrets from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;NamespaceWorkerGetScriptSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script secrets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script secrets failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerGetScriptSecrets200Response> namespaceWorkerGetScriptSecretsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetScriptSecretsValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Secrets (asynchronously)
     * Fetch secrets from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script secrets </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script secrets failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptSecretsAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<NamespaceWorkerGetScriptSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetScriptSecretsValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetScriptSettings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptSettingsCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetScriptSettingsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetScriptSettings(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetScriptSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerGetScriptSettings(Async)");
        }

        return namespaceWorkerGetScriptSettingsCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Get Script Settings
     * Get script settings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return NamespaceWorkerGetScriptSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerGetScriptSettings200Response namespaceWorkerGetScriptSettings(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<NamespaceWorkerGetScriptSettings200Response> localVarResp = namespaceWorkerGetScriptSettingsWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Settings
     * Get script settings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;NamespaceWorkerGetScriptSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerGetScriptSettings200Response> namespaceWorkerGetScriptSettingsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetScriptSettingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Settings (asynchronously)
     * Get script settings from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptSettingsAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<NamespaceWorkerGetScriptSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetScriptSettingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerGetScriptTags
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptTagsCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerGetScriptTagsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerGetScriptTags(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerGetScriptTags(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerGetScriptTags(Async)");
        }

        return namespaceWorkerGetScriptTagsCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Get Script Tags
     * Fetch tags from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return NamespaceWorkerGetScriptTags200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerGetScriptTags200Response namespaceWorkerGetScriptTags(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<NamespaceWorkerGetScriptTags200Response> localVarResp = namespaceWorkerGetScriptTagsWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Get Script Tags
     * Fetch tags from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;NamespaceWorkerGetScriptTags200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerGetScriptTags200Response> namespaceWorkerGetScriptTagsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerGetScriptTagsValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptTags200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Script Tags (asynchronously)
     * Fetch tags from a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerGetScriptTagsAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<NamespaceWorkerGetScriptTags200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerGetScriptTagsValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptTags200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerList
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerListCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerListValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerList(Async)");
        }

        return namespaceWorkerListCall(accountId, _callback);

    }

    /**
     * List dispatch namespaces
     * Fetch a list of Workers for Platforms namespaces.
     * @param accountId  (required)
     * @return WorkersNamespaceListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public WorkersNamespaceListResponse namespaceWorkerList(String accountId) throws ApiException {
        ApiResponse<WorkersNamespaceListResponse> localVarResp = namespaceWorkerListWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List dispatch namespaces
     * Fetch a list of Workers for Platforms namespaces.
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersNamespaceListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersNamespaceListResponse> namespaceWorkerListWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerListValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<WorkersNamespaceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List dispatch namespaces (asynchronously)
     * Fetch a list of Workers for Platforms namespaces.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch a list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure to get list of Workers for Platforms namespaces. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerListAsync(String accountId, final ApiCallback<WorkersNamespaceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerListValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersNamespaceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerPatchScriptSettings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPatchScriptSettingsCall(String accountId, String dispatchNamespace, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerPatchScriptSettingsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerPatchScriptSettings(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerPatchScriptSettings(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerPatchScriptSettings(Async)");
        }

        return namespaceWorkerPatchScriptSettingsCall(accountId, dispatchNamespace, scriptName, settings, _callback);

    }

    /**
     * Patch Script Settings
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @return NamespaceWorkerGetScriptSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerGetScriptSettings200Response namespaceWorkerPatchScriptSettings(String accountId, String dispatchNamespace, String scriptName, WorkersScriptAndVersionSettingsItem settings) throws ApiException {
        ApiResponse<NamespaceWorkerGetScriptSettings200Response> localVarResp = namespaceWorkerPatchScriptSettingsWithHttpInfo(accountId, dispatchNamespace, scriptName, settings);
        return localVarResp.getData();
    }

    /**
     * Patch Script Settings
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @return ApiResponse&lt;NamespaceWorkerGetScriptSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerGetScriptSettings200Response> namespaceWorkerPatchScriptSettingsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, WorkersScriptAndVersionSettingsItem settings) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerPatchScriptSettingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, settings, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Script Settings (asynchronously)
     * Patch script metadata, such as bindings
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param settings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch script settings </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch script settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPatchScriptSettingsAsync(String accountId, String dispatchNamespace, String scriptName, WorkersScriptAndVersionSettingsItem settings, final ApiCallback<NamespaceWorkerGetScriptSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerPatchScriptSettingsValidateBeforeCall(accountId, dispatchNamespace, scriptName, settings, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerGetScriptSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerPutScriptContent
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptContentCall(String accountId, String dispatchNamespace, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lessThanAnyPartNameGreaterThan != null) {
            localVarFormParams.put("&lt;any part name&gt;", lessThanAnyPartNameGreaterThan);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (CF_WORKER_BODY_PART != null) {
            localVarHeaderParams.put("CF-WORKER-BODY-PART", localVarApiClient.parameterToString(CF_WORKER_BODY_PART));
        }

        if (CF_WORKER_MAIN_MODULE_PART != null) {
            localVarHeaderParams.put("CF-WORKER-MAIN-MODULE-PART", localVarApiClient.parameterToString(CF_WORKER_MAIN_MODULE_PART));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerPutScriptContentValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerPutScriptContent(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerPutScriptContent(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerPutScriptContent(Async)");
        }

        return namespaceWorkerPutScriptContentCall(accountId, dispatchNamespace, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);

    }

    /**
     * Put Script Content
     * Put script content for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return WorkersScriptResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public WorkersScriptResponseSingle namespaceWorkerPutScriptContent(String accountId, String dispatchNamespace, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        ApiResponse<WorkersScriptResponseSingle> localVarResp = namespaceWorkerPutScriptContentWithHttpInfo(accountId, dispatchNamespace, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata);
        return localVarResp.getData();
    }

    /**
     * Put Script Content
     * Put script content for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @return ApiResponse&lt;WorkersScriptResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersScriptResponseSingle> namespaceWorkerPutScriptContentWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerPutScriptContentValidateBeforeCall(accountId, dispatchNamespace, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, null);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Script Content (asynchronously)
     * Put script content for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param CF_WORKER_BODY_PART The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part. (optional)
     * @param CF_WORKER_MAIN_MODULE_PART The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part. (optional)
     * @param lessThanAnyPartNameGreaterThan A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as &#x60;main_module&#x60; (esm)/&#x60;body_part&#x60; (service worker) or as a header &#x60;CF-WORKER-MAIN-MODULE-PART&#x60; (esm) /&#x60;CF-WORKER-BODY-PART&#x60; (service worker) by part name. Source maps may also be included using the &#x60;application/source-map&#x60; content type. (optional)
     * @param metadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script content (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script content failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptContentAsync(String accountId, String dispatchNamespace, String scriptName, String CF_WORKER_BODY_PART, String CF_WORKER_MAIN_MODULE_PART, List<File> lessThanAnyPartNameGreaterThan, NamespaceWorkerPutScriptContentRequestMetadata metadata, final ApiCallback<WorkersScriptResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerPutScriptContentValidateBeforeCall(accountId, dispatchNamespace, scriptName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, lessThanAnyPartNameGreaterThan, metadata, _callback);
        Type localVarReturnType = new TypeToken<WorkersScriptResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerPutScriptSecrets
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param workersSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptSecretsCall(String accountId, String dispatchNamespace, String scriptName, WorkersSecret workersSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersSecret;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerPutScriptSecretsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, WorkersSecret workersSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerPutScriptSecrets(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerPutScriptSecrets(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerPutScriptSecrets(Async)");
        }

        // verify the required parameter 'workersSecret' is set
        if (workersSecret == null) {
            throw new ApiException("Missing the required parameter 'workersSecret' when calling namespaceWorkerPutScriptSecrets(Async)");
        }

        return namespaceWorkerPutScriptSecretsCall(accountId, dispatchNamespace, scriptName, workersSecret, _callback);

    }

    /**
     * Put Script Secrets
     * Put secrets to a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param workersSecret  (required)
     * @return NamespaceWorkerPutScriptSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerPutScriptSecrets200Response namespaceWorkerPutScriptSecrets(String accountId, String dispatchNamespace, String scriptName, WorkersSecret workersSecret) throws ApiException {
        ApiResponse<NamespaceWorkerPutScriptSecrets200Response> localVarResp = namespaceWorkerPutScriptSecretsWithHttpInfo(accountId, dispatchNamespace, scriptName, workersSecret);
        return localVarResp.getData();
    }

    /**
     * Put Script Secrets
     * Put secrets to a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param workersSecret  (required)
     * @return ApiResponse&lt;NamespaceWorkerPutScriptSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerPutScriptSecrets200Response> namespaceWorkerPutScriptSecretsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, WorkersSecret workersSecret) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerPutScriptSecretsValidateBeforeCall(accountId, dispatchNamespace, scriptName, workersSecret, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Script Secrets (asynchronously)
     * Put secrets to a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param workersSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script bindings (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script bindings failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptSecretsAsync(String accountId, String dispatchNamespace, String scriptName, WorkersSecret workersSecret, final ApiCallback<NamespaceWorkerPutScriptSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerPutScriptSecretsValidateBeforeCall(accountId, dispatchNamespace, scriptName, workersSecret, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerPutScriptTag
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptTagCall(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerPutScriptTagValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerPutScriptTag(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerPutScriptTag(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerPutScriptTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling namespaceWorkerPutScriptTag(Async)");
        }

        return namespaceWorkerPutScriptTagCall(accountId, dispatchNamespace, scriptName, tag, _callback);

    }

    /**
     * Put Script Tag
     * Put a single tag on a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @return NamespaceWorkerPutScriptTag200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerPutScriptTag200Response namespaceWorkerPutScriptTag(String accountId, String dispatchNamespace, String scriptName, String tag) throws ApiException {
        ApiResponse<NamespaceWorkerPutScriptTag200Response> localVarResp = namespaceWorkerPutScriptTagWithHttpInfo(accountId, dispatchNamespace, scriptName, tag);
        return localVarResp.getData();
    }

    /**
     * Put Script Tag
     * Put a single tag on a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;NamespaceWorkerPutScriptTag200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerPutScriptTag200Response> namespaceWorkerPutScriptTagWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, String tag) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerPutScriptTagValidateBeforeCall(accountId, dispatchNamespace, scriptName, tag, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTag200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Script Tag (asynchronously)
     * Put a single tag on a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put script tag </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put script tag failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptTagAsync(String accountId, String dispatchNamespace, String scriptName, String tag, final ApiCallback<NamespaceWorkerPutScriptTag200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerPutScriptTagValidateBeforeCall(accountId, dispatchNamespace, scriptName, tag, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTag200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerPutScriptTags
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptTagsCall(String accountId, String dispatchNamespace, String scriptName, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerPutScriptTagsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerPutScriptTags(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerPutScriptTags(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerPutScriptTags(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling namespaceWorkerPutScriptTags(Async)");
        }

        return namespaceWorkerPutScriptTagsCall(accountId, dispatchNamespace, scriptName, requestBody, _callback);

    }

    /**
     * Put Script Tags
     * Put script tags for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param requestBody  (required)
     * @return NamespaceWorkerPutScriptTags200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerPutScriptTags200Response namespaceWorkerPutScriptTags(String accountId, String dispatchNamespace, String scriptName, List<String> requestBody) throws ApiException {
        ApiResponse<NamespaceWorkerPutScriptTags200Response> localVarResp = namespaceWorkerPutScriptTagsWithHttpInfo(accountId, dispatchNamespace, scriptName, requestBody);
        return localVarResp.getData();
    }

    /**
     * Put Script Tags
     * Put script tags for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;NamespaceWorkerPutScriptTags200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerPutScriptTags200Response> namespaceWorkerPutScriptTagsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerPutScriptTagsValidateBeforeCall(accountId, dispatchNamespace, scriptName, requestBody, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTags200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Script Tags (asynchronously)
     * Put script tags for a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch script tags </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch script tags failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerPutScriptTagsAsync(String accountId, String dispatchNamespace, String scriptName, List<String> requestBody, final ApiCallback<NamespaceWorkerPutScriptTags200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerPutScriptTagsValidateBeforeCall(accountId, dispatchNamespace, scriptName, requestBody, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerPutScriptTags200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerScriptDeleteWorker
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptDeleteWorkerCall(String accountId, String dispatchNamespace, String scriptName, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerScriptDeleteWorkerValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerScriptDeleteWorker(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerScriptDeleteWorker(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerScriptDeleteWorker(Async)");
        }

        return namespaceWorkerScriptDeleteWorkerCall(accountId, dispatchNamespace, scriptName, force, _callback);

    }

    /**
     * Delete Worker
     * Delete a worker from a Workers for Platforms namespace. This call has no response body on a successful delete.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public void namespaceWorkerScriptDeleteWorker(String accountId, String dispatchNamespace, String scriptName, Boolean force) throws ApiException {
        namespaceWorkerScriptDeleteWorkerWithHttpInfo(accountId, dispatchNamespace, scriptName, force);
    }

    /**
     * Delete Worker
     * Delete a worker from a Workers for Platforms namespace. This call has no response body on a successful delete.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namespaceWorkerScriptDeleteWorkerWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerScriptDeleteWorkerValidateBeforeCall(accountId, dispatchNamespace, scriptName, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Worker (asynchronously)
     * Delete a worker from a Workers for Platforms namespace. This call has no response body on a successful delete.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param force If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Worker response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Worker response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptDeleteWorkerAsync(String accountId, String dispatchNamespace, String scriptName, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerScriptDeleteWorkerValidateBeforeCall(accountId, dispatchNamespace, scriptName, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerScriptUploadWorkerModule
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptUploadWorkerModuleCall(String accountId, String dispatchNamespace, String scriptName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/javascript",
            "multipart/form-data",
            "text/javascript"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerScriptUploadWorkerModuleValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerScriptUploadWorkerModule(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerScriptUploadWorkerModule(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerScriptUploadWorkerModule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling namespaceWorkerScriptUploadWorkerModule(Async)");
        }

        return namespaceWorkerScriptUploadWorkerModuleCall(accountId, dispatchNamespace, scriptName, body, _callback);

    }

    /**
     * Upload Worker Module
     * Upload a worker module to a Workers for Platforms namespace. You can find an example of the metadata on our docs: https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/reference/metadata/
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param body  (required)
     * @return NamespaceWorkerScriptUploadWorkerModule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceWorkerScriptUploadWorkerModule200Response namespaceWorkerScriptUploadWorkerModule(String accountId, String dispatchNamespace, String scriptName, String body) throws ApiException {
        ApiResponse<NamespaceWorkerScriptUploadWorkerModule200Response> localVarResp = namespaceWorkerScriptUploadWorkerModuleWithHttpInfo(accountId, dispatchNamespace, scriptName, body);
        return localVarResp.getData();
    }

    /**
     * Upload Worker Module
     * Upload a worker module to a Workers for Platforms namespace. You can find an example of the metadata on our docs: https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/reference/metadata/
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param body  (required)
     * @return ApiResponse&lt;NamespaceWorkerScriptUploadWorkerModule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceWorkerScriptUploadWorkerModule200Response> namespaceWorkerScriptUploadWorkerModuleWithHttpInfo(String accountId, String dispatchNamespace, String scriptName, String body) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerScriptUploadWorkerModuleValidateBeforeCall(accountId, dispatchNamespace, scriptName, body, null);
        Type localVarReturnType = new TypeToken<NamespaceWorkerScriptUploadWorkerModule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Worker Module (asynchronously)
     * Upload a worker module to a Workers for Platforms namespace. You can find an example of the metadata on our docs: https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/reference/metadata/
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Worker Module response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Worker Module response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptUploadWorkerModuleAsync(String accountId, String dispatchNamespace, String scriptName, String body, final ApiCallback<NamespaceWorkerScriptUploadWorkerModule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerScriptUploadWorkerModuleValidateBeforeCall(accountId, dispatchNamespace, scriptName, body, _callback);
        Type localVarReturnType = new TypeToken<NamespaceWorkerScriptUploadWorkerModule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespaceWorkerScriptWorkerDetails
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Details Response (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Worker Details Failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptWorkerDetailsCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dispatch_namespace" + "}", localVarApiClient.escapeString(dispatchNamespace.toString()))
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespaceWorkerScriptWorkerDetailsValidateBeforeCall(String accountId, String dispatchNamespace, String scriptName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling namespaceWorkerScriptWorkerDetails(Async)");
        }

        // verify the required parameter 'dispatchNamespace' is set
        if (dispatchNamespace == null) {
            throw new ApiException("Missing the required parameter 'dispatchNamespace' when calling namespaceWorkerScriptWorkerDetails(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling namespaceWorkerScriptWorkerDetails(Async)");
        }

        return namespaceWorkerScriptWorkerDetailsCall(accountId, dispatchNamespace, scriptName, _callback);

    }

    /**
     * Worker Details
     * Fetch information about a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return WorkersNamespaceScriptResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Details Response (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Worker Details Failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public WorkersNamespaceScriptResponseSingle namespaceWorkerScriptWorkerDetails(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        ApiResponse<WorkersNamespaceScriptResponseSingle> localVarResp = namespaceWorkerScriptWorkerDetailsWithHttpInfo(accountId, dispatchNamespace, scriptName);
        return localVarResp.getData();
    }

    /**
     * Worker Details
     * Fetch information about a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @return ApiResponse&lt;WorkersNamespaceScriptResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Details Response (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Worker Details Failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersNamespaceScriptResponseSingle> namespaceWorkerScriptWorkerDetailsWithHttpInfo(String accountId, String dispatchNamespace, String scriptName) throws ApiException {
        okhttp3.Call localVarCall = namespaceWorkerScriptWorkerDetailsValidateBeforeCall(accountId, dispatchNamespace, scriptName, null);
        Type localVarReturnType = new TypeToken<WorkersNamespaceScriptResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Worker Details (asynchronously)
     * Fetch information about a script uploaded to a Workers for Platforms namespace.
     * @param accountId  (required)
     * @param dispatchNamespace  (required)
     * @param scriptName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Worker Details Response (Workers for Platforms) </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Worker Details Failure (Workers for Platforms) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespaceWorkerScriptWorkerDetailsAsync(String accountId, String dispatchNamespace, String scriptName, final ApiCallback<WorkersNamespaceScriptResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespaceWorkerScriptWorkerDetailsValidateBeforeCall(accountId, dispatchNamespace, scriptName, _callback);
        Type localVarReturnType = new TypeToken<WorkersNamespaceScriptResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
