/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.MTlsCertificateManagementGetMTlsCertificate4XXResponse;
import cloudflare.sdk.models.MTlsCertificateManagementListMTlsCertificateAssociations4XXResponse;
import cloudflare.sdk.models.MTlsCertificateManagementListMTlsCertificates4XXResponse;
import cloudflare.sdk.models.MTlsCertificateManagementUploadMTlsCertificate4XXResponse;
import cloudflare.sdk.models.MTlsCertificateManagementUploadMTlsCertificateRequest;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesAssociationResponseCollection;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCertificateResponseSinglePost;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MTlsCertificateManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MTlsCertificateManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MTlsCertificateManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mTlsCertificateManagementDeleteMTlsCertificate
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementDeleteMTlsCertificateCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mtls_certificates/{mtls_certificate_id}"
            .replace("{" + "mtls_certificate_id" + "}", localVarApiClient.escapeString(mtlsCertificateId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mTlsCertificateManagementDeleteMTlsCertificateValidateBeforeCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mtlsCertificateId' is set
        if (mtlsCertificateId == null) {
            throw new ApiException("Missing the required parameter 'mtlsCertificateId' when calling mTlsCertificateManagementDeleteMTlsCertificate(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling mTlsCertificateManagementDeleteMTlsCertificate(Async)");
        }

        return mTlsCertificateManagementDeleteMTlsCertificateCall(mtlsCertificateId, accountId, _callback);

    }

    /**
     * Delete mTLS certificate
     * Deletes the mTLS certificate unless the certificate is in use by one or more Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle mTlsCertificateManagementDeleteMTlsCertificate(String mtlsCertificateId, String accountId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> localVarResp = mTlsCertificateManagementDeleteMTlsCertificateWithHttpInfo(mtlsCertificateId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete mTLS certificate
     * Deletes the mTLS certificate unless the certificate is in use by one or more Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> mTlsCertificateManagementDeleteMTlsCertificateWithHttpInfo(String mtlsCertificateId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = mTlsCertificateManagementDeleteMTlsCertificateValidateBeforeCall(mtlsCertificateId, accountId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete mTLS certificate (asynchronously)
     * Deletes the mTLS certificate unless the certificate is in use by one or more Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementDeleteMTlsCertificateAsync(String mtlsCertificateId, String accountId, final ApiCallback<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = mTlsCertificateManagementDeleteMTlsCertificateValidateBeforeCall(mtlsCertificateId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mTlsCertificateManagementGetMTlsCertificate
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementGetMTlsCertificateCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mtls_certificates/{mtls_certificate_id}"
            .replace("{" + "mtls_certificate_id" + "}", localVarApiClient.escapeString(mtlsCertificateId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mTlsCertificateManagementGetMTlsCertificateValidateBeforeCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mtlsCertificateId' is set
        if (mtlsCertificateId == null) {
            throw new ApiException("Missing the required parameter 'mtlsCertificateId' when calling mTlsCertificateManagementGetMTlsCertificate(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling mTlsCertificateManagementGetMTlsCertificate(Async)");
        }

        return mTlsCertificateManagementGetMTlsCertificateCall(mtlsCertificateId, accountId, _callback);

    }

    /**
     * Get mTLS certificate
     * Fetches a single mTLS certificate.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle mTlsCertificateManagementGetMTlsCertificate(String mtlsCertificateId, String accountId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> localVarResp = mTlsCertificateManagementGetMTlsCertificateWithHttpInfo(mtlsCertificateId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get mTLS certificate
     * Fetches a single mTLS certificate.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> mTlsCertificateManagementGetMTlsCertificateWithHttpInfo(String mtlsCertificateId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = mTlsCertificateManagementGetMTlsCertificateValidateBeforeCall(mtlsCertificateId, accountId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mTLS certificate (asynchronously)
     * Fetches a single mTLS certificate.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementGetMTlsCertificateAsync(String mtlsCertificateId, String accountId, final ApiCallback<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = mTlsCertificateManagementGetMTlsCertificateValidateBeforeCall(mtlsCertificateId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mTlsCertificateManagementListMTlsCertificateAssociations
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificate associations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificate associations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementListMTlsCertificateAssociationsCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mtls_certificates/{mtls_certificate_id}/associations"
            .replace("{" + "mtls_certificate_id" + "}", localVarApiClient.escapeString(mtlsCertificateId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mTlsCertificateManagementListMTlsCertificateAssociationsValidateBeforeCall(String mtlsCertificateId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mtlsCertificateId' is set
        if (mtlsCertificateId == null) {
            throw new ApiException("Missing the required parameter 'mtlsCertificateId' when calling mTlsCertificateManagementListMTlsCertificateAssociations(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling mTlsCertificateManagementListMTlsCertificateAssociations(Async)");
        }

        return mTlsCertificateManagementListMTlsCertificateAssociationsCall(mtlsCertificateId, accountId, _callback);

    }

    /**
     * List mTLS certificate associations
     * Lists all active associations between the certificate and Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return TlsCertificatesAndHostnamesAssociationResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificate associations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificate associations response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesAssociationResponseCollection mTlsCertificateManagementListMTlsCertificateAssociations(String mtlsCertificateId, String accountId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesAssociationResponseCollection> localVarResp = mTlsCertificateManagementListMTlsCertificateAssociationsWithHttpInfo(mtlsCertificateId, accountId);
        return localVarResp.getData();
    }

    /**
     * List mTLS certificate associations
     * Lists all active associations between the certificate and Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesAssociationResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificate associations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificate associations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesAssociationResponseCollection> mTlsCertificateManagementListMTlsCertificateAssociationsWithHttpInfo(String mtlsCertificateId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = mTlsCertificateManagementListMTlsCertificateAssociationsValidateBeforeCall(mtlsCertificateId, accountId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAssociationResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List mTLS certificate associations (asynchronously)
     * Lists all active associations between the certificate and Cloudflare services.
     * @param mtlsCertificateId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificate associations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificate associations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementListMTlsCertificateAssociationsAsync(String mtlsCertificateId, String accountId, final ApiCallback<TlsCertificatesAndHostnamesAssociationResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = mTlsCertificateManagementListMTlsCertificateAssociationsValidateBeforeCall(mtlsCertificateId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAssociationResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mTlsCertificateManagementListMTlsCertificates
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementListMTlsCertificatesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mtls_certificates"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mTlsCertificateManagementListMTlsCertificatesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling mTlsCertificateManagementListMTlsCertificates(Async)");
        }

        return mTlsCertificateManagementListMTlsCertificatesCall(accountId, _callback);

    }

    /**
     * List mTLS certificates
     * Lists all mTLS certificates.
     * @param accountId  (required)
     * @return TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection mTlsCertificateManagementListMTlsCertificates(String accountId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection> localVarResp = mTlsCertificateManagementListMTlsCertificatesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List mTLS certificates
     * Lists all mTLS certificates.
     * @param accountId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection> mTlsCertificateManagementListMTlsCertificatesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = mTlsCertificateManagementListMTlsCertificatesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List mTLS certificates (asynchronously)
     * Lists all mTLS certificates.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementListMTlsCertificatesAsync(String accountId, final ApiCallback<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = mTlsCertificateManagementListMTlsCertificatesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesMtlsManagementComponentsSchemasCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mTlsCertificateManagementUploadMTlsCertificate
     * @param accountId  (required)
     * @param mtlsCertificateManagementUploadMTlsCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementUploadMTlsCertificateCall(String accountId, MTlsCertificateManagementUploadMTlsCertificateRequest mtlsCertificateManagementUploadMTlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mtlsCertificateManagementUploadMTlsCertificateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mtls_certificates"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mTlsCertificateManagementUploadMTlsCertificateValidateBeforeCall(String accountId, MTlsCertificateManagementUploadMTlsCertificateRequest mtlsCertificateManagementUploadMTlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling mTlsCertificateManagementUploadMTlsCertificate(Async)");
        }

        // verify the required parameter 'mtlsCertificateManagementUploadMTlsCertificateRequest' is set
        if (mtlsCertificateManagementUploadMTlsCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'mtlsCertificateManagementUploadMTlsCertificateRequest' when calling mTlsCertificateManagementUploadMTlsCertificate(Async)");
        }

        return mTlsCertificateManagementUploadMTlsCertificateCall(accountId, mtlsCertificateManagementUploadMTlsCertificateRequest, _callback);

    }

    /**
     * Upload mTLS certificate
     * Upload a certificate that you want to use with mTLS-enabled Cloudflare services.
     * @param accountId  (required)
     * @param mtlsCertificateManagementUploadMTlsCertificateRequest  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSinglePost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSinglePost mTlsCertificateManagementUploadMTlsCertificate(String accountId, MTlsCertificateManagementUploadMTlsCertificateRequest mtlsCertificateManagementUploadMTlsCertificateRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSinglePost> localVarResp = mTlsCertificateManagementUploadMTlsCertificateWithHttpInfo(accountId, mtlsCertificateManagementUploadMTlsCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Upload mTLS certificate
     * Upload a certificate that you want to use with mTLS-enabled Cloudflare services.
     * @param accountId  (required)
     * @param mtlsCertificateManagementUploadMTlsCertificateRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSinglePost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSinglePost> mTlsCertificateManagementUploadMTlsCertificateWithHttpInfo(String accountId, MTlsCertificateManagementUploadMTlsCertificateRequest mtlsCertificateManagementUploadMTlsCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = mTlsCertificateManagementUploadMTlsCertificateValidateBeforeCall(accountId, mtlsCertificateManagementUploadMTlsCertificateRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSinglePost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload mTLS certificate (asynchronously)
     * Upload a certificate that you want to use with mTLS-enabled Cloudflare services.
     * @param accountId  (required)
     * @param mtlsCertificateManagementUploadMTlsCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mTlsCertificateManagementUploadMTlsCertificateAsync(String accountId, MTlsCertificateManagementUploadMTlsCertificateRequest mtlsCertificateManagementUploadMTlsCertificateRequest, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSinglePost> _callback) throws ApiException {

        okhttp3.Call localVarCall = mTlsCertificateManagementUploadMTlsCertificateValidateBeforeCall(accountId, mtlsCertificateManagementUploadMTlsCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSinglePost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
