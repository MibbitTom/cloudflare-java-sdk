/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import cloudflare.sdk.models.RadarGetAttacksLayer3Summary200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByBitrate200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByDuration200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByProtocol200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByVector200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesByBytes200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByDuration200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByVector200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByVertical200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroups200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopAttacks200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopIndustries200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopOriginLocations200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopTargetLocations200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopVerticals200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7Summary200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByHttpMethod200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByHttpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByManagedRules200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByMitigationProduct200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroup200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TopAttacks200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TopOriginAs200Response;
import cloudflare.sdk.models.RadarGetDnsAs112Timeseries200Response;
import cloudflare.sdk.models.RadarGetDnsAs112TopLocations404Response;
import cloudflare.sdk.models.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarAttacksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarAttacksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarAttacksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetAttacksLayer3Summary
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer3SummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get Layer 3 Attacks Summary
     * Percentage distribution of network protocols in layer 3/4 attacks over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3Summary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RadarGetAttacksLayer3Summary200Response radarGetAttacksLayer3Summary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3Summary200Response> localVarResp = radarGetAttacksLayer3SummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks Summary
     * Percentage distribution of network protocols in layer 3/4 attacks over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3Summary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RadarGetAttacksLayer3Summary200Response> radarGetAttacksLayer3SummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3Summary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks Summary (asynchronously)
     * Percentage distribution of network protocols in layer 3/4 attacks over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer3SummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3Summary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3Summary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3SummaryByBitrate
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByBitrateCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary/bitrate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryByBitrateValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryByBitrateCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);

    }

    /**
     * Get Attack Bitrate Summary
     * Percentage distribution of attacks by bitrate.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3SummaryByBitrate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3SummaryByBitrate200Response radarGetAttacksLayer3SummaryByBitrate(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3SummaryByBitrate200Response> localVarResp = radarGetAttacksLayer3SummaryByBitrateWithHttpInfo(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Attack Bitrate Summary
     * Percentage distribution of attacks by bitrate.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3SummaryByBitrate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3SummaryByBitrate200Response> radarGetAttacksLayer3SummaryByBitrateWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByBitrateValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByBitrate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attack Bitrate Summary (asynchronously)
     * Percentage distribution of attacks by bitrate.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByBitrateAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback<RadarGetAttacksLayer3SummaryByBitrate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByBitrateValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByBitrate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3SummaryByDuration
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByDurationCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary/duration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryByDurationValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryByDurationCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);

    }

    /**
     * Get Attack Durations Summary
     * Percentage distribution of attacks by duration.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3SummaryByDuration200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3SummaryByDuration200Response radarGetAttacksLayer3SummaryByDuration(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3SummaryByDuration200Response> localVarResp = radarGetAttacksLayer3SummaryByDurationWithHttpInfo(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Attack Durations Summary
     * Percentage distribution of attacks by duration.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3SummaryByDuration200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3SummaryByDuration200Response> radarGetAttacksLayer3SummaryByDurationWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByDurationValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByDuration200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attack Durations Summary (asynchronously)
     * Percentage distribution of attacks by duration.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByDurationAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback<RadarGetAttacksLayer3SummaryByDuration200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByDurationValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByDuration200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3SummaryByIpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByIpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryByIpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryByIpVersionCall(name, dateRange, dateStart, dateEnd, location, continent, protocol, direction, format, _callback);

    }

    /**
     * Get IP Versions Summary
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3SummaryByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3SummaryByIpVersion200Response radarGetAttacksLayer3SummaryByIpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3SummaryByIpVersion200Response> localVarResp = radarGetAttacksLayer3SummaryByIpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, location, continent, protocol, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get IP Versions Summary
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3SummaryByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3SummaryByIpVersion200Response> radarGetAttacksLayer3SummaryByIpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, protocol, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP Versions Summary (asynchronously)
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByIpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String direction, String format, final ApiCallback<RadarGetAttacksLayer3SummaryByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, protocol, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3SummaryByProtocol
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByProtocolCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary/protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryByProtocolValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryByProtocolCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, direction, format, _callback);

    }

    /**
     * Get Layer 3 Protocols Summary
     * Percentage distribution of attacks by protocol used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3SummaryByProtocol200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3SummaryByProtocol200Response radarGetAttacksLayer3SummaryByProtocol(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3SummaryByProtocol200Response> localVarResp = radarGetAttacksLayer3SummaryByProtocolWithHttpInfo(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Protocols Summary
     * Percentage distribution of attacks by protocol used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3SummaryByProtocol200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3SummaryByProtocol200Response> radarGetAttacksLayer3SummaryByProtocolWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByProtocol200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Protocols Summary (asynchronously)
     * Percentage distribution of attacks by protocol used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByProtocolAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String direction, String format, final ApiCallback<RadarGetAttacksLayer3SummaryByProtocol200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByProtocol200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3SummaryByVector
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByVectorCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary/vector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3SummaryByVectorValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3SummaryByVectorCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);

    }

    /**
     * Get Attack Vector Summary
     * Percentage distribution of attacks by vector.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3SummaryByVector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3SummaryByVector200Response radarGetAttacksLayer3SummaryByVector(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3SummaryByVector200Response> localVarResp = radarGetAttacksLayer3SummaryByVectorWithHttpInfo(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Attack Vector Summary
     * Percentage distribution of attacks by vector.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3SummaryByVector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3SummaryByVector200Response> radarGetAttacksLayer3SummaryByVectorWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByVectorValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByVector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attack Vector Summary (asynchronously)
     * Percentage distribution of attacks by vector.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3SummaryByVectorAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String direction, String format, final ApiCallback<RadarGetAttacksLayer3SummaryByVector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3SummaryByVectorValidateBeforeCall(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3SummaryByVector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesByBytes
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional)
     * @param metric  (optional, default to bytes)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesByBytesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String metric, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesByBytesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String metric, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesByBytesCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, protocol, normalization, metric, direction, format, _callback);

    }

    /**
     * Get Attacks By Bytes Summary
     * Get attacks change over time by bytes.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional)
     * @param metric  (optional, default to bytes)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesByBytes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesByBytes200Response radarGetAttacksLayer3TimeseriesByBytes(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String metric, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesByBytes200Response> localVarResp = radarGetAttacksLayer3TimeseriesByBytesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, protocol, normalization, metric, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Attacks By Bytes Summary
     * Get attacks change over time by bytes.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional)
     * @param metric  (optional, default to bytes)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesByBytes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesByBytes200Response> radarGetAttacksLayer3TimeseriesByBytesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String metric, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesByBytesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, protocol, normalization, metric, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesByBytes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attacks By Bytes Summary (asynchronously)
     * Get attacks change over time by bytes.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional)
     * @param metric  (optional, default to bytes)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesByBytesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String metric, String direction, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesByBytes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesByBytesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, protocol, normalization, metric, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesByBytes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByBitrate
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByBitrateCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/bitrate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByBitrateValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByBitrateCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, _callback);

    }

    /**
     * Get Attacks By Bitrate Time Series
     * Percentage distribution of attacks by bitrate over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response radarGetAttacksLayer3TimeseriesGroupByBitrate(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByBitrateWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Attacks By Bitrate Time Series
     * Percentage distribution of attacks by bitrate over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response> radarGetAttacksLayer3TimeseriesGroupByBitrateWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByBitrateValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attacks By Bitrate Time Series (asynchronously)
     * Percentage distribution of attacks by bitrate over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByBitrateAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByBitrateValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByDuration
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByDurationCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/duration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByDurationValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByDurationCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, _callback);

    }

    /**
     * Get Layer 3 Attack By Duration Time Series
     * Percentage distribution of attacks by duration over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByDuration200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByDuration200Response radarGetAttacksLayer3TimeseriesGroupByDuration(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByDuration200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByDurationWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attack By Duration Time Series
     * Percentage distribution of attacks by duration over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByDuration200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByDuration200Response> radarGetAttacksLayer3TimeseriesGroupByDurationWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByDurationValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByDuration200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attack By Duration Time Series (asynchronously)
     * Percentage distribution of attacks by duration over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByDurationAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByDuration200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByDurationValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByDuration200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByIndustry
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIndustryCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/industry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIndustryValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByIndustryCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By Target Industries Time Series
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response radarGetAttacksLayer3TimeseriesGroupByIndustry(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByIndustryWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By Target Industries Time Series
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> radarGetAttacksLayer3TimeseriesGroupByIndustryWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByIndustryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By Target Industries Time Series (asynchronously)
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIndustryAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByIndustryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByIpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByIpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, protocol, normalization, direction, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By IP Version Time Series
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response radarGetAttacksLayer3TimeseriesGroupByIpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByIpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, protocol, normalization, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By IP Version Time Series
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> radarGetAttacksLayer3TimeseriesGroupByIpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String normalization, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, protocol, normalization, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By IP Version Time Series (asynchronously)
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByIpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> protocol, String normalization, String direction, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, protocol, normalization, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByProtocol
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByProtocolCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByProtocolValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByProtocolCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By Protocol Timeseries
     * Percentage distribution of attacks by protocol used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response radarGetAttacksLayer3TimeseriesGroupByProtocol(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByProtocolWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By Protocol Timeseries
     * Percentage distribution of attacks by protocol used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response> radarGetAttacksLayer3TimeseriesGroupByProtocolWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By Protocol Timeseries (asynchronously)
     * Percentage distribution of attacks by protocol used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByProtocolAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByVector
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVectorCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/vector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVectorValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByVectorCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, limitPerGroup, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By Vector
     * Percentage distribution of attacks by vector used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByVector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByVector200Response radarGetAttacksLayer3TimeseriesGroupByVector(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVector200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByVectorWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By Vector
     * Percentage distribution of attacks by vector used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByVector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVector200Response> radarGetAttacksLayer3TimeseriesGroupByVectorWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByVectorValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By Vector (asynchronously)
     * Percentage distribution of attacks by vector used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVectorAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByVector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByVectorValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroupByVertical
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVerticalCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups/vertical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVerticalValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupByVerticalCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By Vertical Time Series
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByVertical200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByVertical200Response radarGetAttacksLayer3TimeseriesGroupByVertical(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupByVerticalWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By Vertical Time Series
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByVertical200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> radarGetAttacksLayer3TimeseriesGroupByVerticalWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByVerticalValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By Vertical Time Series (asynchronously)
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param direction  (optional, default to ORIGIN)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupByVerticalAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, String normalization, String direction, Integer limitPerGroup, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupByVerticalValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroups
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupsCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TimeseriesGroupsCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get Layer 3 Attacks By Network Protocol Time Series
     * Get a timeseries of the percentage distribution of network protocols in Layer 3/4 attacks.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RadarGetAttacksLayer3TimeseriesGroups200Response radarGetAttacksLayer3TimeseriesGroups(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroups200Response> localVarResp = radarGetAttacksLayer3TimeseriesGroupsWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 3 Attacks By Network Protocol Time Series
     * Get a timeseries of the percentage distribution of network protocols in Layer 3/4 attacks.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroups200Response> radarGetAttacksLayer3TimeseriesGroupsWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 3 Attacks By Network Protocol Time Series (asynchronously)
     * Get a timeseries of the percentage distribution of network protocols in Layer 3/4 attacks.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer3TimeseriesGroupsAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TopAttacks
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopAttacksCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String limitDirection, Integer limitPerLocation, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/top/attacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (limitDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitDirection", limitDirection));
        }

        if (limitPerLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerLocation", limitPerLocation));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TopAttacksValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String limitDirection, Integer limitPerLocation, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TopAttacksCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, limitDirection, limitPerLocation, format, _callback);

    }

    /**
     * Get top attack pairs (origin and target locations) of Layer 3 attacks
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 3 attacks (with billing country). You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopAttacks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopAttacks200Response radarGetAttacksLayer3TopAttacks(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String limitDirection, Integer limitPerLocation, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopAttacks200Response> localVarResp = radarGetAttacksLayer3TopAttacksWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, limitDirection, limitPerLocation, format);
        return localVarResp.getData();
    }

    /**
     * Get top attack pairs (origin and target locations) of Layer 3 attacks
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 3 attacks (with billing country). You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopAttacks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopAttacks200Response> radarGetAttacksLayer3TopAttacksWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String limitDirection, Integer limitPerLocation, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, limitDirection, limitPerLocation, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopAttacks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top attack pairs (origin and target locations) of Layer 3 attacks (asynchronously)
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 3 attacks (with billing country). You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopAttacksAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String limitDirection, Integer limitPerLocation, String format, final ApiCallback<RadarGetAttacksLayer3TopAttacks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, limitDirection, limitPerLocation, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopAttacks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TopIndustries
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopIndustriesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/top/industry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TopIndustriesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TopIndustriesCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);

    }

    /**
     * Get top Industry of attack
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopIndustries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopIndustries200Response radarGetAttacksLayer3TopIndustries(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopIndustries200Response> localVarResp = radarGetAttacksLayer3TopIndustriesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        return localVarResp.getData();
    }

    /**
     * Get top Industry of attack
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopIndustries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopIndustries200Response> radarGetAttacksLayer3TopIndustriesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TopIndustriesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopIndustries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top Industry of attack (asynchronously)
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopIndustriesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback<RadarGetAttacksLayer3TopIndustries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TopIndustriesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopIndustries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TopOriginLocations
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopOriginLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/top/locations/origin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TopOriginLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TopOriginLocationsCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);

    }

    /**
     * Get top origin locations of attack
     * Get the origin locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopOriginLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopOriginLocations200Response radarGetAttacksLayer3TopOriginLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopOriginLocations200Response> localVarResp = radarGetAttacksLayer3TopOriginLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        return localVarResp.getData();
    }

    /**
     * Get top origin locations of attack
     * Get the origin locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopOriginLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopOriginLocations200Response> radarGetAttacksLayer3TopOriginLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TopOriginLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopOriginLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top origin locations of attack (asynchronously)
     * Get the origin locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopOriginLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback<RadarGetAttacksLayer3TopOriginLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TopOriginLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopOriginLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TopTargetLocations
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopTargetLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/top/locations/target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TopTargetLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TopTargetLocationsCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);

    }

    /**
     * Get top target locations of attack
     * Get the target locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopTargetLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopTargetLocations200Response radarGetAttacksLayer3TopTargetLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopTargetLocations200Response> localVarResp = radarGetAttacksLayer3TopTargetLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        return localVarResp.getData();
    }

    /**
     * Get top target locations of attack
     * Get the target locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopTargetLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopTargetLocations200Response> radarGetAttacksLayer3TopTargetLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TopTargetLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopTargetLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top target locations of attack (asynchronously)
     * Get the target locations of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopTargetLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback<RadarGetAttacksLayer3TopTargetLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TopTargetLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopTargetLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer3TopVerticals
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopVerticalsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/top/vertical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (protocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "protocol", protocol));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer3TopVerticalsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer3TopVerticalsCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);

    }

    /**
     * Get top Verticals of attack
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopVerticals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopVerticals200Response radarGetAttacksLayer3TopVerticals(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopVerticals200Response> localVarResp = radarGetAttacksLayer3TopVerticalsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        return localVarResp.getData();
    }

    /**
     * Get top Verticals of attack
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopVerticals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopVerticals200Response> radarGetAttacksLayer3TopVerticalsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer3TopVerticalsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopVerticals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top Verticals of attack (asynchronously)
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param protocol  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer3TopVerticalsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, List<String> ipVersion, List<String> protocol, String format, final ApiCallback<RadarGetAttacksLayer3TopVerticals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer3TopVerticalsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopVerticals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7Summary
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer7SummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get Layer 7 Attacks Summary
     * Percentage distribution of mitigation techniques in Layer 7 attacks.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7Summary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RadarGetAttacksLayer7Summary200Response radarGetAttacksLayer7Summary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7Summary200Response> localVarResp = radarGetAttacksLayer7SummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks Summary
     * Percentage distribution of mitigation techniques in Layer 7 attacks.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7Summary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RadarGetAttacksLayer7Summary200Response> radarGetAttacksLayer7SummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7Summary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks Summary (asynchronously)
     * Percentage distribution of mitigation techniques in Layer 7 attacks.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer7SummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer7Summary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7Summary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7SummaryByHttpMethod
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByHttpMethodCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary/http_method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryByHttpMethodValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryByHttpMethodCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, format, _callback);

    }

    /**
     * Get HTTP Method Summary
     * Percentage distribution of attacks by http method used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7SummaryByHttpMethod200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7SummaryByHttpMethod200Response radarGetAttacksLayer7SummaryByHttpMethod(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7SummaryByHttpMethod200Response> localVarResp = radarGetAttacksLayer7SummaryByHttpMethodWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP Method Summary
     * Percentage distribution of attacks by http method used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7SummaryByHttpMethod200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7SummaryByHttpMethod200Response> radarGetAttacksLayer7SummaryByHttpMethodWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByHttpMethodValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByHttpMethod200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP Method Summary (asynchronously)
     * Percentage distribution of attacks by http method used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByHttpMethodAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String format, final ApiCallback<RadarGetAttacksLayer7SummaryByHttpMethod200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByHttpMethodValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByHttpMethod200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7SummaryByHttpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByHttpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryByHttpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryByHttpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, format, _callback);

    }

    /**
     * Get HTTP Version Summary
     * Percentage distribution of attacks by http version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7SummaryByHttpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7SummaryByHttpVersion200Response radarGetAttacksLayer7SummaryByHttpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7SummaryByHttpVersion200Response> localVarResp = radarGetAttacksLayer7SummaryByHttpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP Version Summary
     * Percentage distribution of attacks by http version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7SummaryByHttpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7SummaryByHttpVersion200Response> radarGetAttacksLayer7SummaryByHttpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByHttpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP Version Summary (asynchronously)
     * Percentage distribution of attacks by http version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByHttpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback<RadarGetAttacksLayer7SummaryByHttpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByHttpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7SummaryByIpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByIpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryByIpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryByIpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, format, _callback);

    }

    /**
     * Get Ip Version Summary
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7SummaryByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7SummaryByIpVersion200Response radarGetAttacksLayer7SummaryByIpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7SummaryByIpVersion200Response> localVarResp = radarGetAttacksLayer7SummaryByIpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, format);
        return localVarResp.getData();
    }

    /**
     * Get Ip Version Summary
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7SummaryByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7SummaryByIpVersion200Response> radarGetAttacksLayer7SummaryByIpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ip Version Summary (asynchronously)
     * Percentage distribution of attacks by ip version used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByIpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback<RadarGetAttacksLayer7SummaryByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7SummaryByManagedRules
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByManagedRulesCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary/managed_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryByManagedRulesValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryByManagedRulesCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, format, _callback);

    }

    /**
     * Get Managed Rules Summary
     * Percentage distribution of attacks by managed rules used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7SummaryByManagedRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7SummaryByManagedRules200Response radarGetAttacksLayer7SummaryByManagedRules(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7SummaryByManagedRules200Response> localVarResp = radarGetAttacksLayer7SummaryByManagedRulesWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, format);
        return localVarResp.getData();
    }

    /**
     * Get Managed Rules Summary
     * Percentage distribution of attacks by managed rules used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7SummaryByManagedRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7SummaryByManagedRules200Response> radarGetAttacksLayer7SummaryByManagedRulesWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByManagedRulesValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByManagedRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Managed Rules Summary (asynchronously)
     * Percentage distribution of attacks by managed rules used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByManagedRulesAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String format, final ApiCallback<RadarGetAttacksLayer7SummaryByManagedRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByManagedRulesValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByManagedRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7SummaryByMitigationProduct
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByMitigationProductCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary/mitigation_product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7SummaryByMitigationProductValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7SummaryByMitigationProductCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, format, _callback);

    }

    /**
     * Get Mitigation Product Summary
     * Percentage distribution of attacks by mitigation product used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7SummaryByMitigationProduct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7SummaryByMitigationProduct200Response radarGetAttacksLayer7SummaryByMitigationProduct(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7SummaryByMitigationProduct200Response> localVarResp = radarGetAttacksLayer7SummaryByMitigationProductWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, format);
        return localVarResp.getData();
    }

    /**
     * Get Mitigation Product Summary
     * Percentage distribution of attacks by mitigation product used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7SummaryByMitigationProduct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7SummaryByMitigationProduct200Response> radarGetAttacksLayer7SummaryByMitigationProductWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByMitigationProductValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByMitigationProduct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Mitigation Product Summary (asynchronously)
     * Percentage distribution of attacks by mitigation product used.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7SummaryByMitigationProductAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String format, final ApiCallback<RadarGetAttacksLayer7SummaryByMitigationProduct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7SummaryByMitigationProductValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7SummaryByMitigationProduct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7Timeseries
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param attack  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param normalization  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, List<String> continent, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (attack != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attack", attack));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, List<String> continent, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, continent, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks Time Series
     * Get a timeseries of Layer 7 attacks. Values represent HTTP requests and are normalized using min-max by default.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param attack  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param normalization  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112Timeseries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112Timeseries200Response radarGetAttacksLayer7Timeseries(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, List<String> continent, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112Timeseries200Response> localVarResp = radarGetAttacksLayer7TimeseriesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, continent, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks Time Series
     * Get a timeseries of Layer 7 attacks. Values represent HTTP requests and are normalized using min-max by default.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param attack  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param normalization  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112Timeseries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112Timeseries200Response> radarGetAttacksLayer7TimeseriesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, List<String> continent, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, continent, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112Timeseries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks Time Series (asynchronously)
     * Get a timeseries of Layer 7 attacks. Values represent HTTP requests and are normalized using min-max by default.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param attack  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param normalization  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, List<String> continent, String normalization, String format, final ApiCallback<RadarGetDnsAs112Timeseries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, continent, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112Timeseries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroup
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By Mitigation Technique Time Series
     * Get a time series of the percentual distribution of mitigation techniques, over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RadarGetAttacksLayer7TimeseriesGroup200Response radarGetAttacksLayer7TimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroup200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By Mitigation Technique Time Series
     * Get a time series of the percentual distribution of mitigation techniques, over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroup200Response> radarGetAttacksLayer7TimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By Mitigation Technique Time Series (asynchronously)
     * Get a time series of the percentual distribution of mitigation techniques, over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByHttpMethod
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpMethodCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/http_method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpMethodValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByHttpMethodCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By HTTP Method Time Series
     * Percentage distribution of attacks by http method used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response radarGetAttacksLayer7TimeseriesGroupByHttpMethod(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByHttpMethodWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By HTTP Method Time Series
     * Percentage distribution of attacks by http method used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response> radarGetAttacksLayer7TimeseriesGroupByHttpMethodWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByHttpMethodValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By HTTP Method Time Series (asynchronously)
     * Percentage distribution of attacks by http method used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpMethodAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> mitigationProduct, String normalization, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByHttpMethodValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByHttpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByHttpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By HTTP Version Time Series
     * Percentage distribution of attacks by http version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response radarGetAttacksLayer7TimeseriesGroupByHttpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByHttpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By HTTP Version Time Series
     * Percentage distribution of attacks by http version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response> radarGetAttacksLayer7TimeseriesGroupByHttpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By HTTP Version Time Series (asynchronously)
     * Percentage distribution of attacks by http version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByHttpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByIndustry
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIndustryCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/industry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIndustryValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByIndustryCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By Target Industries Time Series
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response radarGetAttacksLayer7TimeseriesGroupByIndustry(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByIndustryWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By Target Industries Time Series
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> radarGetAttacksLayer7TimeseriesGroupByIndustryWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByIndustryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By Target Industries Time Series (asynchronously)
     * Percentage distribution of attacks by industry used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIndustryAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByIndustryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByIpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByIpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By IP Version Time Series
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response radarGetAttacksLayer7TimeseriesGroupByIpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByIpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By IP Version Time Series
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response> radarGetAttacksLayer7TimeseriesGroupByIpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By IP Version Time Series (asynchronously)
     * Percentage distribution of attacks by ip version used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByIpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByManagedRules
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByManagedRulesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/managed_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByManagedRulesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByManagedRulesCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By Managed Rules Time Series
     * Percentage distribution of attacks by managed rules used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response radarGetAttacksLayer7TimeseriesGroupByManagedRules(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByManagedRulesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By Managed Rules Time Series
     * Percentage distribution of attacks by managed rules used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response> radarGetAttacksLayer7TimeseriesGroupByManagedRulesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByManagedRulesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By Managed Rules Time Series (asynchronously)
     * Percentage distribution of attacks by managed rules used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByManagedRulesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByManagedRulesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByMitigationProduct
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByMitigationProductCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String normalization, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/mitigation_product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByMitigationProductValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String normalization, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByMitigationProductCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, normalization, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By Mitigation Product Time Series
     * Percentage distribution of attacks by mitigation product used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response radarGetAttacksLayer7TimeseriesGroupByMitigationProduct(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String normalization, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByMitigationProductWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, normalization, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By Mitigation Product Time Series
     * Percentage distribution of attacks by mitigation product used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response> radarGetAttacksLayer7TimeseriesGroupByMitigationProductWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String normalization, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByMitigationProductValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, normalization, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By Mitigation Product Time Series (asynchronously)
     * Percentage distribution of attacks by mitigation product used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByMitigationProductAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, String normalization, String format, final ApiCallback<RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByMitigationProductValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, normalization, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroupByVertical
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByVerticalCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups/vertical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (httpMethod != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpMethod", httpMethod));
        }

        if (mitigationProduct != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mitigationProduct", mitigationProduct));
        }

        if (normalization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalization", normalization));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByVerticalValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TimeseriesGroupByVerticalCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, _callback);

    }

    /**
     * Get Layer 7 Attacks By Vertical Time Series
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByVertical200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByVertical200Response radarGetAttacksLayer7TimeseriesGroupByVertical(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> localVarResp = radarGetAttacksLayer7TimeseriesGroupByVerticalWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get Layer 7 Attacks By Vertical Time Series
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByVertical200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> radarGetAttacksLayer7TimeseriesGroupByVerticalWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByVerticalValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Layer 7 Attacks By Vertical Time Series (asynchronously)
     * Percentage distribution of attacks by vertical used over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param ipVersion  (optional)
     * @param httpVersion  (optional)
     * @param httpMethod  (optional)
     * @param mitigationProduct  (optional)
     * @param normalization  (optional, default to PERCENTAGE)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TimeseriesGroupByVerticalAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> ipVersion, List<String> httpVersion, List<String> httpMethod, List<String> mitigationProduct, String normalization, Integer limitPerGroup, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TimeseriesGroupByVerticalValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByVertical200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopAttacks
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param magnitude  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopAttacksCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String limitDirection, Integer limitPerLocation, String magnitude, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/attacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (limitDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitDirection", limitDirection));
        }

        if (limitPerLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerLocation", limitPerLocation));
        }

        if (magnitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magnitude", magnitude));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopAttacksValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String limitDirection, Integer limitPerLocation, String magnitude, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopAttacksCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, limitDirection, limitPerLocation, magnitude, format, _callback);

    }

    /**
     * Get Top Attack Pairs (origin and target locations) By Layer 7 Attacks
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param magnitude  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TopAttacks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TopAttacks200Response radarGetAttacksLayer7TopAttacks(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String limitDirection, Integer limitPerLocation, String magnitude, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TopAttacks200Response> localVarResp = radarGetAttacksLayer7TopAttacksWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, limitDirection, limitPerLocation, magnitude, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Attack Pairs (origin and target locations) By Layer 7 Attacks
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param magnitude  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TopAttacks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TopAttacks200Response> radarGetAttacksLayer7TopAttacksWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String limitDirection, Integer limitPerLocation, String magnitude, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, limitDirection, limitPerLocation, magnitude, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TopAttacks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Attack Pairs (origin and target locations) By Layer 7 Attacks (asynchronously)
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param limitDirection  (optional, default to ORIGIN)
     * @param limitPerLocation  (optional)
     * @param magnitude  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopAttacksAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String limitDirection, Integer limitPerLocation, String magnitude, String format, final ApiCallback<RadarGetAttacksLayer7TopAttacks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, limitDirection, limitPerLocation, magnitude, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TopAttacks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopIndustries
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopIndustriesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/industry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopIndustriesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopIndustriesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get top Industry of attack
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopIndustries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopIndustries200Response radarGetAttacksLayer7TopIndustries(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopIndustries200Response> localVarResp = radarGetAttacksLayer7TopIndustriesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get top Industry of attack
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopIndustries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopIndustries200Response> radarGetAttacksLayer7TopIndustriesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopIndustriesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopIndustries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top Industry of attack (asynchronously)
     * Get the Industry of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopIndustriesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3TopIndustries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopIndustriesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopIndustries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopOriginAs
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopOriginAsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/ases/origin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopOriginAsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopOriginAsCall(limit, name, dateRange, dateStart, dateEnd, location, continent, format, _callback);

    }

    /**
     * Get Top Origin Autonomous Systems By Layer 7 Attacks
     * Get the top origin Autonomous Systems of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin Autonomous Systems is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer7TopOriginAs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer7TopOriginAs200Response radarGetAttacksLayer7TopOriginAs(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer7TopOriginAs200Response> localVarResp = radarGetAttacksLayer7TopOriginAsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Origin Autonomous Systems By Layer 7 Attacks
     * Get the top origin Autonomous Systems of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin Autonomous Systems is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer7TopOriginAs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer7TopOriginAs200Response> radarGetAttacksLayer7TopOriginAsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopOriginAsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TopOriginAs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Origin Autonomous Systems By Layer 7 Attacks (asynchronously)
     * Get the top origin Autonomous Systems of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin Autonomous Systems is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopOriginAsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer7TopOriginAs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopOriginAsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer7TopOriginAs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopOriginLocation
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopOriginLocationCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/locations/origin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopOriginLocationValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopOriginLocationCall(limit, name, dateRange, dateStart, dateEnd, asn, continent, format, _callback);

    }

    /**
     * Get Top Origin Locations By Layer 7 Attacks
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopOriginLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopOriginLocations200Response radarGetAttacksLayer7TopOriginLocation(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopOriginLocations200Response> localVarResp = radarGetAttacksLayer7TopOriginLocationWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Origin Locations By Layer 7 Attacks
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopOriginLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopOriginLocations200Response> radarGetAttacksLayer7TopOriginLocationWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopOriginLocationValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopOriginLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Origin Locations By Layer 7 Attacks (asynchronously)
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopOriginLocationAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3TopOriginLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopOriginLocationValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopOriginLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopTargetLocation
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopTargetLocationCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/locations/target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopTargetLocationValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopTargetLocationCall(limit, name, dateRange, dateStart, dateEnd, continent, format, _callback);

    }

    /**
     * Get layer 7 top target locations
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#39;s billing country, when available.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopTargetLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopTargetLocations200Response radarGetAttacksLayer7TopTargetLocation(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopTargetLocations200Response> localVarResp = radarGetAttacksLayer7TopTargetLocationWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get layer 7 top target locations
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#39;s billing country, when available.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopTargetLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopTargetLocations200Response> radarGetAttacksLayer7TopTargetLocationWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopTargetLocationValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopTargetLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get layer 7 top target locations (asynchronously)
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#39;s billing country, when available.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopTargetLocationAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3TopTargetLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopTargetLocationValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopTargetLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetAttacksLayer7TopVerticals
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopVerticalsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/vertical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetAttacksLayer7TopVerticalsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback _callback) throws ApiException {
        return radarGetAttacksLayer7TopVerticalsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);

    }

    /**
     * Get top Verticals of attack
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TopVerticals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TopVerticals200Response radarGetAttacksLayer7TopVerticals(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TopVerticals200Response> localVarResp = radarGetAttacksLayer7TopVerticalsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        return localVarResp.getData();
    }

    /**
     * Get top Verticals of attack
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TopVerticals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TopVerticals200Response> radarGetAttacksLayer7TopVerticalsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetAttacksLayer7TopVerticalsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopVerticals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top Verticals of attack (asynchronously)
     * Get the Verticals of attacks.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetAttacksLayer7TopVerticalsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, String format, final ApiCallback<RadarGetAttacksLayer3TopVerticals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetAttacksLayer7TopVerticalsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TopVerticals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
