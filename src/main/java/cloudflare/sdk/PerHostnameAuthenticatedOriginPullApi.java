/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication4XXResponse;
import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest;
import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication4XXResponse;
import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullListCertificates4XXResponse;
import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate4XXResponse;
import cloudflare.sdk.models.PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesHostnameAopResponseCollection;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesHostnameAopSingleResponse;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PerHostnameAuthenticatedOriginPullApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PerHostnameAuthenticatedOriginPullApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PerHostnameAuthenticatedOriginPullApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames/certificates/{certificate_id}"
            .replace("{" + "certificate_id" + "}", localVarApiClient.escapeString(certificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateId' is set
        if (certificateId == null) {
            throw new ApiException("Missing the required parameter 'certificateId' when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(Async)");
        }

        return perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateCall(certificateId, zoneId, _callback);

    }

    /**
     * Delete Hostname Client Certificate
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(String certificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> localVarResp = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateWithHttpInfo(certificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Hostname Client Certificate
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateWithHttpInfo(String certificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(certificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Hostname Client Certificate (asynchronously)
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateAsync(String certificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(certificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable or Disable a Hostname for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable or Disable a Hostname for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationCall(String zoneId, PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(String zoneId, PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(Async)");
        }

        // verify the required parameter 'perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest' is set
        if (perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest' when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(Async)");
        }

        return perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationCall(zoneId, perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, _callback);

    }

    /**
     * Enable or Disable a Hostname for Client Authentication
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest  (required)
     * @return TlsCertificatesAndHostnamesHostnameAopResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable or Disable a Hostname for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable or Disable a Hostname for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesHostnameAopResponseCollection perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(String zoneId, PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesHostnameAopResponseCollection> localVarResp = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationWithHttpInfo(zoneId, perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest);
        return localVarResp.getData();
    }

    /**
     * Enable or Disable a Hostname for Client Authentication
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesHostnameAopResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable or Disable a Hostname for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable or Disable a Hostname for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesHostnameAopResponseCollection> perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationWithHttpInfo(String zoneId, PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(zoneId, perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAopResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable or Disable a Hostname for Client Authentication (asynchronously)
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable or Disable a Hostname for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Enable or Disable a Hostname for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationAsync(String zoneId, PerHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, final ApiCallback<TlsCertificatesAndHostnamesHostnameAopResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(zoneId, perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAopResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames/certificates/{certificate_id}"
            .replace("{" + "certificate_id" + "}", localVarApiClient.escapeString(certificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateId' is set
        if (certificateId == null) {
            throw new ApiException("Missing the required parameter 'certificateId' when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(Async)");
        }

        return perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateCall(certificateId, zoneId, _callback);

    }

    /**
     * Get the Hostname Client Certificate
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(String certificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> localVarResp = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateWithHttpInfo(certificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get the Hostname Client Certificate
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateWithHttpInfo(String certificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(certificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Hostname Client Certificate (asynchronously)
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateAsync(String certificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(certificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication
     * @param hostname  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Status for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Status for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationCall(String hostname, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames/{hostname}"
            .replace("{" + "hostname" + "}", localVarApiClient.escapeString(hostname.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(String hostname, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hostname' is set
        if (hostname == null) {
            throw new ApiException("Missing the required parameter 'hostname' when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(Async)");
        }

        return perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationCall(hostname, zoneId, _callback);

    }

    /**
     * Get the Hostname Status for Client Authentication
     * 
     * @param hostname  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesHostnameAopSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Status for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Status for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesHostnameAopSingleResponse perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(String hostname, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesHostnameAopSingleResponse> localVarResp = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationWithHttpInfo(hostname, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get the Hostname Status for Client Authentication
     * 
     * @param hostname  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesHostnameAopSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Status for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Status for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesHostnameAopSingleResponse> perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationWithHttpInfo(String hostname, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(hostname, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAopSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Hostname Status for Client Authentication (asynchronously)
     * 
     * @param hostname  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Hostname Status for Client Authentication response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Hostname Status for Client Authentication response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationAsync(String hostname, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesHostnameAopSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(hostname, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAopSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullListCertificates
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullListCertificatesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames/certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullListCertificates(Async)");
        }

        return perHostnameAuthenticatedOriginPullListCertificatesCall(zoneId, _callback);

    }

    /**
     * List Certificates
     * 
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection perHostnameAuthenticatedOriginPullListCertificates(String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> localVarResp = perHostnameAuthenticatedOriginPullListCertificatesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Certificates
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> perHostnameAuthenticatedOriginPullListCertificatesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Certificates (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullListCertificatesAsync(String zoneId, final ApiCallback<TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateCall(String zoneId, PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/hostnames/certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(String zoneId, PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(Async)");
        }

        // verify the required parameter 'perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest' is set
        if (perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest' when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(Async)");
        }

        return perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateCall(zoneId, perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, _callback);

    }

    /**
     * Upload a Hostname Client Certificate
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest  (required)
     * @return TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(String zoneId, PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> localVarResp = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateWithHttpInfo(zoneId, perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a Hostname Client Certificate
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateWithHttpInfo(String zoneId, PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(zoneId, perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a Hostname Client Certificate (asynchronously)
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param zoneId  (required)
     * @param perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a Hostname Client Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload a Hostname Client Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateAsync(String zoneId, PerHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, final ApiCallback<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(zoneId, perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
