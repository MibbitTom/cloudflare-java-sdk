/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response;
import cloudflare.sdk.models.DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier4XXResponse;
import cloudflare.sdk.models.DeleteAccountsAccountIdentifierLogpushValidateDestinationExists4XXResponse;
import cloudflare.sdk.models.GetAccountsAccountIdentifierLogpushDatasetsDatasetFields4XXResponse;
import cloudflare.sdk.models.GetAccountsAccountIdentifierLogpushDatasetsDatasetJobs4XXResponse;
import cloudflare.sdk.models.LogpushDestinationExistsResponse;
import cloudflare.sdk.models.LogpushGetOwnershipResponse;
import cloudflare.sdk.models.LogpushLogpushFieldResponseCollection;
import cloudflare.sdk.models.LogpushLogpushJobResponseCollection;
import cloudflare.sdk.models.LogpushLogpushJobResponseSingle;
import cloudflare.sdk.models.LogpushValidateOwnershipResponse;
import cloudflare.sdk.models.LogpushValidateResponse;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushJobs4XXResponse;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushJobsRequest;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushOwnership4XXResponse;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushOwnershipRequest;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushOwnershipValidate4XXResponse;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushOwnershipValidateRequest;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushValidateOrigin4XXResponse;
import cloudflare.sdk.models.PostAccountsAccountIdentifierLogpushValidateOriginRequest;
import cloudflare.sdk.models.PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogpushJobsForAnAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogpushJobsForAnAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogpushJobsForAnAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return deleteAccountsAccountIdentifierLogpushJobsJobIdentifierCall(jobId, accountId, _callback);

    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @return DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(Integer jobId, String accountId) throws ApiException {
        ApiResponse<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> localVarResp = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> deleteAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, null);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Logpush job (asynchronously)
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String accountId, final ApiCallback<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountsAccountIdentifierLogpushValidateDestinationExists
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/validate/destination/exists"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists(Async)");
        }

        return deleteAccountsAccountIdentifierLogpushValidateDestinationExistsCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);

    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return LogpushDestinationExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushDestinationExistsResponse deleteAccountsAccountIdentifierLogpushValidateDestinationExists(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        ApiResponse<LogpushDestinationExistsResponse> localVarResp = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsWithHttpInfo(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return ApiResponse&lt;LogpushDestinationExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushDestinationExistsResponse> deleteAccountsAccountIdentifierLogpushValidateDestinationExistsWithHttpInfo(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<LogpushDestinationExistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check destination exists (asynchronously)
     * Checks if there is an existing job with a destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsAsync(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback<LogpushDestinationExistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushDestinationExistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushDatasetsDatasetFields
     * @param datasetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsCall(String datasetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/datasets/{dataset_id}/fields"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(String datasetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields(Async)");
        }

        return getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsCall(datasetId, accountId, _callback);

    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @return LogpushLogpushFieldResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushFieldResponseCollection getAccountsAccountIdentifierLogpushDatasetsDatasetFields(String datasetId, String accountId) throws ApiException {
        ApiResponse<LogpushLogpushFieldResponseCollection> localVarResp = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(datasetId, accountId);
        return localVarResp.getData();
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LogpushLogpushFieldResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushFieldResponseCollection> getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(String datasetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(datasetId, accountId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushFieldResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List fields (asynchronously)
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsAsync(String datasetId, String accountId, final ApiCallback<LogpushLogpushFieldResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(datasetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushFieldResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushDatasetsDatasetJobs
     * @param datasetId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsCall(String datasetId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/datasets/{dataset_id}/jobs"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(String datasetId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(Async)");
        }

        return getAccountsAccountIdentifierLogpushDatasetsDatasetJobsCall(datasetId, accountId, _callback);

    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for an account for a dataset.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @return LogpushLogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseCollection getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(String datasetId, String accountId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseCollection> localVarResp = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(datasetId, accountId);
        return localVarResp.getData();
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for an account for a dataset.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseCollection> getAccountsAccountIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(String datasetId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(datasetId, accountId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Logpush jobs for a dataset (asynchronously)
     * Lists Logpush jobs for an account for a dataset.
     * @param datasetId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsAsync(String datasetId, String accountId, final ApiCallback<LogpushLogpushJobResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(datasetId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushJobs
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushJobsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/jobs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountsAccountIdentifierLogpushJobs(Async)");
        }

        return getAccountsAccountIdentifierLogpushJobsCall(accountId, _callback);

    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for an account.
     * @param accountId  (required)
     * @return LogpushLogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseCollection getAccountsAccountIdentifierLogpushJobs(String accountId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseCollection> localVarResp = getAccountsAccountIdentifierLogpushJobsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseCollection> getAccountsAccountIdentifierLogpushJobsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Logpush jobs (asynchronously)
     * Lists Logpush jobs for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushJobsAsync(String accountId, final ApiCallback<LogpushLogpushJobResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return getAccountsAccountIdentifierLogpushJobsJobIdentifierCall(jobId, accountId, _callback);

    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle getAccountsAccountIdentifierLogpushJobsJobIdentifier(Integer jobId, String accountId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = getAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> getAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Logpush job details (asynchronously)
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String accountId, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushJobs
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushJobsCall(String accountId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushJobsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/jobs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(String accountId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountsAccountIdentifierLogpushJobs(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushJobsRequest' is set
        if (postAccountsAccountIdentifierLogpushJobsRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushJobsRequest' when calling postAccountsAccountIdentifierLogpushJobs(Async)");
        }

        return postAccountsAccountIdentifierLogpushJobsCall(accountId, postAccountsAccountIdentifierLogpushJobsRequest, _callback);

    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for an account.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle postAccountsAccountIdentifierLogpushJobs(String accountId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = postAccountsAccountIdentifierLogpushJobsWithHttpInfo(accountId, postAccountsAccountIdentifierLogpushJobsRequest);
        return localVarResp.getData();
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for an account.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> postAccountsAccountIdentifierLogpushJobsWithHttpInfo(String accountId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest) throws ApiException {
        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushJobsRequest, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Logpush job (asynchronously)
     * Creates a new Logpush job for an account.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushJobsAsync(String accountId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushJobsRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushOwnership
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/ownership"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountsAccountIdentifierLogpushOwnership(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' when calling postAccountsAccountIdentifierLogpushOwnership(Async)");
        }

        return postAccountsAccountIdentifierLogpushOwnershipCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);

    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return LogpushGetOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushGetOwnershipResponse postAccountsAccountIdentifierLogpushOwnership(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        ApiResponse<LogpushGetOwnershipResponse> localVarResp = postAccountsAccountIdentifierLogpushOwnershipWithHttpInfo(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return ApiResponse&lt;LogpushGetOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushGetOwnershipResponse> postAccountsAccountIdentifierLogpushOwnershipWithHttpInfo(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<LogpushGetOwnershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ownership challenge (asynchronously)
     * Gets a new ownership challenge sent to your destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipAsync(String accountId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback<LogpushGetOwnershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushGetOwnershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushOwnershipValidate
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipValidateCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipValidateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/ownership/validate"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(String accountId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountsAccountIdentifierLogpushOwnershipValidate(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipValidateRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipValidateRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipValidateRequest' when calling postAccountsAccountIdentifierLogpushOwnershipValidate(Async)");
        }

        return postAccountsAccountIdentifierLogpushOwnershipValidateCall(accountId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, _callback);

    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @return LogpushValidateOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushValidateOwnershipResponse postAccountsAccountIdentifierLogpushOwnershipValidate(String accountId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest) throws ApiException {
        ApiResponse<LogpushValidateOwnershipResponse> localVarResp = postAccountsAccountIdentifierLogpushOwnershipValidateWithHttpInfo(accountId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest);
        return localVarResp.getData();
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @return ApiResponse&lt;LogpushValidateOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushValidateOwnershipResponse> postAccountsAccountIdentifierLogpushOwnershipValidateWithHttpInfo(String accountId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, null);
        Type localVarReturnType = new TypeToken<LogpushValidateOwnershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate ownership challenge (asynchronously)
     * Validates ownership challenge of the destination.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushOwnershipValidateAsync(String accountId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback<LogpushValidateOwnershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushValidateOwnershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushValidateOrigin
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushValidateOriginCall(String accountId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushValidateOriginRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/validate/origin"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(String accountId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountsAccountIdentifierLogpushValidateOrigin(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushValidateOriginRequest' is set
        if (postAccountsAccountIdentifierLogpushValidateOriginRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushValidateOriginRequest' when calling postAccountsAccountIdentifierLogpushValidateOrigin(Async)");
        }

        return postAccountsAccountIdentifierLogpushValidateOriginCall(accountId, postAccountsAccountIdentifierLogpushValidateOriginRequest, _callback);

    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @return LogpushValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushValidateResponse postAccountsAccountIdentifierLogpushValidateOrigin(String accountId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest) throws ApiException {
        ApiResponse<LogpushValidateResponse> localVarResp = postAccountsAccountIdentifierLogpushValidateOriginWithHttpInfo(accountId, postAccountsAccountIdentifierLogpushValidateOriginRequest);
        return localVarResp.getData();
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @return ApiResponse&lt;LogpushValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushValidateResponse> postAccountsAccountIdentifierLogpushValidateOriginWithHttpInfo(String accountId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest) throws ApiException {
        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushValidateOriginRequest, null);
        Type localVarReturnType = new TypeToken<LogpushValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate origin (asynchronously)
     * Validates logpull origin with logpull_options.
     * @param accountId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAccountsAccountIdentifierLogpushValidateOriginAsync(String accountId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback<LogpushValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(accountId, postAccountsAccountIdentifierLogpushValidateOriginRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param accountId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String accountId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String accountId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest' is set
        if (putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return putAccountsAccountIdentifierLogpushJobsJobIdentifierCall(jobId, accountId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, _callback);

    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle putAccountsAccountIdentifierLogpushJobsJobIdentifier(Integer jobId, String accountId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = putAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, accountId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest);
        return localVarResp.getData();
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> putAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String accountId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest) throws ApiException {
        okhttp3.Call localVarCall = putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Logpush job (asynchronously)
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param accountId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String accountId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, accountId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
