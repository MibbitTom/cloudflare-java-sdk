/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.StreamApiResponseCommonFailure;
import cloudflare.sdk.models.StreamDeletedResponse;
import cloudflare.sdk.models.StreamWebhookRequest;
import cloudflare.sdk.models.StreamWebhookResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamWebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamWebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamWebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamWebhookCreateWebhooks
     * @param accountId  (required)
     * @param streamWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookCreateWebhooksCall(String accountId, StreamWebhookRequest streamWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamWebhookRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/webhook"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamWebhookCreateWebhooksValidateBeforeCall(String accountId, StreamWebhookRequest streamWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamWebhookCreateWebhooks(Async)");
        }

        // verify the required parameter 'streamWebhookRequest' is set
        if (streamWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'streamWebhookRequest' when calling streamWebhookCreateWebhooks(Async)");
        }

        return streamWebhookCreateWebhooksCall(accountId, streamWebhookRequest, _callback);

    }

    /**
     * Create webhooks
     * Creates a webhook notification.
     * @param accountId  (required)
     * @param streamWebhookRequest  (required)
     * @return StreamWebhookResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamWebhookResponseSingle streamWebhookCreateWebhooks(String accountId, StreamWebhookRequest streamWebhookRequest) throws ApiException {
        ApiResponse<StreamWebhookResponseSingle> localVarResp = streamWebhookCreateWebhooksWithHttpInfo(accountId, streamWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Create webhooks
     * Creates a webhook notification.
     * @param accountId  (required)
     * @param streamWebhookRequest  (required)
     * @return ApiResponse&lt;StreamWebhookResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamWebhookResponseSingle> streamWebhookCreateWebhooksWithHttpInfo(String accountId, StreamWebhookRequest streamWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = streamWebhookCreateWebhooksValidateBeforeCall(accountId, streamWebhookRequest, null);
        Type localVarReturnType = new TypeToken<StreamWebhookResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create webhooks (asynchronously)
     * Creates a webhook notification.
     * @param accountId  (required)
     * @param streamWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookCreateWebhooksAsync(String accountId, StreamWebhookRequest streamWebhookRequest, final ApiCallback<StreamWebhookResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamWebhookCreateWebhooksValidateBeforeCall(accountId, streamWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamWebhookResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamWebhookDeleteWebhooks
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookDeleteWebhooksCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/webhook"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamWebhookDeleteWebhooksValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamWebhookDeleteWebhooks(Async)");
        }

        return streamWebhookDeleteWebhooksCall(accountId, _callback);

    }

    /**
     * Delete webhooks
     * Deletes a webhook.
     * @param accountId  (required)
     * @return StreamDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamDeletedResponse streamWebhookDeleteWebhooks(String accountId) throws ApiException {
        ApiResponse<StreamDeletedResponse> localVarResp = streamWebhookDeleteWebhooksWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Delete webhooks
     * Deletes a webhook.
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamDeletedResponse> streamWebhookDeleteWebhooksWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamWebhookDeleteWebhooksValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete webhooks (asynchronously)
     * Deletes a webhook.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookDeleteWebhooksAsync(String accountId, final ApiCallback<StreamDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamWebhookDeleteWebhooksValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamWebhookViewWebhooks
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> View webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookViewWebhooksCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/webhook"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamWebhookViewWebhooksValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamWebhookViewWebhooks(Async)");
        }

        return streamWebhookViewWebhooksCall(accountId, _callback);

    }

    /**
     * View webhooks
     * Retrieves a list of webhooks.
     * @param accountId  (required)
     * @return StreamWebhookResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> View webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamWebhookResponseSingle streamWebhookViewWebhooks(String accountId) throws ApiException {
        ApiResponse<StreamWebhookResponseSingle> localVarResp = streamWebhookViewWebhooksWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * View webhooks
     * Retrieves a list of webhooks.
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamWebhookResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> View webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamWebhookResponseSingle> streamWebhookViewWebhooksWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamWebhookViewWebhooksValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<StreamWebhookResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View webhooks (asynchronously)
     * Retrieves a list of webhooks.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> View webhooks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> View webhooks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamWebhookViewWebhooksAsync(String accountId, final ApiCallback<StreamWebhookResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamWebhookViewWebhooksValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamWebhookResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
