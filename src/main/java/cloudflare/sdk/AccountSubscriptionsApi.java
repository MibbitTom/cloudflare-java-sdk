/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccountSubscriptionsCreateSubscription4XXResponse;
import cloudflare.sdk.models.AccountSubscriptionsDeleteSubscription200Response;
import cloudflare.sdk.models.AccountSubscriptionsDeleteSubscription4XXResponse;
import cloudflare.sdk.models.AccountSubscriptionsListSubscriptions4XXResponse;
import cloudflare.sdk.models.BillSubsApiAccountSubscriptionResponseCollection;
import cloudflare.sdk.models.BillSubsApiAccountSubscriptionResponseSingle;
import cloudflare.sdk.models.BillSubsApiSubscriptionV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountSubscriptionsCreateSubscription
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsCreateSubscriptionCall(String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billSubsApiSubscriptionV2;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/subscriptions"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSubscriptionsCreateSubscriptionValidateBeforeCall(String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountSubscriptionsCreateSubscription(Async)");
        }

        // verify the required parameter 'billSubsApiSubscriptionV2' is set
        if (billSubsApiSubscriptionV2 == null) {
            throw new ApiException("Missing the required parameter 'billSubsApiSubscriptionV2' when calling accountSubscriptionsCreateSubscription(Async)");
        }

        return accountSubscriptionsCreateSubscriptionCall(accountIdentifier, billSubsApiSubscriptionV2, _callback);

    }

    /**
     * Create Subscription
     * Creates an account subscription.
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @return BillSubsApiAccountSubscriptionResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public BillSubsApiAccountSubscriptionResponseSingle accountSubscriptionsCreateSubscription(String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2) throws ApiException {
        ApiResponse<BillSubsApiAccountSubscriptionResponseSingle> localVarResp = accountSubscriptionsCreateSubscriptionWithHttpInfo(accountIdentifier, billSubsApiSubscriptionV2);
        return localVarResp.getData();
    }

    /**
     * Create Subscription
     * Creates an account subscription.
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @return ApiResponse&lt;BillSubsApiAccountSubscriptionResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillSubsApiAccountSubscriptionResponseSingle> accountSubscriptionsCreateSubscriptionWithHttpInfo(String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2) throws ApiException {
        okhttp3.Call localVarCall = accountSubscriptionsCreateSubscriptionValidateBeforeCall(accountIdentifier, billSubsApiSubscriptionV2, null);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Subscription (asynchronously)
     * Creates an account subscription.
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsCreateSubscriptionAsync(String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback<BillSubsApiAccountSubscriptionResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSubscriptionsCreateSubscriptionValidateBeforeCall(accountIdentifier, billSubsApiSubscriptionV2, _callback);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountSubscriptionsDeleteSubscription
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsDeleteSubscriptionCall(String subscriptionIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/subscriptions/{subscription_identifier}"
            .replace("{" + "subscription_identifier" + "}", localVarApiClient.escapeString(subscriptionIdentifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSubscriptionsDeleteSubscriptionValidateBeforeCall(String subscriptionIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionIdentifier' is set
        if (subscriptionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'subscriptionIdentifier' when calling accountSubscriptionsDeleteSubscription(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountSubscriptionsDeleteSubscription(Async)");
        }

        return accountSubscriptionsDeleteSubscriptionCall(subscriptionIdentifier, accountIdentifier, _callback);

    }

    /**
     * Delete Subscription
     * Deletes an account&#39;s subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return AccountSubscriptionsDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccountSubscriptionsDeleteSubscription200Response accountSubscriptionsDeleteSubscription(String subscriptionIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<AccountSubscriptionsDeleteSubscription200Response> localVarResp = accountSubscriptionsDeleteSubscriptionWithHttpInfo(subscriptionIdentifier, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete Subscription
     * Deletes an account&#39;s subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;AccountSubscriptionsDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSubscriptionsDeleteSubscription200Response> accountSubscriptionsDeleteSubscriptionWithHttpInfo(String subscriptionIdentifier, String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = accountSubscriptionsDeleteSubscriptionValidateBeforeCall(subscriptionIdentifier, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<AccountSubscriptionsDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Subscription (asynchronously)
     * Deletes an account&#39;s subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsDeleteSubscriptionAsync(String subscriptionIdentifier, String accountIdentifier, final ApiCallback<AccountSubscriptionsDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSubscriptionsDeleteSubscriptionValidateBeforeCall(subscriptionIdentifier, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<AccountSubscriptionsDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountSubscriptionsListSubscriptions
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Subscriptions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Subscriptions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsListSubscriptionsCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/subscriptions"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSubscriptionsListSubscriptionsValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountSubscriptionsListSubscriptions(Async)");
        }

        return accountSubscriptionsListSubscriptionsCall(accountIdentifier, _callback);

    }

    /**
     * List Subscriptions
     * Lists all of an account&#39;s subscriptions.
     * @param accountIdentifier  (required)
     * @return BillSubsApiAccountSubscriptionResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Subscriptions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Subscriptions response failure </td><td>  -  </td></tr>
     </table>
     */
    public BillSubsApiAccountSubscriptionResponseCollection accountSubscriptionsListSubscriptions(String accountIdentifier) throws ApiException {
        ApiResponse<BillSubsApiAccountSubscriptionResponseCollection> localVarResp = accountSubscriptionsListSubscriptionsWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * List Subscriptions
     * Lists all of an account&#39;s subscriptions.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;BillSubsApiAccountSubscriptionResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Subscriptions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Subscriptions response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillSubsApiAccountSubscriptionResponseCollection> accountSubscriptionsListSubscriptionsWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = accountSubscriptionsListSubscriptionsValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Subscriptions (asynchronously)
     * Lists all of an account&#39;s subscriptions.
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Subscriptions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Subscriptions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsListSubscriptionsAsync(String accountIdentifier, final ApiCallback<BillSubsApiAccountSubscriptionResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSubscriptionsListSubscriptionsValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountSubscriptionsUpdateSubscription
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsUpdateSubscriptionCall(String subscriptionIdentifier, String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billSubsApiSubscriptionV2;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/subscriptions/{subscription_identifier}"
            .replace("{" + "subscription_identifier" + "}", localVarApiClient.escapeString(subscriptionIdentifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSubscriptionsUpdateSubscriptionValidateBeforeCall(String subscriptionIdentifier, String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionIdentifier' is set
        if (subscriptionIdentifier == null) {
            throw new ApiException("Missing the required parameter 'subscriptionIdentifier' when calling accountSubscriptionsUpdateSubscription(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountSubscriptionsUpdateSubscription(Async)");
        }

        // verify the required parameter 'billSubsApiSubscriptionV2' is set
        if (billSubsApiSubscriptionV2 == null) {
            throw new ApiException("Missing the required parameter 'billSubsApiSubscriptionV2' when calling accountSubscriptionsUpdateSubscription(Async)");
        }

        return accountSubscriptionsUpdateSubscriptionCall(subscriptionIdentifier, accountIdentifier, billSubsApiSubscriptionV2, _callback);

    }

    /**
     * Update Subscription
     * Updates an account subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @return BillSubsApiAccountSubscriptionResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public BillSubsApiAccountSubscriptionResponseSingle accountSubscriptionsUpdateSubscription(String subscriptionIdentifier, String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2) throws ApiException {
        ApiResponse<BillSubsApiAccountSubscriptionResponseSingle> localVarResp = accountSubscriptionsUpdateSubscriptionWithHttpInfo(subscriptionIdentifier, accountIdentifier, billSubsApiSubscriptionV2);
        return localVarResp.getData();
    }

    /**
     * Update Subscription
     * Updates an account subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @return ApiResponse&lt;BillSubsApiAccountSubscriptionResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillSubsApiAccountSubscriptionResponseSingle> accountSubscriptionsUpdateSubscriptionWithHttpInfo(String subscriptionIdentifier, String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2) throws ApiException {
        okhttp3.Call localVarCall = accountSubscriptionsUpdateSubscriptionValidateBeforeCall(subscriptionIdentifier, accountIdentifier, billSubsApiSubscriptionV2, null);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription (asynchronously)
     * Updates an account subscription.
     * @param subscriptionIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param billSubsApiSubscriptionV2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Subscription response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Subscription response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSubscriptionsUpdateSubscriptionAsync(String subscriptionIdentifier, String accountIdentifier, BillSubsApiSubscriptionV2 billSubsApiSubscriptionV2, final ApiCallback<BillSubsApiAccountSubscriptionResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSubscriptionsUpdateSubscriptionValidateBeforeCall(subscriptionIdentifier, accountIdentifier, billSubsApiSubscriptionV2, _callback);
        Type localVarReturnType = new TypeToken<BillSubsApiAccountSubscriptionResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
