/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.DwebConfigApiResponseSingleId;
import cloudflare.sdk.models.DwebConfigCollectionResponse;
import cloudflare.sdk.models.DwebConfigContentListDetailsResponse;
import cloudflare.sdk.models.DwebConfigContentListEntryCollectionResponse;
import cloudflare.sdk.models.DwebConfigContentListEntryCreateRequest;
import cloudflare.sdk.models.DwebConfigContentListEntrySingleResponse;
import cloudflare.sdk.models.DwebConfigContentListUpdateRequest;
import cloudflare.sdk.models.DwebConfigCreateRequest;
import cloudflare.sdk.models.DwebConfigModifyRequest;
import cloudflare.sdk.models.DwebConfigSingleResponse;
import cloudflare.sdk.models.Web3HostnameCreateIpfsUniversalPathGatewayContentListEntry5XXResponse;
import cloudflare.sdk.models.Web3HostnameCreateWeb3Hostname5XXResponse;
import cloudflare.sdk.models.Web3HostnameDeleteWeb3Hostname5XXResponse;
import cloudflare.sdk.models.Web3HostnameIpfsUniversalPathGatewayContentListDetails5XXResponse;
import cloudflare.sdk.models.Web3HostnameListIpfsUniversalPathGatewayContentListEntries5XXResponse;
import cloudflare.sdk.models.Web3HostnameListWeb3Hostnames5XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Web3HostnameApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Web3HostnameApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Web3HostnameApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for web3HostnameCreateIpfsUniversalPathGatewayContentListEntry
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryCall(String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dwebConfigContentListEntryCreateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'dwebConfigContentListEntryCreateRequest' is set
        if (dwebConfigContentListEntryCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'dwebConfigContentListEntryCreateRequest' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        return web3HostnameCreateIpfsUniversalPathGatewayContentListEntryCall(identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, _callback);

    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @return DwebConfigContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListEntrySingleResponse web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest) throws ApiException {
        ApiResponse<DwebConfigContentListEntrySingleResponse> localVarResp = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryWithHttpInfo(identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @return ApiResponse&lt;DwebConfigContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListEntrySingleResponse> web3HostnameCreateIpfsUniversalPathGatewayContentListEntryWithHttpInfo(String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryAsync(String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback<DwebConfigContentListEntrySingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameCreateWeb3Hostname
     * @param zoneIdentifier  (required)
     * @param dwebConfigCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameCreateWeb3HostnameCall(String zoneIdentifier, DwebConfigCreateRequest dwebConfigCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dwebConfigCreateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameCreateWeb3HostnameValidateBeforeCall(String zoneIdentifier, DwebConfigCreateRequest dwebConfigCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameCreateWeb3Hostname(Async)");
        }

        // verify the required parameter 'dwebConfigCreateRequest' is set
        if (dwebConfigCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'dwebConfigCreateRequest' when calling web3HostnameCreateWeb3Hostname(Async)");
        }

        return web3HostnameCreateWeb3HostnameCall(zoneIdentifier, dwebConfigCreateRequest, _callback);

    }

    /**
     * Create Web3 Hostname
     * 
     * @param zoneIdentifier  (required)
     * @param dwebConfigCreateRequest  (required)
     * @return DwebConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigSingleResponse web3HostnameCreateWeb3Hostname(String zoneIdentifier, DwebConfigCreateRequest dwebConfigCreateRequest) throws ApiException {
        ApiResponse<DwebConfigSingleResponse> localVarResp = web3HostnameCreateWeb3HostnameWithHttpInfo(zoneIdentifier, dwebConfigCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Web3 Hostname
     * 
     * @param zoneIdentifier  (required)
     * @param dwebConfigCreateRequest  (required)
     * @return ApiResponse&lt;DwebConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigSingleResponse> web3HostnameCreateWeb3HostnameWithHttpInfo(String zoneIdentifier, DwebConfigCreateRequest dwebConfigCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameCreateWeb3HostnameValidateBeforeCall(zoneIdentifier, dwebConfigCreateRequest, null);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Web3 Hostname (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param dwebConfigCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Create Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameCreateWeb3HostnameAsync(String zoneIdentifier, DwebConfigCreateRequest dwebConfigCreateRequest, final ApiCallback<DwebConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameCreateWeb3HostnameValidateBeforeCall(zoneIdentifier, dwebConfigCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replace("{" + "content_list_entry_identifier" + "}", localVarApiClient.escapeString(contentListEntryIdentifier.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        return web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryCall(contentListEntryIdentifier, identifier, zoneIdentifier, _callback);

    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigApiResponseSingleId web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigApiResponseSingleId> localVarResp = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryWithHttpInfo(contentListEntryIdentifier, identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigApiResponseSingleId> web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryWithHttpInfo(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryAsync(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback<DwebConfigApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameDeleteWeb3Hostname
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameDeleteWeb3HostnameCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameDeleteWeb3HostnameValidateBeforeCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameDeleteWeb3Hostname(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameDeleteWeb3Hostname(Async)");
        }

        return web3HostnameDeleteWeb3HostnameCall(identifier, zoneIdentifier, _callback);

    }

    /**
     * Delete Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigApiResponseSingleId web3HostnameDeleteWeb3Hostname(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigApiResponseSingleId> localVarResp = web3HostnameDeleteWeb3HostnameWithHttpInfo(identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigApiResponseSingleId> web3HostnameDeleteWeb3HostnameWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameDeleteWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Web3 Hostname (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Delete Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameDeleteWeb3HostnameAsync(String identifier, String zoneIdentifier, final ApiCallback<DwebConfigApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameDeleteWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameEditIpfsUniversalPathGatewayContentListEntry
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dwebConfigContentListEntryCreateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replace("{" + "content_list_entry_identifier" + "}", localVarApiClient.escapeString(contentListEntryIdentifier.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        // verify the required parameter 'dwebConfigContentListEntryCreateRequest' is set
        if (dwebConfigContentListEntryCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'dwebConfigContentListEntryCreateRequest' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }

        return web3HostnameEditIpfsUniversalPathGatewayContentListEntryCall(contentListEntryIdentifier, identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, _callback);

    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @return DwebConfigContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListEntrySingleResponse web3HostnameEditIpfsUniversalPathGatewayContentListEntry(String contentListEntryIdentifier, String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest) throws ApiException {
        ApiResponse<DwebConfigContentListEntrySingleResponse> localVarResp = web3HostnameEditIpfsUniversalPathGatewayContentListEntryWithHttpInfo(contentListEntryIdentifier, identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @return ApiResponse&lt;DwebConfigContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListEntrySingleResponse> web3HostnameEditIpfsUniversalPathGatewayContentListEntryWithHttpInfo(String contentListEntryIdentifier, String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListEntryCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit IPFS Universal Path Gateway Content List Entry response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit IPFS Universal Path Gateway Content List Entry response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryAsync(String contentListEntryIdentifier, String identifier, String zoneIdentifier, DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest, final ApiCallback<DwebConfigContentListEntrySingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameEditWeb3Hostname
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigModifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameEditWeb3HostnameCall(String identifier, String zoneIdentifier, DwebConfigModifyRequest dwebConfigModifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dwebConfigModifyRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameEditWeb3HostnameValidateBeforeCall(String identifier, String zoneIdentifier, DwebConfigModifyRequest dwebConfigModifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameEditWeb3Hostname(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameEditWeb3Hostname(Async)");
        }

        // verify the required parameter 'dwebConfigModifyRequest' is set
        if (dwebConfigModifyRequest == null) {
            throw new ApiException("Missing the required parameter 'dwebConfigModifyRequest' when calling web3HostnameEditWeb3Hostname(Async)");
        }

        return web3HostnameEditWeb3HostnameCall(identifier, zoneIdentifier, dwebConfigModifyRequest, _callback);

    }

    /**
     * Edit Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigModifyRequest  (required)
     * @return DwebConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigSingleResponse web3HostnameEditWeb3Hostname(String identifier, String zoneIdentifier, DwebConfigModifyRequest dwebConfigModifyRequest) throws ApiException {
        ApiResponse<DwebConfigSingleResponse> localVarResp = web3HostnameEditWeb3HostnameWithHttpInfo(identifier, zoneIdentifier, dwebConfigModifyRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigModifyRequest  (required)
     * @return ApiResponse&lt;DwebConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigSingleResponse> web3HostnameEditWeb3HostnameWithHttpInfo(String identifier, String zoneIdentifier, DwebConfigModifyRequest dwebConfigModifyRequest) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameEditWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, dwebConfigModifyRequest, null);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Web3 Hostname (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigModifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Web3 Hostname response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Edit Web3 Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameEditWeb3HostnameAsync(String identifier, String zoneIdentifier, DwebConfigModifyRequest dwebConfigModifyRequest, final ApiCallback<DwebConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameEditWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, dwebConfigModifyRequest, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameIpfsUniversalPathGatewayContentListDetails
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameIpfsUniversalPathGatewayContentListDetails(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListDetails(Async)");
        }

        return web3HostnameIpfsUniversalPathGatewayContentListDetailsCall(identifier, zoneIdentifier, _callback);

    }

    /**
     * IPFS Universal Path Gateway Content List Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigContentListDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListDetailsResponse web3HostnameIpfsUniversalPathGatewayContentListDetails(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigContentListDetailsResponse> localVarResp = web3HostnameIpfsUniversalPathGatewayContentListDetailsWithHttpInfo(identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * IPFS Universal Path Gateway Content List Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigContentListDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListDetailsResponse> web3HostnameIpfsUniversalPathGatewayContentListDetailsWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IPFS Universal Path Gateway Content List Details (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsAsync(String identifier, String zoneIdentifier, final ApiCallback<DwebConfigContentListDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameIpfsUniversalPathGatewayContentListEntryDetails
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Entry Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Entry Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replace("{" + "content_list_entry_identifier" + "}", localVarApiClient.escapeString(contentListEntryIdentifier.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }

        return web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsCall(contentListEntryIdentifier, identifier, zoneIdentifier, _callback);

    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Entry Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Entry Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListEntrySingleResponse web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigContentListEntrySingleResponse> localVarResp = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsWithHttpInfo(contentListEntryIdentifier, identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Entry Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Entry Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListEntrySingleResponse> web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsWithHttpInfo(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details (asynchronously)
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IPFS Universal Path Gateway Content List Entry Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> IPFS Universal Path Gateway Content List Entry Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsAsync(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback<DwebConfigContentListEntrySingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntrySingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameListIpfsUniversalPathGatewayContentListEntries
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IPFS Universal Path Gateway Content List Entries response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List IPFS Universal Path Gateway Content List Entries response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries(Async)");
        }

        return web3HostnameListIpfsUniversalPathGatewayContentListEntriesCall(identifier, zoneIdentifier, _callback);

    }

    /**
     * List IPFS Universal Path Gateway Content List Entries
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigContentListEntryCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IPFS Universal Path Gateway Content List Entries response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List IPFS Universal Path Gateway Content List Entries response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListEntryCollectionResponse web3HostnameListIpfsUniversalPathGatewayContentListEntries(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigContentListEntryCollectionResponse> localVarResp = web3HostnameListIpfsUniversalPathGatewayContentListEntriesWithHttpInfo(identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigContentListEntryCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IPFS Universal Path Gateway Content List Entries response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List IPFS Universal Path Gateway Content List Entries response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListEntryCollectionResponse> web3HostnameListIpfsUniversalPathGatewayContentListEntriesWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntryCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IPFS Universal Path Gateway Content List Entries response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List IPFS Universal Path Gateway Content List Entries response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesAsync(String identifier, String zoneIdentifier, final ApiCallback<DwebConfigContentListEntryCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListEntryCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameListWeb3Hostnames
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Web3 Hostnames response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List Web3 Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameListWeb3HostnamesCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameListWeb3HostnamesValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameListWeb3Hostnames(Async)");
        }

        return web3HostnameListWeb3HostnamesCall(zoneIdentifier, _callback);

    }

    /**
     * List Web3 Hostnames
     * 
     * @param zoneIdentifier  (required)
     * @return DwebConfigCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Web3 Hostnames response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List Web3 Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigCollectionResponse web3HostnameListWeb3Hostnames(String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigCollectionResponse> localVarResp = web3HostnameListWeb3HostnamesWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * List Web3 Hostnames
     * 
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Web3 Hostnames response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List Web3 Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigCollectionResponse> web3HostnameListWeb3HostnamesWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameListWeb3HostnamesValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Web3 Hostnames (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Web3 Hostnames response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> List Web3 Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameListWeb3HostnamesAsync(String zoneIdentifier, final ApiCallback<DwebConfigCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameListWeb3HostnamesValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameUpdateIpfsUniversalPathGatewayContentList
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update IPFS Universal Path Gateway Content List response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Update IPFS Universal Path Gateway Content List response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListCall(String identifier, String zoneIdentifier, DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dwebConfigContentListUpdateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(String identifier, String zoneIdentifier, DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }

        // verify the required parameter 'dwebConfigContentListUpdateRequest' is set
        if (dwebConfigContentListUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'dwebConfigContentListUpdateRequest' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }

        return web3HostnameUpdateIpfsUniversalPathGatewayContentListCall(identifier, zoneIdentifier, dwebConfigContentListUpdateRequest, _callback);

    }

    /**
     * Update IPFS Universal Path Gateway Content List
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListUpdateRequest  (required)
     * @return DwebConfigContentListDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update IPFS Universal Path Gateway Content List response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Update IPFS Universal Path Gateway Content List response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigContentListDetailsResponse web3HostnameUpdateIpfsUniversalPathGatewayContentList(String identifier, String zoneIdentifier, DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest) throws ApiException {
        ApiResponse<DwebConfigContentListDetailsResponse> localVarResp = web3HostnameUpdateIpfsUniversalPathGatewayContentListWithHttpInfo(identifier, zoneIdentifier, dwebConfigContentListUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update IPFS Universal Path Gateway Content List
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListUpdateRequest  (required)
     * @return ApiResponse&lt;DwebConfigContentListDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update IPFS Universal Path Gateway Content List response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Update IPFS Universal Path Gateway Content List response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigContentListDetailsResponse> web3HostnameUpdateIpfsUniversalPathGatewayContentListWithHttpInfo(String identifier, String zoneIdentifier, DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(identifier, zoneIdentifier, dwebConfigContentListUpdateRequest, null);
        Type localVarReturnType = new TypeToken<DwebConfigContentListDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update IPFS Universal Path Gateway Content List (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param dwebConfigContentListUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update IPFS Universal Path Gateway Content List response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Update IPFS Universal Path Gateway Content List response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListAsync(String identifier, String zoneIdentifier, DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest, final ApiCallback<DwebConfigContentListDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(identifier, zoneIdentifier, dwebConfigContentListUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigContentListDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for web3HostnameWeb3HostnameDetails
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web3 Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Web3 Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameWeb3HostnameDetailsCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call web3HostnameWeb3HostnameDetailsValidateBeforeCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameWeb3HostnameDetails(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameWeb3HostnameDetails(Async)");
        }

        return web3HostnameWeb3HostnameDetailsCall(identifier, zoneIdentifier, _callback);

    }

    /**
     * Web3 Hostname Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return DwebConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web3 Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Web3 Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DwebConfigSingleResponse web3HostnameWeb3HostnameDetails(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<DwebConfigSingleResponse> localVarResp = web3HostnameWeb3HostnameDetailsWithHttpInfo(identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Web3 Hostname Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DwebConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web3 Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Web3 Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DwebConfigSingleResponse> web3HostnameWeb3HostnameDetailsWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = web3HostnameWeb3HostnameDetailsValidateBeforeCall(identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Web3 Hostname Details (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web3 Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Web3 Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call web3HostnameWeb3HostnameDetailsAsync(String identifier, String zoneIdentifier, final ApiCallback<DwebConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = web3HostnameWeb3HostnameDetailsValidateBeforeCall(identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DwebConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
