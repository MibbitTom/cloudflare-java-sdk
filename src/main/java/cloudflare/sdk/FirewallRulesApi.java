/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.FirewallFilterRulesResponseCollection;
import cloudflare.sdk.models.FirewallFilterRulesResponseCollectionDelete;
import cloudflare.sdk.models.FirewallFilterRulesSingleResponse;
import cloudflare.sdk.models.FirewallFilterRulesSingleResponseDelete;
import cloudflare.sdk.models.FirewallRulesDeleteAFirewallRule4XXResponse;
import cloudflare.sdk.models.FirewallRulesDeleteAFirewallRuleRequest;
import cloudflare.sdk.models.FirewallRulesDeleteFirewallRules4XXResponse;
import cloudflare.sdk.models.FirewallRulesDeleteFirewallRulesRequest;
import cloudflare.sdk.models.FirewallRulesGetAFirewallRule4XXResponse;
import cloudflare.sdk.models.FirewallRulesListFirewallRules4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirewallRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirewallRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirewallRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for firewallRulesCreateFirewallRules
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesCreateFirewallRulesCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesCreateFirewallRulesValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesCreateFirewallRules(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling firewallRulesCreateFirewallRules(Async)");
        }

        return firewallRulesCreateFirewallRulesCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create firewall rules
     * Create one or more firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollection firewallRulesCreateFirewallRules(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollection> localVarResp = firewallRulesCreateFirewallRulesWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create firewall rules
     * Create one or more firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollection> firewallRulesCreateFirewallRulesWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesCreateFirewallRulesValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create firewall rules (asynchronously)
     * Create one or more firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesCreateFirewallRulesAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFilterRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesCreateFirewallRulesValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesDeleteAFirewallRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteAFirewallRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesDeleteAFirewallRuleCall(String id, String zoneIdentifier, FirewallRulesDeleteAFirewallRuleRequest firewallRulesDeleteAFirewallRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallRulesDeleteAFirewallRuleRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesDeleteAFirewallRuleValidateBeforeCall(String id, String zoneIdentifier, FirewallRulesDeleteAFirewallRuleRequest firewallRulesDeleteAFirewallRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling firewallRulesDeleteAFirewallRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesDeleteAFirewallRule(Async)");
        }

        // verify the required parameter 'firewallRulesDeleteAFirewallRuleRequest' is set
        if (firewallRulesDeleteAFirewallRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'firewallRulesDeleteAFirewallRuleRequest' when calling firewallRulesDeleteAFirewallRule(Async)");
        }

        return firewallRulesDeleteAFirewallRuleCall(id, zoneIdentifier, firewallRulesDeleteAFirewallRuleRequest, _callback);

    }

    /**
     * Delete a firewall rule
     * Deletes an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteAFirewallRuleRequest  (required)
     * @return FirewallFilterRulesSingleResponseDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesSingleResponseDelete firewallRulesDeleteAFirewallRule(String id, String zoneIdentifier, FirewallRulesDeleteAFirewallRuleRequest firewallRulesDeleteAFirewallRuleRequest) throws ApiException {
        ApiResponse<FirewallFilterRulesSingleResponseDelete> localVarResp = firewallRulesDeleteAFirewallRuleWithHttpInfo(id, zoneIdentifier, firewallRulesDeleteAFirewallRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a firewall rule
     * Deletes an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteAFirewallRuleRequest  (required)
     * @return ApiResponse&lt;FirewallFilterRulesSingleResponseDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesSingleResponseDelete> firewallRulesDeleteAFirewallRuleWithHttpInfo(String id, String zoneIdentifier, FirewallRulesDeleteAFirewallRuleRequest firewallRulesDeleteAFirewallRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesDeleteAFirewallRuleValidateBeforeCall(id, zoneIdentifier, firewallRulesDeleteAFirewallRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponseDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a firewall rule (asynchronously)
     * Deletes an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteAFirewallRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesDeleteAFirewallRuleAsync(String id, String zoneIdentifier, FirewallRulesDeleteAFirewallRuleRequest firewallRulesDeleteAFirewallRuleRequest, final ApiCallback<FirewallFilterRulesSingleResponseDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesDeleteAFirewallRuleValidateBeforeCall(id, zoneIdentifier, firewallRulesDeleteAFirewallRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponseDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesDeleteFirewallRules
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteFirewallRulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesDeleteFirewallRulesCall(String zoneIdentifier, FirewallRulesDeleteFirewallRulesRequest firewallRulesDeleteFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallRulesDeleteFirewallRulesRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesDeleteFirewallRulesValidateBeforeCall(String zoneIdentifier, FirewallRulesDeleteFirewallRulesRequest firewallRulesDeleteFirewallRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesDeleteFirewallRules(Async)");
        }

        // verify the required parameter 'firewallRulesDeleteFirewallRulesRequest' is set
        if (firewallRulesDeleteFirewallRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'firewallRulesDeleteFirewallRulesRequest' when calling firewallRulesDeleteFirewallRules(Async)");
        }

        return firewallRulesDeleteFirewallRulesCall(zoneIdentifier, firewallRulesDeleteFirewallRulesRequest, _callback);

    }

    /**
     * Delete firewall rules
     * Deletes existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteFirewallRulesRequest  (required)
     * @return FirewallFilterRulesResponseCollectionDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollectionDelete firewallRulesDeleteFirewallRules(String zoneIdentifier, FirewallRulesDeleteFirewallRulesRequest firewallRulesDeleteFirewallRulesRequest) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollectionDelete> localVarResp = firewallRulesDeleteFirewallRulesWithHttpInfo(zoneIdentifier, firewallRulesDeleteFirewallRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete firewall rules
     * Deletes existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteFirewallRulesRequest  (required)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollectionDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollectionDelete> firewallRulesDeleteFirewallRulesWithHttpInfo(String zoneIdentifier, FirewallRulesDeleteFirewallRulesRequest firewallRulesDeleteFirewallRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesDeleteFirewallRulesValidateBeforeCall(zoneIdentifier, firewallRulesDeleteFirewallRulesRequest, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollectionDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete firewall rules (asynchronously)
     * Deletes existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param firewallRulesDeleteFirewallRulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesDeleteFirewallRulesAsync(String zoneIdentifier, FirewallRulesDeleteFirewallRulesRequest firewallRulesDeleteFirewallRulesRequest, final ApiCallback<FirewallFilterRulesResponseCollectionDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesDeleteFirewallRulesValidateBeforeCall(zoneIdentifier, firewallRulesDeleteFirewallRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollectionDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesGetAFirewallRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param id2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesGetAFirewallRuleCall(String id, String zoneIdentifier, String id2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesGetAFirewallRuleValidateBeforeCall(String id, String zoneIdentifier, String id2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling firewallRulesGetAFirewallRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesGetAFirewallRule(Async)");
        }

        return firewallRulesGetAFirewallRuleCall(id, zoneIdentifier, id2, _callback);

    }

    /**
     * Get a firewall rule
     * Fetches the details of a firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param id2  (optional)
     * @return FirewallFilterRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesSingleResponse firewallRulesGetAFirewallRule(String id, String zoneIdentifier, String id2) throws ApiException {
        ApiResponse<FirewallFilterRulesSingleResponse> localVarResp = firewallRulesGetAFirewallRuleWithHttpInfo(id, zoneIdentifier, id2);
        return localVarResp.getData();
    }

    /**
     * Get a firewall rule
     * Fetches the details of a firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param id2  (optional)
     * @return ApiResponse&lt;FirewallFilterRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesSingleResponse> firewallRulesGetAFirewallRuleWithHttpInfo(String id, String zoneIdentifier, String id2) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesGetAFirewallRuleValidateBeforeCall(id, zoneIdentifier, id2, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a firewall rule (asynchronously)
     * Fetches the details of a firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param id2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesGetAFirewallRuleAsync(String id, String zoneIdentifier, String id2, final ApiCallback<FirewallFilterRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesGetAFirewallRuleValidateBeforeCall(id, zoneIdentifier, id2, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesListFirewallRules
     * @param zoneIdentifier  (required)
     * @param description  (optional)
     * @param action  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param paused  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesListFirewallRulesCall(String zoneIdentifier, String description, String action, BigDecimal page, BigDecimal perPage, String id, Boolean paused, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (paused != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paused", paused));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesListFirewallRulesValidateBeforeCall(String zoneIdentifier, String description, String action, BigDecimal page, BigDecimal perPage, String id, Boolean paused, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesListFirewallRules(Async)");
        }

        return firewallRulesListFirewallRulesCall(zoneIdentifier, description, action, page, perPage, id, paused, _callback);

    }

    /**
     * List firewall rules
     * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param description  (optional)
     * @param action  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param paused  (optional)
     * @return FirewallFilterRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollection firewallRulesListFirewallRules(String zoneIdentifier, String description, String action, BigDecimal page, BigDecimal perPage, String id, Boolean paused) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollection> localVarResp = firewallRulesListFirewallRulesWithHttpInfo(zoneIdentifier, description, action, page, perPage, id, paused);
        return localVarResp.getData();
    }

    /**
     * List firewall rules
     * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param description  (optional)
     * @param action  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param paused  (optional)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollection> firewallRulesListFirewallRulesWithHttpInfo(String zoneIdentifier, String description, String action, BigDecimal page, BigDecimal perPage, String id, Boolean paused) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesListFirewallRulesValidateBeforeCall(zoneIdentifier, description, action, page, perPage, id, paused, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List firewall rules (asynchronously)
     * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param description  (optional)
     * @param action  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param paused  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesListFirewallRulesAsync(String zoneIdentifier, String description, String action, BigDecimal page, BigDecimal perPage, String id, Boolean paused, final ApiCallback<FirewallFilterRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesListFirewallRulesValidateBeforeCall(zoneIdentifier, description, action, page, perPage, id, paused, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesUpdateAFirewallRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdateAFirewallRuleCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesUpdateAFirewallRuleValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling firewallRulesUpdateAFirewallRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesUpdateAFirewallRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling firewallRulesUpdateAFirewallRule(Async)");
        }

        return firewallRulesUpdateAFirewallRuleCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update a firewall rule
     * Updates an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesSingleResponse firewallRulesUpdateAFirewallRule(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterRulesSingleResponse> localVarResp = firewallRulesUpdateAFirewallRuleWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update a firewall rule
     * Updates an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesSingleResponse> firewallRulesUpdateAFirewallRuleWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesUpdateAFirewallRuleValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a firewall rule (asynchronously)
     * Updates an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdateAFirewallRuleAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallFilterRulesSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesUpdateAFirewallRuleValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesUpdateFirewallRules
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdateFirewallRulesCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesUpdateFirewallRulesValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesUpdateFirewallRules(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling firewallRulesUpdateFirewallRules(Async)");
        }

        return firewallRulesUpdateFirewallRulesCall(zoneIdentifier, body, _callback);

    }

    /**
     * Update firewall rules
     * Updates one or more existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollection firewallRulesUpdateFirewallRules(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollection> localVarResp = firewallRulesUpdateFirewallRulesWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update firewall rules
     * Updates one or more existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollection> firewallRulesUpdateFirewallRulesWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesUpdateFirewallRulesValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update firewall rules (asynchronously)
     * Updates one or more existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdateFirewallRulesAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFilterRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesUpdateFirewallRulesValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesUpdatePriorityOfAFirewallRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdatePriorityOfAFirewallRuleCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesUpdatePriorityOfAFirewallRuleValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling firewallRulesUpdatePriorityOfAFirewallRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesUpdatePriorityOfAFirewallRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling firewallRulesUpdatePriorityOfAFirewallRule(Async)");
        }

        return firewallRulesUpdatePriorityOfAFirewallRuleCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update priority of a firewall rule
     * Updates the priority of an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollection firewallRulesUpdatePriorityOfAFirewallRule(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollection> localVarResp = firewallRulesUpdatePriorityOfAFirewallRuleWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update priority of a firewall rule
     * Updates the priority of an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollection> firewallRulesUpdatePriorityOfAFirewallRuleWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesUpdatePriorityOfAFirewallRuleValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update priority of a firewall rule (asynchronously)
     * Updates the priority of an existing firewall rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of a firewall rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of a firewall rule response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdatePriorityOfAFirewallRuleAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallFilterRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesUpdatePriorityOfAFirewallRuleValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesUpdatePriorityOfFirewallRules
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdatePriorityOfFirewallRulesCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesUpdatePriorityOfFirewallRulesValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling firewallRulesUpdatePriorityOfFirewallRules(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling firewallRulesUpdatePriorityOfFirewallRules(Async)");
        }

        return firewallRulesUpdatePriorityOfFirewallRulesCall(zoneIdentifier, body, _callback);

    }

    /**
     * Update priority of firewall rules
     * Updates the priority of existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterRulesResponseCollection firewallRulesUpdatePriorityOfFirewallRules(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterRulesResponseCollection> localVarResp = firewallRulesUpdatePriorityOfFirewallRulesWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update priority of firewall rules
     * Updates the priority of existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterRulesResponseCollection> firewallRulesUpdatePriorityOfFirewallRulesWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesUpdatePriorityOfFirewallRulesValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update priority of firewall rules (asynchronously)
     * Updates the priority of existing firewall rules.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update priority of firewall rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update priority of firewall rules response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call firewallRulesUpdatePriorityOfFirewallRulesAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFilterRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesUpdatePriorityOfFirewallRulesValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
