/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * AddressingIpamDelegations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AddressingIpamDelegations {
  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELEGATED_ACCOUNT_ID = "delegated_account_id";
  @SerializedName(SERIALIZED_NAME_DELEGATED_ACCOUNT_ID)
  private String delegatedAccountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_PARENT_PREFIX_ID = "parent_prefix_id";
  @SerializedName(SERIALIZED_NAME_PARENT_PREFIX_ID)
  private String parentPrefixId;

  public AddressingIpamDelegations() {
  }

  public AddressingIpamDelegations(
     OffsetDateTime createdAt, 
     String id, 
     OffsetDateTime modifiedAt, 
     String parentPrefixId
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
    this.modifiedAt = modifiedAt;
    this.parentPrefixId = parentPrefixId;
  }

  public AddressingIpamDelegations cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

   /**
   * IP Prefix in Classless Inter-Domain Routing format.
   * @return cidr
  **/
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AddressingIpamDelegations delegatedAccountId(String delegatedAccountId) {
    this.delegatedAccountId = delegatedAccountId;
    return this;
  }

   /**
   * Account identifier for the account to which prefix is being delegated.
   * @return delegatedAccountId
  **/
  @javax.annotation.Nullable
  public String getDelegatedAccountId() {
    return delegatedAccountId;
  }

  public void setDelegatedAccountId(String delegatedAccountId) {
    this.delegatedAccountId = delegatedAccountId;
  }


   /**
   * Delegation identifier tag.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



   /**
   * Get modifiedAt
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



   /**
   * Identifier
   * @return parentPrefixId
  **/
  @javax.annotation.Nullable
  public String getParentPrefixId() {
    return parentPrefixId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressingIpamDelegations addressingIpamDelegations = (AddressingIpamDelegations) o;
    return Objects.equals(this.cidr, addressingIpamDelegations.cidr) &&
        Objects.equals(this.createdAt, addressingIpamDelegations.createdAt) &&
        Objects.equals(this.delegatedAccountId, addressingIpamDelegations.delegatedAccountId) &&
        Objects.equals(this.id, addressingIpamDelegations.id) &&
        Objects.equals(this.modifiedAt, addressingIpamDelegations.modifiedAt) &&
        Objects.equals(this.parentPrefixId, addressingIpamDelegations.parentPrefixId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidr, createdAt, delegatedAccountId, id, modifiedAt, parentPrefixId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressingIpamDelegations {\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    delegatedAccountId: ").append(toIndentedString(delegatedAccountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    parentPrefixId: ").append(toIndentedString(parentPrefixId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cidr");
    openapiFields.add("created_at");
    openapiFields.add("delegated_account_id");
    openapiFields.add("id");
    openapiFields.add("modified_at");
    openapiFields.add("parent_prefix_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddressingIpamDelegations
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressingIpamDelegations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressingIpamDelegations is not found in the empty JSON string", AddressingIpamDelegations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressingIpamDelegations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressingIpamDelegations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("delegated_account_id") != null && !jsonObj.get("delegated_account_id").isJsonNull()) && !jsonObj.get("delegated_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegated_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegated_account_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("parent_prefix_id") != null && !jsonObj.get("parent_prefix_id").isJsonNull()) && !jsonObj.get("parent_prefix_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_prefix_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_prefix_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressingIpamDelegations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressingIpamDelegations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressingIpamDelegations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressingIpamDelegations.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressingIpamDelegations>() {
           @Override
           public void write(JsonWriter out, AddressingIpamDelegations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressingIpamDelegations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddressingIpamDelegations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddressingIpamDelegations
  * @throws IOException if the JSON string is invalid with respect to AddressingIpamDelegations
  */
  public static AddressingIpamDelegations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressingIpamDelegations.class);
  }

 /**
  * Convert an instance of AddressingIpamDelegations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

