/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.ListsItemHostname;
import cloudflare.sdk.models.ListsItemRedirect;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import cloudflare.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ListsItem extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ListsItem.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListsItem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListsItem' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<String> adapterString = gson.getDelegateAdapter(this, TypeToken.get(String.class));
            final TypeAdapter<ListsItemRedirect> adapterListsItemRedirect = gson.getDelegateAdapter(this, TypeToken.get(ListsItemRedirect.class));
            final TypeAdapter<ListsItemHostname> adapterListsItemHostname = gson.getDelegateAdapter(this, TypeToken.get(ListsItemHostname.class));
            final TypeAdapter<Integer> adapterInteger = gson.getDelegateAdapter(this, TypeToken.get(Integer.class));

            return (TypeAdapter<T>) new TypeAdapter<ListsItem>() {
                @Override
                public void write(JsonWriter out, ListsItem value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `String`
                    if (value.getActualInstance() instanceof String) {
                        JsonPrimitive primitive = adapterString.toJsonTree((String)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `ListsItemRedirect`
                    if (value.getActualInstance() instanceof ListsItemRedirect) {
                        JsonElement element = adapterListsItemRedirect.toJsonTree((ListsItemRedirect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ListsItemHostname`
                    if (value.getActualInstance() instanceof ListsItemHostname) {
                        JsonElement element = adapterListsItemHostname.toJsonTree((ListsItemHostname)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Integer`
                    if (value.getActualInstance() instanceof Integer) {
                        JsonPrimitive primitive = adapterInteger.toJsonTree((Integer)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Integer, ListsItemHostname, ListsItemRedirect, String");
                }

                @Override
                public ListsItem read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize String
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isString()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterString;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'String'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'String'", e);
                    }
                    // deserialize ListsItemRedirect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListsItemRedirect.validateJsonElement(jsonElement);
                        actualAdapter = adapterListsItemRedirect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListsItemRedirect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListsItemRedirect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListsItemRedirect'", e);
                    }
                    // deserialize ListsItemHostname
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ListsItemHostname.validateJsonElement(jsonElement);
                        actualAdapter = adapterListsItemHostname;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ListsItemHostname'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ListsItemHostname failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ListsItemHostname'", e);
                    }
                    // deserialize Integer
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterInteger;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Integer'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Integer failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Integer'", e);
                    }

                    if (match == 1) {
                        ListsItem ret = new ListsItem();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ListsItem: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ListsItem() {
        super("oneOf", Boolean.FALSE);
    }

    public ListsItem(Integer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListsItem(ListsItemHostname o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListsItem(ListsItemRedirect o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListsItem(String o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("String", String.class);
        schemas.put("ListsItemRedirect", ListsItemRedirect.class);
        schemas.put("ListsItemHostname", ListsItemHostname.class);
        schemas.put("Integer", Integer.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ListsItem.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Integer, ListsItemHostname, ListsItemRedirect, String
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof String) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListsItemRedirect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ListsItemHostname) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Integer) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Integer, ListsItemHostname, ListsItemRedirect, String");
    }

    /**
     * Get the actual instance, which can be the following:
     * Integer, ListsItemHostname, ListsItemRedirect, String
     *
     * @return The actual instance (Integer, ListsItemHostname, ListsItemRedirect, String)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ListsItemRedirect`. If the actual instance is not `ListsItemRedirect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListsItemRedirect`
     * @throws ClassCastException if the instance is not `ListsItemRedirect`
     */
    public ListsItemRedirect getListsItemRedirect() throws ClassCastException {
        return (ListsItemRedirect)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ListsItemHostname`. If the actual instance is not `ListsItemHostname`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ListsItemHostname`
     * @throws ClassCastException if the instance is not `ListsItemHostname`
     */
    public ListsItemHostname getListsItemHostname() throws ClassCastException {
        return (ListsItemHostname)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Integer`. If the actual instance is not `Integer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Integer`
     * @throws ClassCastException if the instance is not `Integer`
     */
    public Integer getInteger() throws ClassCastException {
        return (Integer)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ListsItem
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with String
        try {
            if (!jsonElement.getAsJsonPrimitive().isString()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for String failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ListsItemRedirect
        try {
            ListsItemRedirect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ListsItemRedirect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ListsItemHostname
        try {
            ListsItemHostname.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ListsItemHostname failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Integer
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Integer failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ListsItem with oneOf schemas: Integer, ListsItemHostname, ListsItemRedirect, String. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ListsItem given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListsItem
     * @throws IOException if the JSON string is invalid with respect to ListsItem
     */
    public static ListsItem fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ListsItem.class);
    }

    /**
     * Convert an instance of ListsItem to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

