/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.IntelAdditionalInformation;
import cloudflare.sdk.models.IntelApplication;
import cloudflare.sdk.models.IntelCategoryWithSuperCategoryId;
import cloudflare.sdk.models.IntelResolvesToRef;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * IntelDomain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IntelDomain {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additional_information";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private IntelAdditionalInformation additionalInformation;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private IntelApplication application;

  public static final String SERIALIZED_NAME_CONTENT_CATEGORIES = "content_categories";
  @SerializedName(SERIALIZED_NAME_CONTENT_CATEGORIES)
  private Object contentCategories = null;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_INHERITED_CONTENT_CATEGORIES = "inherited_content_categories";
  @SerializedName(SERIALIZED_NAME_INHERITED_CONTENT_CATEGORIES)
  private List<IntelCategoryWithSuperCategoryId> inheritedContentCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_INHERITED_FROM = "inherited_from";
  @SerializedName(SERIALIZED_NAME_INHERITED_FROM)
  private String inheritedFrom;

  public static final String SERIALIZED_NAME_INHERITED_RISK_TYPES = "inherited_risk_types";
  @SerializedName(SERIALIZED_NAME_INHERITED_RISK_TYPES)
  private List<IntelCategoryWithSuperCategoryId> inheritedRiskTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_POPULARITY_RANK = "popularity_rank";
  @SerializedName(SERIALIZED_NAME_POPULARITY_RANK)
  private Integer popularityRank;

  public static final String SERIALIZED_NAME_RESOLVES_TO_REFS = "resolves_to_refs";
  @SerializedName(SERIALIZED_NAME_RESOLVES_TO_REFS)
  private List<IntelResolvesToRef> resolvesToRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_RISK_SCORE = "risk_score";
  @SerializedName(SERIALIZED_NAME_RISK_SCORE)
  private BigDecimal riskScore;

  public static final String SERIALIZED_NAME_RISK_TYPES = "risk_types";
  @SerializedName(SERIALIZED_NAME_RISK_TYPES)
  private Object riskTypes = null;

  public IntelDomain() {
  }

  public IntelDomain additionalInformation(IntelAdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Get additionalInformation
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  public IntelAdditionalInformation getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(IntelAdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public IntelDomain application(IntelApplication application) {
    this.application = application;
    return this;
  }

   /**
   * Get application
   * @return application
  **/
  @javax.annotation.Nullable
  public IntelApplication getApplication() {
    return application;
  }

  public void setApplication(IntelApplication application) {
    this.application = application;
  }


  public IntelDomain contentCategories(Object contentCategories) {
    this.contentCategories = contentCategories;
    return this;
  }

   /**
   * Current content categories.
   * @return contentCategories
  **/
  @javax.annotation.Nullable
  public Object getContentCategories() {
    return contentCategories;
  }

  public void setContentCategories(Object contentCategories) {
    this.contentCategories = contentCategories;
  }


  public IntelDomain domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public IntelDomain inheritedContentCategories(List<IntelCategoryWithSuperCategoryId> inheritedContentCategories) {
    this.inheritedContentCategories = inheritedContentCategories;
    return this;
  }

  public IntelDomain addInheritedContentCategoriesItem(IntelCategoryWithSuperCategoryId inheritedContentCategoriesItem) {
    if (this.inheritedContentCategories == null) {
      this.inheritedContentCategories = new ArrayList<>();
    }
    this.inheritedContentCategories.add(inheritedContentCategoriesItem);
    return this;
  }

   /**
   * Get inheritedContentCategories
   * @return inheritedContentCategories
  **/
  @javax.annotation.Nullable
  public List<IntelCategoryWithSuperCategoryId> getInheritedContentCategories() {
    return inheritedContentCategories;
  }

  public void setInheritedContentCategories(List<IntelCategoryWithSuperCategoryId> inheritedContentCategories) {
    this.inheritedContentCategories = inheritedContentCategories;
  }


  public IntelDomain inheritedFrom(String inheritedFrom) {
    this.inheritedFrom = inheritedFrom;
    return this;
  }

   /**
   * Domain from which &#x60;inherited_content_categories&#x60; and &#x60;inherited_risk_types&#x60; are inherited, if applicable.
   * @return inheritedFrom
  **/
  @javax.annotation.Nullable
  public String getInheritedFrom() {
    return inheritedFrom;
  }

  public void setInheritedFrom(String inheritedFrom) {
    this.inheritedFrom = inheritedFrom;
  }


  public IntelDomain inheritedRiskTypes(List<IntelCategoryWithSuperCategoryId> inheritedRiskTypes) {
    this.inheritedRiskTypes = inheritedRiskTypes;
    return this;
  }

  public IntelDomain addInheritedRiskTypesItem(IntelCategoryWithSuperCategoryId inheritedRiskTypesItem) {
    if (this.inheritedRiskTypes == null) {
      this.inheritedRiskTypes = new ArrayList<>();
    }
    this.inheritedRiskTypes.add(inheritedRiskTypesItem);
    return this;
  }

   /**
   * Get inheritedRiskTypes
   * @return inheritedRiskTypes
  **/
  @javax.annotation.Nullable
  public List<IntelCategoryWithSuperCategoryId> getInheritedRiskTypes() {
    return inheritedRiskTypes;
  }

  public void setInheritedRiskTypes(List<IntelCategoryWithSuperCategoryId> inheritedRiskTypes) {
    this.inheritedRiskTypes = inheritedRiskTypes;
  }


  public IntelDomain popularityRank(Integer popularityRank) {
    this.popularityRank = popularityRank;
    return this;
  }

   /**
   * Global Cloudflare 100k ranking for the last 30 days, if available for the hostname. The top ranked domain is 1, the lowest ranked domain is 100,000.
   * @return popularityRank
  **/
  @javax.annotation.Nullable
  public Integer getPopularityRank() {
    return popularityRank;
  }

  public void setPopularityRank(Integer popularityRank) {
    this.popularityRank = popularityRank;
  }


  public IntelDomain resolvesToRefs(List<IntelResolvesToRef> resolvesToRefs) {
    this.resolvesToRefs = resolvesToRefs;
    return this;
  }

  public IntelDomain addResolvesToRefsItem(IntelResolvesToRef resolvesToRefsItem) {
    if (this.resolvesToRefs == null) {
      this.resolvesToRefs = new ArrayList<>();
    }
    this.resolvesToRefs.add(resolvesToRefsItem);
    return this;
  }

   /**
   * Specifies a list of references to one or more IP addresses or domain names that the domain name currently resolves to.
   * @return resolvesToRefs
  **/
  @javax.annotation.Nullable
  public List<IntelResolvesToRef> getResolvesToRefs() {
    return resolvesToRefs;
  }

  public void setResolvesToRefs(List<IntelResolvesToRef> resolvesToRefs) {
    this.resolvesToRefs = resolvesToRefs;
  }


  public IntelDomain riskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
    return this;
  }

   /**
   * Hostname risk score, which is a value between 0 (lowest risk) to 1 (highest risk).
   * @return riskScore
  **/
  @javax.annotation.Nullable
  public BigDecimal getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
  }


  public IntelDomain riskTypes(Object riskTypes) {
    this.riskTypes = riskTypes;
    return this;
  }

   /**
   * Get riskTypes
   * @return riskTypes
  **/
  @javax.annotation.Nullable
  public Object getRiskTypes() {
    return riskTypes;
  }

  public void setRiskTypes(Object riskTypes) {
    this.riskTypes = riskTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelDomain intelDomain = (IntelDomain) o;
    return Objects.equals(this.additionalInformation, intelDomain.additionalInformation) &&
        Objects.equals(this.application, intelDomain.application) &&
        Objects.equals(this.contentCategories, intelDomain.contentCategories) &&
        Objects.equals(this.domain, intelDomain.domain) &&
        Objects.equals(this.inheritedContentCategories, intelDomain.inheritedContentCategories) &&
        Objects.equals(this.inheritedFrom, intelDomain.inheritedFrom) &&
        Objects.equals(this.inheritedRiskTypes, intelDomain.inheritedRiskTypes) &&
        Objects.equals(this.popularityRank, intelDomain.popularityRank) &&
        Objects.equals(this.resolvesToRefs, intelDomain.resolvesToRefs) &&
        Objects.equals(this.riskScore, intelDomain.riskScore) &&
        Objects.equals(this.riskTypes, intelDomain.riskTypes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInformation, application, contentCategories, domain, inheritedContentCategories, inheritedFrom, inheritedRiskTypes, popularityRank, resolvesToRefs, riskScore, riskTypes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelDomain {\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    contentCategories: ").append(toIndentedString(contentCategories)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    inheritedContentCategories: ").append(toIndentedString(inheritedContentCategories)).append("\n");
    sb.append("    inheritedFrom: ").append(toIndentedString(inheritedFrom)).append("\n");
    sb.append("    inheritedRiskTypes: ").append(toIndentedString(inheritedRiskTypes)).append("\n");
    sb.append("    popularityRank: ").append(toIndentedString(popularityRank)).append("\n");
    sb.append("    resolvesToRefs: ").append(toIndentedString(resolvesToRefs)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    riskTypes: ").append(toIndentedString(riskTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_information");
    openapiFields.add("application");
    openapiFields.add("content_categories");
    openapiFields.add("domain");
    openapiFields.add("inherited_content_categories");
    openapiFields.add("inherited_from");
    openapiFields.add("inherited_risk_types");
    openapiFields.add("popularity_rank");
    openapiFields.add("resolves_to_refs");
    openapiFields.add("risk_score");
    openapiFields.add("risk_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntelDomain
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelDomain is not found in the empty JSON string", IntelDomain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelDomain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelDomain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additional_information`
      if (jsonObj.get("additional_information") != null && !jsonObj.get("additional_information").isJsonNull()) {
        IntelAdditionalInformation.validateJsonElement(jsonObj.get("additional_information"));
      }
      // validate the optional field `application`
      if (jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) {
        IntelApplication.validateJsonElement(jsonObj.get("application"));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (jsonObj.get("inherited_content_categories") != null && !jsonObj.get("inherited_content_categories").isJsonNull()) {
        JsonArray jsonArrayinheritedContentCategories = jsonObj.getAsJsonArray("inherited_content_categories");
        if (jsonArrayinheritedContentCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inherited_content_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inherited_content_categories` to be an array in the JSON string but got `%s`", jsonObj.get("inherited_content_categories").toString()));
          }

          // validate the optional field `inherited_content_categories` (array)
          for (int i = 0; i < jsonArrayinheritedContentCategories.size(); i++) {
            IntelCategoryWithSuperCategoryId.validateJsonElement(jsonArrayinheritedContentCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("inherited_from") != null && !jsonObj.get("inherited_from").isJsonNull()) && !jsonObj.get("inherited_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inherited_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inherited_from").toString()));
      }
      if (jsonObj.get("inherited_risk_types") != null && !jsonObj.get("inherited_risk_types").isJsonNull()) {
        JsonArray jsonArrayinheritedRiskTypes = jsonObj.getAsJsonArray("inherited_risk_types");
        if (jsonArrayinheritedRiskTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inherited_risk_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inherited_risk_types` to be an array in the JSON string but got `%s`", jsonObj.get("inherited_risk_types").toString()));
          }

          // validate the optional field `inherited_risk_types` (array)
          for (int i = 0; i < jsonArrayinheritedRiskTypes.size(); i++) {
            IntelCategoryWithSuperCategoryId.validateJsonElement(jsonArrayinheritedRiskTypes.get(i));
          };
        }
      }
      if (jsonObj.get("resolves_to_refs") != null && !jsonObj.get("resolves_to_refs").isJsonNull()) {
        JsonArray jsonArrayresolvesToRefs = jsonObj.getAsJsonArray("resolves_to_refs");
        if (jsonArrayresolvesToRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resolves_to_refs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resolves_to_refs` to be an array in the JSON string but got `%s`", jsonObj.get("resolves_to_refs").toString()));
          }

          // validate the optional field `resolves_to_refs` (array)
          for (int i = 0; i < jsonArrayresolvesToRefs.size(); i++) {
            IntelResolvesToRef.validateJsonElement(jsonArrayresolvesToRefs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelDomain>() {
           @Override
           public void write(JsonWriter out, IntelDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelDomain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntelDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntelDomain
  * @throws IOException if the JSON string is invalid with respect to IntelDomain
  */
  public static IntelDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelDomain.class);
  }

 /**
  * Convert an instance of IntelDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

