/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesKeylessTunnel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * KeylessSslForAZoneEditKeylessSslConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class KeylessSslForAZoneEditKeylessSslConfigurationRequest {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private BigDecimal port = new BigDecimal("24008");

  public static final String SERIALIZED_NAME_TUNNEL = "tunnel";
  @SerializedName(SERIALIZED_NAME_TUNNEL)
  private TlsCertificatesAndHostnamesKeylessTunnel tunnel;

  public KeylessSslForAZoneEditKeylessSslConfigurationRequest() {
  }

  @Deprecated
  public KeylessSslForAZoneEditKeylessSslConfigurationRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether or not the Keyless SSL is on or off.
   * @return enabled
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  @Deprecated
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public KeylessSslForAZoneEditKeylessSslConfigurationRequest host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The keyless SSL name.
   * @return host
  **/
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public KeylessSslForAZoneEditKeylessSslConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The keyless SSL name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public KeylessSslForAZoneEditKeylessSslConfigurationRequest port(BigDecimal port) {
    this.port = port;
    return this;
  }

   /**
   * The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
   * @return port
  **/
  @javax.annotation.Nullable
  public BigDecimal getPort() {
    return port;
  }

  public void setPort(BigDecimal port) {
    this.port = port;
  }


  public KeylessSslForAZoneEditKeylessSslConfigurationRequest tunnel(TlsCertificatesAndHostnamesKeylessTunnel tunnel) {
    this.tunnel = tunnel;
    return this;
  }

   /**
   * Get tunnel
   * @return tunnel
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesKeylessTunnel getTunnel() {
    return tunnel;
  }

  public void setTunnel(TlsCertificatesAndHostnamesKeylessTunnel tunnel) {
    this.tunnel = tunnel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest = (KeylessSslForAZoneEditKeylessSslConfigurationRequest) o;
    return Objects.equals(this.enabled, keylessSslForAZoneEditKeylessSslConfigurationRequest.enabled) &&
        Objects.equals(this.host, keylessSslForAZoneEditKeylessSslConfigurationRequest.host) &&
        Objects.equals(this.name, keylessSslForAZoneEditKeylessSslConfigurationRequest.name) &&
        Objects.equals(this.port, keylessSslForAZoneEditKeylessSslConfigurationRequest.port) &&
        Objects.equals(this.tunnel, keylessSslForAZoneEditKeylessSslConfigurationRequest.tunnel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, host, name, port, tunnel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeylessSslForAZoneEditKeylessSslConfigurationRequest {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    tunnel: ").append(toIndentedString(tunnel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("host");
    openapiFields.add("name");
    openapiFields.add("port");
    openapiFields.add("tunnel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to KeylessSslForAZoneEditKeylessSslConfigurationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeylessSslForAZoneEditKeylessSslConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeylessSslForAZoneEditKeylessSslConfigurationRequest is not found in the empty JSON string", KeylessSslForAZoneEditKeylessSslConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeylessSslForAZoneEditKeylessSslConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeylessSslForAZoneEditKeylessSslConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `tunnel`
      if (jsonObj.get("tunnel") != null && !jsonObj.get("tunnel").isJsonNull()) {
        TlsCertificatesAndHostnamesKeylessTunnel.validateJsonElement(jsonObj.get("tunnel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeylessSslForAZoneEditKeylessSslConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeylessSslForAZoneEditKeylessSslConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeylessSslForAZoneEditKeylessSslConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeylessSslForAZoneEditKeylessSslConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<KeylessSslForAZoneEditKeylessSslConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, KeylessSslForAZoneEditKeylessSslConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeylessSslForAZoneEditKeylessSslConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeylessSslForAZoneEditKeylessSslConfigurationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeylessSslForAZoneEditKeylessSslConfigurationRequest
  * @throws IOException if the JSON string is invalid with respect to KeylessSslForAZoneEditKeylessSslConfigurationRequest
  */
  public static KeylessSslForAZoneEditKeylessSslConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeylessSslForAZoneEditKeylessSslConfigurationRequest.class);
  }

 /**
  * Convert an instance of KeylessSslForAZoneEditKeylessSslConfigurationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

