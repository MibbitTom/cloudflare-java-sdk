/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.TeamsDevicesInput;
import cloudflare.sdk.models.TeamsDevicesMatchItem;
import cloudflare.sdk.models.TeamsDevicesType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * TeamsDevicesDevicePostureRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TeamsDevicesDevicePostureRules {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private TeamsDevicesInput input;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private List<TeamsDevicesMatchItem> match = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TeamsDevicesType type;

  public TeamsDevicesDevicePostureRules() {
  }

  public TeamsDevicesDevicePostureRules description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the device posture rule.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TeamsDevicesDevicePostureRules expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
   * @return expiration
  **/
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public TeamsDevicesDevicePostureRules id(String id) {
    this.id = id;
    return this;
  }

   /**
   * API UUID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TeamsDevicesDevicePostureRules input(TeamsDevicesInput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  public TeamsDevicesInput getInput() {
    return input;
  }

  public void setInput(TeamsDevicesInput input) {
    this.input = input;
  }


  public TeamsDevicesDevicePostureRules match(List<TeamsDevicesMatchItem> match) {
    this.match = match;
    return this;
  }

  public TeamsDevicesDevicePostureRules addMatchItem(TeamsDevicesMatchItem matchItem) {
    if (this.match == null) {
      this.match = new ArrayList<>();
    }
    this.match.add(matchItem);
    return this;
  }

   /**
   * The conditions that the client must match to run the rule.
   * @return match
  **/
  @javax.annotation.Nullable
  public List<TeamsDevicesMatchItem> getMatch() {
    return match;
  }

  public void setMatch(List<TeamsDevicesMatchItem> match) {
    this.match = match;
  }


  public TeamsDevicesDevicePostureRules name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the device posture rule.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TeamsDevicesDevicePostureRules schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Polling frequency for the WARP client posture check. Default: &#x60;5m&#x60; (poll every five minutes). Minimum: &#x60;1m&#x60;.
   * @return schedule
  **/
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public TeamsDevicesDevicePostureRules type(TeamsDevicesType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TeamsDevicesType getType() {
    return type;
  }

  public void setType(TeamsDevicesType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamsDevicesDevicePostureRules teamsDevicesDevicePostureRules = (TeamsDevicesDevicePostureRules) o;
    return Objects.equals(this.description, teamsDevicesDevicePostureRules.description) &&
        Objects.equals(this.expiration, teamsDevicesDevicePostureRules.expiration) &&
        Objects.equals(this.id, teamsDevicesDevicePostureRules.id) &&
        Objects.equals(this.input, teamsDevicesDevicePostureRules.input) &&
        Objects.equals(this.match, teamsDevicesDevicePostureRules.match) &&
        Objects.equals(this.name, teamsDevicesDevicePostureRules.name) &&
        Objects.equals(this.schedule, teamsDevicesDevicePostureRules.schedule) &&
        Objects.equals(this.type, teamsDevicesDevicePostureRules.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expiration, id, input, match, name, schedule, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamsDevicesDevicePostureRules {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("expiration");
    openapiFields.add("id");
    openapiFields.add("input");
    openapiFields.add("match");
    openapiFields.add("name");
    openapiFields.add("schedule");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TeamsDevicesDevicePostureRules
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamsDevicesDevicePostureRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamsDevicesDevicePostureRules is not found in the empty JSON string", TeamsDevicesDevicePostureRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamsDevicesDevicePostureRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamsDevicesDevicePostureRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        TeamsDevicesInput.validateJsonElement(jsonObj.get("input"));
      }
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        JsonArray jsonArraymatch = jsonObj.getAsJsonArray("match");
        if (jsonArraymatch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("match").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `match` to be an array in the JSON string but got `%s`", jsonObj.get("match").toString()));
          }

          // validate the optional field `match` (array)
          for (int i = 0; i < jsonArraymatch.size(); i++) {
            TeamsDevicesMatchItem.validateJsonElement(jsonArraymatch.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TeamsDevicesType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamsDevicesDevicePostureRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamsDevicesDevicePostureRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamsDevicesDevicePostureRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesDevicePostureRules.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamsDevicesDevicePostureRules>() {
           @Override
           public void write(JsonWriter out, TeamsDevicesDevicePostureRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamsDevicesDevicePostureRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamsDevicesDevicePostureRules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamsDevicesDevicePostureRules
  * @throws IOException if the JSON string is invalid with respect to TeamsDevicesDevicePostureRules
  */
  public static TeamsDevicesDevicePostureRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamsDevicesDevicePostureRules.class);
  }

 /**
  * Convert an instance of TeamsDevicesDevicePostureRules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

