/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_ASO = "aso";
  @SerializedName(SERIALIZED_NAME_ASO)
  private String aso;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation location;

  /**
   * Gets or Sets mile
   */
  @JsonAdapter(MileEnum.Adapter.class)
  public enum MileEnum {
    APP("client-to-app"),
    
    CF_EGRESS("client-to-cf-egress"),
    
    CF_INGRESS("client-to-cf-ingress"),
    
    ISP("client-to-isp");

    private String value;

    MileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MileEnum fromValue(String value) {
      for (MileEnum b : MileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MILE = "mile";
  @SerializedName(SERIALIZED_NAME_MILE)
  private MileEnum mile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKET_LOSS_PCT = "packetLossPct";
  @SerializedName(SERIALIZED_NAME_PACKET_LOSS_PCT)
  private Float packetLossPct;

  public static final String SERIALIZED_NAME_RTT_MS = "rttMs";
  @SerializedName(SERIALIZED_NAME_RTT_MS)
  private Integer rttMs;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner() {
  }

  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner asn(Integer asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Get asn
   * @return asn
  **/
  @javax.annotation.Nullable
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner aso(String aso) {
    this.aso = aso;
    return this;
  }

   /**
   * Get aso
   * @return aso
  **/
  @javax.annotation.Nullable
  public String getAso() {
    return aso;
  }

  public void setAso(String aso) {
    this.aso = aso;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner location(DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation getLocation() {
    return location;
  }

  public void setLocation(DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation location) {
    this.location = location;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner mile(MileEnum mile) {
    this.mile = mile;
    return this;
  }

   /**
   * Get mile
   * @return mile
  **/
  @javax.annotation.Nullable
  public MileEnum getMile() {
    return mile;
  }

  public void setMile(MileEnum mile) {
    this.mile = mile;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner packetLossPct(Float packetLossPct) {
    this.packetLossPct = packetLossPct;
    return this;
  }

   /**
   * Get packetLossPct
   * @return packetLossPct
  **/
  @javax.annotation.Nullable
  public Float getPacketLossPct() {
    return packetLossPct;
  }

  public void setPacketLossPct(Float packetLossPct) {
    this.packetLossPct = packetLossPct;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner rttMs(Integer rttMs) {
    this.rttMs = rttMs;
    return this;
  }

   /**
   * Get rttMs
   * @return rttMs
  **/
  @javax.annotation.Nullable
  public Integer getRttMs() {
    return rttMs;
  }

  public void setRttMs(Integer rttMs) {
    this.rttMs = rttMs;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Get ttl
   * @return ttl
  **/
  @javax.annotation.Nonnull
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner = (DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner) o;
    return Objects.equals(this.asn, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.asn) &&
        Objects.equals(this.aso, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.aso) &&
        Objects.equals(this.ipAddress, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.ipAddress) &&
        Objects.equals(this.location, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.location) &&
        Objects.equals(this.mile, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.mile) &&
        Objects.equals(this.name, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.name) &&
        Objects.equals(this.packetLossPct, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.packetLossPct) &&
        Objects.equals(this.rttMs, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.rttMs) &&
        Objects.equals(this.ttl, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.ttl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, aso, ipAddress, location, mile, name, packetLossPct, rttMs, ttl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    aso: ").append(toIndentedString(aso)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mile: ").append(toIndentedString(mile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packetLossPct: ").append(toIndentedString(packetLossPct)).append("\n");
    sb.append("    rttMs: ").append(toIndentedString(rttMs)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("aso");
    openapiFields.add("ipAddress");
    openapiFields.add("location");
    openapiFields.add("mile");
    openapiFields.add("name");
    openapiFields.add("packetLossPct");
    openapiFields.add("rttMs");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ttl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner is not found in the empty JSON string", DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aso") != null && !jsonObj.get("aso").isJsonNull()) && !jsonObj.get("aso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aso").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInnerLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("mile") != null && !jsonObj.get("mile").isJsonNull()) && !jsonObj.get("mile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mile").toString()));
      }
      // validate the optional field `mile`
      if (jsonObj.get("mile") != null && !jsonObj.get("mile").isJsonNull()) {
        MileEnum.validateJsonElement(jsonObj.get("mile"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner
  */
  public static DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

