/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.CachePurgeEverything;
import cloudflare.sdk.models.CachePurgeFiles;
import cloudflare.sdk.models.CachePurgeFilesFilesInner;
import cloudflare.sdk.models.CachePurgeFlex;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import cloudflare.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZonePurgeRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ZonePurgeRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ZonePurgeRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ZonePurgeRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CachePurgeFlex> adapterCachePurgeFlex = gson.getDelegateAdapter(this, TypeToken.get(CachePurgeFlex.class));
            final TypeAdapter<CachePurgeEverything> adapterCachePurgeEverything = gson.getDelegateAdapter(this, TypeToken.get(CachePurgeEverything.class));
            final TypeAdapter<CachePurgeFiles> adapterCachePurgeFiles = gson.getDelegateAdapter(this, TypeToken.get(CachePurgeFiles.class));

            return (TypeAdapter<T>) new TypeAdapter<ZonePurgeRequest>() {
                @Override
                public void write(JsonWriter out, ZonePurgeRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CachePurgeFlex`
                    if (value.getActualInstance() instanceof CachePurgeFlex) {
                        JsonElement element = adapterCachePurgeFlex.toJsonTree((CachePurgeFlex)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CachePurgeEverything`
                    if (value.getActualInstance() instanceof CachePurgeEverything) {
                        JsonElement element = adapterCachePurgeEverything.toJsonTree((CachePurgeEverything)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CachePurgeFiles`
                    if (value.getActualInstance() instanceof CachePurgeFiles) {
                        JsonElement element = adapterCachePurgeFiles.toJsonTree((CachePurgeFiles)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: CachePurgeEverything, CachePurgeFiles, CachePurgeFlex");
                }

                @Override
                public ZonePurgeRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CachePurgeFlex
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CachePurgeFlex.validateJsonElement(jsonElement);
                        actualAdapter = adapterCachePurgeFlex;
                        ZonePurgeRequest ret = new ZonePurgeRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CachePurgeFlex failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CachePurgeFlex'", e);
                    }
                    // deserialize CachePurgeEverything
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CachePurgeEverything.validateJsonElement(jsonElement);
                        actualAdapter = adapterCachePurgeEverything;
                        ZonePurgeRequest ret = new ZonePurgeRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CachePurgeEverything failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CachePurgeEverything'", e);
                    }
                    // deserialize CachePurgeFiles
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CachePurgeFiles.validateJsonElement(jsonElement);
                        actualAdapter = adapterCachePurgeFiles;
                        ZonePurgeRequest ret = new ZonePurgeRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CachePurgeFiles failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CachePurgeFiles'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for ZonePurgeRequest: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ZonePurgeRequest() {
        super("anyOf", Boolean.FALSE);
    }

    public ZonePurgeRequest(CachePurgeEverything o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonePurgeRequest(CachePurgeFiles o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonePurgeRequest(CachePurgeFlex o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CachePurgeFlex", CachePurgeFlex.class);
        schemas.put("CachePurgeEverything", CachePurgeEverything.class);
        schemas.put("CachePurgeFiles", CachePurgeFiles.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ZonePurgeRequest.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * CachePurgeEverything, CachePurgeFiles, CachePurgeFlex
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CachePurgeFlex) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CachePurgeEverything) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CachePurgeFiles) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CachePurgeEverything, CachePurgeFiles, CachePurgeFlex");
    }

    /**
     * Get the actual instance, which can be the following:
     * CachePurgeEverything, CachePurgeFiles, CachePurgeFlex
     *
     * @return The actual instance (CachePurgeEverything, CachePurgeFiles, CachePurgeFlex)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CachePurgeFlex`. If the actual instance is not `CachePurgeFlex`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CachePurgeFlex`
     * @throws ClassCastException if the instance is not `CachePurgeFlex`
     */
    public CachePurgeFlex getCachePurgeFlex() throws ClassCastException {
        return (CachePurgeFlex)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CachePurgeEverything`. If the actual instance is not `CachePurgeEverything`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CachePurgeEverything`
     * @throws ClassCastException if the instance is not `CachePurgeEverything`
     */
    public CachePurgeEverything getCachePurgeEverything() throws ClassCastException {
        return (CachePurgeEverything)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CachePurgeFiles`. If the actual instance is not `CachePurgeFiles`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CachePurgeFiles`
     * @throws ClassCastException if the instance is not `CachePurgeFiles`
     */
    public CachePurgeFiles getCachePurgeFiles() throws ClassCastException {
        return (CachePurgeFiles)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ZonePurgeRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CachePurgeFlex
        try {
            CachePurgeFlex.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CachePurgeFlex failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CachePurgeEverything
        try {
            CachePurgeEverything.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CachePurgeEverything failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CachePurgeFiles
        try {
            CachePurgeFiles.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CachePurgeFiles failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for ZonePurgeRequest with anyOf schemas: CachePurgeEverything, CachePurgeFiles, CachePurgeFlex. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of ZonePurgeRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ZonePurgeRequest
     * @throws IOException if the JSON string is invalid with respect to ZonePurgeRequest
     */
    public static ZonePurgeRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ZonePurgeRequest.class);
    }

    /**
     * Convert an instance of ZonePurgeRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

