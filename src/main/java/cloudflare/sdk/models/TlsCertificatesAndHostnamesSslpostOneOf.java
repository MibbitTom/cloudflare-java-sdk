/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCertificateAuthority;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesSslsettings;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesSslpostOneOf
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_BUNDLE_METHOD,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_CERTIFICATE_AUTHORITY,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_CUSTOM_CERTIFICATE,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_CUSTOM_KEY,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_METHOD,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_SETTINGS,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_TYPE,
  TlsCertificatesAndHostnamesSslpostOneOf.JSON_PROPERTY_WILDCARD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T11:53:03.004303930+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesSslpostOneOf {
  /**
   * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
   */
  public enum BundleMethodEnum {
    UBIQUITOUS("ubiquitous"),
    
    OPTIMAL("optimal"),
    
    FORCE("force");

    private String value;

    BundleMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BundleMethodEnum fromValue(String value) {
      for (BundleMethodEnum b : BundleMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BUNDLE_METHOD = "bundle_method";
  private BundleMethodEnum bundleMethod = BundleMethodEnum.UBIQUITOUS;

  public static final String JSON_PROPERTY_CERTIFICATE_AUTHORITY = "certificate_authority";
  private TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority;

  public static final String JSON_PROPERTY_CUSTOM_CERTIFICATE = "custom_certificate";
  private String customCertificate;

  public static final String JSON_PROPERTY_CUSTOM_KEY = "custom_key";
  private String customKey;

  /**
   * Domain control validation (DCV) method used for this hostname.
   */
  public enum MethodEnum {
    HTTP("http"),
    
    TXT("txt"),
    
    EMAIL("email");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private TlsCertificatesAndHostnamesSslsettings settings;

  /**
   * Level of validation to be used for this hostname. Domain validation (dv) must be used.
   */
  public enum TypeEnum {
    DV("dv");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_WILDCARD = "wildcard";
  private Boolean wildcard;

  public TlsCertificatesAndHostnamesSslpostOneOf() { 
  }

  public TlsCertificatesAndHostnamesSslpostOneOf bundleMethod(BundleMethodEnum bundleMethod) {
    this.bundleMethod = bundleMethod;
    return this;
  }

   /**
   * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
   * @return bundleMethod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUNDLE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BundleMethodEnum getBundleMethod() {
    return bundleMethod;
  }


  @JsonProperty(JSON_PROPERTY_BUNDLE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBundleMethod(BundleMethodEnum bundleMethod) {
    this.bundleMethod = bundleMethod;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf certificateAuthority(TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesCertificateAuthority getCertificateAuthority() {
    return certificateAuthority;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificateAuthority(TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf customCertificate(String customCertificate) {
    this.customCertificate = customCertificate;
    return this;
  }

   /**
   * If a custom uploaded certificate is used.
   * @return customCertificate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomCertificate() {
    return customCertificate;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomCertificate(String customCertificate) {
    this.customCertificate = customCertificate;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf customKey(String customKey) {
    this.customKey = customKey;
    return this;
  }

   /**
   * The key for a custom uploaded certificate.
   * @return customKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomKey() {
    return customKey;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomKey(String customKey) {
    this.customKey = customKey;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Domain control validation (DCV) method used for this hostname.
   * @return method
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf settings(TlsCertificatesAndHostnamesSslsettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesSslsettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(TlsCertificatesAndHostnamesSslsettings settings) {
    this.settings = settings;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Level of validation to be used for this hostname. Domain validation (dv) must be used.
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TlsCertificatesAndHostnamesSslpostOneOf wildcard(Boolean wildcard) {
    this.wildcard = wildcard;
    return this;
  }

   /**
   * Indicates whether the certificate covers a wildcard.
   * @return wildcard
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WILDCARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWildcard() {
    return wildcard;
  }


  @JsonProperty(JSON_PROPERTY_WILDCARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWildcard(Boolean wildcard) {
    this.wildcard = wildcard;
  }


  /**
   * Return true if this tls_certificates_and_hostnames_sslpost_oneOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesSslpostOneOf tlsCertificatesAndHostnamesSslpostOneOf = (TlsCertificatesAndHostnamesSslpostOneOf) o;
    return Objects.equals(this.bundleMethod, tlsCertificatesAndHostnamesSslpostOneOf.bundleMethod) &&
        Objects.equals(this.certificateAuthority, tlsCertificatesAndHostnamesSslpostOneOf.certificateAuthority) &&
        Objects.equals(this.customCertificate, tlsCertificatesAndHostnamesSslpostOneOf.customCertificate) &&
        Objects.equals(this.customKey, tlsCertificatesAndHostnamesSslpostOneOf.customKey) &&
        Objects.equals(this.method, tlsCertificatesAndHostnamesSslpostOneOf.method) &&
        Objects.equals(this.settings, tlsCertificatesAndHostnamesSslpostOneOf.settings) &&
        Objects.equals(this.type, tlsCertificatesAndHostnamesSslpostOneOf.type) &&
        Objects.equals(this.wildcard, tlsCertificatesAndHostnamesSslpostOneOf.wildcard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleMethod, certificateAuthority, customCertificate, customKey, method, settings, type, wildcard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesSslpostOneOf {\n");
    sb.append("    bundleMethod: ").append(toIndentedString(bundleMethod)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    customCertificate: ").append(toIndentedString(customCertificate)).append("\n");
    sb.append("    customKey: ").append(toIndentedString(customKey)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wildcard: ").append(toIndentedString(wildcard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bundle_method` to the URL query string
    if (getBundleMethod() != null) {
      joiner.add(String.format("%sbundle_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBundleMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `certificate_authority` to the URL query string
    if (getCertificateAuthority() != null) {
      joiner.add(String.format("%scertificate_authority%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertificateAuthority()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `custom_certificate` to the URL query string
    if (getCustomCertificate() != null) {
      joiner.add(String.format("%scustom_certificate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomCertificate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `custom_key` to the URL query string
    if (getCustomKey() != null) {
      joiner.add(String.format("%scustom_key%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `method` to the URL query string
    if (getMethod() != null) {
      joiner.add(String.format("%smethod%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `settings` to the URL query string
    if (getSettings() != null) {
      joiner.add(getSettings().toUrlQueryString(prefix + "settings" + suffix));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `wildcard` to the URL query string
    if (getWildcard() != null) {
      joiner.add(String.format("%swildcard%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWildcard()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

