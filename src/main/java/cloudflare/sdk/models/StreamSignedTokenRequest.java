/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.StreamAccessRules;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * StreamSignedTokenRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class StreamSignedTokenRequest {
  public static final String SERIALIZED_NAME_ACCESS_RULES = "accessRules";
  @SerializedName(SERIALIZED_NAME_ACCESS_RULES)
  private List<StreamAccessRules> accessRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Boolean downloadable = false;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private Integer exp;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NBF = "nbf";
  @SerializedName(SERIALIZED_NAME_NBF)
  private Integer nbf;

  public static final String SERIALIZED_NAME_PEM = "pem";
  @SerializedName(SERIALIZED_NAME_PEM)
  private String pem;

  public StreamSignedTokenRequest() {
  }

  public StreamSignedTokenRequest accessRules(List<StreamAccessRules> accessRules) {
    this.accessRules = accessRules;
    return this;
  }

  public StreamSignedTokenRequest addAccessRulesItem(StreamAccessRules accessRulesItem) {
    if (this.accessRules == null) {
      this.accessRules = new ArrayList<>();
    }
    this.accessRules.add(accessRulesItem);
    return this;
  }

   /**
   * The optional list of access rule constraints on the token. Access can be blocked or allowed based on an IP, IP range, or by country. Access rules are evaluated from first to last. If a rule matches, the associated action is applied and no further rules are evaluated.
   * @return accessRules
  **/
  @javax.annotation.Nullable
  public List<StreamAccessRules> getAccessRules() {
    return accessRules;
  }

  public void setAccessRules(List<StreamAccessRules> accessRules) {
    this.accessRules = accessRules;
  }


  public StreamSignedTokenRequest downloadable(Boolean downloadable) {
    this.downloadable = downloadable;
    return this;
  }

   /**
   * The optional boolean value that enables using signed tokens to access MP4 download links for a video.
   * @return downloadable
  **/
  @javax.annotation.Nullable
  public Boolean getDownloadable() {
    return downloadable;
  }

  public void setDownloadable(Boolean downloadable) {
    this.downloadable = downloadable;
  }


  public StreamSignedTokenRequest exp(Integer exp) {
    this.exp = exp;
    return this;
  }

   /**
   * The optional unix epoch timestamp that specficies the time after a token is not accepted. The maximum time specification is 24 hours from issuing time. If this field is not set, the default is one hour after issuing.
   * @return exp
  **/
  @javax.annotation.Nullable
  public Integer getExp() {
    return exp;
  }

  public void setExp(Integer exp) {
    this.exp = exp;
  }


  public StreamSignedTokenRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The optional ID of a Stream signing key. If present, the &#x60;pem&#x60; field is also required.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StreamSignedTokenRequest nbf(Integer nbf) {
    this.nbf = nbf;
    return this;
  }

   /**
   * The optional unix epoch timestamp that specifies the time before a the token is not accepted. If this field is not set, the default is one hour before issuing.
   * @return nbf
  **/
  @javax.annotation.Nullable
  public Integer getNbf() {
    return nbf;
  }

  public void setNbf(Integer nbf) {
    this.nbf = nbf;
  }


  public StreamSignedTokenRequest pem(String pem) {
    this.pem = pem;
    return this;
  }

   /**
   * The optional base64 encoded private key in PEM format associated with a Stream signing key. If present, the &#x60;id&#x60; field is also required.
   * @return pem
  **/
  @javax.annotation.Nullable
  public String getPem() {
    return pem;
  }

  public void setPem(String pem) {
    this.pem = pem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamSignedTokenRequest streamSignedTokenRequest = (StreamSignedTokenRequest) o;
    return Objects.equals(this.accessRules, streamSignedTokenRequest.accessRules) &&
        Objects.equals(this.downloadable, streamSignedTokenRequest.downloadable) &&
        Objects.equals(this.exp, streamSignedTokenRequest.exp) &&
        Objects.equals(this.id, streamSignedTokenRequest.id) &&
        Objects.equals(this.nbf, streamSignedTokenRequest.nbf) &&
        Objects.equals(this.pem, streamSignedTokenRequest.pem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessRules, downloadable, exp, id, nbf, pem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamSignedTokenRequest {\n");
    sb.append("    accessRules: ").append(toIndentedString(accessRules)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("    pem: ").append(toIndentedString(pem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessRules");
    openapiFields.add("downloadable");
    openapiFields.add("exp");
    openapiFields.add("id");
    openapiFields.add("nbf");
    openapiFields.add("pem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StreamSignedTokenRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamSignedTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamSignedTokenRequest is not found in the empty JSON string", StreamSignedTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamSignedTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamSignedTokenRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessRules") != null && !jsonObj.get("accessRules").isJsonNull()) {
        JsonArray jsonArrayaccessRules = jsonObj.getAsJsonArray("accessRules");
        if (jsonArrayaccessRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessRules` to be an array in the JSON string but got `%s`", jsonObj.get("accessRules").toString()));
          }

          // validate the optional field `accessRules` (array)
          for (int i = 0; i < jsonArrayaccessRules.size(); i++) {
            StreamAccessRules.validateJsonElement(jsonArrayaccessRules.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("pem") != null && !jsonObj.get("pem").isJsonNull()) && !jsonObj.get("pem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamSignedTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamSignedTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamSignedTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamSignedTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamSignedTokenRequest>() {
           @Override
           public void write(JsonWriter out, StreamSignedTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamSignedTokenRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamSignedTokenRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamSignedTokenRequest
  * @throws IOException if the JSON string is invalid with respect to StreamSignedTokenRequest
  */
  public static StreamSignedTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamSignedTokenRequest.class);
  }

 /**
  * Convert an instance of StreamSignedTokenRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

