/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesComponentsSchemasStatus;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCustomMetadata;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesOwnershipVerification;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesOwnershipVerificationHttp;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesSsl;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesCustomHostname
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_HOSTNAME,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_SSL,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_CREATED_AT,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_CUSTOM_METADATA,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_CUSTOM_ORIGIN_SERVER,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_CUSTOM_ORIGIN_SNI,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_OWNERSHIP_VERIFICATION,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_OWNERSHIP_VERIFICATION_HTTP,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_STATUS,
  TlsCertificatesAndHostnamesCustomHostname.JSON_PROPERTY_VERIFICATION_ERRORS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesCustomHostname {
  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_SSL = "ssl";
  private TlsCertificatesAndHostnamesSsl ssl;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_CUSTOM_METADATA = "custom_metadata";
  private TlsCertificatesAndHostnamesCustomMetadata customMetadata;

  public static final String JSON_PROPERTY_CUSTOM_ORIGIN_SERVER = "custom_origin_server";
  private String customOriginServer;

  public static final String JSON_PROPERTY_CUSTOM_ORIGIN_SNI = "custom_origin_sni";
  private String customOriginSni;

  public static final String JSON_PROPERTY_OWNERSHIP_VERIFICATION = "ownership_verification";
  private TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification;

  public static final String JSON_PROPERTY_OWNERSHIP_VERIFICATION_HTTP = "ownership_verification_http";
  private TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TlsCertificatesAndHostnamesComponentsSchemasStatus status;

  public static final String JSON_PROPERTY_VERIFICATION_ERRORS = "verification_errors";
  private List<Object> verificationErrors = new ArrayList<>();

  public TlsCertificatesAndHostnamesCustomHostname() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesCustomHostname(
    @JsonProperty(JSON_PROPERTY_HOSTNAME) String hostname, 
    @JsonProperty(JSON_PROPERTY_ID) String id
  ) {
  this();
    this.hostname = hostname;
    this.id = id;
  }

   /**
   * The custom hostname that will point to your hostname via CNAME.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHostname() {
    return hostname;
  }




   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }




  public TlsCertificatesAndHostnamesCustomHostname ssl(TlsCertificatesAndHostnamesSsl ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * @return ssl
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SSL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesSsl getSsl() {
    return ssl;
  }


  @JsonProperty(JSON_PROPERTY_SSL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSsl(TlsCertificatesAndHostnamesSsl ssl) {
    this.ssl = ssl;
  }


  public TlsCertificatesAndHostnamesCustomHostname createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * This is the time the hostname was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TlsCertificatesAndHostnamesCustomHostname customMetadata(TlsCertificatesAndHostnamesCustomMetadata customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

   /**
   * Get customMetadata
   * @return customMetadata
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesCustomMetadata getCustomMetadata() {
    return customMetadata;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomMetadata(TlsCertificatesAndHostnamesCustomMetadata customMetadata) {
    this.customMetadata = customMetadata;
  }


  public TlsCertificatesAndHostnamesCustomHostname customOriginServer(String customOriginServer) {
    this.customOriginServer = customOriginServer;
    return this;
  }

   /**
   * a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
   * @return customOriginServer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_ORIGIN_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomOriginServer() {
    return customOriginServer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_ORIGIN_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomOriginServer(String customOriginServer) {
    this.customOriginServer = customOriginServer;
  }


  public TlsCertificatesAndHostnamesCustomHostname customOriginSni(String customOriginSni) {
    this.customOriginSni = customOriginSni;
    return this;
  }

   /**
   * A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request_host_header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
   * @return customOriginSni
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOM_ORIGIN_SNI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomOriginSni() {
    return customOriginSni;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_ORIGIN_SNI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomOriginSni(String customOriginSni) {
    this.customOriginSni = customOriginSni;
  }


  public TlsCertificatesAndHostnamesCustomHostname ownershipVerification(TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification) {
    this.ownershipVerification = ownershipVerification;
    return this;
  }

   /**
   * Get ownershipVerification
   * @return ownershipVerification
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNERSHIP_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesOwnershipVerification getOwnershipVerification() {
    return ownershipVerification;
  }


  @JsonProperty(JSON_PROPERTY_OWNERSHIP_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnershipVerification(TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification) {
    this.ownershipVerification = ownershipVerification;
  }


  public TlsCertificatesAndHostnamesCustomHostname ownershipVerificationHttp(TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp) {
    this.ownershipVerificationHttp = ownershipVerificationHttp;
    return this;
  }

   /**
   * Get ownershipVerificationHttp
   * @return ownershipVerificationHttp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNERSHIP_VERIFICATION_HTTP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesOwnershipVerificationHttp getOwnershipVerificationHttp() {
    return ownershipVerificationHttp;
  }


  @JsonProperty(JSON_PROPERTY_OWNERSHIP_VERIFICATION_HTTP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnershipVerificationHttp(TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp) {
    this.ownershipVerificationHttp = ownershipVerificationHttp;
  }


  public TlsCertificatesAndHostnamesCustomHostname status(TlsCertificatesAndHostnamesComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesComponentsSchemasStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(TlsCertificatesAndHostnamesComponentsSchemasStatus status) {
    this.status = status;
  }


  public TlsCertificatesAndHostnamesCustomHostname verificationErrors(List<Object> verificationErrors) {
    this.verificationErrors = verificationErrors;
    return this;
  }

  public TlsCertificatesAndHostnamesCustomHostname addVerificationErrorsItem(Object verificationErrorsItem) {
    if (this.verificationErrors == null) {
      this.verificationErrors = new ArrayList<>();
    }
    this.verificationErrors.add(verificationErrorsItem);
    return this;
  }

   /**
   * These are errors that were encountered while trying to activate a hostname.
   * @return verificationErrors
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFICATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getVerificationErrors() {
    return verificationErrors;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerificationErrors(List<Object> verificationErrors) {
    this.verificationErrors = verificationErrors;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_custom-hostname object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesCustomHostname tlsCertificatesAndHostnamesCustomHostname = (TlsCertificatesAndHostnamesCustomHostname) o;
    return Objects.equals(this.hostname, tlsCertificatesAndHostnamesCustomHostname.hostname) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesCustomHostname.id) &&
        Objects.equals(this.ssl, tlsCertificatesAndHostnamesCustomHostname.ssl) &&
        Objects.equals(this.createdAt, tlsCertificatesAndHostnamesCustomHostname.createdAt) &&
        Objects.equals(this.customMetadata, tlsCertificatesAndHostnamesCustomHostname.customMetadata) &&
        Objects.equals(this.customOriginServer, tlsCertificatesAndHostnamesCustomHostname.customOriginServer) &&
        Objects.equals(this.customOriginSni, tlsCertificatesAndHostnamesCustomHostname.customOriginSni) &&
        Objects.equals(this.ownershipVerification, tlsCertificatesAndHostnamesCustomHostname.ownershipVerification) &&
        Objects.equals(this.ownershipVerificationHttp, tlsCertificatesAndHostnamesCustomHostname.ownershipVerificationHttp) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesCustomHostname.status) &&
        Objects.equals(this.verificationErrors, tlsCertificatesAndHostnamesCustomHostname.verificationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, id, ssl, createdAt, customMetadata, customOriginServer, customOriginSni, ownershipVerification, ownershipVerificationHttp, status, verificationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesCustomHostname {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    customOriginServer: ").append(toIndentedString(customOriginServer)).append("\n");
    sb.append("    customOriginSni: ").append(toIndentedString(customOriginSni)).append("\n");
    sb.append("    ownershipVerification: ").append(toIndentedString(ownershipVerification)).append("\n");
    sb.append("    ownershipVerificationHttp: ").append(toIndentedString(ownershipVerificationHttp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    verificationErrors: ").append(toIndentedString(verificationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `custom_metadata` to the URL query string
    if (getCustomMetadata() != null) {
      joiner.add(getCustomMetadata().toUrlQueryString(prefix + "custom_metadata" + suffix));
    }

    // add `custom_origin_server` to the URL query string
    if (getCustomOriginServer() != null) {
      joiner.add(String.format("%scustom_origin_server%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomOriginServer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `custom_origin_sni` to the URL query string
    if (getCustomOriginSni() != null) {
      joiner.add(String.format("%scustom_origin_sni%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomOriginSni()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%shostname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ownership_verification` to the URL query string
    if (getOwnershipVerification() != null) {
      joiner.add(getOwnershipVerification().toUrlQueryString(prefix + "ownership_verification" + suffix));
    }

    // add `ownership_verification_http` to the URL query string
    if (getOwnershipVerificationHttp() != null) {
      joiner.add(getOwnershipVerificationHttp().toUrlQueryString(prefix + "ownership_verification_http" + suffix));
    }

    // add `ssl` to the URL query string
    if (getSsl() != null) {
      joiner.add(getSsl().toUrlQueryString(prefix + "ssl" + suffix));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `verification_errors` to the URL query string
    if (getVerificationErrors() != null) {
      for (int i = 0; i < getVerificationErrors().size(); i++) {
        joiner.add(String.format("%sverification_errors%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getVerificationErrors().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

