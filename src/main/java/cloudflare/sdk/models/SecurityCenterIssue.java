/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.SecurityCenterIssueType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * SecurityCenterIssue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class SecurityCenterIssue {
  public static final String SERIALIZED_NAME_DISMISSED = "dismissed";
  @SerializedName(SERIALIZED_NAME_DISMISSED)
  private Boolean dismissed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUE_CLASS = "issue_class";
  @SerializedName(SERIALIZED_NAME_ISSUE_CLASS)
  private String issueClass;

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issue_type";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private SecurityCenterIssueType issueType;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Object payload;

  public static final String SERIALIZED_NAME_RESOLVE_LINK = "resolve_link";
  @SerializedName(SERIALIZED_NAME_RESOLVE_LINK)
  private String resolveLink;

  public static final String SERIALIZED_NAME_RESOLVE_TEXT = "resolve_text";
  @SerializedName(SERIALIZED_NAME_RESOLVE_TEXT)
  private String resolveText;

  /**
   * Gets or Sets severity
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    LOW("Low"),
    
    MODERATE("Moderate"),
    
    CRITICAL("Critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public SecurityCenterIssue() {
  }

  public SecurityCenterIssue dismissed(Boolean dismissed) {
    this.dismissed = dismissed;
    return this;
  }

   /**
   * Get dismissed
   * @return dismissed
  **/
  @javax.annotation.Nullable
  public Boolean getDismissed() {
    return dismissed;
  }

  public void setDismissed(Boolean dismissed) {
    this.dismissed = dismissed;
  }


  public SecurityCenterIssue id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SecurityCenterIssue issueClass(String issueClass) {
    this.issueClass = issueClass;
    return this;
  }

   /**
   * Get issueClass
   * @return issueClass
  **/
  @javax.annotation.Nullable
  public String getIssueClass() {
    return issueClass;
  }

  public void setIssueClass(String issueClass) {
    this.issueClass = issueClass;
  }


  public SecurityCenterIssue issueType(SecurityCenterIssueType issueType) {
    this.issueType = issueType;
    return this;
  }

   /**
   * Get issueType
   * @return issueType
  **/
  @javax.annotation.Nullable
  public SecurityCenterIssueType getIssueType() {
    return issueType;
  }

  public void setIssueType(SecurityCenterIssueType issueType) {
    this.issueType = issueType;
  }


  public SecurityCenterIssue payload(Object payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/
  @javax.annotation.Nullable
  public Object getPayload() {
    return payload;
  }

  public void setPayload(Object payload) {
    this.payload = payload;
  }


  public SecurityCenterIssue resolveLink(String resolveLink) {
    this.resolveLink = resolveLink;
    return this;
  }

   /**
   * Get resolveLink
   * @return resolveLink
  **/
  @javax.annotation.Nullable
  public String getResolveLink() {
    return resolveLink;
  }

  public void setResolveLink(String resolveLink) {
    this.resolveLink = resolveLink;
  }


  public SecurityCenterIssue resolveText(String resolveText) {
    this.resolveText = resolveText;
    return this;
  }

   /**
   * Get resolveText
   * @return resolveText
  **/
  @javax.annotation.Nullable
  public String getResolveText() {
    return resolveText;
  }

  public void setResolveText(String resolveText) {
    this.resolveText = resolveText;
  }


  public SecurityCenterIssue severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public SecurityCenterIssue since(OffsetDateTime since) {
    this.since = since;
    return this;
  }

   /**
   * Get since
   * @return since
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSince() {
    return since;
  }

  public void setSince(OffsetDateTime since) {
    this.since = since;
  }


  public SecurityCenterIssue subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public SecurityCenterIssue timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityCenterIssue securityCenterIssue = (SecurityCenterIssue) o;
    return Objects.equals(this.dismissed, securityCenterIssue.dismissed) &&
        Objects.equals(this.id, securityCenterIssue.id) &&
        Objects.equals(this.issueClass, securityCenterIssue.issueClass) &&
        Objects.equals(this.issueType, securityCenterIssue.issueType) &&
        Objects.equals(this.payload, securityCenterIssue.payload) &&
        Objects.equals(this.resolveLink, securityCenterIssue.resolveLink) &&
        Objects.equals(this.resolveText, securityCenterIssue.resolveText) &&
        Objects.equals(this.severity, securityCenterIssue.severity) &&
        Objects.equals(this.since, securityCenterIssue.since) &&
        Objects.equals(this.subject, securityCenterIssue.subject) &&
        Objects.equals(this.timestamp, securityCenterIssue.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dismissed, id, issueClass, issueType, payload, resolveLink, resolveText, severity, since, subject, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityCenterIssue {\n");
    sb.append("    dismissed: ").append(toIndentedString(dismissed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueClass: ").append(toIndentedString(issueClass)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    resolveLink: ").append(toIndentedString(resolveLink)).append("\n");
    sb.append("    resolveText: ").append(toIndentedString(resolveText)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dismissed");
    openapiFields.add("id");
    openapiFields.add("issue_class");
    openapiFields.add("issue_type");
    openapiFields.add("payload");
    openapiFields.add("resolve_link");
    openapiFields.add("resolve_text");
    openapiFields.add("severity");
    openapiFields.add("since");
    openapiFields.add("subject");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SecurityCenterIssue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityCenterIssue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityCenterIssue is not found in the empty JSON string", SecurityCenterIssue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityCenterIssue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityCenterIssue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issue_class") != null && !jsonObj.get("issue_class").isJsonNull()) && !jsonObj.get("issue_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_class").toString()));
      }
      // validate the optional field `issue_type`
      if (jsonObj.get("issue_type") != null && !jsonObj.get("issue_type").isJsonNull()) {
        SecurityCenterIssueType.validateJsonElement(jsonObj.get("issue_type"));
      }
      if ((jsonObj.get("resolve_link") != null && !jsonObj.get("resolve_link").isJsonNull()) && !jsonObj.get("resolve_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolve_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolve_link").toString()));
      }
      if ((jsonObj.get("resolve_text") != null && !jsonObj.get("resolve_text").isJsonNull()) && !jsonObj.get("resolve_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolve_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolve_text").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityCenterIssue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityCenterIssue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityCenterIssue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityCenterIssue.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityCenterIssue>() {
           @Override
           public void write(JsonWriter out, SecurityCenterIssue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityCenterIssue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SecurityCenterIssue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SecurityCenterIssue
  * @throws IOException if the JSON string is invalid with respect to SecurityCenterIssue
  */
  public static SecurityCenterIssue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityCenterIssue.class);
  }

 /**
  * Convert an instance of SecurityCenterIssue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

