/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.IntelPassiveDnsByIpReverseRecordsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * IntelPassiveDnsByIp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IntelPassiveDnsByIp {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private BigDecimal perPage;

  public static final String SERIALIZED_NAME_REVERSE_RECORDS = "reverse_records";
  @SerializedName(SERIALIZED_NAME_REVERSE_RECORDS)
  private List<IntelPassiveDnsByIpReverseRecordsInner> reverseRecords = new ArrayList<>();

  public IntelPassiveDnsByIp() {
  }

  public IntelPassiveDnsByIp count(BigDecimal count) {
    this.count = count;
    return this;
  }

   /**
   * Total results returned based on your search parameters.
   * @return count
  **/
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public IntelPassiveDnsByIp page(BigDecimal page) {
    this.page = page;
    return this;
  }

   /**
   * Current page within paginated list of results.
   * @return page
  **/
  @javax.annotation.Nullable
  public BigDecimal getPage() {
    return page;
  }

  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public IntelPassiveDnsByIp perPage(BigDecimal perPage) {
    this.perPage = perPage;
    return this;
  }

   /**
   * Number of results per page of results.
   * @return perPage
  **/
  @javax.annotation.Nullable
  public BigDecimal getPerPage() {
    return perPage;
  }

  public void setPerPage(BigDecimal perPage) {
    this.perPage = perPage;
  }


  public IntelPassiveDnsByIp reverseRecords(List<IntelPassiveDnsByIpReverseRecordsInner> reverseRecords) {
    this.reverseRecords = reverseRecords;
    return this;
  }

  public IntelPassiveDnsByIp addReverseRecordsItem(IntelPassiveDnsByIpReverseRecordsInner reverseRecordsItem) {
    if (this.reverseRecords == null) {
      this.reverseRecords = new ArrayList<>();
    }
    this.reverseRecords.add(reverseRecordsItem);
    return this;
  }

   /**
   * Reverse DNS look-ups observed during the time period.
   * @return reverseRecords
  **/
  @javax.annotation.Nullable
  public List<IntelPassiveDnsByIpReverseRecordsInner> getReverseRecords() {
    return reverseRecords;
  }

  public void setReverseRecords(List<IntelPassiveDnsByIpReverseRecordsInner> reverseRecords) {
    this.reverseRecords = reverseRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelPassiveDnsByIp intelPassiveDnsByIp = (IntelPassiveDnsByIp) o;
    return Objects.equals(this.count, intelPassiveDnsByIp.count) &&
        Objects.equals(this.page, intelPassiveDnsByIp.page) &&
        Objects.equals(this.perPage, intelPassiveDnsByIp.perPage) &&
        Objects.equals(this.reverseRecords, intelPassiveDnsByIp.reverseRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, page, perPage, reverseRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelPassiveDnsByIp {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    reverseRecords: ").append(toIndentedString(reverseRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("page");
    openapiFields.add("per_page");
    openapiFields.add("reverse_records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntelPassiveDnsByIp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelPassiveDnsByIp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelPassiveDnsByIp is not found in the empty JSON string", IntelPassiveDnsByIp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelPassiveDnsByIp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelPassiveDnsByIp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("reverse_records") != null && !jsonObj.get("reverse_records").isJsonNull()) {
        JsonArray jsonArrayreverseRecords = jsonObj.getAsJsonArray("reverse_records");
        if (jsonArrayreverseRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reverse_records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reverse_records` to be an array in the JSON string but got `%s`", jsonObj.get("reverse_records").toString()));
          }

          // validate the optional field `reverse_records` (array)
          for (int i = 0; i < jsonArrayreverseRecords.size(); i++) {
            IntelPassiveDnsByIpReverseRecordsInner.validateJsonElement(jsonArrayreverseRecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelPassiveDnsByIp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelPassiveDnsByIp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelPassiveDnsByIp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelPassiveDnsByIp.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelPassiveDnsByIp>() {
           @Override
           public void write(JsonWriter out, IntelPassiveDnsByIp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelPassiveDnsByIp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntelPassiveDnsByIp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntelPassiveDnsByIp
  * @throws IOException if the JSON string is invalid with respect to IntelPassiveDnsByIp
  */
  public static IntelPassiveDnsByIp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelPassiveDnsByIp.class);
  }

 /**
  * Convert an instance of IntelPassiveDnsByIp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

