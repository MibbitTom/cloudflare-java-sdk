/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * UrlscannerGetScan200ResponseResultScanPageCookiesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScan200ResponseResultScanPageCookiesInner {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private BigDecimal expires;

  public static final String SERIALIZED_NAME_HTTP_ONLY = "httpOnly";
  @SerializedName(SERIALIZED_NAME_HTTP_ONLY)
  private Boolean httpOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_SAME_PARTY = "sameParty";
  @SerializedName(SERIALIZED_NAME_SAME_PARTY)
  private Boolean sameParty;

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private Boolean secure;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private Boolean session;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_SOURCE_PORT = "sourcePort";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT)
  private BigDecimal sourcePort;

  public static final String SERIALIZED_NAME_SOURCE_SCHEME = "sourceScheme";
  @SerializedName(SERIALIZED_NAME_SOURCE_SCHEME)
  private String sourceScheme;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public UrlscannerGetScan200ResponseResultScanPageCookiesInner() {
  }

  public UrlscannerGetScan200ResponseResultScanPageCookiesInner domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner expires(BigDecimal expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Get expires
   * @return expires
  **/
  @javax.annotation.Nonnull
  public BigDecimal getExpires() {
    return expires;
  }

  public void setExpires(BigDecimal expires) {
    this.expires = expires;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner httpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
    return this;
  }

   /**
   * Get httpOnly
   * @return httpOnly
  **/
  @javax.annotation.Nonnull
  public Boolean getHttpOnly() {
    return httpOnly;
  }

  public void setHttpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner sameParty(Boolean sameParty) {
    this.sameParty = sameParty;
    return this;
  }

   /**
   * Get sameParty
   * @return sameParty
  **/
  @javax.annotation.Nonnull
  public Boolean getSameParty() {
    return sameParty;
  }

  public void setSameParty(Boolean sameParty) {
    this.sameParty = sameParty;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

   /**
   * Get secure
   * @return secure
  **/
  @javax.annotation.Nonnull
  public Boolean getSecure() {
    return secure;
  }

  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner session(Boolean session) {
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nonnull
  public Boolean getSession() {
    return session;
  }

  public void setSession(Boolean session) {
    this.session = session;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner size(BigDecimal size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner sourcePort(BigDecimal sourcePort) {
    this.sourcePort = sourcePort;
    return this;
  }

   /**
   * Get sourcePort
   * @return sourcePort
  **/
  @javax.annotation.Nonnull
  public BigDecimal getSourcePort() {
    return sourcePort;
  }

  public void setSourcePort(BigDecimal sourcePort) {
    this.sourcePort = sourcePort;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner sourceScheme(String sourceScheme) {
    this.sourceScheme = sourceScheme;
    return this;
  }

   /**
   * Get sourceScheme
   * @return sourceScheme
  **/
  @javax.annotation.Nonnull
  public String getSourceScheme() {
    return sourceScheme;
  }

  public void setSourceScheme(String sourceScheme) {
    this.sourceScheme = sourceScheme;
  }


  public UrlscannerGetScan200ResponseResultScanPageCookiesInner value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScan200ResponseResultScanPageCookiesInner urlscannerGetScan200ResponseResultScanPageCookiesInner = (UrlscannerGetScan200ResponseResultScanPageCookiesInner) o;
    return Objects.equals(this.domain, urlscannerGetScan200ResponseResultScanPageCookiesInner.domain) &&
        Objects.equals(this.expires, urlscannerGetScan200ResponseResultScanPageCookiesInner.expires) &&
        Objects.equals(this.httpOnly, urlscannerGetScan200ResponseResultScanPageCookiesInner.httpOnly) &&
        Objects.equals(this.name, urlscannerGetScan200ResponseResultScanPageCookiesInner.name) &&
        Objects.equals(this.path, urlscannerGetScan200ResponseResultScanPageCookiesInner.path) &&
        Objects.equals(this.priority, urlscannerGetScan200ResponseResultScanPageCookiesInner.priority) &&
        Objects.equals(this.sameParty, urlscannerGetScan200ResponseResultScanPageCookiesInner.sameParty) &&
        Objects.equals(this.secure, urlscannerGetScan200ResponseResultScanPageCookiesInner.secure) &&
        Objects.equals(this.session, urlscannerGetScan200ResponseResultScanPageCookiesInner.session) &&
        Objects.equals(this.size, urlscannerGetScan200ResponseResultScanPageCookiesInner.size) &&
        Objects.equals(this.sourcePort, urlscannerGetScan200ResponseResultScanPageCookiesInner.sourcePort) &&
        Objects.equals(this.sourceScheme, urlscannerGetScan200ResponseResultScanPageCookiesInner.sourceScheme) &&
        Objects.equals(this.value, urlscannerGetScan200ResponseResultScanPageCookiesInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, expires, httpOnly, name, path, priority, sameParty, secure, session, size, sourcePort, sourceScheme, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScan200ResponseResultScanPageCookiesInner {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    httpOnly: ").append(toIndentedString(httpOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sameParty: ").append(toIndentedString(sameParty)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("    sourceScheme: ").append(toIndentedString(sourceScheme)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("expires");
    openapiFields.add("httpOnly");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("priority");
    openapiFields.add("sameParty");
    openapiFields.add("secure");
    openapiFields.add("session");
    openapiFields.add("size");
    openapiFields.add("sourcePort");
    openapiFields.add("sourceScheme");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("expires");
    openapiRequiredFields.add("httpOnly");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("sameParty");
    openapiRequiredFields.add("secure");
    openapiRequiredFields.add("session");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("sourcePort");
    openapiRequiredFields.add("sourceScheme");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScan200ResponseResultScanPageCookiesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScan200ResponseResultScanPageCookiesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScan200ResponseResultScanPageCookiesInner is not found in the empty JSON string", UrlscannerGetScan200ResponseResultScanPageCookiesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScan200ResponseResultScanPageCookiesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScan200ResponseResultScanPageCookiesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScan200ResponseResultScanPageCookiesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if (!jsonObj.get("sourceScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceScheme").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScan200ResponseResultScanPageCookiesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScan200ResponseResultScanPageCookiesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScan200ResponseResultScanPageCookiesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScan200ResponseResultScanPageCookiesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScan200ResponseResultScanPageCookiesInner>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScan200ResponseResultScanPageCookiesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScan200ResponseResultScanPageCookiesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScan200ResponseResultScanPageCookiesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScan200ResponseResultScanPageCookiesInner
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScan200ResponseResultScanPageCookiesInner
  */
  public static UrlscannerGetScan200ResponseResultScanPageCookiesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScan200ResponseResultScanPageCookiesInner.class);
  }

 /**
  * Convert an instance of UrlscannerGetScan200ResponseResultScanPageCookiesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

