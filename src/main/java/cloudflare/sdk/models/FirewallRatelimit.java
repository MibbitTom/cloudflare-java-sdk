/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.FirewallAction;
import cloudflare.sdk.models.FirewallBypassInner;
import cloudflare.sdk.models.FirewallMatch;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * FirewallRatelimit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallRatelimit {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private FirewallAction action;

  public static final String SERIALIZED_NAME_BYPASS = "bypass";
  @SerializedName(SERIALIZED_NAME_BYPASS)
  private List<FirewallBypassInner> bypass = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private FirewallMatch match;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private BigDecimal period;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private BigDecimal threshold;

  public FirewallRatelimit() {
  }

  public FirewallRatelimit(
     String id
  ) {
    this();
    this.id = id;
  }

  public FirewallRatelimit action(FirewallAction action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public FirewallAction getAction() {
    return action;
  }

  public void setAction(FirewallAction action) {
    this.action = action;
  }


  public FirewallRatelimit bypass(List<FirewallBypassInner> bypass) {
    this.bypass = bypass;
    return this;
  }

  public FirewallRatelimit addBypassItem(FirewallBypassInner bypassItem) {
    if (this.bypass == null) {
      this.bypass = new ArrayList<>();
    }
    this.bypass.add(bypassItem);
    return this;
  }

   /**
   * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
   * @return bypass
  **/
  @javax.annotation.Nullable
  public List<FirewallBypassInner> getBypass() {
    return bypass;
  }

  public void setBypass(List<FirewallBypassInner> bypass) {
    this.bypass = bypass;
  }


  public FirewallRatelimit description(String description) {
    this.description = description;
    return this;
  }

   /**
   * An informative summary of the rate limit. This value is sanitized and any tags will be removed.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FirewallRatelimit disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * When true, indicates that the rate limit is currently disabled.
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


   /**
   * The unique identifier of the rate limit.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public FirewallRatelimit match(FirewallMatch match) {
    this.match = match;
    return this;
  }

   /**
   * Get match
   * @return match
  **/
  @javax.annotation.Nullable
  public FirewallMatch getMatch() {
    return match;
  }

  public void setMatch(FirewallMatch match) {
    this.match = match;
  }


  public FirewallRatelimit period(BigDecimal period) {
    this.period = period;
    return this;
  }

   /**
   * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
   * minimum: 10
   * maximum: 86400
   * @return period
  **/
  @javax.annotation.Nullable
  public BigDecimal getPeriod() {
    return period;
  }

  public void setPeriod(BigDecimal period) {
    this.period = period;
  }


  public FirewallRatelimit threshold(BigDecimal threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The threshold that will trigger the configured mitigation action. Configure this value along with the &#x60;period&#x60; property to establish a threshold per period.
   * minimum: 1
   * @return threshold
  **/
  @javax.annotation.Nullable
  public BigDecimal getThreshold() {
    return threshold;
  }

  public void setThreshold(BigDecimal threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallRatelimit firewallRatelimit = (FirewallRatelimit) o;
    return Objects.equals(this.action, firewallRatelimit.action) &&
        Objects.equals(this.bypass, firewallRatelimit.bypass) &&
        Objects.equals(this.description, firewallRatelimit.description) &&
        Objects.equals(this.disabled, firewallRatelimit.disabled) &&
        Objects.equals(this.id, firewallRatelimit.id) &&
        Objects.equals(this.match, firewallRatelimit.match) &&
        Objects.equals(this.period, firewallRatelimit.period) &&
        Objects.equals(this.threshold, firewallRatelimit.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, bypass, description, disabled, id, match, period, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallRatelimit {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    bypass: ").append(toIndentedString(bypass)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("bypass");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("id");
    openapiFields.add("match");
    openapiFields.add("period");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FirewallRatelimit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallRatelimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallRatelimit is not found in the empty JSON string", FirewallRatelimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallRatelimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallRatelimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        FirewallAction.validateJsonElement(jsonObj.get("action"));
      }
      if (jsonObj.get("bypass") != null && !jsonObj.get("bypass").isJsonNull()) {
        JsonArray jsonArraybypass = jsonObj.getAsJsonArray("bypass");
        if (jsonArraybypass != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bypass").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bypass` to be an array in the JSON string but got `%s`", jsonObj.get("bypass").toString()));
          }

          // validate the optional field `bypass` (array)
          for (int i = 0; i < jsonArraybypass.size(); i++) {
            FirewallBypassInner.validateJsonElement(jsonArraybypass.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `match`
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        FirewallMatch.validateJsonElement(jsonObj.get("match"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallRatelimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallRatelimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallRatelimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallRatelimit.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallRatelimit>() {
           @Override
           public void write(JsonWriter out, FirewallRatelimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallRatelimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirewallRatelimit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirewallRatelimit
  * @throws IOException if the JSON string is invalid with respect to FirewallRatelimit
  */
  public static FirewallRatelimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallRatelimit.class);
  }

 /**
  * Convert an instance of FirewallRatelimit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

