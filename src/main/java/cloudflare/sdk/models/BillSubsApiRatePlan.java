/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * The rate plan applied to the subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class BillSubsApiRatePlan {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EXTERNALLY_MANAGED = "externally_managed";
  @SerializedName(SERIALIZED_NAME_EXTERNALLY_MANAGED)
  private Boolean externallyManaged;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_IS_CONTRACT = "is_contract";
  @SerializedName(SERIALIZED_NAME_IS_CONTRACT)
  private Boolean isContract;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "public_name";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SETS = "sets";
  @SerializedName(SERIALIZED_NAME_SETS)
  private List<String> sets = new ArrayList<>();

  public BillSubsApiRatePlan() {
  }

  public BillSubsApiRatePlan currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency applied to the rate plan subscription.
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public BillSubsApiRatePlan externallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    return this;
  }

   /**
   * Whether this rate plan is managed externally from Cloudflare.
   * @return externallyManaged
  **/
  @javax.annotation.Nullable
  public Boolean getExternallyManaged() {
    return externallyManaged;
  }

  public void setExternallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
  }


  public BillSubsApiRatePlan id(Object id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the rate plan.
   * @return id
  **/
  @javax.annotation.Nullable
  public Object getId() {
    return id;
  }

  public void setId(Object id) {
    this.id = id;
  }


  public BillSubsApiRatePlan isContract(Boolean isContract) {
    this.isContract = isContract;
    return this;
  }

   /**
   * Whether a rate plan is enterprise-based (or newly adopted term contract).
   * @return isContract
  **/
  @javax.annotation.Nullable
  public Boolean getIsContract() {
    return isContract;
  }

  public void setIsContract(Boolean isContract) {
    this.isContract = isContract;
  }


  public BillSubsApiRatePlan publicName(String publicName) {
    this.publicName = publicName;
    return this;
  }

   /**
   * The full name of the rate plan.
   * @return publicName
  **/
  @javax.annotation.Nullable
  public String getPublicName() {
    return publicName;
  }

  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public BillSubsApiRatePlan scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope that this rate plan applies to.
   * @return scope
  **/
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public BillSubsApiRatePlan sets(List<String> sets) {
    this.sets = sets;
    return this;
  }

  public BillSubsApiRatePlan addSetsItem(String setsItem) {
    if (this.sets == null) {
      this.sets = new ArrayList<>();
    }
    this.sets.add(setsItem);
    return this;
  }

   /**
   * The list of sets this rate plan applies to.
   * @return sets
  **/
  @javax.annotation.Nullable
  public List<String> getSets() {
    return sets;
  }

  public void setSets(List<String> sets) {
    this.sets = sets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillSubsApiRatePlan billSubsApiRatePlan = (BillSubsApiRatePlan) o;
    return Objects.equals(this.currency, billSubsApiRatePlan.currency) &&
        Objects.equals(this.externallyManaged, billSubsApiRatePlan.externallyManaged) &&
        Objects.equals(this.id, billSubsApiRatePlan.id) &&
        Objects.equals(this.isContract, billSubsApiRatePlan.isContract) &&
        Objects.equals(this.publicName, billSubsApiRatePlan.publicName) &&
        Objects.equals(this.scope, billSubsApiRatePlan.scope) &&
        Objects.equals(this.sets, billSubsApiRatePlan.sets);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, externallyManaged, id, isContract, publicName, scope, sets);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillSubsApiRatePlan {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    externallyManaged: ").append(toIndentedString(externallyManaged)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isContract: ").append(toIndentedString(isContract)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sets: ").append(toIndentedString(sets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("externally_managed");
    openapiFields.add("id");
    openapiFields.add("is_contract");
    openapiFields.add("public_name");
    openapiFields.add("scope");
    openapiFields.add("sets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillSubsApiRatePlan
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillSubsApiRatePlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillSubsApiRatePlan is not found in the empty JSON string", BillSubsApiRatePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillSubsApiRatePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillSubsApiRatePlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("public_name") != null && !jsonObj.get("public_name").isJsonNull()) && !jsonObj.get("public_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_name").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sets") != null && !jsonObj.get("sets").isJsonNull() && !jsonObj.get("sets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sets` to be an array in the JSON string but got `%s`", jsonObj.get("sets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillSubsApiRatePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillSubsApiRatePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillSubsApiRatePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillSubsApiRatePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<BillSubsApiRatePlan>() {
           @Override
           public void write(JsonWriter out, BillSubsApiRatePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillSubsApiRatePlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillSubsApiRatePlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillSubsApiRatePlan
  * @throws IOException if the JSON string is invalid with respect to BillSubsApiRatePlan
  */
  public static BillSubsApiRatePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillSubsApiRatePlan.class);
  }

 /**
  * Convert an instance of BillSubsApiRatePlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

