/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * RadarGetEntitiesIp200ResponseResultIp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetEntitiesIp200ResponseResultIp {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_ASN_LOCATION = "asnLocation";
  @SerializedName(SERIALIZED_NAME_ASN_LOCATION)
  private String asnLocation;

  public static final String SERIALIZED_NAME_ASN_NAME = "asnName";
  @SerializedName(SERIALIZED_NAME_ASN_NAME)
  private String asnName;

  public static final String SERIALIZED_NAME_ASN_ORG_NAME = "asnOrgName";
  @SerializedName(SERIALIZED_NAME_ASN_ORG_NAME)
  private String asnOrgName;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IP_VERSION = "ipVersion";
  @SerializedName(SERIALIZED_NAME_IP_VERSION)
  private String ipVersion;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public RadarGetEntitiesIp200ResponseResultIp() {
  }

  public RadarGetEntitiesIp200ResponseResultIp asn(String asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Get asn
   * @return asn
  **/
  @javax.annotation.Nonnull
  public String getAsn() {
    return asn;
  }

  public void setAsn(String asn) {
    this.asn = asn;
  }


  public RadarGetEntitiesIp200ResponseResultIp asnLocation(String asnLocation) {
    this.asnLocation = asnLocation;
    return this;
  }

   /**
   * Get asnLocation
   * @return asnLocation
  **/
  @javax.annotation.Nonnull
  public String getAsnLocation() {
    return asnLocation;
  }

  public void setAsnLocation(String asnLocation) {
    this.asnLocation = asnLocation;
  }


  public RadarGetEntitiesIp200ResponseResultIp asnName(String asnName) {
    this.asnName = asnName;
    return this;
  }

   /**
   * Get asnName
   * @return asnName
  **/
  @javax.annotation.Nonnull
  public String getAsnName() {
    return asnName;
  }

  public void setAsnName(String asnName) {
    this.asnName = asnName;
  }


  public RadarGetEntitiesIp200ResponseResultIp asnOrgName(String asnOrgName) {
    this.asnOrgName = asnOrgName;
    return this;
  }

   /**
   * Get asnOrgName
   * @return asnOrgName
  **/
  @javax.annotation.Nonnull
  public String getAsnOrgName() {
    return asnOrgName;
  }

  public void setAsnOrgName(String asnOrgName) {
    this.asnOrgName = asnOrgName;
  }


  public RadarGetEntitiesIp200ResponseResultIp ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public RadarGetEntitiesIp200ResponseResultIp ipVersion(String ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

   /**
   * Get ipVersion
   * @return ipVersion
  **/
  @javax.annotation.Nonnull
  public String getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(String ipVersion) {
    this.ipVersion = ipVersion;
  }


  public RadarGetEntitiesIp200ResponseResultIp location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public RadarGetEntitiesIp200ResponseResultIp locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

   /**
   * Get locationName
   * @return locationName
  **/
  @javax.annotation.Nonnull
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetEntitiesIp200ResponseResultIp radarGetEntitiesIp200ResponseResultIp = (RadarGetEntitiesIp200ResponseResultIp) o;
    return Objects.equals(this.asn, radarGetEntitiesIp200ResponseResultIp.asn) &&
        Objects.equals(this.asnLocation, radarGetEntitiesIp200ResponseResultIp.asnLocation) &&
        Objects.equals(this.asnName, radarGetEntitiesIp200ResponseResultIp.asnName) &&
        Objects.equals(this.asnOrgName, radarGetEntitiesIp200ResponseResultIp.asnOrgName) &&
        Objects.equals(this.ip, radarGetEntitiesIp200ResponseResultIp.ip) &&
        Objects.equals(this.ipVersion, radarGetEntitiesIp200ResponseResultIp.ipVersion) &&
        Objects.equals(this.location, radarGetEntitiesIp200ResponseResultIp.location) &&
        Objects.equals(this.locationName, radarGetEntitiesIp200ResponseResultIp.locationName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, asnLocation, asnName, asnOrgName, ip, ipVersion, location, locationName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetEntitiesIp200ResponseResultIp {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    asnLocation: ").append(toIndentedString(asnLocation)).append("\n");
    sb.append("    asnName: ").append(toIndentedString(asnName)).append("\n");
    sb.append("    asnOrgName: ").append(toIndentedString(asnOrgName)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("asnLocation");
    openapiFields.add("asnName");
    openapiFields.add("asnOrgName");
    openapiFields.add("ip");
    openapiFields.add("ipVersion");
    openapiFields.add("location");
    openapiFields.add("locationName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("asnLocation");
    openapiRequiredFields.add("asnName");
    openapiRequiredFields.add("asnOrgName");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("ipVersion");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("locationName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetEntitiesIp200ResponseResultIp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetEntitiesIp200ResponseResultIp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetEntitiesIp200ResponseResultIp is not found in the empty JSON string", RadarGetEntitiesIp200ResponseResultIp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetEntitiesIp200ResponseResultIp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetEntitiesIp200ResponseResultIp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetEntitiesIp200ResponseResultIp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("asn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn").toString()));
      }
      if (!jsonObj.get("asnLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asnLocation").toString()));
      }
      if (!jsonObj.get("asnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asnName").toString()));
      }
      if (!jsonObj.get("asnOrgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnOrgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asnOrgName").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("ipVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipVersion").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetEntitiesIp200ResponseResultIp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetEntitiesIp200ResponseResultIp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetEntitiesIp200ResponseResultIp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetEntitiesIp200ResponseResultIp.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetEntitiesIp200ResponseResultIp>() {
           @Override
           public void write(JsonWriter out, RadarGetEntitiesIp200ResponseResultIp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetEntitiesIp200ResponseResultIp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetEntitiesIp200ResponseResultIp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetEntitiesIp200ResponseResultIp
  * @throws IOException if the JSON string is invalid with respect to RadarGetEntitiesIp200ResponseResultIp
  */
  public static RadarGetEntitiesIp200ResponseResultIp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetEntitiesIp200ResponseResultIp.class);
  }

 /**
  * Convert an instance of RadarGetEntitiesIp200ResponseResultIp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

