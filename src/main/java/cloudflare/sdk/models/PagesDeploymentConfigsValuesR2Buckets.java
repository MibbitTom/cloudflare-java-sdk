/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.PagesDeploymentConfigsValuesR2BucketsR2BINDING;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * R2 buckets used for Pages Functions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class PagesDeploymentConfigsValuesR2Buckets {
  public static final String SERIALIZED_NAME_R2_B_I_N_D_I_N_G = "R2_BINDING";
  @SerializedName(SERIALIZED_NAME_R2_B_I_N_D_I_N_G)
  private PagesDeploymentConfigsValuesR2BucketsR2BINDING R2_BINDING;

  public PagesDeploymentConfigsValuesR2Buckets() {
  }

  public PagesDeploymentConfigsValuesR2Buckets R2_BINDING(PagesDeploymentConfigsValuesR2BucketsR2BINDING R2_BINDING) {
    this.R2_BINDING = R2_BINDING;
    return this;
  }

   /**
   * Get R2_BINDING
   * @return R2_BINDING
  **/
  @javax.annotation.Nullable
  public PagesDeploymentConfigsValuesR2BucketsR2BINDING getR2BINDING() {
    return R2_BINDING;
  }

  public void setR2BINDING(PagesDeploymentConfigsValuesR2BucketsR2BINDING R2_BINDING) {
    this.R2_BINDING = R2_BINDING;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagesDeploymentConfigsValuesR2Buckets pagesDeploymentConfigsValuesR2Buckets = (PagesDeploymentConfigsValuesR2Buckets) o;
    return Objects.equals(this.R2_BINDING, pagesDeploymentConfigsValuesR2Buckets.R2_BINDING);
  }

  @Override
  public int hashCode() {
    return Objects.hash(R2_BINDING);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagesDeploymentConfigsValuesR2Buckets {\n");
    sb.append("    R2_BINDING: ").append(toIndentedString(R2_BINDING)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("R2_BINDING");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PagesDeploymentConfigsValuesR2Buckets
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagesDeploymentConfigsValuesR2Buckets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagesDeploymentConfigsValuesR2Buckets is not found in the empty JSON string", PagesDeploymentConfigsValuesR2Buckets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagesDeploymentConfigsValuesR2Buckets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagesDeploymentConfigsValuesR2Buckets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `R2_BINDING`
      if (jsonObj.get("R2_BINDING") != null && !jsonObj.get("R2_BINDING").isJsonNull()) {
        PagesDeploymentConfigsValuesR2BucketsR2BINDING.validateJsonElement(jsonObj.get("R2_BINDING"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagesDeploymentConfigsValuesR2Buckets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagesDeploymentConfigsValuesR2Buckets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagesDeploymentConfigsValuesR2Buckets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagesDeploymentConfigsValuesR2Buckets.class));

       return (TypeAdapter<T>) new TypeAdapter<PagesDeploymentConfigsValuesR2Buckets>() {
           @Override
           public void write(JsonWriter out, PagesDeploymentConfigsValuesR2Buckets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagesDeploymentConfigsValuesR2Buckets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PagesDeploymentConfigsValuesR2Buckets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PagesDeploymentConfigsValuesR2Buckets
  * @throws IOException if the JSON string is invalid with respect to PagesDeploymentConfigsValuesR2Buckets
  */
  public static PagesDeploymentConfigsValuesR2Buckets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagesDeploymentConfigsValuesR2Buckets.class);
  }

 /**
  * Convert an instance of PagesDeploymentConfigsValuesR2Buckets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

