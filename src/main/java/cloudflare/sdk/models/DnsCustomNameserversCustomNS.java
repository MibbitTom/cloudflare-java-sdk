/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.DnsCustomNameserversCustomNSDnsRecordsInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * A single account custom nameserver.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DnsCustomNameserversCustomNS {
  public static final String SERIALIZED_NAME_DNS_RECORDS = "dns_records";
  @SerializedName(SERIALIZED_NAME_DNS_RECORDS)
  private List<DnsCustomNameserversCustomNSDnsRecordsInner> dnsRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_NS_NAME = "ns_name";
  @SerializedName(SERIALIZED_NAME_NS_NAME)
  private String nsName;

  public static final String SERIALIZED_NAME_NS_SET = "ns_set";
  @SerializedName(SERIALIZED_NAME_NS_SET)
  private BigDecimal nsSet = new BigDecimal("1");

  /**
   * Verification status of the nameserver.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    MOVED("moved"),
    
    PENDING("pending"),
    
    VERIFIED("verified");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ZONE_TAG = "zone_tag";
  @SerializedName(SERIALIZED_NAME_ZONE_TAG)
  private String zoneTag;

  public DnsCustomNameserversCustomNS() {
  }

  public DnsCustomNameserversCustomNS(
     String zoneTag
  ) {
    this();
    this.zoneTag = zoneTag;
  }

  public DnsCustomNameserversCustomNS dnsRecords(List<DnsCustomNameserversCustomNSDnsRecordsInner> dnsRecords) {
    this.dnsRecords = dnsRecords;
    return this;
  }

  public DnsCustomNameserversCustomNS addDnsRecordsItem(DnsCustomNameserversCustomNSDnsRecordsInner dnsRecordsItem) {
    if (this.dnsRecords == null) {
      this.dnsRecords = new ArrayList<>();
    }
    this.dnsRecords.add(dnsRecordsItem);
    return this;
  }

   /**
   * A and AAAA records associated with the nameserver.
   * @return dnsRecords
  **/
  @javax.annotation.Nonnull
  public List<DnsCustomNameserversCustomNSDnsRecordsInner> getDnsRecords() {
    return dnsRecords;
  }

  public void setDnsRecords(List<DnsCustomNameserversCustomNSDnsRecordsInner> dnsRecords) {
    this.dnsRecords = dnsRecords;
  }


  public DnsCustomNameserversCustomNS nsName(String nsName) {
    this.nsName = nsName;
    return this;
  }

   /**
   * The FQDN of the name server.
   * @return nsName
  **/
  @javax.annotation.Nonnull
  public String getNsName() {
    return nsName;
  }

  public void setNsName(String nsName) {
    this.nsName = nsName;
  }


  public DnsCustomNameserversCustomNS nsSet(BigDecimal nsSet) {
    this.nsSet = nsSet;
    return this;
  }

   /**
   * The number of the set that this name server belongs to.
   * minimum: 1
   * maximum: 5
   * @return nsSet
  **/
  @javax.annotation.Nullable
  public BigDecimal getNsSet() {
    return nsSet;
  }

  public void setNsSet(BigDecimal nsSet) {
    this.nsSet = nsSet;
  }


  @Deprecated
  public DnsCustomNameserversCustomNS status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Verification status of the nameserver.
   * @return status
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  @Deprecated
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


   /**
   * Identifier
   * @return zoneTag
  **/
  @javax.annotation.Nonnull
  public String getZoneTag() {
    return zoneTag;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsCustomNameserversCustomNS dnsCustomNameserversCustomNS = (DnsCustomNameserversCustomNS) o;
    return Objects.equals(this.dnsRecords, dnsCustomNameserversCustomNS.dnsRecords) &&
        Objects.equals(this.nsName, dnsCustomNameserversCustomNS.nsName) &&
        Objects.equals(this.nsSet, dnsCustomNameserversCustomNS.nsSet) &&
        Objects.equals(this.status, dnsCustomNameserversCustomNS.status) &&
        Objects.equals(this.zoneTag, dnsCustomNameserversCustomNS.zoneTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsRecords, nsName, nsSet, status, zoneTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsCustomNameserversCustomNS {\n");
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("    nsName: ").append(toIndentedString(nsName)).append("\n");
    sb.append("    nsSet: ").append(toIndentedString(nsSet)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zoneTag: ").append(toIndentedString(zoneTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dns_records");
    openapiFields.add("ns_name");
    openapiFields.add("ns_set");
    openapiFields.add("status");
    openapiFields.add("zone_tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dns_records");
    openapiRequiredFields.add("ns_name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("zone_tag");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DnsCustomNameserversCustomNS
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnsCustomNameserversCustomNS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsCustomNameserversCustomNS is not found in the empty JSON string", DnsCustomNameserversCustomNS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnsCustomNameserversCustomNS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsCustomNameserversCustomNS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DnsCustomNameserversCustomNS.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("dns_records").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_records` to be an array in the JSON string but got `%s`", jsonObj.get("dns_records").toString()));
      }

      JsonArray jsonArraydnsRecords = jsonObj.getAsJsonArray("dns_records");
      // validate the required field `dns_records` (array)
      for (int i = 0; i < jsonArraydnsRecords.size(); i++) {
        DnsCustomNameserversCustomNSDnsRecordsInner.validateJsonElement(jsonArraydnsRecords.get(i));
      };
      if (!jsonObj.get("ns_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ns_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ns_name").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("zone_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsCustomNameserversCustomNS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsCustomNameserversCustomNS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsCustomNameserversCustomNS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsCustomNameserversCustomNS.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsCustomNameserversCustomNS>() {
           @Override
           public void write(JsonWriter out, DnsCustomNameserversCustomNS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsCustomNameserversCustomNS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DnsCustomNameserversCustomNS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DnsCustomNameserversCustomNS
  * @throws IOException if the JSON string is invalid with respect to DnsCustomNameserversCustomNS
  */
  public static DnsCustomNameserversCustomNS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsCustomNameserversCustomNS.class);
  }

 /**
  * Convert an instance of DnsCustomNameserversCustomNS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

