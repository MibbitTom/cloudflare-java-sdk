/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * AccessAccessRequests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessAccessRequests {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ALLOWED = "allowed";
  @SerializedName(SERIALIZED_NAME_ALLOWED)
  private Boolean allowed = false;

  public static final String SERIALIZED_NAME_APP_DOMAIN = "app_domain";
  @SerializedName(SERIALIZED_NAME_APP_DOMAIN)
  private String appDomain;

  public static final String SERIALIZED_NAME_APP_UID = "app_uid";
  @SerializedName(SERIALIZED_NAME_APP_UID)
  private String appUid;

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private String connection;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_RAY_ID = "ray_id";
  @SerializedName(SERIALIZED_NAME_RAY_ID)
  private String rayId;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public AccessAccessRequests() {
  }

  public AccessAccessRequests(
     OffsetDateTime createdAt
  ) {
    this();
    this.createdAt = createdAt;
  }

  public AccessAccessRequests action(String action) {
    this.action = action;
    return this;
  }

   /**
   * The event that occurred, such as a login attempt.
   * @return action
  **/
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public AccessAccessRequests allowed(Boolean allowed) {
    this.allowed = allowed;
    return this;
  }

   /**
   * The result of the authentication event.
   * @return allowed
  **/
  @javax.annotation.Nullable
  public Boolean getAllowed() {
    return allowed;
  }

  public void setAllowed(Boolean allowed) {
    this.allowed = allowed;
  }


  public AccessAccessRequests appDomain(String appDomain) {
    this.appDomain = appDomain;
    return this;
  }

   /**
   * The URL of the Access application.
   * @return appDomain
  **/
  @javax.annotation.Nullable
  public String getAppDomain() {
    return appDomain;
  }

  public void setAppDomain(String appDomain) {
    this.appDomain = appDomain;
  }


  public AccessAccessRequests appUid(String appUid) {
    this.appUid = appUid;
    return this;
  }

   /**
   * The unique identifier for the Access application.
   * @return appUid
  **/
  @javax.annotation.Nullable
  public String getAppUid() {
    return appUid;
  }

  public void setAppUid(String appUid) {
    this.appUid = appUid;
  }


  public AccessAccessRequests connection(String connection) {
    this.connection = connection;
    return this;
  }

   /**
   * The IdP used to authenticate.
   * @return connection
  **/
  @javax.annotation.Nullable
  public String getConnection() {
    return connection;
  }

  public void setConnection(String connection) {
    this.connection = connection;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AccessAccessRequests ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The IP address of the authenticating user.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public AccessAccessRequests rayId(String rayId) {
    this.rayId = rayId;
    return this;
  }

   /**
   * The unique identifier for the request to Cloudflare.
   * @return rayId
  **/
  @javax.annotation.Nullable
  public String getRayId() {
    return rayId;
  }

  public void setRayId(String rayId) {
    this.rayId = rayId;
  }


  public AccessAccessRequests userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

   /**
   * The email address of the authenticating user.
   * @return userEmail
  **/
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessAccessRequests accessAccessRequests = (AccessAccessRequests) o;
    return Objects.equals(this.action, accessAccessRequests.action) &&
        Objects.equals(this.allowed, accessAccessRequests.allowed) &&
        Objects.equals(this.appDomain, accessAccessRequests.appDomain) &&
        Objects.equals(this.appUid, accessAccessRequests.appUid) &&
        Objects.equals(this.connection, accessAccessRequests.connection) &&
        Objects.equals(this.createdAt, accessAccessRequests.createdAt) &&
        Objects.equals(this.ipAddress, accessAccessRequests.ipAddress) &&
        Objects.equals(this.rayId, accessAccessRequests.rayId) &&
        Objects.equals(this.userEmail, accessAccessRequests.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, allowed, appDomain, appUid, connection, createdAt, ipAddress, rayId, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessAccessRequests {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    appDomain: ").append(toIndentedString(appDomain)).append("\n");
    sb.append("    appUid: ").append(toIndentedString(appUid)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    rayId: ").append(toIndentedString(rayId)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("allowed");
    openapiFields.add("app_domain");
    openapiFields.add("app_uid");
    openapiFields.add("connection");
    openapiFields.add("created_at");
    openapiFields.add("ip_address");
    openapiFields.add("ray_id");
    openapiFields.add("user_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessAccessRequests
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessAccessRequests.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessAccessRequests is not found in the empty JSON string", AccessAccessRequests.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessAccessRequests.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessAccessRequests` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("app_domain") != null && !jsonObj.get("app_domain").isJsonNull()) && !jsonObj.get("app_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_domain").toString()));
      }
      if ((jsonObj.get("app_uid") != null && !jsonObj.get("app_uid").isJsonNull()) && !jsonObj.get("app_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_uid").toString()));
      }
      if ((jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) && !jsonObj.get("connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("ray_id") != null && !jsonObj.get("ray_id").isJsonNull()) && !jsonObj.get("ray_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ray_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ray_id").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessAccessRequests.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessAccessRequests' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessAccessRequests> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessAccessRequests.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessAccessRequests>() {
           @Override
           public void write(JsonWriter out, AccessAccessRequests value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessAccessRequests read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessAccessRequests given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessAccessRequests
  * @throws IOException if the JSON string is invalid with respect to AccessAccessRequests
  */
  public static AccessAccessRequests fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessAccessRequests.class);
  }

 /**
  * Convert an instance of AccessAccessRequests to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

