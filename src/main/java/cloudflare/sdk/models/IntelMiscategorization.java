/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * IntelMiscategorization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IntelMiscategorization {
  public static final String SERIALIZED_NAME_CONTENT_ADDS = "content_adds";
  @SerializedName(SERIALIZED_NAME_CONTENT_ADDS)
  private Object contentAdds = null;

  public static final String SERIALIZED_NAME_CONTENT_REMOVES = "content_removes";
  @SerializedName(SERIALIZED_NAME_CONTENT_REMOVES)
  private Object contentRemoves = null;

  /**
   * Gets or Sets indicatorType
   */
  @JsonAdapter(IndicatorTypeEnum.Adapter.class)
  public enum IndicatorTypeEnum {
    DOMAIN("domain"),
    
    IPV4("ipv4"),
    
    IPV6("ipv6"),
    
    URL("url");

    private String value;

    IndicatorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndicatorTypeEnum fromValue(String value) {
      for (IndicatorTypeEnum b : IndicatorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndicatorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndicatorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndicatorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndicatorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndicatorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDICATOR_TYPE = "indicator_type";
  @SerializedName(SERIALIZED_NAME_INDICATOR_TYPE)
  private IndicatorTypeEnum indicatorType;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private Object ip = null;

  public static final String SERIALIZED_NAME_SECURITY_ADDS = "security_adds";
  @SerializedName(SERIALIZED_NAME_SECURITY_ADDS)
  private Object securityAdds = null;

  public static final String SERIALIZED_NAME_SECURITY_REMOVES = "security_removes";
  @SerializedName(SERIALIZED_NAME_SECURITY_REMOVES)
  private Object securityRemoves = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public IntelMiscategorization() {
  }

  public IntelMiscategorization contentAdds(Object contentAdds) {
    this.contentAdds = contentAdds;
    return this;
  }

   /**
   * Content category IDs to add.
   * @return contentAdds
  **/
  @javax.annotation.Nullable
  public Object getContentAdds() {
    return contentAdds;
  }

  public void setContentAdds(Object contentAdds) {
    this.contentAdds = contentAdds;
  }


  public IntelMiscategorization contentRemoves(Object contentRemoves) {
    this.contentRemoves = contentRemoves;
    return this;
  }

   /**
   * Content category IDs to remove.
   * @return contentRemoves
  **/
  @javax.annotation.Nullable
  public Object getContentRemoves() {
    return contentRemoves;
  }

  public void setContentRemoves(Object contentRemoves) {
    this.contentRemoves = contentRemoves;
  }


  public IntelMiscategorization indicatorType(IndicatorTypeEnum indicatorType) {
    this.indicatorType = indicatorType;
    return this;
  }

   /**
   * Get indicatorType
   * @return indicatorType
  **/
  @javax.annotation.Nullable
  public IndicatorTypeEnum getIndicatorType() {
    return indicatorType;
  }

  public void setIndicatorType(IndicatorTypeEnum indicatorType) {
    this.indicatorType = indicatorType;
  }


  public IntelMiscategorization ip(Object ip) {
    this.ip = ip;
    return this;
  }

   /**
   * Provide only if indicator_type is &#x60;ipv4&#x60; or &#x60;ipv6&#x60;.
   * @return ip
  **/
  @javax.annotation.Nullable
  public Object getIp() {
    return ip;
  }

  public void setIp(Object ip) {
    this.ip = ip;
  }


  public IntelMiscategorization securityAdds(Object securityAdds) {
    this.securityAdds = securityAdds;
    return this;
  }

   /**
   * Security category IDs to add.
   * @return securityAdds
  **/
  @javax.annotation.Nullable
  public Object getSecurityAdds() {
    return securityAdds;
  }

  public void setSecurityAdds(Object securityAdds) {
    this.securityAdds = securityAdds;
  }


  public IntelMiscategorization securityRemoves(Object securityRemoves) {
    this.securityRemoves = securityRemoves;
    return this;
  }

   /**
   * Security category IDs to remove.
   * @return securityRemoves
  **/
  @javax.annotation.Nullable
  public Object getSecurityRemoves() {
    return securityRemoves;
  }

  public void setSecurityRemoves(Object securityRemoves) {
    this.securityRemoves = securityRemoves;
  }


  public IntelMiscategorization url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Provide only if indicator_type is &#x60;domain&#x60; or &#x60;url&#x60;. Example if indicator_type is &#x60;domain&#x60;: &#x60;example.com&#x60;. Example if indicator_type is &#x60;url&#x60;: &#x60;https://example.com/news/&#x60;.
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelMiscategorization intelMiscategorization = (IntelMiscategorization) o;
    return Objects.equals(this.contentAdds, intelMiscategorization.contentAdds) &&
        Objects.equals(this.contentRemoves, intelMiscategorization.contentRemoves) &&
        Objects.equals(this.indicatorType, intelMiscategorization.indicatorType) &&
        Objects.equals(this.ip, intelMiscategorization.ip) &&
        Objects.equals(this.securityAdds, intelMiscategorization.securityAdds) &&
        Objects.equals(this.securityRemoves, intelMiscategorization.securityRemoves) &&
        Objects.equals(this.url, intelMiscategorization.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentAdds, contentRemoves, indicatorType, ip, securityAdds, securityRemoves, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelMiscategorization {\n");
    sb.append("    contentAdds: ").append(toIndentedString(contentAdds)).append("\n");
    sb.append("    contentRemoves: ").append(toIndentedString(contentRemoves)).append("\n");
    sb.append("    indicatorType: ").append(toIndentedString(indicatorType)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    securityAdds: ").append(toIndentedString(securityAdds)).append("\n");
    sb.append("    securityRemoves: ").append(toIndentedString(securityRemoves)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_adds");
    openapiFields.add("content_removes");
    openapiFields.add("indicator_type");
    openapiFields.add("ip");
    openapiFields.add("security_adds");
    openapiFields.add("security_removes");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntelMiscategorization
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelMiscategorization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelMiscategorization is not found in the empty JSON string", IntelMiscategorization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelMiscategorization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelMiscategorization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("indicator_type") != null && !jsonObj.get("indicator_type").isJsonNull()) && !jsonObj.get("indicator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indicator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indicator_type").toString()));
      }
      // validate the optional field `indicator_type`
      if (jsonObj.get("indicator_type") != null && !jsonObj.get("indicator_type").isJsonNull()) {
        IndicatorTypeEnum.validateJsonElement(jsonObj.get("indicator_type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelMiscategorization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelMiscategorization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelMiscategorization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelMiscategorization.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelMiscategorization>() {
           @Override
           public void write(JsonWriter out, IntelMiscategorization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelMiscategorization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntelMiscategorization given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntelMiscategorization
  * @throws IOException if the JSON string is invalid with respect to IntelMiscategorization
  */
  public static IntelMiscategorization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelMiscategorization.class);
  }

 /**
  * Convert an instance of IntelMiscategorization to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

