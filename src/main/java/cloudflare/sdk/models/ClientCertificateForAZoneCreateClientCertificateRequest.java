/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * ClientCertificateForAZoneCreateClientCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ClientCertificateForAZoneCreateClientCertificateRequest {
  public static final String SERIALIZED_NAME_CSR = "csr";
  @SerializedName(SERIALIZED_NAME_CSR)
  private String csr;

  public static final String SERIALIZED_NAME_VALIDITY_DAYS = "validity_days";
  @SerializedName(SERIALIZED_NAME_VALIDITY_DAYS)
  private Integer validityDays;

  public ClientCertificateForAZoneCreateClientCertificateRequest() {
  }

  public ClientCertificateForAZoneCreateClientCertificateRequest csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The Certificate Signing Request (CSR). Must be newline-encoded.
   * @return csr
  **/
  @javax.annotation.Nonnull
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }


  public ClientCertificateForAZoneCreateClientCertificateRequest validityDays(Integer validityDays) {
    this.validityDays = validityDays;
    return this;
  }

   /**
   * The number of days the Client Certificate will be valid after the issued_on date
   * @return validityDays
  **/
  @javax.annotation.Nonnull
  public Integer getValidityDays() {
    return validityDays;
  }

  public void setValidityDays(Integer validityDays) {
    this.validityDays = validityDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest = (ClientCertificateForAZoneCreateClientCertificateRequest) o;
    return Objects.equals(this.csr, clientCertificateForAZoneCreateClientCertificateRequest.csr) &&
        Objects.equals(this.validityDays, clientCertificateForAZoneCreateClientCertificateRequest.validityDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csr, validityDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientCertificateForAZoneCreateClientCertificateRequest {\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    validityDays: ").append(toIndentedString(validityDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("csr");
    openapiFields.add("validity_days");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("csr");
    openapiRequiredFields.add("validity_days");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClientCertificateForAZoneCreateClientCertificateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientCertificateForAZoneCreateClientCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientCertificateForAZoneCreateClientCertificateRequest is not found in the empty JSON string", ClientCertificateForAZoneCreateClientCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientCertificateForAZoneCreateClientCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientCertificateForAZoneCreateClientCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientCertificateForAZoneCreateClientCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("csr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientCertificateForAZoneCreateClientCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientCertificateForAZoneCreateClientCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientCertificateForAZoneCreateClientCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientCertificateForAZoneCreateClientCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientCertificateForAZoneCreateClientCertificateRequest>() {
           @Override
           public void write(JsonWriter out, ClientCertificateForAZoneCreateClientCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientCertificateForAZoneCreateClientCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClientCertificateForAZoneCreateClientCertificateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClientCertificateForAZoneCreateClientCertificateRequest
  * @throws IOException if the JSON string is invalid with respect to ClientCertificateForAZoneCreateClientCertificateRequest
  */
  public static ClientCertificateForAZoneCreateClientCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientCertificateForAZoneCreateClientCertificateRequest.class);
  }

 /**
  * Convert an instance of ClientCertificateForAZoneCreateClientCertificateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

