/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesKeylessTunnel;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesSchemasStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesBase
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_CREATED_ON,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_ENABLED,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_HOST,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_MODIFIED_ON,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_NAME,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_PERMISSIONS,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_PORT,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_STATUS,
  TlsCertificatesAndHostnamesBase.JSON_PROPERTY_TUNNEL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T11:53:03.004303930+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesBase {
  public static final String JSON_PROPERTY_CREATED_ON = "created_on";
  private OffsetDateTime createdOn;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_HOST = "host";
  private String host;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_MODIFIED_ON = "modified_on";
  private OffsetDateTime modifiedOn;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private List<Object> permissions = new ArrayList<>();

  public static final String JSON_PROPERTY_PORT = "port";
  private BigDecimal port = new BigDecimal("24008");

  public static final String JSON_PROPERTY_STATUS = "status";
  private TlsCertificatesAndHostnamesSchemasStatus status;

  public static final String JSON_PROPERTY_TUNNEL = "tunnel";
  private TlsCertificatesAndHostnamesKeylessTunnel tunnel;

  public TlsCertificatesAndHostnamesBase() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesBase(
    @JsonProperty(JSON_PROPERTY_CREATED_ON) OffsetDateTime createdOn, 
    @JsonProperty(JSON_PROPERTY_ENABLED) Boolean enabled, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_MODIFIED_ON) OffsetDateTime modifiedOn, 
    @JsonProperty(JSON_PROPERTY_NAME) String name, 
    @JsonProperty(JSON_PROPERTY_PERMISSIONS) List<Object> permissions
  ) {
  this();
    this.createdOn = createdOn;
    this.enabled = enabled;
    this.id = id;
    this.modifiedOn = modifiedOn;
    this.name = name;
    this.permissions = permissions;
  }

   /**
   * When the Keyless SSL was created.
   * @return createdOn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }




   /**
   * Whether or not the Keyless SSL is on or off.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }




  public TlsCertificatesAndHostnamesBase host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The keyless SSL name.
   * @return host
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHost(String host) {
    this.host = host;
  }


   /**
   * Keyless certificate identifier tag.
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }




   /**
   * When the Keyless SSL was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }




   /**
   * The keyless SSL name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }




   /**
   * Available permissions for the Keyless SSL for the current user requesting the item.
   * @return permissions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getPermissions() {
    return permissions;
  }




  public TlsCertificatesAndHostnamesBase port(BigDecimal port) {
    this.port = port;
    return this;
  }

   /**
   * The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
   * @return port
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPort(BigDecimal port) {
    this.port = port;
  }


  public TlsCertificatesAndHostnamesBase status(TlsCertificatesAndHostnamesSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesSchemasStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(TlsCertificatesAndHostnamesSchemasStatus status) {
    this.status = status;
  }


  public TlsCertificatesAndHostnamesBase tunnel(TlsCertificatesAndHostnamesKeylessTunnel tunnel) {
    this.tunnel = tunnel;
    return this;
  }

   /**
   * Get tunnel
   * @return tunnel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TUNNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesKeylessTunnel getTunnel() {
    return tunnel;
  }


  @JsonProperty(JSON_PROPERTY_TUNNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTunnel(TlsCertificatesAndHostnamesKeylessTunnel tunnel) {
    this.tunnel = tunnel;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_base object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesBase tlsCertificatesAndHostnamesBase = (TlsCertificatesAndHostnamesBase) o;
    return Objects.equals(this.createdOn, tlsCertificatesAndHostnamesBase.createdOn) &&
        Objects.equals(this.enabled, tlsCertificatesAndHostnamesBase.enabled) &&
        Objects.equals(this.host, tlsCertificatesAndHostnamesBase.host) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesBase.id) &&
        Objects.equals(this.modifiedOn, tlsCertificatesAndHostnamesBase.modifiedOn) &&
        Objects.equals(this.name, tlsCertificatesAndHostnamesBase.name) &&
        Objects.equals(this.permissions, tlsCertificatesAndHostnamesBase.permissions) &&
        Objects.equals(this.port, tlsCertificatesAndHostnamesBase.port) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesBase.status) &&
        Objects.equals(this.tunnel, tlsCertificatesAndHostnamesBase.tunnel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, enabled, host, id, modifiedOn, name, permissions, port, status, tunnel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesBase {\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tunnel: ").append(toIndentedString(tunnel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `created_on` to the URL query string
    if (getCreatedOn() != null) {
      joiner.add(String.format("%screated_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enabled` to the URL query string
    if (getEnabled() != null) {
      joiner.add(String.format("%senabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `host` to the URL query string
    if (getHost() != null) {
      joiner.add(String.format("%shost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `modified_on` to the URL query string
    if (getModifiedOn() != null) {
      joiner.add(String.format("%smodified_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModifiedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `permissions` to the URL query string
    if (getPermissions() != null) {
      for (int i = 0; i < getPermissions().size(); i++) {
        joiner.add(String.format("%spermissions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getPermissions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `port` to the URL query string
    if (getPort() != null) {
      joiner.add(String.format("%sport%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tunnel` to the URL query string
    if (getTunnel() != null) {
      joiner.add(getTunnel().toUrlQueryString(prefix + "tunnel" + suffix));
    }

    return joiner.toString();
  }
}

