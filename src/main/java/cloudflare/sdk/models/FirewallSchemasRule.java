/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.FirewallConfiguration;
import cloudflare.sdk.models.FirewallSchemasMode;
import cloudflare.sdk.models.FirewallSchemasRuleAllOfScope;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * FirewallSchemasRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallSchemasRule {
  public static final String SERIALIZED_NAME_ALLOWED_MODES = "allowed_modes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_MODES)
  private List<FirewallSchemasMode> allowedModes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private FirewallConfiguration _configuration;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private FirewallSchemasMode mode;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private FirewallSchemasRuleAllOfScope scope;

  public FirewallSchemasRule() {
  }

  public FirewallSchemasRule(
     List<FirewallSchemasMode> allowedModes, 
     OffsetDateTime createdOn, 
     String id, 
     OffsetDateTime modifiedOn
  ) {
    this();
    this.allowedModes = allowedModes;
    this.createdOn = createdOn;
    this.id = id;
    this.modifiedOn = modifiedOn;
  }

   /**
   * The available actions that a rule can apply to a matched request.
   * @return allowedModes
  **/
  @javax.annotation.Nonnull
  public List<FirewallSchemasMode> getAllowedModes() {
    return allowedModes;
  }



  public FirewallSchemasRule _configuration(FirewallConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nonnull
  public FirewallConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(FirewallConfiguration _configuration) {
    this._configuration = _configuration;
  }


   /**
   * The timestamp of when the rule was created.
   * @return createdOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



   /**
   * The unique identifier of the IP Access rule.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }



  public FirewallSchemasRule mode(FirewallSchemasMode mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nonnull
  public FirewallSchemasMode getMode() {
    return mode;
  }

  public void setMode(FirewallSchemasMode mode) {
    this.mode = mode;
  }


   /**
   * The timestamp of when the rule was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  public FirewallSchemasRule notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * An informative summary of the rule, typically used as a reminder or explanation.
   * @return notes
  **/
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public FirewallSchemasRule scope(FirewallSchemasRuleAllOfScope scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nonnull
  public FirewallSchemasRuleAllOfScope getScope() {
    return scope;
  }

  public void setScope(FirewallSchemasRuleAllOfScope scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallSchemasRule firewallSchemasRule = (FirewallSchemasRule) o;
    return Objects.equals(this.allowedModes, firewallSchemasRule.allowedModes) &&
        Objects.equals(this._configuration, firewallSchemasRule._configuration) &&
        Objects.equals(this.createdOn, firewallSchemasRule.createdOn) &&
        Objects.equals(this.id, firewallSchemasRule.id) &&
        Objects.equals(this.mode, firewallSchemasRule.mode) &&
        Objects.equals(this.modifiedOn, firewallSchemasRule.modifiedOn) &&
        Objects.equals(this.notes, firewallSchemasRule.notes) &&
        Objects.equals(this.scope, firewallSchemasRule.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedModes, _configuration, createdOn, id, mode, modifiedOn, notes, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallSchemasRule {\n");
    sb.append("    allowedModes: ").append(toIndentedString(allowedModes)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_modes");
    openapiFields.add("configuration");
    openapiFields.add("created_on");
    openapiFields.add("id");
    openapiFields.add("mode");
    openapiFields.add("modified_on");
    openapiFields.add("notes");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed_modes");
    openapiRequiredFields.add("configuration");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("scope");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FirewallSchemasRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallSchemasRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallSchemasRule is not found in the empty JSON string", FirewallSchemasRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallSchemasRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallSchemasRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FirewallSchemasRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowed_modes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_modes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_modes` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_modes").toString()));
      }
      // validate the required field `configuration`
      FirewallConfiguration.validateJsonElement(jsonObj.get("configuration"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `mode`
      FirewallSchemasMode.validateJsonElement(jsonObj.get("mode"));
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the required field `scope`
      FirewallSchemasRuleAllOfScope.validateJsonElement(jsonObj.get("scope"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallSchemasRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallSchemasRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallSchemasRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallSchemasRule.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallSchemasRule>() {
           @Override
           public void write(JsonWriter out, FirewallSchemasRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallSchemasRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirewallSchemasRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirewallSchemasRule
  * @throws IOException if the JSON string is invalid with respect to FirewallSchemasRule
  */
  public static FirewallSchemasRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallSchemasRule.class);
  }

 /**
  * Convert an instance of FirewallSchemasRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

