/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * D1QueryMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class D1QueryMeta {
  public static final String SERIALIZED_NAME_CHANGED_DB = "changed_db";
  @SerializedName(SERIALIZED_NAME_CHANGED_DB)
  private Boolean changedDb;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private BigDecimal changes;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_LAST_ROW_ID = "last_row_id";
  @SerializedName(SERIALIZED_NAME_LAST_ROW_ID)
  private BigDecimal lastRowId;

  public static final String SERIALIZED_NAME_ROWS_READ = "rows_read";
  @SerializedName(SERIALIZED_NAME_ROWS_READ)
  private BigDecimal rowsRead;

  public static final String SERIALIZED_NAME_ROWS_WRITTEN = "rows_written";
  @SerializedName(SERIALIZED_NAME_ROWS_WRITTEN)
  private BigDecimal rowsWritten;

  public static final String SERIALIZED_NAME_SIZE_AFTER = "size_after";
  @SerializedName(SERIALIZED_NAME_SIZE_AFTER)
  private BigDecimal sizeAfter;

  public D1QueryMeta() {
  }

  public D1QueryMeta changedDb(Boolean changedDb) {
    this.changedDb = changedDb;
    return this;
  }

   /**
   * Get changedDb
   * @return changedDb
  **/
  @javax.annotation.Nullable
  public Boolean getChangedDb() {
    return changedDb;
  }

  public void setChangedDb(Boolean changedDb) {
    this.changedDb = changedDb;
  }


  public D1QueryMeta changes(BigDecimal changes) {
    this.changes = changes;
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @javax.annotation.Nullable
  public BigDecimal getChanges() {
    return changes;
  }

  public void setChanges(BigDecimal changes) {
    this.changes = changes;
  }


  public D1QueryMeta duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public D1QueryMeta lastRowId(BigDecimal lastRowId) {
    this.lastRowId = lastRowId;
    return this;
  }

   /**
   * Get lastRowId
   * @return lastRowId
  **/
  @javax.annotation.Nullable
  public BigDecimal getLastRowId() {
    return lastRowId;
  }

  public void setLastRowId(BigDecimal lastRowId) {
    this.lastRowId = lastRowId;
  }


  public D1QueryMeta rowsRead(BigDecimal rowsRead) {
    this.rowsRead = rowsRead;
    return this;
  }

   /**
   * Get rowsRead
   * @return rowsRead
  **/
  @javax.annotation.Nullable
  public BigDecimal getRowsRead() {
    return rowsRead;
  }

  public void setRowsRead(BigDecimal rowsRead) {
    this.rowsRead = rowsRead;
  }


  public D1QueryMeta rowsWritten(BigDecimal rowsWritten) {
    this.rowsWritten = rowsWritten;
    return this;
  }

   /**
   * Get rowsWritten
   * @return rowsWritten
  **/
  @javax.annotation.Nullable
  public BigDecimal getRowsWritten() {
    return rowsWritten;
  }

  public void setRowsWritten(BigDecimal rowsWritten) {
    this.rowsWritten = rowsWritten;
  }


  public D1QueryMeta sizeAfter(BigDecimal sizeAfter) {
    this.sizeAfter = sizeAfter;
    return this;
  }

   /**
   * Get sizeAfter
   * @return sizeAfter
  **/
  @javax.annotation.Nullable
  public BigDecimal getSizeAfter() {
    return sizeAfter;
  }

  public void setSizeAfter(BigDecimal sizeAfter) {
    this.sizeAfter = sizeAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    D1QueryMeta d1QueryMeta = (D1QueryMeta) o;
    return Objects.equals(this.changedDb, d1QueryMeta.changedDb) &&
        Objects.equals(this.changes, d1QueryMeta.changes) &&
        Objects.equals(this.duration, d1QueryMeta.duration) &&
        Objects.equals(this.lastRowId, d1QueryMeta.lastRowId) &&
        Objects.equals(this.rowsRead, d1QueryMeta.rowsRead) &&
        Objects.equals(this.rowsWritten, d1QueryMeta.rowsWritten) &&
        Objects.equals(this.sizeAfter, d1QueryMeta.sizeAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedDb, changes, duration, lastRowId, rowsRead, rowsWritten, sizeAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class D1QueryMeta {\n");
    sb.append("    changedDb: ").append(toIndentedString(changedDb)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    lastRowId: ").append(toIndentedString(lastRowId)).append("\n");
    sb.append("    rowsRead: ").append(toIndentedString(rowsRead)).append("\n");
    sb.append("    rowsWritten: ").append(toIndentedString(rowsWritten)).append("\n");
    sb.append("    sizeAfter: ").append(toIndentedString(sizeAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed_db");
    openapiFields.add("changes");
    openapiFields.add("duration");
    openapiFields.add("last_row_id");
    openapiFields.add("rows_read");
    openapiFields.add("rows_written");
    openapiFields.add("size_after");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to D1QueryMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!D1QueryMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in D1QueryMeta is not found in the empty JSON string", D1QueryMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!D1QueryMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `D1QueryMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!D1QueryMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'D1QueryMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<D1QueryMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(D1QueryMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<D1QueryMeta>() {
           @Override
           public void write(JsonWriter out, D1QueryMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public D1QueryMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of D1QueryMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of D1QueryMeta
  * @throws IOException if the JSON string is invalid with respect to D1QueryMeta
  */
  public static D1QueryMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, D1QueryMeta.class);
  }

 /**
  * Convert an instance of D1QueryMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

