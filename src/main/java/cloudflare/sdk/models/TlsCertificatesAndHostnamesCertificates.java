/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesRequestType;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesRequestedValidity;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesCertificates
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_CERTIFICATE,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_CSR,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_EXPIRES_ON,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_HOSTNAMES,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_REQUEST_TYPE,
  TlsCertificatesAndHostnamesCertificates.JSON_PROPERTY_REQUESTED_VALIDITY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesCertificates {
  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_CSR = "csr";
  private String csr;

  public static final String JSON_PROPERTY_EXPIRES_ON = "expires_on";
  private OffsetDateTime expiresOn;

  public static final String JSON_PROPERTY_HOSTNAMES = "hostnames";
  private List<Object> hostnames = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_REQUEST_TYPE = "request_type";
  private TlsCertificatesAndHostnamesRequestType requestType;

  public static final String JSON_PROPERTY_REQUESTED_VALIDITY = "requested_validity";
  private TlsCertificatesAndHostnamesRequestedValidity requestedValidity = TlsCertificatesAndHostnamesRequestedValidity.NUMBER_5475;

  public TlsCertificatesAndHostnamesCertificates() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesCertificates(
    @JsonProperty(JSON_PROPERTY_CERTIFICATE) String certificate, 
    @JsonProperty(JSON_PROPERTY_EXPIRES_ON) OffsetDateTime expiresOn, 
    @JsonProperty(JSON_PROPERTY_ID) String id
  ) {
  this();
    this.certificate = certificate;
    this.expiresOn = expiresOn;
    this.id = id;
  }

   /**
   * The Origin CA certificate. Will be newline-encoded.
   * @return certificate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }




  public TlsCertificatesAndHostnamesCertificates csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The Certificate Signing Request (CSR). Must be newline-encoded.
   * @return csr
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CSR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCsr() {
    return csr;
  }


  @JsonProperty(JSON_PROPERTY_CSR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCsr(String csr) {
    this.csr = csr;
  }


   /**
   * When the certificate will expire.
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }




  public TlsCertificatesAndHostnamesCertificates hostnames(List<Object> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  public TlsCertificatesAndHostnamesCertificates addHostnamesItem(Object hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

   /**
   * Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
   * @return hostnames
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOSTNAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getHostnames() {
    return hostnames;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHostnames(List<Object> hostnames) {
    this.hostnames = hostnames;
  }


   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public TlsCertificatesAndHostnamesCertificates requestType(TlsCertificatesAndHostnamesRequestType requestType) {
    this.requestType = requestType;
    return this;
  }

   /**
   * Get requestType
   * @return requestType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesRequestType getRequestType() {
    return requestType;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestType(TlsCertificatesAndHostnamesRequestType requestType) {
    this.requestType = requestType;
  }


  public TlsCertificatesAndHostnamesCertificates requestedValidity(TlsCertificatesAndHostnamesRequestedValidity requestedValidity) {
    this.requestedValidity = requestedValidity;
    return this;
  }

   /**
   * Get requestedValidity
   * @return requestedValidity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUESTED_VALIDITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesRequestedValidity getRequestedValidity() {
    return requestedValidity;
  }


  @JsonProperty(JSON_PROPERTY_REQUESTED_VALIDITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestedValidity(TlsCertificatesAndHostnamesRequestedValidity requestedValidity) {
    this.requestedValidity = requestedValidity;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_certificates object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesCertificates tlsCertificatesAndHostnamesCertificates = (TlsCertificatesAndHostnamesCertificates) o;
    return Objects.equals(this.certificate, tlsCertificatesAndHostnamesCertificates.certificate) &&
        Objects.equals(this.csr, tlsCertificatesAndHostnamesCertificates.csr) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesCertificates.expiresOn) &&
        Objects.equals(this.hostnames, tlsCertificatesAndHostnamesCertificates.hostnames) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesCertificates.id) &&
        Objects.equals(this.requestType, tlsCertificatesAndHostnamesCertificates.requestType) &&
        Objects.equals(this.requestedValidity, tlsCertificatesAndHostnamesCertificates.requestedValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, csr, expiresOn, hostnames, id, requestType, requestedValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesCertificates {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    requestedValidity: ").append(toIndentedString(requestedValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `certificate` to the URL query string
    if (getCertificate() != null) {
      joiner.add(String.format("%scertificate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertificate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `csr` to the URL query string
    if (getCsr() != null) {
      joiner.add(String.format("%scsr%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCsr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_on` to the URL query string
    if (getExpiresOn() != null) {
      joiner.add(String.format("%sexpires_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hostnames` to the URL query string
    if (getHostnames() != null) {
      for (int i = 0; i < getHostnames().size(); i++) {
        joiner.add(String.format("%shostnames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getHostnames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `request_type` to the URL query string
    if (getRequestType() != null) {
      joiner.add(String.format("%srequest_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `requested_validity` to the URL query string
    if (getRequestedValidity() != null) {
      joiner.add(String.format("%srequested_validity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestedValidity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

