/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * Value of the zone setting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class CacheVariantsValue {
  public static final String SERIALIZED_NAME_AVIF = "avif";
  @SerializedName(SERIALIZED_NAME_AVIF)
  private Set<String> avif = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BMP = "bmp";
  @SerializedName(SERIALIZED_NAME_BMP)
  private Set<String> bmp = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_GIF = "gif";
  @SerializedName(SERIALIZED_NAME_GIF)
  private Set<String> gif = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_JP2 = "jp2";
  @SerializedName(SERIALIZED_NAME_JP2)
  private Set<String> jp2 = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_JPEG = "jpeg";
  @SerializedName(SERIALIZED_NAME_JPEG)
  private Set<String> jpeg = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_JPG = "jpg";
  @SerializedName(SERIALIZED_NAME_JPG)
  private Set<String> jpg = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_JPG2 = "jpg2";
  @SerializedName(SERIALIZED_NAME_JPG2)
  private Set<String> jpg2 = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PNG = "png";
  @SerializedName(SERIALIZED_NAME_PNG)
  private Set<String> png = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TIF = "tif";
  @SerializedName(SERIALIZED_NAME_TIF)
  private Set<String> tif = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TIFF = "tiff";
  @SerializedName(SERIALIZED_NAME_TIFF)
  private Set<String> tiff = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WEBP = "webp";
  @SerializedName(SERIALIZED_NAME_WEBP)
  private Set<String> webp = new LinkedHashSet<>();

  public CacheVariantsValue() {
  }

  public CacheVariantsValue avif(Set<String> avif) {
    this.avif = avif;
    return this;
  }

  public CacheVariantsValue addAvifItem(String avifItem) {
    if (this.avif == null) {
      this.avif = new LinkedHashSet<>();
    }
    this.avif.add(avifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for avif.
   * @return avif
  **/
  @javax.annotation.Nullable
  public Set<String> getAvif() {
    return avif;
  }

  public void setAvif(Set<String> avif) {
    this.avif = avif;
  }


  public CacheVariantsValue bmp(Set<String> bmp) {
    this.bmp = bmp;
    return this;
  }

  public CacheVariantsValue addBmpItem(String bmpItem) {
    if (this.bmp == null) {
      this.bmp = new LinkedHashSet<>();
    }
    this.bmp.add(bmpItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for bmp.
   * @return bmp
  **/
  @javax.annotation.Nullable
  public Set<String> getBmp() {
    return bmp;
  }

  public void setBmp(Set<String> bmp) {
    this.bmp = bmp;
  }


  public CacheVariantsValue gif(Set<String> gif) {
    this.gif = gif;
    return this;
  }

  public CacheVariantsValue addGifItem(String gifItem) {
    if (this.gif == null) {
      this.gif = new LinkedHashSet<>();
    }
    this.gif.add(gifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for gif.
   * @return gif
  **/
  @javax.annotation.Nullable
  public Set<String> getGif() {
    return gif;
  }

  public void setGif(Set<String> gif) {
    this.gif = gif;
  }


  public CacheVariantsValue jp2(Set<String> jp2) {
    this.jp2 = jp2;
    return this;
  }

  public CacheVariantsValue addJp2Item(String jp2Item) {
    if (this.jp2 == null) {
      this.jp2 = new LinkedHashSet<>();
    }
    this.jp2.add(jp2Item);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jp2.
   * @return jp2
  **/
  @javax.annotation.Nullable
  public Set<String> getJp2() {
    return jp2;
  }

  public void setJp2(Set<String> jp2) {
    this.jp2 = jp2;
  }


  public CacheVariantsValue jpeg(Set<String> jpeg) {
    this.jpeg = jpeg;
    return this;
  }

  public CacheVariantsValue addJpegItem(String jpegItem) {
    if (this.jpeg == null) {
      this.jpeg = new LinkedHashSet<>();
    }
    this.jpeg.add(jpegItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpeg.
   * @return jpeg
  **/
  @javax.annotation.Nullable
  public Set<String> getJpeg() {
    return jpeg;
  }

  public void setJpeg(Set<String> jpeg) {
    this.jpeg = jpeg;
  }


  public CacheVariantsValue jpg(Set<String> jpg) {
    this.jpg = jpg;
    return this;
  }

  public CacheVariantsValue addJpgItem(String jpgItem) {
    if (this.jpg == null) {
      this.jpg = new LinkedHashSet<>();
    }
    this.jpg.add(jpgItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpg.
   * @return jpg
  **/
  @javax.annotation.Nullable
  public Set<String> getJpg() {
    return jpg;
  }

  public void setJpg(Set<String> jpg) {
    this.jpg = jpg;
  }


  public CacheVariantsValue jpg2(Set<String> jpg2) {
    this.jpg2 = jpg2;
    return this;
  }

  public CacheVariantsValue addJpg2Item(String jpg2Item) {
    if (this.jpg2 == null) {
      this.jpg2 = new LinkedHashSet<>();
    }
    this.jpg2.add(jpg2Item);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpg2.
   * @return jpg2
  **/
  @javax.annotation.Nullable
  public Set<String> getJpg2() {
    return jpg2;
  }

  public void setJpg2(Set<String> jpg2) {
    this.jpg2 = jpg2;
  }


  public CacheVariantsValue png(Set<String> png) {
    this.png = png;
    return this;
  }

  public CacheVariantsValue addPngItem(String pngItem) {
    if (this.png == null) {
      this.png = new LinkedHashSet<>();
    }
    this.png.add(pngItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for png.
   * @return png
  **/
  @javax.annotation.Nullable
  public Set<String> getPng() {
    return png;
  }

  public void setPng(Set<String> png) {
    this.png = png;
  }


  public CacheVariantsValue tif(Set<String> tif) {
    this.tif = tif;
    return this;
  }

  public CacheVariantsValue addTifItem(String tifItem) {
    if (this.tif == null) {
      this.tif = new LinkedHashSet<>();
    }
    this.tif.add(tifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for tif.
   * @return tif
  **/
  @javax.annotation.Nullable
  public Set<String> getTif() {
    return tif;
  }

  public void setTif(Set<String> tif) {
    this.tif = tif;
  }


  public CacheVariantsValue tiff(Set<String> tiff) {
    this.tiff = tiff;
    return this;
  }

  public CacheVariantsValue addTiffItem(String tiffItem) {
    if (this.tiff == null) {
      this.tiff = new LinkedHashSet<>();
    }
    this.tiff.add(tiffItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for tiff.
   * @return tiff
  **/
  @javax.annotation.Nullable
  public Set<String> getTiff() {
    return tiff;
  }

  public void setTiff(Set<String> tiff) {
    this.tiff = tiff;
  }


  public CacheVariantsValue webp(Set<String> webp) {
    this.webp = webp;
    return this;
  }

  public CacheVariantsValue addWebpItem(String webpItem) {
    if (this.webp == null) {
      this.webp = new LinkedHashSet<>();
    }
    this.webp.add(webpItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for webp.
   * @return webp
  **/
  @javax.annotation.Nullable
  public Set<String> getWebp() {
    return webp;
  }

  public void setWebp(Set<String> webp) {
    this.webp = webp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheVariantsValue cacheVariantsValue = (CacheVariantsValue) o;
    return Objects.equals(this.avif, cacheVariantsValue.avif) &&
        Objects.equals(this.bmp, cacheVariantsValue.bmp) &&
        Objects.equals(this.gif, cacheVariantsValue.gif) &&
        Objects.equals(this.jp2, cacheVariantsValue.jp2) &&
        Objects.equals(this.jpeg, cacheVariantsValue.jpeg) &&
        Objects.equals(this.jpg, cacheVariantsValue.jpg) &&
        Objects.equals(this.jpg2, cacheVariantsValue.jpg2) &&
        Objects.equals(this.png, cacheVariantsValue.png) &&
        Objects.equals(this.tif, cacheVariantsValue.tif) &&
        Objects.equals(this.tiff, cacheVariantsValue.tiff) &&
        Objects.equals(this.webp, cacheVariantsValue.webp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avif, bmp, gif, jp2, jpeg, jpg, jpg2, png, tif, tiff, webp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheVariantsValue {\n");
    sb.append("    avif: ").append(toIndentedString(avif)).append("\n");
    sb.append("    bmp: ").append(toIndentedString(bmp)).append("\n");
    sb.append("    gif: ").append(toIndentedString(gif)).append("\n");
    sb.append("    jp2: ").append(toIndentedString(jp2)).append("\n");
    sb.append("    jpeg: ").append(toIndentedString(jpeg)).append("\n");
    sb.append("    jpg: ").append(toIndentedString(jpg)).append("\n");
    sb.append("    jpg2: ").append(toIndentedString(jpg2)).append("\n");
    sb.append("    png: ").append(toIndentedString(png)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    tiff: ").append(toIndentedString(tiff)).append("\n");
    sb.append("    webp: ").append(toIndentedString(webp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avif");
    openapiFields.add("bmp");
    openapiFields.add("gif");
    openapiFields.add("jp2");
    openapiFields.add("jpeg");
    openapiFields.add("jpg");
    openapiFields.add("jpg2");
    openapiFields.add("png");
    openapiFields.add("tif");
    openapiFields.add("tiff");
    openapiFields.add("webp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CacheVariantsValue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheVariantsValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheVariantsValue is not found in the empty JSON string", CacheVariantsValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheVariantsValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheVariantsValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("avif") != null && !jsonObj.get("avif").isJsonNull() && !jsonObj.get("avif").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avif` to be an array in the JSON string but got `%s`", jsonObj.get("avif").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bmp") != null && !jsonObj.get("bmp").isJsonNull() && !jsonObj.get("bmp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bmp` to be an array in the JSON string but got `%s`", jsonObj.get("bmp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gif") != null && !jsonObj.get("gif").isJsonNull() && !jsonObj.get("gif").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gif` to be an array in the JSON string but got `%s`", jsonObj.get("gif").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jp2") != null && !jsonObj.get("jp2").isJsonNull() && !jsonObj.get("jp2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jp2` to be an array in the JSON string but got `%s`", jsonObj.get("jp2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jpeg") != null && !jsonObj.get("jpeg").isJsonNull() && !jsonObj.get("jpeg").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jpeg` to be an array in the JSON string but got `%s`", jsonObj.get("jpeg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jpg") != null && !jsonObj.get("jpg").isJsonNull() && !jsonObj.get("jpg").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jpg` to be an array in the JSON string but got `%s`", jsonObj.get("jpg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jpg2") != null && !jsonObj.get("jpg2").isJsonNull() && !jsonObj.get("jpg2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jpg2` to be an array in the JSON string but got `%s`", jsonObj.get("jpg2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("png") != null && !jsonObj.get("png").isJsonNull() && !jsonObj.get("png").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `png` to be an array in the JSON string but got `%s`", jsonObj.get("png").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tif") != null && !jsonObj.get("tif").isJsonNull() && !jsonObj.get("tif").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tif` to be an array in the JSON string but got `%s`", jsonObj.get("tif").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tiff") != null && !jsonObj.get("tiff").isJsonNull() && !jsonObj.get("tiff").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tiff` to be an array in the JSON string but got `%s`", jsonObj.get("tiff").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webp") != null && !jsonObj.get("webp").isJsonNull() && !jsonObj.get("webp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webp` to be an array in the JSON string but got `%s`", jsonObj.get("webp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheVariantsValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheVariantsValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheVariantsValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheVariantsValue.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheVariantsValue>() {
           @Override
           public void write(JsonWriter out, CacheVariantsValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheVariantsValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CacheVariantsValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CacheVariantsValue
  * @throws IOException if the JSON string is invalid with respect to CacheVariantsValue
  */
  public static CacheVariantsValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheVariantsValue.class);
  }

 /**
  * Convert an instance of CacheVariantsValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

