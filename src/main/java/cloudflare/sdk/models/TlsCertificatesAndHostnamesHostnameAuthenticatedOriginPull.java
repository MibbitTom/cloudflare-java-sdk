/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CERT_ID,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CERTIFICATE,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_ENABLED,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_HOSTNAME,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_PRIVATE_KEY,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CERT_STATUS,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CERT_UPDATED_AT,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CERT_UPLOADED_ON,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_CREATED_AT,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_EXPIRES_ON,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_ISSUER,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_SERIAL_NUMBER,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_SIGNATURE,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_STATUS,
  TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.JSON_PROPERTY_UPDATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull {
  public static final String JSON_PROPERTY_CERT_ID = "cert_id";
  private String certId;

  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private JsonNullable<Boolean> enabled = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_PRIVATE_KEY = "private_key";
  private String privateKey;

  public static final String JSON_PROPERTY_CERT_STATUS = "cert_status";
  private TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus;

  public static final String JSON_PROPERTY_CERT_UPDATED_AT = "cert_updated_at";
  private OffsetDateTime certUpdatedAt;

  public static final String JSON_PROPERTY_CERT_UPLOADED_ON = "cert_uploaded_on";
  private OffsetDateTime certUploadedOn;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_EXPIRES_ON = "expires_on";
  private OffsetDateTime expiresOn;

  public static final String JSON_PROPERTY_ISSUER = "issuer";
  private String issuer;

  public static final String JSON_PROPERTY_SERIAL_NUMBER = "serial_number";
  private String serialNumber;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private OffsetDateTime updatedAt;

  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull(
    @JsonProperty(JSON_PROPERTY_CERT_ID) String certId, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_CERT_UPDATED_AT) OffsetDateTime certUpdatedAt, 
    @JsonProperty(JSON_PROPERTY_CREATED_AT) OffsetDateTime createdAt, 
    @JsonProperty(JSON_PROPERTY_EXPIRES_ON) OffsetDateTime expiresOn, 
    @JsonProperty(JSON_PROPERTY_ISSUER) String issuer, 
    @JsonProperty(JSON_PROPERTY_SIGNATURE) String signature, 
    @JsonProperty(JSON_PROPERTY_UPDATED_AT) OffsetDateTime updatedAt
  ) {
  this();
    this.certId = certId;
    this.id = id;
    this.certUpdatedAt = certUpdatedAt;
    this.createdAt = createdAt;
    this.expiresOn = expiresOn;
    this.issuer = issuer;
    this.signature = signature;
    this.updatedAt = updatedAt;
  }

   /**
   * Identifier
   * @return certId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertId() {
    return certId;
  }




  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * The hostname certificate.
   * @return certificate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull enabled(Boolean enabled) {
    this.enabled = JsonNullable.<Boolean>of(enabled);
    return this;
  }

   /**
   * Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getEnabled() {
        return enabled.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getEnabled_JsonNullable() {
    return enabled;
  }
  
  @JsonProperty(JSON_PROPERTY_ENABLED)
  public void setEnabled_JsonNullable(JsonNullable<Boolean> enabled) {
    this.enabled = enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = JsonNullable.<Boolean>of(enabled);
  }


  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname on the origin for which the client certificate uploaded will be used.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

   /**
   * The hostname certificate&#39;s private key.
   * @return privateKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIVATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrivateKey() {
    return privateKey;
  }


  @JsonProperty(JSON_PROPERTY_PRIVATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull certStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus) {
    this.certStatus = certStatus;
    return this;
  }

   /**
   * Get certStatus
   * @return certStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus getCertStatus() {
    return certStatus;
  }


  @JsonProperty(JSON_PROPERTY_CERT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus) {
    this.certStatus = certStatus;
  }


   /**
   * The time when the certificate was updated.
   * @return certUpdatedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERT_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCertUpdatedAt() {
    return certUpdatedAt;
  }




  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull certUploadedOn(OffsetDateTime certUploadedOn) {
    this.certUploadedOn = certUploadedOn;
    return this;
  }

   /**
   * The time when the certificate was uploaded.
   * @return certUploadedOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERT_UPLOADED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCertUploadedOn() {
    return certUploadedOn;
  }


  @JsonProperty(JSON_PROPERTY_CERT_UPLOADED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertUploadedOn(OffsetDateTime certUploadedOn) {
    this.certUploadedOn = certUploadedOn;
  }


   /**
   * The time when the certificate was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The date when the certificate expires.
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }




   /**
   * The certificate authority that issued the certificate.
   * @return issuer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssuer() {
    return issuer;
  }




  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The serial number on the uploaded certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSerialNumber() {
    return serialNumber;
  }


  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


   /**
   * The type of hash used for the certificate.
   * @return signature
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignature() {
    return signature;
  }




  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull status(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status) {
    this.status = status;
  }


   /**
   * The time when the certificate was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  /**
   * Return true if this tls-certificates-and-hostnames_hostname-authenticated-origin-pull object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull = (TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull) o;
    return Objects.equals(this.certId, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.certId) &&
        Objects.equals(this.certificate, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.certificate) &&
        equalsNullable(this.enabled, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.enabled) &&
        Objects.equals(this.hostname, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.hostname) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.id) &&
        Objects.equals(this.privateKey, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.privateKey) &&
        Objects.equals(this.certStatus, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.certStatus) &&
        Objects.equals(this.certUpdatedAt, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.certUpdatedAt) &&
        Objects.equals(this.certUploadedOn, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.certUploadedOn) &&
        Objects.equals(this.createdAt, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.createdAt) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.expiresOn) &&
        Objects.equals(this.issuer, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.issuer) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.serialNumber) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.signature) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.status) &&
        Objects.equals(this.updatedAt, tlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(certId, certificate, hashCodeNullable(enabled), hostname, id, privateKey, certStatus, certUpdatedAt, certUploadedOn, createdAt, expiresOn, issuer, serialNumber, signature, status, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPull {\n");
    sb.append("    certId: ").append(toIndentedString(certId)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    certStatus: ").append(toIndentedString(certStatus)).append("\n");
    sb.append("    certUpdatedAt: ").append(toIndentedString(certUpdatedAt)).append("\n");
    sb.append("    certUploadedOn: ").append(toIndentedString(certUploadedOn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cert_id` to the URL query string
    if (getCertId() != null) {
      joiner.add(String.format("%scert_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cert_status` to the URL query string
    if (getCertStatus() != null) {
      joiner.add(String.format("%scert_status%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cert_updated_at` to the URL query string
    if (getCertUpdatedAt() != null) {
      joiner.add(String.format("%scert_updated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cert_uploaded_on` to the URL query string
    if (getCertUploadedOn() != null) {
      joiner.add(String.format("%scert_uploaded_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertUploadedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `certificate` to the URL query string
    if (getCertificate() != null) {
      joiner.add(String.format("%scertificate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertificate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enabled` to the URL query string
    if (getEnabled() != null) {
      joiner.add(String.format("%senabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_on` to the URL query string
    if (getExpiresOn() != null) {
      joiner.add(String.format("%sexpires_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%shostname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `issuer` to the URL query string
    if (getIssuer() != null) {
      joiner.add(String.format("%sissuer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIssuer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serial_number` to the URL query string
    if (getSerialNumber() != null) {
      joiner.add(String.format("%sserial_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSerialNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(String.format("%ssignature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `updated_at` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

