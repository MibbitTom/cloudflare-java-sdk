/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Certificate&#39;s required validation record.
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesValidationRecord.JSON_PROPERTY_EMAILS,
  TlsCertificatesAndHostnamesValidationRecord.JSON_PROPERTY_HTTP_BODY,
  TlsCertificatesAndHostnamesValidationRecord.JSON_PROPERTY_HTTP_URL,
  TlsCertificatesAndHostnamesValidationRecord.JSON_PROPERTY_TXT_NAME,
  TlsCertificatesAndHostnamesValidationRecord.JSON_PROPERTY_TXT_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesValidationRecord {
  public static final String JSON_PROPERTY_EMAILS = "emails";
  private List<Object> emails = new ArrayList<>();

  public static final String JSON_PROPERTY_HTTP_BODY = "http_body";
  private String httpBody;

  public static final String JSON_PROPERTY_HTTP_URL = "http_url";
  private String httpUrl;

  public static final String JSON_PROPERTY_TXT_NAME = "txt_name";
  private String txtName;

  public static final String JSON_PROPERTY_TXT_VALUE = "txt_value";
  private String txtValue;

  public TlsCertificatesAndHostnamesValidationRecord() { 
  }

  public TlsCertificatesAndHostnamesValidationRecord emails(List<Object> emails) {
    this.emails = emails;
    return this;
  }

  public TlsCertificatesAndHostnamesValidationRecord addEmailsItem(Object emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * The set of email addresses that the certificate authority (CA) will use to complete domain validation.
   * @return emails
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getEmails() {
    return emails;
  }


  @JsonProperty(JSON_PROPERTY_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmails(List<Object> emails) {
    this.emails = emails;
  }


  public TlsCertificatesAndHostnamesValidationRecord httpBody(String httpBody) {
    this.httpBody = httpBody;
    return this;
  }

   /**
   * The content that the certificate authority (CA) will expect to find at the http_url during the domain validation.
   * @return httpBody
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBody() {
    return httpBody;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBody(String httpBody) {
    this.httpBody = httpBody;
  }


  public TlsCertificatesAndHostnamesValidationRecord httpUrl(String httpUrl) {
    this.httpUrl = httpUrl;
    return this;
  }

   /**
   * The url that will be checked during domain validation.
   * @return httpUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpUrl() {
    return httpUrl;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpUrl(String httpUrl) {
    this.httpUrl = httpUrl;
  }


  public TlsCertificatesAndHostnamesValidationRecord txtName(String txtName) {
    this.txtName = txtName;
    return this;
  }

   /**
   * The hostname that the certificate authority (CA) will check for a TXT record during domain validation .
   * @return txtName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTxtName() {
    return txtName;
  }


  @JsonProperty(JSON_PROPERTY_TXT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTxtName(String txtName) {
    this.txtName = txtName;
  }


  public TlsCertificatesAndHostnamesValidationRecord txtValue(String txtValue) {
    this.txtValue = txtValue;
    return this;
  }

   /**
   * The TXT record that the certificate authority (CA) will check during domain validation.
   * @return txtValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TXT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTxtValue() {
    return txtValue;
  }


  @JsonProperty(JSON_PROPERTY_TXT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTxtValue(String txtValue) {
    this.txtValue = txtValue;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_validation_record object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesValidationRecord tlsCertificatesAndHostnamesValidationRecord = (TlsCertificatesAndHostnamesValidationRecord) o;
    return Objects.equals(this.emails, tlsCertificatesAndHostnamesValidationRecord.emails) &&
        Objects.equals(this.httpBody, tlsCertificatesAndHostnamesValidationRecord.httpBody) &&
        Objects.equals(this.httpUrl, tlsCertificatesAndHostnamesValidationRecord.httpUrl) &&
        Objects.equals(this.txtName, tlsCertificatesAndHostnamesValidationRecord.txtName) &&
        Objects.equals(this.txtValue, tlsCertificatesAndHostnamesValidationRecord.txtValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emails, httpBody, httpUrl, txtName, txtValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesValidationRecord {\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    httpBody: ").append(toIndentedString(httpBody)).append("\n");
    sb.append("    httpUrl: ").append(toIndentedString(httpUrl)).append("\n");
    sb.append("    txtName: ").append(toIndentedString(txtName)).append("\n");
    sb.append("    txtValue: ").append(toIndentedString(txtValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `emails` to the URL query string
    if (getEmails() != null) {
      for (int i = 0; i < getEmails().size(); i++) {
        joiner.add(String.format("%semails%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getEmails().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `http_body` to the URL query string
    if (getHttpBody() != null) {
      joiner.add(String.format("%shttp_body%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttpBody()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `http_url` to the URL query string
    if (getHttpUrl() != null) {
      joiner.add(String.format("%shttp_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttpUrl()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `txt_name` to the URL query string
    if (getTxtName() != null) {
      joiner.add(String.format("%stxt_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTxtName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `txt_value` to the URL query string
    if (getTxtValue() != null) {
      joiner.add(String.format("%stxt_value%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTxtValue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

