/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.MagicVisibilityPcapsFilterV1;
import cloudflare.sdk.models.MagicVisibilityPcapsStatus;
import cloudflare.sdk.models.MagicVisibilityPcapsSystem;
import cloudflare.sdk.models.MagicVisibilityPcapsType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * MagicVisibilityPcapsResponseSimple
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicVisibilityPcapsResponseSimple {
  public static final String SERIALIZED_NAME_FILTER_V1 = "filter_v1";
  @SerializedName(SERIALIZED_NAME_FILTER_V1)
  private MagicVisibilityPcapsFilterV1 filterV1;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MagicVisibilityPcapsStatus status;

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  private String submitted;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private MagicVisibilityPcapsSystem system;

  public static final String SERIALIZED_NAME_TIME_LIMIT = "time_limit";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT)
  private BigDecimal timeLimit;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private MagicVisibilityPcapsType type;

  public MagicVisibilityPcapsResponseSimple() {
  }

  public MagicVisibilityPcapsResponseSimple filterV1(MagicVisibilityPcapsFilterV1 filterV1) {
    this.filterV1 = filterV1;
    return this;
  }

   /**
   * Get filterV1
   * @return filterV1
  **/
  @javax.annotation.Nullable
  public MagicVisibilityPcapsFilterV1 getFilterV1() {
    return filterV1;
  }

  public void setFilterV1(MagicVisibilityPcapsFilterV1 filterV1) {
    this.filterV1 = filterV1;
  }


  public MagicVisibilityPcapsResponseSimple id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID for the packet capture.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MagicVisibilityPcapsResponseSimple status(MagicVisibilityPcapsStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public MagicVisibilityPcapsStatus getStatus() {
    return status;
  }

  public void setStatus(MagicVisibilityPcapsStatus status) {
    this.status = status;
  }


  public MagicVisibilityPcapsResponseSimple submitted(String submitted) {
    this.submitted = submitted;
    return this;
  }

   /**
   * The RFC 3339 timestamp when the packet capture was created.
   * @return submitted
  **/
  @javax.annotation.Nullable
  public String getSubmitted() {
    return submitted;
  }

  public void setSubmitted(String submitted) {
    this.submitted = submitted;
  }


  public MagicVisibilityPcapsResponseSimple system(MagicVisibilityPcapsSystem system) {
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @javax.annotation.Nullable
  public MagicVisibilityPcapsSystem getSystem() {
    return system;
  }

  public void setSystem(MagicVisibilityPcapsSystem system) {
    this.system = system;
  }


  public MagicVisibilityPcapsResponseSimple timeLimit(BigDecimal timeLimit) {
    this.timeLimit = timeLimit;
    return this;
  }

   /**
   * The packet capture duration in seconds.
   * minimum: 1
   * maximum: 300
   * @return timeLimit
  **/
  @javax.annotation.Nullable
  public BigDecimal getTimeLimit() {
    return timeLimit;
  }

  public void setTimeLimit(BigDecimal timeLimit) {
    this.timeLimit = timeLimit;
  }


  public MagicVisibilityPcapsResponseSimple type(MagicVisibilityPcapsType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public MagicVisibilityPcapsType getType() {
    return type;
  }

  public void setType(MagicVisibilityPcapsType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicVisibilityPcapsResponseSimple magicVisibilityPcapsResponseSimple = (MagicVisibilityPcapsResponseSimple) o;
    return Objects.equals(this.filterV1, magicVisibilityPcapsResponseSimple.filterV1) &&
        Objects.equals(this.id, magicVisibilityPcapsResponseSimple.id) &&
        Objects.equals(this.status, magicVisibilityPcapsResponseSimple.status) &&
        Objects.equals(this.submitted, magicVisibilityPcapsResponseSimple.submitted) &&
        Objects.equals(this.system, magicVisibilityPcapsResponseSimple.system) &&
        Objects.equals(this.timeLimit, magicVisibilityPcapsResponseSimple.timeLimit) &&
        Objects.equals(this.type, magicVisibilityPcapsResponseSimple.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterV1, id, status, submitted, system, timeLimit, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicVisibilityPcapsResponseSimple {\n");
    sb.append("    filterV1: ").append(toIndentedString(filterV1)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter_v1");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("submitted");
    openapiFields.add("system");
    openapiFields.add("time_limit");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicVisibilityPcapsResponseSimple
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicVisibilityPcapsResponseSimple.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicVisibilityPcapsResponseSimple is not found in the empty JSON string", MagicVisibilityPcapsResponseSimple.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicVisibilityPcapsResponseSimple.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicVisibilityPcapsResponseSimple` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filter_v1`
      if (jsonObj.get("filter_v1") != null && !jsonObj.get("filter_v1").isJsonNull()) {
        MagicVisibilityPcapsFilterV1.validateJsonElement(jsonObj.get("filter_v1"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        MagicVisibilityPcapsStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("submitted") != null && !jsonObj.get("submitted").isJsonNull()) && !jsonObj.get("submitted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitted").toString()));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        MagicVisibilityPcapsSystem.validateJsonElement(jsonObj.get("system"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        MagicVisibilityPcapsType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicVisibilityPcapsResponseSimple.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicVisibilityPcapsResponseSimple' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicVisibilityPcapsResponseSimple> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicVisibilityPcapsResponseSimple.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicVisibilityPcapsResponseSimple>() {
           @Override
           public void write(JsonWriter out, MagicVisibilityPcapsResponseSimple value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicVisibilityPcapsResponseSimple read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicVisibilityPcapsResponseSimple given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicVisibilityPcapsResponseSimple
  * @throws IOException if the JSON string is invalid with respect to MagicVisibilityPcapsResponseSimple
  */
  public static MagicVisibilityPcapsResponseSimple fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicVisibilityPcapsResponseSimple.class);
  }

 /**
  * Convert an instance of MagicVisibilityPcapsResponseSimple to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

