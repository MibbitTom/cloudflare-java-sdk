/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * BotManagementBotFightModeConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class BotManagementBotFightModeConfig {
  public static final String SERIALIZED_NAME_ENABLE_JS = "enable_js";
  @SerializedName(SERIALIZED_NAME_ENABLE_JS)
  private Boolean enableJs;

  public static final String SERIALIZED_NAME_USING_LATEST_MODEL = "using_latest_model";
  @SerializedName(SERIALIZED_NAME_USING_LATEST_MODEL)
  private Boolean usingLatestModel;

  public static final String SERIALIZED_NAME_FIGHT_MODE = "fight_mode";
  @SerializedName(SERIALIZED_NAME_FIGHT_MODE)
  private Boolean fightMode;

  public BotManagementBotFightModeConfig() {
  }

  public BotManagementBotFightModeConfig(
     Boolean usingLatestModel
  ) {
    this();
    this.usingLatestModel = usingLatestModel;
  }

  public BotManagementBotFightModeConfig enableJs(Boolean enableJs) {
    this.enableJs = enableJs;
    return this;
  }

   /**
   * Use lightweight, invisible JavaScript detections to improve Bot Management. [Learn more about JavaScript Detections](https://developers.cloudflare.com/bots/reference/javascript-detections/).
   * @return enableJs
  **/
  @javax.annotation.Nullable
  public Boolean getEnableJs() {
    return enableJs;
  }

  public void setEnableJs(Boolean enableJs) {
    this.enableJs = enableJs;
  }


   /**
   * A read-only field that indicates whether the zone currently is running the latest ML model. 
   * @return usingLatestModel
  **/
  @javax.annotation.Nullable
  public Boolean getUsingLatestModel() {
    return usingLatestModel;
  }



  public BotManagementBotFightModeConfig fightMode(Boolean fightMode) {
    this.fightMode = fightMode;
    return this;
  }

   /**
   * Whether to enable Bot Fight Mode.
   * @return fightMode
  **/
  @javax.annotation.Nullable
  public Boolean getFightMode() {
    return fightMode;
  }

  public void setFightMode(Boolean fightMode) {
    this.fightMode = fightMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BotManagementBotFightModeConfig botManagementBotFightModeConfig = (BotManagementBotFightModeConfig) o;
    return Objects.equals(this.enableJs, botManagementBotFightModeConfig.enableJs) &&
        Objects.equals(this.usingLatestModel, botManagementBotFightModeConfig.usingLatestModel) &&
        Objects.equals(this.fightMode, botManagementBotFightModeConfig.fightMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableJs, usingLatestModel, fightMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BotManagementBotFightModeConfig {\n");
    sb.append("    enableJs: ").append(toIndentedString(enableJs)).append("\n");
    sb.append("    usingLatestModel: ").append(toIndentedString(usingLatestModel)).append("\n");
    sb.append("    fightMode: ").append(toIndentedString(fightMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable_js");
    openapiFields.add("using_latest_model");
    openapiFields.add("fight_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BotManagementBotFightModeConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BotManagementBotFightModeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BotManagementBotFightModeConfig is not found in the empty JSON string", BotManagementBotFightModeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BotManagementBotFightModeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BotManagementBotFightModeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BotManagementBotFightModeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BotManagementBotFightModeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BotManagementBotFightModeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BotManagementBotFightModeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BotManagementBotFightModeConfig>() {
           @Override
           public void write(JsonWriter out, BotManagementBotFightModeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BotManagementBotFightModeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BotManagementBotFightModeConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BotManagementBotFightModeConfig
  * @throws IOException if the JSON string is invalid with respect to BotManagementBotFightModeConfig
  */
  public static BotManagementBotFightModeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BotManagementBotFightModeConfig.class);
  }

 /**
  * Convert an instance of BotManagementBotFightModeConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

