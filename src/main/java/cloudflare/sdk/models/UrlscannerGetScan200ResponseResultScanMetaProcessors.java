/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanDomainsExampleComRank;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * UrlscannerGetScan200ResponseResultScanMetaProcessors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScan200ResponseResultScanMetaProcessors {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories categories;

  public static final String SERIALIZED_NAME_PHISHING = "phishing";
  @SerializedName(SERIALIZED_NAME_PHISHING)
  private List<String> phishing = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private UrlscannerGetScan200ResponseResultScanDomainsExampleComRank rank;

  public static final String SERIALIZED_NAME_TECH = "tech";
  @SerializedName(SERIALIZED_NAME_TECH)
  private List<UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner> tech = new ArrayList<>();

  public UrlscannerGetScan200ResponseResultScanMetaProcessors() {
  }

  public UrlscannerGetScan200ResponseResultScanMetaProcessors categories(UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories getCategories() {
    return categories;
  }

  public void setCategories(UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories categories) {
    this.categories = categories;
  }


  public UrlscannerGetScan200ResponseResultScanMetaProcessors phishing(List<String> phishing) {
    this.phishing = phishing;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScanMetaProcessors addPhishingItem(String phishingItem) {
    if (this.phishing == null) {
      this.phishing = new ArrayList<>();
    }
    this.phishing.add(phishingItem);
    return this;
  }

   /**
   * Get phishing
   * @return phishing
  **/
  @javax.annotation.Nonnull
  public List<String> getPhishing() {
    return phishing;
  }

  public void setPhishing(List<String> phishing) {
    this.phishing = phishing;
  }


  public UrlscannerGetScan200ResponseResultScanMetaProcessors rank(UrlscannerGetScan200ResponseResultScanDomainsExampleComRank rank) {
    this.rank = rank;
    return this;
  }

   /**
   * Get rank
   * @return rank
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanDomainsExampleComRank getRank() {
    return rank;
  }

  public void setRank(UrlscannerGetScan200ResponseResultScanDomainsExampleComRank rank) {
    this.rank = rank;
  }


  public UrlscannerGetScan200ResponseResultScanMetaProcessors tech(List<UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner> tech) {
    this.tech = tech;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScanMetaProcessors addTechItem(UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner techItem) {
    if (this.tech == null) {
      this.tech = new ArrayList<>();
    }
    this.tech.add(techItem);
    return this;
  }

   /**
   * Get tech
   * @return tech
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner> getTech() {
    return tech;
  }

  public void setTech(List<UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner> tech) {
    this.tech = tech;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScan200ResponseResultScanMetaProcessors urlscannerGetScan200ResponseResultScanMetaProcessors = (UrlscannerGetScan200ResponseResultScanMetaProcessors) o;
    return Objects.equals(this.categories, urlscannerGetScan200ResponseResultScanMetaProcessors.categories) &&
        Objects.equals(this.phishing, urlscannerGetScan200ResponseResultScanMetaProcessors.phishing) &&
        Objects.equals(this.rank, urlscannerGetScan200ResponseResultScanMetaProcessors.rank) &&
        Objects.equals(this.tech, urlscannerGetScan200ResponseResultScanMetaProcessors.tech);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, phishing, rank, tech);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScan200ResponseResultScanMetaProcessors {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    phishing: ").append(toIndentedString(phishing)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    tech: ").append(toIndentedString(tech)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("phishing");
    openapiFields.add("rank");
    openapiFields.add("tech");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("phishing");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("tech");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScan200ResponseResultScanMetaProcessors
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScan200ResponseResultScanMetaProcessors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScan200ResponseResultScanMetaProcessors is not found in the empty JSON string", UrlscannerGetScan200ResponseResultScanMetaProcessors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScan200ResponseResultScanMetaProcessors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScan200ResponseResultScanMetaProcessors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScan200ResponseResultScanMetaProcessors.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `categories`
      UrlscannerGetScan200ResponseResultScanMetaProcessorsCategories.validateJsonElement(jsonObj.get("categories"));
      // ensure the required json array is present
      if (jsonObj.get("phishing") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("phishing").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phishing` to be an array in the JSON string but got `%s`", jsonObj.get("phishing").toString()));
      }
      // validate the required field `rank`
      UrlscannerGetScan200ResponseResultScanDomainsExampleComRank.validateJsonElement(jsonObj.get("rank"));
      // ensure the json data is an array
      if (!jsonObj.get("tech").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tech` to be an array in the JSON string but got `%s`", jsonObj.get("tech").toString()));
      }

      JsonArray jsonArraytech = jsonObj.getAsJsonArray("tech");
      // validate the required field `tech` (array)
      for (int i = 0; i < jsonArraytech.size(); i++) {
        UrlscannerGetScan200ResponseResultScanMetaProcessorsTechInner.validateJsonElement(jsonArraytech.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScan200ResponseResultScanMetaProcessors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScan200ResponseResultScanMetaProcessors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScan200ResponseResultScanMetaProcessors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScan200ResponseResultScanMetaProcessors.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScan200ResponseResultScanMetaProcessors>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScan200ResponseResultScanMetaProcessors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScan200ResponseResultScanMetaProcessors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScan200ResponseResultScanMetaProcessors given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScan200ResponseResultScanMetaProcessors
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScan200ResponseResultScanMetaProcessors
  */
  public static UrlscannerGetScan200ResponseResultScanMetaProcessors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScan200ResponseResultScanMetaProcessors.class);
  }

 /**
  * Convert an instance of UrlscannerGetScan200ResponseResultScanMetaProcessors to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

