/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesCertificateObjectPost
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_CA,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_CERTIFICATES,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_EXPIRES_ON,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_ISSUER,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_NAME,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_SERIAL_NUMBER,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_SIGNATURE,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_UPDATED_AT,
  TlsCertificatesAndHostnamesCertificateObjectPost.JSON_PROPERTY_UPLOADED_ON
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesCertificateObjectPost {
  public static final String JSON_PROPERTY_CA = "ca";
  private Boolean ca;

  public static final String JSON_PROPERTY_CERTIFICATES = "certificates";
  private String certificates;

  public static final String JSON_PROPERTY_EXPIRES_ON = "expires_on";
  private OffsetDateTime expiresOn;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_ISSUER = "issuer";
  private String issuer;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SERIAL_NUMBER = "serial_number";
  private String serialNumber;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_UPLOADED_ON = "uploaded_on";
  private OffsetDateTime uploadedOn;

  public TlsCertificatesAndHostnamesCertificateObjectPost() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesCertificateObjectPost(
    @JsonProperty(JSON_PROPERTY_EXPIRES_ON) OffsetDateTime expiresOn, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_ISSUER) String issuer, 
    @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER) String serialNumber, 
    @JsonProperty(JSON_PROPERTY_SIGNATURE) String signature
  ) {
  this();
    this.expiresOn = expiresOn;
    this.id = id;
    this.issuer = issuer;
    this.serialNumber = serialNumber;
    this.signature = signature;
  }

  public TlsCertificatesAndHostnamesCertificateObjectPost ca(Boolean ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Indicates whether the certificate is a CA or leaf certificate.
   * @return ca
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCa() {
    return ca;
  }


  @JsonProperty(JSON_PROPERTY_CA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCa(Boolean ca) {
    this.ca = ca;
  }


  public TlsCertificatesAndHostnamesCertificateObjectPost certificates(String certificates) {
    this.certificates = certificates;
    return this;
  }

   /**
   * The uploaded root CA certificate.
   * @return certificates
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificates() {
    return certificates;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificates(String certificates) {
    this.certificates = certificates;
  }


   /**
   * When the certificate expires.
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }




   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * The certificate authority that issued the certificate.
   * @return issuer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssuer() {
    return issuer;
  }




  public TlsCertificatesAndHostnamesCertificateObjectPost name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Optional unique name for the certificate. Only used for human readability.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


   /**
   * The certificate serial number.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSerialNumber() {
    return serialNumber;
  }




   /**
   * The type of hash used for the certificate.
   * @return signature
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignature() {
    return signature;
  }




  public TlsCertificatesAndHostnamesCertificateObjectPost updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * This is the time the certificate was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TlsCertificatesAndHostnamesCertificateObjectPost uploadedOn(OffsetDateTime uploadedOn) {
    this.uploadedOn = uploadedOn;
    return this;
  }

   /**
   * This is the time the certificate was uploaded.
   * @return uploadedOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOADED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUploadedOn() {
    return uploadedOn;
  }


  @JsonProperty(JSON_PROPERTY_UPLOADED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadedOn(OffsetDateTime uploadedOn) {
    this.uploadedOn = uploadedOn;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_certificateObjectPost object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesCertificateObjectPost tlsCertificatesAndHostnamesCertificateObjectPost = (TlsCertificatesAndHostnamesCertificateObjectPost) o;
    return Objects.equals(this.ca, tlsCertificatesAndHostnamesCertificateObjectPost.ca) &&
        Objects.equals(this.certificates, tlsCertificatesAndHostnamesCertificateObjectPost.certificates) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesCertificateObjectPost.expiresOn) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesCertificateObjectPost.id) &&
        Objects.equals(this.issuer, tlsCertificatesAndHostnamesCertificateObjectPost.issuer) &&
        Objects.equals(this.name, tlsCertificatesAndHostnamesCertificateObjectPost.name) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesCertificateObjectPost.serialNumber) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesCertificateObjectPost.signature) &&
        Objects.equals(this.updatedAt, tlsCertificatesAndHostnamesCertificateObjectPost.updatedAt) &&
        Objects.equals(this.uploadedOn, tlsCertificatesAndHostnamesCertificateObjectPost.uploadedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, certificates, expiresOn, id, issuer, name, serialNumber, signature, updatedAt, uploadedOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesCertificateObjectPost {\n");
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploadedOn: ").append(toIndentedString(uploadedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ca` to the URL query string
    if (getCa() != null) {
      joiner.add(String.format("%sca%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCa()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `certificates` to the URL query string
    if (getCertificates() != null) {
      joiner.add(String.format("%scertificates%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertificates()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_on` to the URL query string
    if (getExpiresOn() != null) {
      joiner.add(String.format("%sexpires_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `issuer` to the URL query string
    if (getIssuer() != null) {
      joiner.add(String.format("%sissuer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIssuer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serial_number` to the URL query string
    if (getSerialNumber() != null) {
      joiner.add(String.format("%sserial_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSerialNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(String.format("%ssignature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `updated_at` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `uploaded_on` to the URL query string
    if (getUploadedOn() != null) {
      joiner.add(String.format("%suploaded_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUploadedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

