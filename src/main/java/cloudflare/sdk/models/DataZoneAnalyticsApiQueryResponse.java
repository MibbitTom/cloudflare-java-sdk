/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.DataZoneAnalyticsApiSince;
import cloudflare.sdk.models.DataZoneAnalyticsApiUntil;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * The exact parameters/timestamps the analytics service used to return data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DataZoneAnalyticsApiQueryResponse {
  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private DataZoneAnalyticsApiSince since = -10080;

  public static final String SERIALIZED_NAME_TIME_DELTA = "time_delta";
  @SerializedName(SERIALIZED_NAME_TIME_DELTA)
  private Integer timeDelta;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private DataZoneAnalyticsApiUntil until = 0;

  public DataZoneAnalyticsApiQueryResponse() {
  }

  public DataZoneAnalyticsApiQueryResponse since(DataZoneAnalyticsApiSince since) {
    this.since = since;
    return this;
  }

   /**
   * Get since
   * @return since
  **/
  @javax.annotation.Nullable
  public DataZoneAnalyticsApiSince getSince() {
    return since;
  }

  public void setSince(DataZoneAnalyticsApiSince since) {
    this.since = since;
  }


  public DataZoneAnalyticsApiQueryResponse timeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
    return this;
  }

   /**
   * The amount of time (in minutes) that each data point in the timeseries represents. The granularity of the time-series returned (e.g. each bucket in the time series representing 1-minute vs 1-day) is calculated by the API based on the time-range provided to the API.
   * @return timeDelta
  **/
  @javax.annotation.Nullable
  public Integer getTimeDelta() {
    return timeDelta;
  }

  public void setTimeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
  }


  public DataZoneAnalyticsApiQueryResponse until(DataZoneAnalyticsApiUntil until) {
    this.until = until;
    return this;
  }

   /**
   * Get until
   * @return until
  **/
  @javax.annotation.Nullable
  public DataZoneAnalyticsApiUntil getUntil() {
    return until;
  }

  public void setUntil(DataZoneAnalyticsApiUntil until) {
    this.until = until;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataZoneAnalyticsApiQueryResponse dataZoneAnalyticsApiQueryResponse = (DataZoneAnalyticsApiQueryResponse) o;
    return Objects.equals(this.since, dataZoneAnalyticsApiQueryResponse.since) &&
        Objects.equals(this.timeDelta, dataZoneAnalyticsApiQueryResponse.timeDelta) &&
        Objects.equals(this.until, dataZoneAnalyticsApiQueryResponse.until);
  }

  @Override
  public int hashCode() {
    return Objects.hash(since, timeDelta, until);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataZoneAnalyticsApiQueryResponse {\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    timeDelta: ").append(toIndentedString(timeDelta)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("since");
    openapiFields.add("time_delta");
    openapiFields.add("until");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataZoneAnalyticsApiQueryResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataZoneAnalyticsApiQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataZoneAnalyticsApiQueryResponse is not found in the empty JSON string", DataZoneAnalyticsApiQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataZoneAnalyticsApiQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataZoneAnalyticsApiQueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `since`
      if (jsonObj.get("since") != null && !jsonObj.get("since").isJsonNull()) {
        DataZoneAnalyticsApiSince.validateJsonElement(jsonObj.get("since"));
      }
      // validate the optional field `until`
      if (jsonObj.get("until") != null && !jsonObj.get("until").isJsonNull()) {
        DataZoneAnalyticsApiUntil.validateJsonElement(jsonObj.get("until"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataZoneAnalyticsApiQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataZoneAnalyticsApiQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataZoneAnalyticsApiQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataZoneAnalyticsApiQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DataZoneAnalyticsApiQueryResponse>() {
           @Override
           public void write(JsonWriter out, DataZoneAnalyticsApiQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataZoneAnalyticsApiQueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataZoneAnalyticsApiQueryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataZoneAnalyticsApiQueryResponse
  * @throws IOException if the JSON string is invalid with respect to DataZoneAnalyticsApiQueryResponse
  */
  public static DataZoneAnalyticsApiQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataZoneAnalyticsApiQueryResponse.class);
  }

 /**
  * Convert an instance of DataZoneAnalyticsApiQueryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

