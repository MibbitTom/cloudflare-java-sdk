/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * HyperdriveHyperdriveCaching
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class HyperdriveHyperdriveCaching {
  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_MAX_AGE = "max_age";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private Integer maxAge;

  public static final String SERIALIZED_NAME_STALE_WHILE_REVALIDATE = "stale_while_revalidate";
  @SerializedName(SERIALIZED_NAME_STALE_WHILE_REVALIDATE)
  private Integer staleWhileRevalidate;

  public HyperdriveHyperdriveCaching() {
  }

  public HyperdriveHyperdriveCaching disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * When set to true, disables the caching of SQL responses. (Default: false)
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public HyperdriveHyperdriveCaching maxAge(Integer maxAge) {
    this.maxAge = maxAge;
    return this;
  }

   /**
   * When present, specifies max duration for which items should persist in the cache. (Default: 60)
   * @return maxAge
  **/
  @javax.annotation.Nullable
  public Integer getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Integer maxAge) {
    this.maxAge = maxAge;
  }


  public HyperdriveHyperdriveCaching staleWhileRevalidate(Integer staleWhileRevalidate) {
    this.staleWhileRevalidate = staleWhileRevalidate;
    return this;
  }

   /**
   * When present, indicates the number of seconds cache may serve the response after it becomes stale. (Default: 15)
   * @return staleWhileRevalidate
  **/
  @javax.annotation.Nullable
  public Integer getStaleWhileRevalidate() {
    return staleWhileRevalidate;
  }

  public void setStaleWhileRevalidate(Integer staleWhileRevalidate) {
    this.staleWhileRevalidate = staleWhileRevalidate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperdriveHyperdriveCaching hyperdriveHyperdriveCaching = (HyperdriveHyperdriveCaching) o;
    return Objects.equals(this.disabled, hyperdriveHyperdriveCaching.disabled) &&
        Objects.equals(this.maxAge, hyperdriveHyperdriveCaching.maxAge) &&
        Objects.equals(this.staleWhileRevalidate, hyperdriveHyperdriveCaching.staleWhileRevalidate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabled, maxAge, staleWhileRevalidate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperdriveHyperdriveCaching {\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("    staleWhileRevalidate: ").append(toIndentedString(staleWhileRevalidate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabled");
    openapiFields.add("max_age");
    openapiFields.add("stale_while_revalidate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperdriveHyperdriveCaching
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperdriveHyperdriveCaching.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperdriveHyperdriveCaching is not found in the empty JSON string", HyperdriveHyperdriveCaching.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperdriveHyperdriveCaching.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperdriveHyperdriveCaching` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperdriveHyperdriveCaching.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperdriveHyperdriveCaching' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperdriveHyperdriveCaching> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperdriveHyperdriveCaching.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperdriveHyperdriveCaching>() {
           @Override
           public void write(JsonWriter out, HyperdriveHyperdriveCaching value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperdriveHyperdriveCaching read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperdriveHyperdriveCaching given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperdriveHyperdriveCaching
  * @throws IOException if the JSON string is invalid with respect to HyperdriveHyperdriveCaching
  */
  public static HyperdriveHyperdriveCaching fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperdriveHyperdriveCaching.class);
  }

 /**
  * Convert an instance of HyperdriveHyperdriveCaching to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

