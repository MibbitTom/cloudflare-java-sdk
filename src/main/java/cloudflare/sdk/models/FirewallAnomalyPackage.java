/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.FirewallActionMode;
import cloudflare.sdk.models.FirewallSensitivity;
import cloudflare.sdk.models.FirewallStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * FirewallAnomalyPackage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallAnomalyPackage {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTION_MODE = "detection_mode";
  @SerializedName(SERIALIZED_NAME_DETECTION_MODE)
  private String detectionMode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private FirewallStatus status = FirewallStatus.ACTIVE;

  public static final String SERIALIZED_NAME_ZONE_ID = "zone_id";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  private String zoneId;

  public static final String SERIALIZED_NAME_ACTION_MODE = "action_mode";
  @SerializedName(SERIALIZED_NAME_ACTION_MODE)
  private FirewallActionMode actionMode = FirewallActionMode.CHALLENGE;

  public static final String SERIALIZED_NAME_SENSITIVITY = "sensitivity";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY)
  private FirewallSensitivity sensitivity = FirewallSensitivity.HIGH;

  public FirewallAnomalyPackage() {
  }

  public FirewallAnomalyPackage(
     String description, 
     String detectionMode, 
     String id, 
     String name, 
     String zoneId
  ) {
    this();
    this.description = description;
    this.detectionMode = detectionMode;
    this.id = id;
    this.name = name;
    this.zoneId = zoneId;
  }

   /**
   * A summary of the purpose/function of the WAF package.
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }



   /**
   * When a WAF package uses anomaly detection, each rule is given a score when triggered. If the total score of all triggered rules exceeds the sensitivity defined on the WAF package, the action defined on the package will be taken.
   * @return detectionMode
  **/
  @javax.annotation.Nonnull
  public String getDetectionMode() {
    return detectionMode;
  }



   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }



   /**
   * The name of the WAF package.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public FirewallAnomalyPackage status(FirewallStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public FirewallStatus getStatus() {
    return status;
  }

  public void setStatus(FirewallStatus status) {
    this.status = status;
  }


   /**
   * Identifier
   * @return zoneId
  **/
  @javax.annotation.Nonnull
  public String getZoneId() {
    return zoneId;
  }



  public FirewallAnomalyPackage actionMode(FirewallActionMode actionMode) {
    this.actionMode = actionMode;
    return this;
  }

   /**
   * Get actionMode
   * @return actionMode
  **/
  @javax.annotation.Nonnull
  public FirewallActionMode getActionMode() {
    return actionMode;
  }

  public void setActionMode(FirewallActionMode actionMode) {
    this.actionMode = actionMode;
  }


  public FirewallAnomalyPackage sensitivity(FirewallSensitivity sensitivity) {
    this.sensitivity = sensitivity;
    return this;
  }

   /**
   * Get sensitivity
   * @return sensitivity
  **/
  @javax.annotation.Nonnull
  public FirewallSensitivity getSensitivity() {
    return sensitivity;
  }

  public void setSensitivity(FirewallSensitivity sensitivity) {
    this.sensitivity = sensitivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallAnomalyPackage firewallAnomalyPackage = (FirewallAnomalyPackage) o;
    return Objects.equals(this.description, firewallAnomalyPackage.description) &&
        Objects.equals(this.detectionMode, firewallAnomalyPackage.detectionMode) &&
        Objects.equals(this.id, firewallAnomalyPackage.id) &&
        Objects.equals(this.name, firewallAnomalyPackage.name) &&
        Objects.equals(this.status, firewallAnomalyPackage.status) &&
        Objects.equals(this.zoneId, firewallAnomalyPackage.zoneId) &&
        Objects.equals(this.actionMode, firewallAnomalyPackage.actionMode) &&
        Objects.equals(this.sensitivity, firewallAnomalyPackage.sensitivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, detectionMode, id, name, status, zoneId, actionMode, sensitivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallAnomalyPackage {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionMode: ").append(toIndentedString(detectionMode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("    actionMode: ").append(toIndentedString(actionMode)).append("\n");
    sb.append("    sensitivity: ").append(toIndentedString(sensitivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("detection_mode");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("zone_id");
    openapiFields.add("action_mode");
    openapiFields.add("sensitivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("detection_mode");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("zone_id");
    openapiRequiredFields.add("action_mode");
    openapiRequiredFields.add("sensitivity");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FirewallAnomalyPackage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallAnomalyPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallAnomalyPackage is not found in the empty JSON string", FirewallAnomalyPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallAnomalyPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallAnomalyPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FirewallAnomalyPackage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("detection_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detection_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detection_mode").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        FirewallStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (!jsonObj.get("zone_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_id").toString()));
      }
      // validate the required field `action_mode`
      FirewallActionMode.validateJsonElement(jsonObj.get("action_mode"));
      // validate the required field `sensitivity`
      FirewallSensitivity.validateJsonElement(jsonObj.get("sensitivity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallAnomalyPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallAnomalyPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallAnomalyPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallAnomalyPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallAnomalyPackage>() {
           @Override
           public void write(JsonWriter out, FirewallAnomalyPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallAnomalyPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirewallAnomalyPackage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirewallAnomalyPackage
  * @throws IOException if the JSON string is invalid with respect to FirewallAnomalyPackage
  */
  public static FirewallAnomalyPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallAnomalyPackage.class);
  }

 /**
  * Convert an instance of FirewallAnomalyPackage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

