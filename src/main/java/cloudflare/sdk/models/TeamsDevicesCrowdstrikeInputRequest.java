/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * TeamsDevicesCrowdstrikeInputRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TeamsDevicesCrowdstrikeInputRequest {
  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  /**
   * Operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    LESS_THAN("<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    GREATER_THAN(">"),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    u("==");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private String overall;

  public static final String SERIALIZED_NAME_SENSOR_CONFIG = "sensor_config";
  @SerializedName(SERIALIZED_NAME_SENSOR_CONFIG)
  private String sensorConfig;

  /**
   * For more details on state, please refer to the Crowdstrike documentation.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ONLINE("online"),
    
    OFFLINE("offline"),
    
    UNKNOWN("unknown");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  /**
   * Version Operator
   */
  @JsonAdapter(VersionOperatorEnum.Adapter.class)
  public enum VersionOperatorEnum {
    LESS_THAN("<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    GREATER_THAN(">"),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    u("==");

    private String value;

    VersionOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionOperatorEnum fromValue(String value) {
      for (VersionOperatorEnum b : VersionOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersionOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION_OPERATOR = "versionOperator";
  @SerializedName(SERIALIZED_NAME_VERSION_OPERATOR)
  private VersionOperatorEnum versionOperator;

  public TeamsDevicesCrowdstrikeInputRequest() {
  }

  public TeamsDevicesCrowdstrikeInputRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * Posture Integration ID.
   * @return connectionId
  **/
  @javax.annotation.Nonnull
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public TeamsDevicesCrowdstrikeInputRequest lastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * For more details on last seen, please refer to the Crowdstrike documentation.
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  public String getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }


  public TeamsDevicesCrowdstrikeInputRequest operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Operator
   * @return operator
  **/
  @javax.annotation.Nullable
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public TeamsDevicesCrowdstrikeInputRequest os(String os) {
    this.os = os;
    return this;
  }

   /**
   * Os Version
   * @return os
  **/
  @javax.annotation.Nullable
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public TeamsDevicesCrowdstrikeInputRequest overall(String overall) {
    this.overall = overall;
    return this;
  }

   /**
   * overall
   * @return overall
  **/
  @javax.annotation.Nullable
  public String getOverall() {
    return overall;
  }

  public void setOverall(String overall) {
    this.overall = overall;
  }


  public TeamsDevicesCrowdstrikeInputRequest sensorConfig(String sensorConfig) {
    this.sensorConfig = sensorConfig;
    return this;
  }

   /**
   * SensorConfig
   * @return sensorConfig
  **/
  @javax.annotation.Nullable
  public String getSensorConfig() {
    return sensorConfig;
  }

  public void setSensorConfig(String sensorConfig) {
    this.sensorConfig = sensorConfig;
  }


  public TeamsDevicesCrowdstrikeInputRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * For more details on state, please refer to the Crowdstrike documentation.
   * @return state
  **/
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public TeamsDevicesCrowdstrikeInputRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public TeamsDevicesCrowdstrikeInputRequest versionOperator(VersionOperatorEnum versionOperator) {
    this.versionOperator = versionOperator;
    return this;
  }

   /**
   * Version Operator
   * @return versionOperator
  **/
  @javax.annotation.Nullable
  public VersionOperatorEnum getVersionOperator() {
    return versionOperator;
  }

  public void setVersionOperator(VersionOperatorEnum versionOperator) {
    this.versionOperator = versionOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamsDevicesCrowdstrikeInputRequest teamsDevicesCrowdstrikeInputRequest = (TeamsDevicesCrowdstrikeInputRequest) o;
    return Objects.equals(this.connectionId, teamsDevicesCrowdstrikeInputRequest.connectionId) &&
        Objects.equals(this.lastSeen, teamsDevicesCrowdstrikeInputRequest.lastSeen) &&
        Objects.equals(this.operator, teamsDevicesCrowdstrikeInputRequest.operator) &&
        Objects.equals(this.os, teamsDevicesCrowdstrikeInputRequest.os) &&
        Objects.equals(this.overall, teamsDevicesCrowdstrikeInputRequest.overall) &&
        Objects.equals(this.sensorConfig, teamsDevicesCrowdstrikeInputRequest.sensorConfig) &&
        Objects.equals(this.state, teamsDevicesCrowdstrikeInputRequest.state) &&
        Objects.equals(this.version, teamsDevicesCrowdstrikeInputRequest.version) &&
        Objects.equals(this.versionOperator, teamsDevicesCrowdstrikeInputRequest.versionOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, lastSeen, operator, os, overall, sensorConfig, state, version, versionOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamsDevicesCrowdstrikeInputRequest {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    sensorConfig: ").append(toIndentedString(sensorConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionOperator: ").append(toIndentedString(versionOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection_id");
    openapiFields.add("last_seen");
    openapiFields.add("operator");
    openapiFields.add("os");
    openapiFields.add("overall");
    openapiFields.add("sensor_config");
    openapiFields.add("state");
    openapiFields.add("version");
    openapiFields.add("versionOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connection_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TeamsDevicesCrowdstrikeInputRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamsDevicesCrowdstrikeInputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamsDevicesCrowdstrikeInputRequest is not found in the empty JSON string", TeamsDevicesCrowdstrikeInputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamsDevicesCrowdstrikeInputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamsDevicesCrowdstrikeInputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamsDevicesCrowdstrikeInputRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      if ((jsonObj.get("last_seen") != null && !jsonObj.get("last_seen").isJsonNull()) && !jsonObj.get("last_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      }
      if ((jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) && !jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      if ((jsonObj.get("overall") != null && !jsonObj.get("overall").isJsonNull()) && !jsonObj.get("overall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall").toString()));
      }
      if ((jsonObj.get("sensor_config") != null && !jsonObj.get("sensor_config").isJsonNull()) && !jsonObj.get("sensor_config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensor_config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensor_config").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("versionOperator") != null && !jsonObj.get("versionOperator").isJsonNull()) && !jsonObj.get("versionOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionOperator").toString()));
      }
      // validate the optional field `versionOperator`
      if (jsonObj.get("versionOperator") != null && !jsonObj.get("versionOperator").isJsonNull()) {
        VersionOperatorEnum.validateJsonElement(jsonObj.get("versionOperator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamsDevicesCrowdstrikeInputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamsDevicesCrowdstrikeInputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamsDevicesCrowdstrikeInputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesCrowdstrikeInputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamsDevicesCrowdstrikeInputRequest>() {
           @Override
           public void write(JsonWriter out, TeamsDevicesCrowdstrikeInputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamsDevicesCrowdstrikeInputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamsDevicesCrowdstrikeInputRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamsDevicesCrowdstrikeInputRequest
  * @throws IOException if the JSON string is invalid with respect to TeamsDevicesCrowdstrikeInputRequest
  */
  public static TeamsDevicesCrowdstrikeInputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamsDevicesCrowdstrikeInputRequest.class);
  }

 /**
  * Convert an instance of TeamsDevicesCrowdstrikeInputRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

