/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import cloudflare.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
@JsonDeserialize(using=TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.TlsCertificatesAndHostnamesApiResponseSingleAllOfResultDeserializer.class)
@JsonSerialize(using = TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.TlsCertificatesAndHostnamesApiResponseSingleAllOfResultSerializer.class)
public class TlsCertificatesAndHostnamesApiResponseSingleAllOfResult extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.class.getName());

    public static class TlsCertificatesAndHostnamesApiResponseSingleAllOfResultSerializer extends StdSerializer<TlsCertificatesAndHostnamesApiResponseSingleAllOfResult> {
        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResultSerializer(Class<TlsCertificatesAndHostnamesApiResponseSingleAllOfResult> t) {
            super(t);
        }

        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResultSerializer() {
            this(null);
        }

        @Override
        public void serialize(TlsCertificatesAndHostnamesApiResponseSingleAllOfResult value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class TlsCertificatesAndHostnamesApiResponseSingleAllOfResultDeserializer extends StdDeserializer<TlsCertificatesAndHostnamesApiResponseSingleAllOfResult> {
        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResultDeserializer() {
            this(TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.class);
        }

        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResultDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResult deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize Object
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(Object.class);
                TlsCertificatesAndHostnamesApiResponseSingleAllOfResult ret = new TlsCertificatesAndHostnamesApiResponseSingleAllOfResult();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TlsCertificatesAndHostnamesApiResponseSingleAllOfResult'", e);
            }

            // deserialize String
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(String.class);
                TlsCertificatesAndHostnamesApiResponseSingleAllOfResult ret = new TlsCertificatesAndHostnamesApiResponseSingleAllOfResult();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TlsCertificatesAndHostnamesApiResponseSingleAllOfResult'", e);
            }

            throw new IOException(String.format("Failed deserialization for TlsCertificatesAndHostnamesApiResponseSingleAllOfResult: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public TlsCertificatesAndHostnamesApiResponseSingleAllOfResult getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "TlsCertificatesAndHostnamesApiResponseSingleAllOfResult cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TlsCertificatesAndHostnamesApiResponseSingleAllOfResult() {
        super("anyOf", Boolean.FALSE);
    }

    public TlsCertificatesAndHostnamesApiResponseSingleAllOfResult(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TlsCertificatesAndHostnamesApiResponseSingleAllOfResult(String o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Object", Object.class);
        schemas.put("String", String.class);
        JSON.registerDescendants(TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TlsCertificatesAndHostnamesApiResponseSingleAllOfResult.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Object, String
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(Object.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(String.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Object, String");
    }

    /**
     * Get the actual instance, which can be the following:
     * Object, String
     *
     * @return The actual instance (Object, String)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    return null;
  }

}

