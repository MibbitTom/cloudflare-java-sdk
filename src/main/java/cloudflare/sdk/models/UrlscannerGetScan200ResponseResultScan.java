/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.UrlscannerCreateScan409ResponseResultTasksInner;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanAsns;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanCertificatesInner;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanDomains;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanGeo;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanIps;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanLinks;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanMeta;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanPage;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanPerformanceInner;
import cloudflare.sdk.models.UrlscannerGetScan200ResponseResultScanVerdicts;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * UrlscannerGetScan200ResponseResultScan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScan200ResponseResultScan {
  public static final String SERIALIZED_NAME_ASNS = "asns";
  @SerializedName(SERIALIZED_NAME_ASNS)
  private UrlscannerGetScan200ResponseResultScanAsns asns;

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<UrlscannerGetScan200ResponseResultScanCertificatesInner> certificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private UrlscannerGetScan200ResponseResultScanDomains domains;

  public static final String SERIALIZED_NAME_GEO = "geo";
  @SerializedName(SERIALIZED_NAME_GEO)
  private UrlscannerGetScan200ResponseResultScanGeo geo;

  public static final String SERIALIZED_NAME_IPS = "ips";
  @SerializedName(SERIALIZED_NAME_IPS)
  private UrlscannerGetScan200ResponseResultScanIps ips;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private UrlscannerGetScan200ResponseResultScanLinks links;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private UrlscannerGetScan200ResponseResultScanMeta meta;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private UrlscannerGetScan200ResponseResultScanPage page;

  public static final String SERIALIZED_NAME_PERFORMANCE = "performance";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE)
  private List<UrlscannerGetScan200ResponseResultScanPerformanceInner> performance = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private UrlscannerCreateScan409ResponseResultTasksInner task;

  public static final String SERIALIZED_NAME_VERDICTS = "verdicts";
  @SerializedName(SERIALIZED_NAME_VERDICTS)
  private UrlscannerGetScan200ResponseResultScanVerdicts verdicts;

  public UrlscannerGetScan200ResponseResultScan() {
  }

  public UrlscannerGetScan200ResponseResultScan asns(UrlscannerGetScan200ResponseResultScanAsns asns) {
    this.asns = asns;
    return this;
  }

   /**
   * Get asns
   * @return asns
  **/
  @javax.annotation.Nullable
  public UrlscannerGetScan200ResponseResultScanAsns getAsns() {
    return asns;
  }

  public void setAsns(UrlscannerGetScan200ResponseResultScanAsns asns) {
    this.asns = asns;
  }


  public UrlscannerGetScan200ResponseResultScan certificates(List<UrlscannerGetScan200ResponseResultScanCertificatesInner> certificates) {
    this.certificates = certificates;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScan addCertificatesItem(UrlscannerGetScan200ResponseResultScanCertificatesInner certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

   /**
   * Get certificates
   * @return certificates
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScan200ResponseResultScanCertificatesInner> getCertificates() {
    return certificates;
  }

  public void setCertificates(List<UrlscannerGetScan200ResponseResultScanCertificatesInner> certificates) {
    this.certificates = certificates;
  }


  public UrlscannerGetScan200ResponseResultScan domains(UrlscannerGetScan200ResponseResultScanDomains domains) {
    this.domains = domains;
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  public UrlscannerGetScan200ResponseResultScanDomains getDomains() {
    return domains;
  }

  public void setDomains(UrlscannerGetScan200ResponseResultScanDomains domains) {
    this.domains = domains;
  }


  public UrlscannerGetScan200ResponseResultScan geo(UrlscannerGetScan200ResponseResultScanGeo geo) {
    this.geo = geo;
    return this;
  }

   /**
   * Get geo
   * @return geo
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanGeo getGeo() {
    return geo;
  }

  public void setGeo(UrlscannerGetScan200ResponseResultScanGeo geo) {
    this.geo = geo;
  }


  public UrlscannerGetScan200ResponseResultScan ips(UrlscannerGetScan200ResponseResultScanIps ips) {
    this.ips = ips;
    return this;
  }

   /**
   * Get ips
   * @return ips
  **/
  @javax.annotation.Nullable
  public UrlscannerGetScan200ResponseResultScanIps getIps() {
    return ips;
  }

  public void setIps(UrlscannerGetScan200ResponseResultScanIps ips) {
    this.ips = ips;
  }


  public UrlscannerGetScan200ResponseResultScan links(UrlscannerGetScan200ResponseResultScanLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public UrlscannerGetScan200ResponseResultScanLinks getLinks() {
    return links;
  }

  public void setLinks(UrlscannerGetScan200ResponseResultScanLinks links) {
    this.links = links;
  }


  public UrlscannerGetScan200ResponseResultScan meta(UrlscannerGetScan200ResponseResultScanMeta meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanMeta getMeta() {
    return meta;
  }

  public void setMeta(UrlscannerGetScan200ResponseResultScanMeta meta) {
    this.meta = meta;
  }


  public UrlscannerGetScan200ResponseResultScan page(UrlscannerGetScan200ResponseResultScanPage page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanPage getPage() {
    return page;
  }

  public void setPage(UrlscannerGetScan200ResponseResultScanPage page) {
    this.page = page;
  }


  public UrlscannerGetScan200ResponseResultScan performance(List<UrlscannerGetScan200ResponseResultScanPerformanceInner> performance) {
    this.performance = performance;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScan addPerformanceItem(UrlscannerGetScan200ResponseResultScanPerformanceInner performanceItem) {
    if (this.performance == null) {
      this.performance = new ArrayList<>();
    }
    this.performance.add(performanceItem);
    return this;
  }

   /**
   * Get performance
   * @return performance
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScan200ResponseResultScanPerformanceInner> getPerformance() {
    return performance;
  }

  public void setPerformance(List<UrlscannerGetScan200ResponseResultScanPerformanceInner> performance) {
    this.performance = performance;
  }


  public UrlscannerGetScan200ResponseResultScan task(UrlscannerCreateScan409ResponseResultTasksInner task) {
    this.task = task;
    return this;
  }

   /**
   * Get task
   * @return task
  **/
  @javax.annotation.Nonnull
  public UrlscannerCreateScan409ResponseResultTasksInner getTask() {
    return task;
  }

  public void setTask(UrlscannerCreateScan409ResponseResultTasksInner task) {
    this.task = task;
  }


  public UrlscannerGetScan200ResponseResultScan verdicts(UrlscannerGetScan200ResponseResultScanVerdicts verdicts) {
    this.verdicts = verdicts;
    return this;
  }

   /**
   * Get verdicts
   * @return verdicts
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanVerdicts getVerdicts() {
    return verdicts;
  }

  public void setVerdicts(UrlscannerGetScan200ResponseResultScanVerdicts verdicts) {
    this.verdicts = verdicts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScan200ResponseResultScan urlscannerGetScan200ResponseResultScan = (UrlscannerGetScan200ResponseResultScan) o;
    return Objects.equals(this.asns, urlscannerGetScan200ResponseResultScan.asns) &&
        Objects.equals(this.certificates, urlscannerGetScan200ResponseResultScan.certificates) &&
        Objects.equals(this.domains, urlscannerGetScan200ResponseResultScan.domains) &&
        Objects.equals(this.geo, urlscannerGetScan200ResponseResultScan.geo) &&
        Objects.equals(this.ips, urlscannerGetScan200ResponseResultScan.ips) &&
        Objects.equals(this.links, urlscannerGetScan200ResponseResultScan.links) &&
        Objects.equals(this.meta, urlscannerGetScan200ResponseResultScan.meta) &&
        Objects.equals(this.page, urlscannerGetScan200ResponseResultScan.page) &&
        Objects.equals(this.performance, urlscannerGetScan200ResponseResultScan.performance) &&
        Objects.equals(this.task, urlscannerGetScan200ResponseResultScan.task) &&
        Objects.equals(this.verdicts, urlscannerGetScan200ResponseResultScan.verdicts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asns, certificates, domains, geo, ips, links, meta, page, performance, task, verdicts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScan200ResponseResultScan {\n");
    sb.append("    asns: ").append(toIndentedString(asns)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
    sb.append("    ips: ").append(toIndentedString(ips)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    verdicts: ").append(toIndentedString(verdicts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asns");
    openapiFields.add("certificates");
    openapiFields.add("domains");
    openapiFields.add("geo");
    openapiFields.add("ips");
    openapiFields.add("links");
    openapiFields.add("meta");
    openapiFields.add("page");
    openapiFields.add("performance");
    openapiFields.add("task");
    openapiFields.add("verdicts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("certificates");
    openapiRequiredFields.add("geo");
    openapiRequiredFields.add("meta");
    openapiRequiredFields.add("page");
    openapiRequiredFields.add("performance");
    openapiRequiredFields.add("task");
    openapiRequiredFields.add("verdicts");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScan200ResponseResultScan
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScan200ResponseResultScan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScan200ResponseResultScan is not found in the empty JSON string", UrlscannerGetScan200ResponseResultScan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScan200ResponseResultScan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScan200ResponseResultScan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScan200ResponseResultScan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `asns`
      if (jsonObj.get("asns") != null && !jsonObj.get("asns").isJsonNull()) {
        UrlscannerGetScan200ResponseResultScanAsns.validateJsonElement(jsonObj.get("asns"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("certificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
      }

      JsonArray jsonArraycertificates = jsonObj.getAsJsonArray("certificates");
      // validate the required field `certificates` (array)
      for (int i = 0; i < jsonArraycertificates.size(); i++) {
        UrlscannerGetScan200ResponseResultScanCertificatesInner.validateJsonElement(jsonArraycertificates.get(i));
      };
      // validate the optional field `domains`
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull()) {
        UrlscannerGetScan200ResponseResultScanDomains.validateJsonElement(jsonObj.get("domains"));
      }
      // validate the required field `geo`
      UrlscannerGetScan200ResponseResultScanGeo.validateJsonElement(jsonObj.get("geo"));
      // validate the optional field `ips`
      if (jsonObj.get("ips") != null && !jsonObj.get("ips").isJsonNull()) {
        UrlscannerGetScan200ResponseResultScanIps.validateJsonElement(jsonObj.get("ips"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        UrlscannerGetScan200ResponseResultScanLinks.validateJsonElement(jsonObj.get("links"));
      }
      // validate the required field `meta`
      UrlscannerGetScan200ResponseResultScanMeta.validateJsonElement(jsonObj.get("meta"));
      // validate the required field `page`
      UrlscannerGetScan200ResponseResultScanPage.validateJsonElement(jsonObj.get("page"));
      // ensure the json data is an array
      if (!jsonObj.get("performance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `performance` to be an array in the JSON string but got `%s`", jsonObj.get("performance").toString()));
      }

      JsonArray jsonArrayperformance = jsonObj.getAsJsonArray("performance");
      // validate the required field `performance` (array)
      for (int i = 0; i < jsonArrayperformance.size(); i++) {
        UrlscannerGetScan200ResponseResultScanPerformanceInner.validateJsonElement(jsonArrayperformance.get(i));
      };
      // validate the required field `task`
      UrlscannerCreateScan409ResponseResultTasksInner.validateJsonElement(jsonObj.get("task"));
      // validate the required field `verdicts`
      UrlscannerGetScan200ResponseResultScanVerdicts.validateJsonElement(jsonObj.get("verdicts"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScan200ResponseResultScan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScan200ResponseResultScan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScan200ResponseResultScan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScan200ResponseResultScan.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScan200ResponseResultScan>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScan200ResponseResultScan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScan200ResponseResultScan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScan200ResponseResultScan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScan200ResponseResultScan
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScan200ResponseResultScan
  */
  public static UrlscannerGetScan200ResponseResultScan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScan200ResponseResultScan.class);
  }

 /**
  * Convert an instance of UrlscannerGetScan200ResponseResultScan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

