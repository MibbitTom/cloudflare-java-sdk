/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.TeamsDevicesDeviceDexTestSchemasData;
import cloudflare.sdk.models.TeamsDevicesDexTargetPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * TeamsDevicesDeviceDexTestSchemasHttp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TeamsDevicesDeviceDexTestSchemasHttp {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private TeamsDevicesDeviceDexTestSchemasData data;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_POLICIES = "target_policies";
  @SerializedName(SERIALIZED_NAME_TARGET_POLICIES)
  private List<TeamsDevicesDexTargetPolicy> targetPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETED = "targeted";
  @SerializedName(SERIALIZED_NAME_TARGETED)
  private Boolean targeted;

  public TeamsDevicesDeviceDexTestSchemasHttp() {
  }

  public TeamsDevicesDeviceDexTestSchemasHttp data(TeamsDevicesDeviceDexTestSchemasData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  public TeamsDevicesDeviceDexTestSchemasData getData() {
    return data;
  }

  public void setData(TeamsDevicesDeviceDexTestSchemasData data) {
    this.data = data;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Additional details about the test.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Determines whether or not the test is active.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * How often the test will run.
   * @return interval
  **/
  @javax.annotation.Nonnull
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the DEX test. Must be unique.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp targetPolicies(List<TeamsDevicesDexTargetPolicy> targetPolicies) {
    this.targetPolicies = targetPolicies;
    return this;
  }

  public TeamsDevicesDeviceDexTestSchemasHttp addTargetPoliciesItem(TeamsDevicesDexTargetPolicy targetPoliciesItem) {
    if (this.targetPolicies == null) {
      this.targetPolicies = new ArrayList<>();
    }
    this.targetPolicies.add(targetPoliciesItem);
    return this;
  }

   /**
   * Device settings profiles targeted by this test
   * @return targetPolicies
  **/
  @javax.annotation.Nullable
  public List<TeamsDevicesDexTargetPolicy> getTargetPolicies() {
    return targetPolicies;
  }

  public void setTargetPolicies(List<TeamsDevicesDexTargetPolicy> targetPolicies) {
    this.targetPolicies = targetPolicies;
  }


  public TeamsDevicesDeviceDexTestSchemasHttp targeted(Boolean targeted) {
    this.targeted = targeted;
    return this;
  }

   /**
   * Get targeted
   * @return targeted
  **/
  @javax.annotation.Nullable
  public Boolean getTargeted() {
    return targeted;
  }

  public void setTargeted(Boolean targeted) {
    this.targeted = targeted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamsDevicesDeviceDexTestSchemasHttp teamsDevicesDeviceDexTestSchemasHttp = (TeamsDevicesDeviceDexTestSchemasHttp) o;
    return Objects.equals(this.data, teamsDevicesDeviceDexTestSchemasHttp.data) &&
        Objects.equals(this.description, teamsDevicesDeviceDexTestSchemasHttp.description) &&
        Objects.equals(this.enabled, teamsDevicesDeviceDexTestSchemasHttp.enabled) &&
        Objects.equals(this.interval, teamsDevicesDeviceDexTestSchemasHttp.interval) &&
        Objects.equals(this.name, teamsDevicesDeviceDexTestSchemasHttp.name) &&
        Objects.equals(this.targetPolicies, teamsDevicesDeviceDexTestSchemasHttp.targetPolicies) &&
        Objects.equals(this.targeted, teamsDevicesDeviceDexTestSchemasHttp.targeted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, description, enabled, interval, name, targetPolicies, targeted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamsDevicesDeviceDexTestSchemasHttp {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetPolicies: ").append(toIndentedString(targetPolicies)).append("\n");
    sb.append("    targeted: ").append(toIndentedString(targeted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("interval");
    openapiFields.add("name");
    openapiFields.add("target_policies");
    openapiFields.add("targeted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TeamsDevicesDeviceDexTestSchemasHttp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamsDevicesDeviceDexTestSchemasHttp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamsDevicesDeviceDexTestSchemasHttp is not found in the empty JSON string", TeamsDevicesDeviceDexTestSchemasHttp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamsDevicesDeviceDexTestSchemasHttp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamsDevicesDeviceDexTestSchemasHttp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamsDevicesDeviceDexTestSchemasHttp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `data`
      TeamsDevicesDeviceDexTestSchemasData.validateJsonElement(jsonObj.get("data"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("target_policies") != null && !jsonObj.get("target_policies").isJsonNull()) {
        JsonArray jsonArraytargetPolicies = jsonObj.getAsJsonArray("target_policies");
        if (jsonArraytargetPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target_policies` to be an array in the JSON string but got `%s`", jsonObj.get("target_policies").toString()));
          }

          // validate the optional field `target_policies` (array)
          for (int i = 0; i < jsonArraytargetPolicies.size(); i++) {
            TeamsDevicesDexTargetPolicy.validateJsonElement(jsonArraytargetPolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamsDevicesDeviceDexTestSchemasHttp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamsDevicesDeviceDexTestSchemasHttp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamsDevicesDeviceDexTestSchemasHttp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesDeviceDexTestSchemasHttp.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamsDevicesDeviceDexTestSchemasHttp>() {
           @Override
           public void write(JsonWriter out, TeamsDevicesDeviceDexTestSchemasHttp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamsDevicesDeviceDexTestSchemasHttp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamsDevicesDeviceDexTestSchemasHttp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamsDevicesDeviceDexTestSchemasHttp
  * @throws IOException if the JSON string is invalid with respect to TeamsDevicesDeviceDexTestSchemasHttp
  */
  public static TeamsDevicesDeviceDexTestSchemasHttp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamsDevicesDeviceDexTestSchemasHttp.class);
  }

 /**
  * Convert an instance of TeamsDevicesDeviceDexTestSchemasHttp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

