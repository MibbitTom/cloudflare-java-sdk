/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.RadarGetBgpIpSpaceTimeseries200ResponseResultMeta;
import cloudflare.sdk.models.RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s;
import cloudflare.sdk.models.RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * RadarGetBgpIpSpaceTimeseries200ResponseResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetBgpIpSpaceTimeseries200ResponseResult {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private RadarGetBgpIpSpaceTimeseries200ResponseResultMeta meta;

  public static final String SERIALIZED_NAME_SERIE_IPV424S = "serie_ipv4_24s";
  @SerializedName(SERIALIZED_NAME_SERIE_IPV424S)
  private RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s serieIpv424s;

  public static final String SERIALIZED_NAME_SERIE_IPV648S = "serie_ipv6_48s";
  @SerializedName(SERIALIZED_NAME_SERIE_IPV648S)
  private RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s serieIpv648s;

  public RadarGetBgpIpSpaceTimeseries200ResponseResult() {
  }

  public RadarGetBgpIpSpaceTimeseries200ResponseResult meta(RadarGetBgpIpSpaceTimeseries200ResponseResultMeta meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nonnull
  public RadarGetBgpIpSpaceTimeseries200ResponseResultMeta getMeta() {
    return meta;
  }

  public void setMeta(RadarGetBgpIpSpaceTimeseries200ResponseResultMeta meta) {
    this.meta = meta;
  }


  public RadarGetBgpIpSpaceTimeseries200ResponseResult serieIpv424s(RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s serieIpv424s) {
    this.serieIpv424s = serieIpv424s;
    return this;
  }

   /**
   * Get serieIpv424s
   * @return serieIpv424s
  **/
  @javax.annotation.Nonnull
  public RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s getSerieIpv424s() {
    return serieIpv424s;
  }

  public void setSerieIpv424s(RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s serieIpv424s) {
    this.serieIpv424s = serieIpv424s;
  }


  public RadarGetBgpIpSpaceTimeseries200ResponseResult serieIpv648s(RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s serieIpv648s) {
    this.serieIpv648s = serieIpv648s;
    return this;
  }

   /**
   * Get serieIpv648s
   * @return serieIpv648s
  **/
  @javax.annotation.Nonnull
  public RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s getSerieIpv648s() {
    return serieIpv648s;
  }

  public void setSerieIpv648s(RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s serieIpv648s) {
    this.serieIpv648s = serieIpv648s;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetBgpIpSpaceTimeseries200ResponseResult radarGetBgpIpSpaceTimeseries200ResponseResult = (RadarGetBgpIpSpaceTimeseries200ResponseResult) o;
    return Objects.equals(this.meta, radarGetBgpIpSpaceTimeseries200ResponseResult.meta) &&
        Objects.equals(this.serieIpv424s, radarGetBgpIpSpaceTimeseries200ResponseResult.serieIpv424s) &&
        Objects.equals(this.serieIpv648s, radarGetBgpIpSpaceTimeseries200ResponseResult.serieIpv648s);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, serieIpv424s, serieIpv648s);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetBgpIpSpaceTimeseries200ResponseResult {\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    serieIpv424s: ").append(toIndentedString(serieIpv424s)).append("\n");
    sb.append("    serieIpv648s: ").append(toIndentedString(serieIpv648s)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meta");
    openapiFields.add("serie_ipv4_24s");
    openapiFields.add("serie_ipv6_48s");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("meta");
    openapiRequiredFields.add("serie_ipv4_24s");
    openapiRequiredFields.add("serie_ipv6_48s");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetBgpIpSpaceTimeseries200ResponseResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetBgpIpSpaceTimeseries200ResponseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetBgpIpSpaceTimeseries200ResponseResult is not found in the empty JSON string", RadarGetBgpIpSpaceTimeseries200ResponseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetBgpIpSpaceTimeseries200ResponseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetBgpIpSpaceTimeseries200ResponseResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetBgpIpSpaceTimeseries200ResponseResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `meta`
      RadarGetBgpIpSpaceTimeseries200ResponseResultMeta.validateJsonElement(jsonObj.get("meta"));
      // validate the required field `serie_ipv4_24s`
      RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv424s.validateJsonElement(jsonObj.get("serie_ipv4_24s"));
      // validate the required field `serie_ipv6_48s`
      RadarGetBgpIpSpaceTimeseries200ResponseResultSerieIpv648s.validateJsonElement(jsonObj.get("serie_ipv6_48s"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetBgpIpSpaceTimeseries200ResponseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetBgpIpSpaceTimeseries200ResponseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetBgpIpSpaceTimeseries200ResponseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetBgpIpSpaceTimeseries200ResponseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetBgpIpSpaceTimeseries200ResponseResult>() {
           @Override
           public void write(JsonWriter out, RadarGetBgpIpSpaceTimeseries200ResponseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetBgpIpSpaceTimeseries200ResponseResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetBgpIpSpaceTimeseries200ResponseResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetBgpIpSpaceTimeseries200ResponseResult
  * @throws IOException if the JSON string is invalid with respect to RadarGetBgpIpSpaceTimeseries200ResponseResult
  */
  public static RadarGetBgpIpSpaceTimeseries200ResponseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetBgpIpSpaceTimeseries200ResponseResult.class);
  }

 /**
  * Convert an instance of RadarGetBgpIpSpaceTimeseries200ResponseResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

