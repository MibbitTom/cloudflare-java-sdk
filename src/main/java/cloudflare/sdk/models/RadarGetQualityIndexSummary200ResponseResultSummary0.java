/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * RadarGetQualityIndexSummary200ResponseResultSummary0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetQualityIndexSummary200ResponseResultSummary0 {
  public static final String SERIALIZED_NAME_P25 = "p25";
  @SerializedName(SERIALIZED_NAME_P25)
  private String p25;

  public static final String SERIALIZED_NAME_P50 = "p50";
  @SerializedName(SERIALIZED_NAME_P50)
  private String p50;

  public static final String SERIALIZED_NAME_P75 = "p75";
  @SerializedName(SERIALIZED_NAME_P75)
  private String p75;

  public RadarGetQualityIndexSummary200ResponseResultSummary0() {
  }

  public RadarGetQualityIndexSummary200ResponseResultSummary0 p25(String p25) {
    this.p25 = p25;
    return this;
  }

   /**
   * Get p25
   * @return p25
  **/
  @javax.annotation.Nonnull
  public String getP25() {
    return p25;
  }

  public void setP25(String p25) {
    this.p25 = p25;
  }


  public RadarGetQualityIndexSummary200ResponseResultSummary0 p50(String p50) {
    this.p50 = p50;
    return this;
  }

   /**
   * Get p50
   * @return p50
  **/
  @javax.annotation.Nonnull
  public String getP50() {
    return p50;
  }

  public void setP50(String p50) {
    this.p50 = p50;
  }


  public RadarGetQualityIndexSummary200ResponseResultSummary0 p75(String p75) {
    this.p75 = p75;
    return this;
  }

   /**
   * Get p75
   * @return p75
  **/
  @javax.annotation.Nonnull
  public String getP75() {
    return p75;
  }

  public void setP75(String p75) {
    this.p75 = p75;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetQualityIndexSummary200ResponseResultSummary0 radarGetQualityIndexSummary200ResponseResultSummary0 = (RadarGetQualityIndexSummary200ResponseResultSummary0) o;
    return Objects.equals(this.p25, radarGetQualityIndexSummary200ResponseResultSummary0.p25) &&
        Objects.equals(this.p50, radarGetQualityIndexSummary200ResponseResultSummary0.p50) &&
        Objects.equals(this.p75, radarGetQualityIndexSummary200ResponseResultSummary0.p75);
  }

  @Override
  public int hashCode() {
    return Objects.hash(p25, p50, p75);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetQualityIndexSummary200ResponseResultSummary0 {\n");
    sb.append("    p25: ").append(toIndentedString(p25)).append("\n");
    sb.append("    p50: ").append(toIndentedString(p50)).append("\n");
    sb.append("    p75: ").append(toIndentedString(p75)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("p25");
    openapiFields.add("p50");
    openapiFields.add("p75");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("p25");
    openapiRequiredFields.add("p50");
    openapiRequiredFields.add("p75");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetQualityIndexSummary200ResponseResultSummary0
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetQualityIndexSummary200ResponseResultSummary0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetQualityIndexSummary200ResponseResultSummary0 is not found in the empty JSON string", RadarGetQualityIndexSummary200ResponseResultSummary0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetQualityIndexSummary200ResponseResultSummary0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetQualityIndexSummary200ResponseResultSummary0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetQualityIndexSummary200ResponseResultSummary0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("p25").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p25` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p25").toString()));
      }
      if (!jsonObj.get("p50").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p50` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p50").toString()));
      }
      if (!jsonObj.get("p75").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p75` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p75").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetQualityIndexSummary200ResponseResultSummary0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetQualityIndexSummary200ResponseResultSummary0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetQualityIndexSummary200ResponseResultSummary0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetQualityIndexSummary200ResponseResultSummary0.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetQualityIndexSummary200ResponseResultSummary0>() {
           @Override
           public void write(JsonWriter out, RadarGetQualityIndexSummary200ResponseResultSummary0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetQualityIndexSummary200ResponseResultSummary0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetQualityIndexSummary200ResponseResultSummary0 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetQualityIndexSummary200ResponseResultSummary0
  * @throws IOException if the JSON string is invalid with respect to RadarGetQualityIndexSummary200ResponseResultSummary0
  */
  public static RadarGetQualityIndexSummary200ResponseResultSummary0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetQualityIndexSummary200ResponseResultSummary0.class);
  }

 /**
  * Convert an instance of RadarGetQualityIndexSummary200ResponseResultSummary0 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

