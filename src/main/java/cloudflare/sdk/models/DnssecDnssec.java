/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.DnssecStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * DnssecDnssec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DnssecDnssec {
  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private String algorithm;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digest_algorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private String digestAlgorithm;

  public static final String SERIALIZED_NAME_DIGEST_TYPE = "digest_type";
  @SerializedName(SERIALIZED_NAME_DIGEST_TYPE)
  private String digestType;

  public static final String SERIALIZED_NAME_DNSSEC_MULTI_SIGNER = "dnssec_multi_signer";
  @SerializedName(SERIALIZED_NAME_DNSSEC_MULTI_SIGNER)
  private Boolean dnssecMultiSigner;

  public static final String SERIALIZED_NAME_DNSSEC_PRESIGNED = "dnssec_presigned";
  @SerializedName(SERIALIZED_NAME_DNSSEC_PRESIGNED)
  private Boolean dnssecPresigned;

  public static final String SERIALIZED_NAME_DS = "ds";
  @SerializedName(SERIALIZED_NAME_DS)
  private String ds;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private BigDecimal flags;

  public static final String SERIALIZED_NAME_KEY_TAG = "key_tag";
  @SerializedName(SERIALIZED_NAME_KEY_TAG)
  private BigDecimal keyTag;

  public static final String SERIALIZED_NAME_KEY_TYPE = "key_type";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  private String keyType;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DnssecStatus status;

  public DnssecDnssec() {
  }

  public DnssecDnssec(
     String algorithm, 
     String digest, 
     String digestAlgorithm, 
     String digestType, 
     String ds, 
     BigDecimal flags, 
     BigDecimal keyTag, 
     String keyType, 
     OffsetDateTime modifiedOn, 
     String publicKey
  ) {
    this();
    this.algorithm = algorithm;
    this.digest = digest;
    this.digestAlgorithm = digestAlgorithm;
    this.digestType = digestType;
    this.ds = ds;
    this.flags = flags;
    this.keyTag = keyTag;
    this.keyType = keyType;
    this.modifiedOn = modifiedOn;
    this.publicKey = publicKey;
  }

   /**
   * Algorithm key code.
   * @return algorithm
  **/
  @javax.annotation.Nullable
  public String getAlgorithm() {
    return algorithm;
  }



   /**
   * Digest hash.
   * @return digest
  **/
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }



   /**
   * Type of digest algorithm.
   * @return digestAlgorithm
  **/
  @javax.annotation.Nullable
  public String getDigestAlgorithm() {
    return digestAlgorithm;
  }



   /**
   * Coded type for digest algorithm.
   * @return digestType
  **/
  @javax.annotation.Nullable
  public String getDigestType() {
    return digestType;
  }



  public DnssecDnssec dnssecMultiSigner(Boolean dnssecMultiSigner) {
    this.dnssecMultiSigner = dnssecMultiSigner;
    return this;
  }

   /**
   * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY records (except those automatically generated by Cloudflare) to be added to the zone.  See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.
   * @return dnssecMultiSigner
  **/
  @javax.annotation.Nullable
  public Boolean getDnssecMultiSigner() {
    return dnssecMultiSigner;
  }

  public void setDnssecMultiSigner(Boolean dnssecMultiSigner) {
    this.dnssecMultiSigner = dnssecMultiSigner;
  }


  public DnssecDnssec dnssecPresigned(Boolean dnssecPresigned) {
    this.dnssecPresigned = dnssecPresigned;
    return this;
  }

   /**
   * If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without requiring Cloudflare to sign any records on the fly.  Note that this feature has some limitations. See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
   * @return dnssecPresigned
  **/
  @javax.annotation.Nullable
  public Boolean getDnssecPresigned() {
    return dnssecPresigned;
  }

  public void setDnssecPresigned(Boolean dnssecPresigned) {
    this.dnssecPresigned = dnssecPresigned;
  }


   /**
   * Full DS record.
   * @return ds
  **/
  @javax.annotation.Nullable
  public String getDs() {
    return ds;
  }



   /**
   * Flag for DNSSEC record.
   * @return flags
  **/
  @javax.annotation.Nullable
  public BigDecimal getFlags() {
    return flags;
  }



   /**
   * Code for key tag.
   * @return keyTag
  **/
  @javax.annotation.Nullable
  public BigDecimal getKeyTag() {
    return keyTag;
  }



   /**
   * Algorithm key type.
   * @return keyType
  **/
  @javax.annotation.Nullable
  public String getKeyType() {
    return keyType;
  }



   /**
   * When DNSSEC was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



   /**
   * Public key for DS record.
   * @return publicKey
  **/
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }



  public DnssecDnssec status(DnssecStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public DnssecStatus getStatus() {
    return status;
  }

  public void setStatus(DnssecStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnssecDnssec dnssecDnssec = (DnssecDnssec) o;
    return Objects.equals(this.algorithm, dnssecDnssec.algorithm) &&
        Objects.equals(this.digest, dnssecDnssec.digest) &&
        Objects.equals(this.digestAlgorithm, dnssecDnssec.digestAlgorithm) &&
        Objects.equals(this.digestType, dnssecDnssec.digestType) &&
        Objects.equals(this.dnssecMultiSigner, dnssecDnssec.dnssecMultiSigner) &&
        Objects.equals(this.dnssecPresigned, dnssecDnssec.dnssecPresigned) &&
        Objects.equals(this.ds, dnssecDnssec.ds) &&
        Objects.equals(this.flags, dnssecDnssec.flags) &&
        Objects.equals(this.keyTag, dnssecDnssec.keyTag) &&
        Objects.equals(this.keyType, dnssecDnssec.keyType) &&
        Objects.equals(this.modifiedOn, dnssecDnssec.modifiedOn) &&
        Objects.equals(this.publicKey, dnssecDnssec.publicKey) &&
        Objects.equals(this.status, dnssecDnssec.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, digest, digestAlgorithm, digestType, dnssecMultiSigner, dnssecPresigned, ds, flags, keyTag, keyType, modifiedOn, publicKey, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnssecDnssec {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    digestType: ").append(toIndentedString(digestType)).append("\n");
    sb.append("    dnssecMultiSigner: ").append(toIndentedString(dnssecMultiSigner)).append("\n");
    sb.append("    dnssecPresigned: ").append(toIndentedString(dnssecPresigned)).append("\n");
    sb.append("    ds: ").append(toIndentedString(ds)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    keyTag: ").append(toIndentedString(keyTag)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("digest");
    openapiFields.add("digest_algorithm");
    openapiFields.add("digest_type");
    openapiFields.add("dnssec_multi_signer");
    openapiFields.add("dnssec_presigned");
    openapiFields.add("ds");
    openapiFields.add("flags");
    openapiFields.add("key_tag");
    openapiFields.add("key_type");
    openapiFields.add("modified_on");
    openapiFields.add("public_key");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DnssecDnssec
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnssecDnssec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnssecDnssec is not found in the empty JSON string", DnssecDnssec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnssecDnssec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnssecDnssec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      if ((jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) && !jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
      if ((jsonObj.get("digest_algorithm") != null && !jsonObj.get("digest_algorithm").isJsonNull()) && !jsonObj.get("digest_algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest_algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest_algorithm").toString()));
      }
      if ((jsonObj.get("digest_type") != null && !jsonObj.get("digest_type").isJsonNull()) && !jsonObj.get("digest_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest_type").toString()));
      }
      if ((jsonObj.get("ds") != null && !jsonObj.get("ds").isJsonNull()) && !jsonObj.get("ds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ds").toString()));
      }
      if ((jsonObj.get("key_type") != null && !jsonObj.get("key_type").isJsonNull()) && !jsonObj.get("key_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_type").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DnssecStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnssecDnssec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnssecDnssec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnssecDnssec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnssecDnssec.class));

       return (TypeAdapter<T>) new TypeAdapter<DnssecDnssec>() {
           @Override
           public void write(JsonWriter out, DnssecDnssec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnssecDnssec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DnssecDnssec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DnssecDnssec
  * @throws IOException if the JSON string is invalid with respect to DnssecDnssec
  */
  public static DnssecDnssec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnssecDnssec.class);
  }

 /**
  * Convert an instance of DnssecDnssec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

