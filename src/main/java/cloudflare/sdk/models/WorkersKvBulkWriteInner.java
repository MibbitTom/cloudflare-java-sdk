/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * WorkersKvBulkWriteInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersKvBulkWriteInner {
  public static final String SERIALIZED_NAME_BASE64 = "base64";
  @SerializedName(SERIALIZED_NAME_BASE64)
  private Boolean base64 = false;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private BigDecimal expiration;

  public static final String SERIALIZED_NAME_EXPIRATION_TTL = "expiration_ttl";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TTL)
  private BigDecimal expirationTtl;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public WorkersKvBulkWriteInner() {
  }

  public WorkersKvBulkWriteInner base64(Boolean base64) {
    this.base64 = base64;
    return this;
  }

   /**
   * Whether or not the server should base64 decode the value before storing it. Useful for writing values that wouldn&#39;t otherwise be valid JSON strings, such as images.
   * @return base64
  **/
  @javax.annotation.Nullable
  public Boolean getBase64() {
    return base64;
  }

  public void setBase64(Boolean base64) {
    this.base64 = base64;
  }


  public WorkersKvBulkWriteInner expiration(BigDecimal expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * The time, measured in number of seconds since the UNIX epoch, at which the key should expire.
   * @return expiration
  **/
  @javax.annotation.Nullable
  public BigDecimal getExpiration() {
    return expiration;
  }

  public void setExpiration(BigDecimal expiration) {
    this.expiration = expiration;
  }


  public WorkersKvBulkWriteInner expirationTtl(BigDecimal expirationTtl) {
    this.expirationTtl = expirationTtl;
    return this;
  }

   /**
   * The number of seconds for which the key should be visible before it expires. At least 60.
   * @return expirationTtl
  **/
  @javax.annotation.Nullable
  public BigDecimal getExpirationTtl() {
    return expirationTtl;
  }

  public void setExpirationTtl(BigDecimal expirationTtl) {
    this.expirationTtl = expirationTtl;
  }


  public WorkersKvBulkWriteInner key(String key) {
    this.key = key;
    return this;
  }

   /**
   * A key&#39;s name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid.
   * @return key
  **/
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public WorkersKvBulkWriteInner metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Arbitrary JSON that is associated with a key.
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public WorkersKvBulkWriteInner value(String value) {
    this.value = value;
    return this;
  }

   /**
   * A UTF-8 encoded string to be stored, up to 25 MiB in length.
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkersKvBulkWriteInner workersKvBulkWriteInner = (WorkersKvBulkWriteInner) o;
    return Objects.equals(this.base64, workersKvBulkWriteInner.base64) &&
        Objects.equals(this.expiration, workersKvBulkWriteInner.expiration) &&
        Objects.equals(this.expirationTtl, workersKvBulkWriteInner.expirationTtl) &&
        Objects.equals(this.key, workersKvBulkWriteInner.key) &&
        Objects.equals(this.metadata, workersKvBulkWriteInner.metadata) &&
        Objects.equals(this.value, workersKvBulkWriteInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64, expiration, expirationTtl, key, metadata, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkersKvBulkWriteInner {\n");
    sb.append("    base64: ").append(toIndentedString(base64)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expirationTtl: ").append(toIndentedString(expirationTtl)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base64");
    openapiFields.add("expiration");
    openapiFields.add("expiration_ttl");
    openapiFields.add("key");
    openapiFields.add("metadata");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkersKvBulkWriteInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkersKvBulkWriteInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkersKvBulkWriteInner is not found in the empty JSON string", WorkersKvBulkWriteInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkersKvBulkWriteInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkersKvBulkWriteInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkersKvBulkWriteInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkersKvBulkWriteInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkersKvBulkWriteInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkersKvBulkWriteInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkersKvBulkWriteInner>() {
           @Override
           public void write(JsonWriter out, WorkersKvBulkWriteInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkersKvBulkWriteInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkersKvBulkWriteInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkersKvBulkWriteInner
  * @throws IOException if the JSON string is invalid with respect to WorkersKvBulkWriteInner
  */
  public static WorkersKvBulkWriteInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkersKvBulkWriteInner.class);
  }

 /**
  * Convert an instance of WorkersKvBulkWriteInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

