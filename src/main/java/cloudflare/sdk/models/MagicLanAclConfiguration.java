/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.MagicAclSubnet;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * MagicLanAclConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicLanAclConfiguration {
  public static final String SERIALIZED_NAME_LAN_ID = "lan_id";
  @SerializedName(SERIALIZED_NAME_LAN_ID)
  private String lanId;

  public static final String SERIALIZED_NAME_LAN_NAME = "lan_name";
  @SerializedName(SERIALIZED_NAME_LAN_NAME)
  private String lanName;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<Integer> ports = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<MagicAclSubnet> subnets = new ArrayList<>();

  public MagicLanAclConfiguration() {
  }

  public MagicLanAclConfiguration lanId(String lanId) {
    this.lanId = lanId;
    return this;
  }

   /**
   * The identifier for the LAN you want to create an ACL policy with.
   * @return lanId
  **/
  @javax.annotation.Nonnull
  public String getLanId() {
    return lanId;
  }

  public void setLanId(String lanId) {
    this.lanId = lanId;
  }


  public MagicLanAclConfiguration lanName(String lanName) {
    this.lanName = lanName;
    return this;
  }

   /**
   * The name of the LAN based on the provided lan_id.
   * @return lanName
  **/
  @javax.annotation.Nullable
  public String getLanName() {
    return lanName;
  }

  public void setLanName(String lanName) {
    this.lanName = lanName;
  }


  public MagicLanAclConfiguration ports(List<Integer> ports) {
    this.ports = ports;
    return this;
  }

  public MagicLanAclConfiguration addPortsItem(Integer portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

   /**
   * Array of ports on the provided LAN that will be included in the ACL. If no ports are provided, communication on any port on this LAN is allowed.
   * @return ports
  **/
  @javax.annotation.Nullable
  public List<Integer> getPorts() {
    return ports;
  }

  public void setPorts(List<Integer> ports) {
    this.ports = ports;
  }


  public MagicLanAclConfiguration subnets(List<MagicAclSubnet> subnets) {
    this.subnets = subnets;
    return this;
  }

  public MagicLanAclConfiguration addSubnetsItem(MagicAclSubnet subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

   /**
   * Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
   * @return subnets
  **/
  @javax.annotation.Nullable
  public List<MagicAclSubnet> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<MagicAclSubnet> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicLanAclConfiguration magicLanAclConfiguration = (MagicLanAclConfiguration) o;
    return Objects.equals(this.lanId, magicLanAclConfiguration.lanId) &&
        Objects.equals(this.lanName, magicLanAclConfiguration.lanName) &&
        Objects.equals(this.ports, magicLanAclConfiguration.ports) &&
        Objects.equals(this.subnets, magicLanAclConfiguration.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lanId, lanName, ports, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicLanAclConfiguration {\n");
    sb.append("    lanId: ").append(toIndentedString(lanId)).append("\n");
    sb.append("    lanName: ").append(toIndentedString(lanName)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lan_id");
    openapiFields.add("lan_name");
    openapiFields.add("ports");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lan_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicLanAclConfiguration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicLanAclConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicLanAclConfiguration is not found in the empty JSON string", MagicLanAclConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicLanAclConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicLanAclConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagicLanAclConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lan_id").toString()));
      }
      if ((jsonObj.get("lan_name") != null && !jsonObj.get("lan_name").isJsonNull()) && !jsonObj.get("lan_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lan_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lan_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull() && !jsonObj.get("ports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            MagicAclSubnet.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicLanAclConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicLanAclConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicLanAclConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicLanAclConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicLanAclConfiguration>() {
           @Override
           public void write(JsonWriter out, MagicLanAclConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicLanAclConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicLanAclConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicLanAclConfiguration
  * @throws IOException if the JSON string is invalid with respect to MagicLanAclConfiguration
  */
  public static MagicLanAclConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicLanAclConfiguration.class);
  }

 /**
  * Convert an instance of MagicLanAclConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

