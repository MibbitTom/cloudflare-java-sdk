/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.TeamsDevicesApplicationInputRequest;
import cloudflare.sdk.models.TeamsDevicesCarbonblackInputRequest;
import cloudflare.sdk.models.TeamsDevicesClientCertificateInputRequest;
import cloudflare.sdk.models.TeamsDevicesCrowdstrikeInputRequest;
import cloudflare.sdk.models.TeamsDevicesDiskEncryptionInputRequest;
import cloudflare.sdk.models.TeamsDevicesDomainJoinedInputRequest;
import cloudflare.sdk.models.TeamsDevicesFileInputRequest;
import cloudflare.sdk.models.TeamsDevicesFirewallInputRequest;
import cloudflare.sdk.models.TeamsDevicesIntuneInputRequest;
import cloudflare.sdk.models.TeamsDevicesKolideInputRequest;
import cloudflare.sdk.models.TeamsDevicesOsVersionInputRequest;
import cloudflare.sdk.models.TeamsDevicesSentineloneInputRequest;
import cloudflare.sdk.models.TeamsDevicesSentineloneS2sInputRequest;
import cloudflare.sdk.models.TeamsDevicesTaniumInputRequest;
import cloudflare.sdk.models.TeamsDevicesUniqueClientIdInputRequest;
import cloudflare.sdk.models.TeamsDevicesWorkspaceOneInputRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import cloudflare.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TeamsDevicesInput extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TeamsDevicesInput.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TeamsDevicesInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TeamsDevicesInput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TeamsDevicesFileInputRequest> adapterTeamsDevicesFileInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesFileInputRequest.class));
            final TypeAdapter<TeamsDevicesUniqueClientIdInputRequest> adapterTeamsDevicesUniqueClientIdInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesUniqueClientIdInputRequest.class));
            final TypeAdapter<TeamsDevicesDomainJoinedInputRequest> adapterTeamsDevicesDomainJoinedInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesDomainJoinedInputRequest.class));
            final TypeAdapter<TeamsDevicesOsVersionInputRequest> adapterTeamsDevicesOsVersionInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesOsVersionInputRequest.class));
            final TypeAdapter<TeamsDevicesFirewallInputRequest> adapterTeamsDevicesFirewallInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesFirewallInputRequest.class));
            final TypeAdapter<TeamsDevicesSentineloneInputRequest> adapterTeamsDevicesSentineloneInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesSentineloneInputRequest.class));
            final TypeAdapter<TeamsDevicesCarbonblackInputRequest> adapterTeamsDevicesCarbonblackInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesCarbonblackInputRequest.class));
            final TypeAdapter<TeamsDevicesDiskEncryptionInputRequest> adapterTeamsDevicesDiskEncryptionInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesDiskEncryptionInputRequest.class));
            final TypeAdapter<TeamsDevicesApplicationInputRequest> adapterTeamsDevicesApplicationInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesApplicationInputRequest.class));
            final TypeAdapter<TeamsDevicesClientCertificateInputRequest> adapterTeamsDevicesClientCertificateInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesClientCertificateInputRequest.class));
            final TypeAdapter<TeamsDevicesWorkspaceOneInputRequest> adapterTeamsDevicesWorkspaceOneInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesWorkspaceOneInputRequest.class));
            final TypeAdapter<TeamsDevicesCrowdstrikeInputRequest> adapterTeamsDevicesCrowdstrikeInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesCrowdstrikeInputRequest.class));
            final TypeAdapter<TeamsDevicesIntuneInputRequest> adapterTeamsDevicesIntuneInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesIntuneInputRequest.class));
            final TypeAdapter<TeamsDevicesKolideInputRequest> adapterTeamsDevicesKolideInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesKolideInputRequest.class));
            final TypeAdapter<TeamsDevicesTaniumInputRequest> adapterTeamsDevicesTaniumInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesTaniumInputRequest.class));
            final TypeAdapter<TeamsDevicesSentineloneS2sInputRequest> adapterTeamsDevicesSentineloneS2sInputRequest = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesSentineloneS2sInputRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<TeamsDevicesInput>() {
                @Override
                public void write(JsonWriter out, TeamsDevicesInput value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TeamsDevicesFileInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesFileInputRequest) {
                        JsonElement element = adapterTeamsDevicesFileInputRequest.toJsonTree((TeamsDevicesFileInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesUniqueClientIdInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesUniqueClientIdInputRequest) {
                        JsonElement element = adapterTeamsDevicesUniqueClientIdInputRequest.toJsonTree((TeamsDevicesUniqueClientIdInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesDomainJoinedInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesDomainJoinedInputRequest) {
                        JsonElement element = adapterTeamsDevicesDomainJoinedInputRequest.toJsonTree((TeamsDevicesDomainJoinedInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesOsVersionInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesOsVersionInputRequest) {
                        JsonElement element = adapterTeamsDevicesOsVersionInputRequest.toJsonTree((TeamsDevicesOsVersionInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesFirewallInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesFirewallInputRequest) {
                        JsonElement element = adapterTeamsDevicesFirewallInputRequest.toJsonTree((TeamsDevicesFirewallInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesSentineloneInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesSentineloneInputRequest) {
                        JsonElement element = adapterTeamsDevicesSentineloneInputRequest.toJsonTree((TeamsDevicesSentineloneInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesCarbonblackInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesCarbonblackInputRequest) {
                        JsonElement element = adapterTeamsDevicesCarbonblackInputRequest.toJsonTree((TeamsDevicesCarbonblackInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesDiskEncryptionInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesDiskEncryptionInputRequest) {
                        JsonElement element = adapterTeamsDevicesDiskEncryptionInputRequest.toJsonTree((TeamsDevicesDiskEncryptionInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesApplicationInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesApplicationInputRequest) {
                        JsonElement element = adapterTeamsDevicesApplicationInputRequest.toJsonTree((TeamsDevicesApplicationInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesClientCertificateInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesClientCertificateInputRequest) {
                        JsonElement element = adapterTeamsDevicesClientCertificateInputRequest.toJsonTree((TeamsDevicesClientCertificateInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesWorkspaceOneInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesWorkspaceOneInputRequest) {
                        JsonElement element = adapterTeamsDevicesWorkspaceOneInputRequest.toJsonTree((TeamsDevicesWorkspaceOneInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesCrowdstrikeInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesCrowdstrikeInputRequest) {
                        JsonElement element = adapterTeamsDevicesCrowdstrikeInputRequest.toJsonTree((TeamsDevicesCrowdstrikeInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesIntuneInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesIntuneInputRequest) {
                        JsonElement element = adapterTeamsDevicesIntuneInputRequest.toJsonTree((TeamsDevicesIntuneInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesKolideInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesKolideInputRequest) {
                        JsonElement element = adapterTeamsDevicesKolideInputRequest.toJsonTree((TeamsDevicesKolideInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesTaniumInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesTaniumInputRequest) {
                        JsonElement element = adapterTeamsDevicesTaniumInputRequest.toJsonTree((TeamsDevicesTaniumInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TeamsDevicesSentineloneS2sInputRequest`
                    if (value.getActualInstance() instanceof TeamsDevicesSentineloneS2sInputRequest) {
                        JsonElement element = adapterTeamsDevicesSentineloneS2sInputRequest.toJsonTree((TeamsDevicesSentineloneS2sInputRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest");
                }

                @Override
                public TeamsDevicesInput read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TeamsDevicesFileInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesFileInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesFileInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesFileInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesFileInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesFileInputRequest'", e);
                    }
                    // deserialize TeamsDevicesUniqueClientIdInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesUniqueClientIdInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesUniqueClientIdInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesUniqueClientIdInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesUniqueClientIdInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesUniqueClientIdInputRequest'", e);
                    }
                    // deserialize TeamsDevicesDomainJoinedInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesDomainJoinedInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesDomainJoinedInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesDomainJoinedInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesDomainJoinedInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesDomainJoinedInputRequest'", e);
                    }
                    // deserialize TeamsDevicesOsVersionInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesOsVersionInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesOsVersionInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesOsVersionInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesOsVersionInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesOsVersionInputRequest'", e);
                    }
                    // deserialize TeamsDevicesFirewallInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesFirewallInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesFirewallInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesFirewallInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesFirewallInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesFirewallInputRequest'", e);
                    }
                    // deserialize TeamsDevicesSentineloneInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesSentineloneInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesSentineloneInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesSentineloneInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesSentineloneInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesSentineloneInputRequest'", e);
                    }
                    // deserialize TeamsDevicesCarbonblackInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesCarbonblackInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesCarbonblackInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesCarbonblackInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesCarbonblackInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesCarbonblackInputRequest'", e);
                    }
                    // deserialize TeamsDevicesDiskEncryptionInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesDiskEncryptionInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesDiskEncryptionInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesDiskEncryptionInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesDiskEncryptionInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesDiskEncryptionInputRequest'", e);
                    }
                    // deserialize TeamsDevicesApplicationInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesApplicationInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesApplicationInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesApplicationInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesApplicationInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesApplicationInputRequest'", e);
                    }
                    // deserialize TeamsDevicesClientCertificateInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesClientCertificateInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesClientCertificateInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesClientCertificateInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesClientCertificateInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesClientCertificateInputRequest'", e);
                    }
                    // deserialize TeamsDevicesWorkspaceOneInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesWorkspaceOneInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesWorkspaceOneInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesWorkspaceOneInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesWorkspaceOneInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesWorkspaceOneInputRequest'", e);
                    }
                    // deserialize TeamsDevicesCrowdstrikeInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesCrowdstrikeInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesCrowdstrikeInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesCrowdstrikeInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesCrowdstrikeInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesCrowdstrikeInputRequest'", e);
                    }
                    // deserialize TeamsDevicesIntuneInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesIntuneInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesIntuneInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesIntuneInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesIntuneInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesIntuneInputRequest'", e);
                    }
                    // deserialize TeamsDevicesKolideInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesKolideInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesKolideInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesKolideInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesKolideInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesKolideInputRequest'", e);
                    }
                    // deserialize TeamsDevicesTaniumInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesTaniumInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesTaniumInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesTaniumInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesTaniumInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesTaniumInputRequest'", e);
                    }
                    // deserialize TeamsDevicesSentineloneS2sInputRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TeamsDevicesSentineloneS2sInputRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterTeamsDevicesSentineloneS2sInputRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TeamsDevicesSentineloneS2sInputRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TeamsDevicesSentineloneS2sInputRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TeamsDevicesSentineloneS2sInputRequest'", e);
                    }

                    if (match == 1) {
                        TeamsDevicesInput ret = new TeamsDevicesInput();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TeamsDevicesInput: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TeamsDevicesInput() {
        super("oneOf", Boolean.FALSE);
    }

    public TeamsDevicesInput(TeamsDevicesApplicationInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesCarbonblackInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesClientCertificateInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesCrowdstrikeInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesDiskEncryptionInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesDomainJoinedInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesFileInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesFirewallInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesIntuneInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesKolideInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesOsVersionInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesSentineloneInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesSentineloneS2sInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesTaniumInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesUniqueClientIdInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TeamsDevicesInput(TeamsDevicesWorkspaceOneInputRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TeamsDevicesFileInputRequest", TeamsDevicesFileInputRequest.class);
        schemas.put("TeamsDevicesUniqueClientIdInputRequest", TeamsDevicesUniqueClientIdInputRequest.class);
        schemas.put("TeamsDevicesDomainJoinedInputRequest", TeamsDevicesDomainJoinedInputRequest.class);
        schemas.put("TeamsDevicesOsVersionInputRequest", TeamsDevicesOsVersionInputRequest.class);
        schemas.put("TeamsDevicesFirewallInputRequest", TeamsDevicesFirewallInputRequest.class);
        schemas.put("TeamsDevicesSentineloneInputRequest", TeamsDevicesSentineloneInputRequest.class);
        schemas.put("TeamsDevicesCarbonblackInputRequest", TeamsDevicesCarbonblackInputRequest.class);
        schemas.put("TeamsDevicesDiskEncryptionInputRequest", TeamsDevicesDiskEncryptionInputRequest.class);
        schemas.put("TeamsDevicesApplicationInputRequest", TeamsDevicesApplicationInputRequest.class);
        schemas.put("TeamsDevicesClientCertificateInputRequest", TeamsDevicesClientCertificateInputRequest.class);
        schemas.put("TeamsDevicesWorkspaceOneInputRequest", TeamsDevicesWorkspaceOneInputRequest.class);
        schemas.put("TeamsDevicesCrowdstrikeInputRequest", TeamsDevicesCrowdstrikeInputRequest.class);
        schemas.put("TeamsDevicesIntuneInputRequest", TeamsDevicesIntuneInputRequest.class);
        schemas.put("TeamsDevicesKolideInputRequest", TeamsDevicesKolideInputRequest.class);
        schemas.put("TeamsDevicesTaniumInputRequest", TeamsDevicesTaniumInputRequest.class);
        schemas.put("TeamsDevicesSentineloneS2sInputRequest", TeamsDevicesSentineloneS2sInputRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TeamsDevicesInput.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TeamsDevicesFileInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesUniqueClientIdInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesDomainJoinedInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesOsVersionInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesFirewallInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesSentineloneInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesCarbonblackInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesDiskEncryptionInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesApplicationInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesClientCertificateInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesWorkspaceOneInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesCrowdstrikeInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesIntuneInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesKolideInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesTaniumInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TeamsDevicesSentineloneS2sInputRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest
     *
     * @return The actual instance (TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TeamsDevicesFileInputRequest`. If the actual instance is not `TeamsDevicesFileInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesFileInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesFileInputRequest`
     */
    public TeamsDevicesFileInputRequest getTeamsDevicesFileInputRequest() throws ClassCastException {
        return (TeamsDevicesFileInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesUniqueClientIdInputRequest`. If the actual instance is not `TeamsDevicesUniqueClientIdInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesUniqueClientIdInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesUniqueClientIdInputRequest`
     */
    public TeamsDevicesUniqueClientIdInputRequest getTeamsDevicesUniqueClientIdInputRequest() throws ClassCastException {
        return (TeamsDevicesUniqueClientIdInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesDomainJoinedInputRequest`. If the actual instance is not `TeamsDevicesDomainJoinedInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesDomainJoinedInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesDomainJoinedInputRequest`
     */
    public TeamsDevicesDomainJoinedInputRequest getTeamsDevicesDomainJoinedInputRequest() throws ClassCastException {
        return (TeamsDevicesDomainJoinedInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesOsVersionInputRequest`. If the actual instance is not `TeamsDevicesOsVersionInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesOsVersionInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesOsVersionInputRequest`
     */
    public TeamsDevicesOsVersionInputRequest getTeamsDevicesOsVersionInputRequest() throws ClassCastException {
        return (TeamsDevicesOsVersionInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesFirewallInputRequest`. If the actual instance is not `TeamsDevicesFirewallInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesFirewallInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesFirewallInputRequest`
     */
    public TeamsDevicesFirewallInputRequest getTeamsDevicesFirewallInputRequest() throws ClassCastException {
        return (TeamsDevicesFirewallInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesSentineloneInputRequest`. If the actual instance is not `TeamsDevicesSentineloneInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesSentineloneInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesSentineloneInputRequest`
     */
    public TeamsDevicesSentineloneInputRequest getTeamsDevicesSentineloneInputRequest() throws ClassCastException {
        return (TeamsDevicesSentineloneInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesCarbonblackInputRequest`. If the actual instance is not `TeamsDevicesCarbonblackInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesCarbonblackInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesCarbonblackInputRequest`
     */
    public TeamsDevicesCarbonblackInputRequest getTeamsDevicesCarbonblackInputRequest() throws ClassCastException {
        return (TeamsDevicesCarbonblackInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesDiskEncryptionInputRequest`. If the actual instance is not `TeamsDevicesDiskEncryptionInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesDiskEncryptionInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesDiskEncryptionInputRequest`
     */
    public TeamsDevicesDiskEncryptionInputRequest getTeamsDevicesDiskEncryptionInputRequest() throws ClassCastException {
        return (TeamsDevicesDiskEncryptionInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesApplicationInputRequest`. If the actual instance is not `TeamsDevicesApplicationInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesApplicationInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesApplicationInputRequest`
     */
    public TeamsDevicesApplicationInputRequest getTeamsDevicesApplicationInputRequest() throws ClassCastException {
        return (TeamsDevicesApplicationInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesClientCertificateInputRequest`. If the actual instance is not `TeamsDevicesClientCertificateInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesClientCertificateInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesClientCertificateInputRequest`
     */
    public TeamsDevicesClientCertificateInputRequest getTeamsDevicesClientCertificateInputRequest() throws ClassCastException {
        return (TeamsDevicesClientCertificateInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesWorkspaceOneInputRequest`. If the actual instance is not `TeamsDevicesWorkspaceOneInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesWorkspaceOneInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesWorkspaceOneInputRequest`
     */
    public TeamsDevicesWorkspaceOneInputRequest getTeamsDevicesWorkspaceOneInputRequest() throws ClassCastException {
        return (TeamsDevicesWorkspaceOneInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesCrowdstrikeInputRequest`. If the actual instance is not `TeamsDevicesCrowdstrikeInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesCrowdstrikeInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesCrowdstrikeInputRequest`
     */
    public TeamsDevicesCrowdstrikeInputRequest getTeamsDevicesCrowdstrikeInputRequest() throws ClassCastException {
        return (TeamsDevicesCrowdstrikeInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesIntuneInputRequest`. If the actual instance is not `TeamsDevicesIntuneInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesIntuneInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesIntuneInputRequest`
     */
    public TeamsDevicesIntuneInputRequest getTeamsDevicesIntuneInputRequest() throws ClassCastException {
        return (TeamsDevicesIntuneInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesKolideInputRequest`. If the actual instance is not `TeamsDevicesKolideInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesKolideInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesKolideInputRequest`
     */
    public TeamsDevicesKolideInputRequest getTeamsDevicesKolideInputRequest() throws ClassCastException {
        return (TeamsDevicesKolideInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesTaniumInputRequest`. If the actual instance is not `TeamsDevicesTaniumInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesTaniumInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesTaniumInputRequest`
     */
    public TeamsDevicesTaniumInputRequest getTeamsDevicesTaniumInputRequest() throws ClassCastException {
        return (TeamsDevicesTaniumInputRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TeamsDevicesSentineloneS2sInputRequest`. If the actual instance is not `TeamsDevicesSentineloneS2sInputRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TeamsDevicesSentineloneS2sInputRequest`
     * @throws ClassCastException if the instance is not `TeamsDevicesSentineloneS2sInputRequest`
     */
    public TeamsDevicesSentineloneS2sInputRequest getTeamsDevicesSentineloneS2sInputRequest() throws ClassCastException {
        return (TeamsDevicesSentineloneS2sInputRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TeamsDevicesInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TeamsDevicesFileInputRequest
        try {
            TeamsDevicesFileInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesFileInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesUniqueClientIdInputRequest
        try {
            TeamsDevicesUniqueClientIdInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesUniqueClientIdInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesDomainJoinedInputRequest
        try {
            TeamsDevicesDomainJoinedInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesDomainJoinedInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesOsVersionInputRequest
        try {
            TeamsDevicesOsVersionInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesOsVersionInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesFirewallInputRequest
        try {
            TeamsDevicesFirewallInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesFirewallInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesSentineloneInputRequest
        try {
            TeamsDevicesSentineloneInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesSentineloneInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesCarbonblackInputRequest
        try {
            TeamsDevicesCarbonblackInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesCarbonblackInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesDiskEncryptionInputRequest
        try {
            TeamsDevicesDiskEncryptionInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesDiskEncryptionInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesApplicationInputRequest
        try {
            TeamsDevicesApplicationInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesApplicationInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesClientCertificateInputRequest
        try {
            TeamsDevicesClientCertificateInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesClientCertificateInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesWorkspaceOneInputRequest
        try {
            TeamsDevicesWorkspaceOneInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesWorkspaceOneInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesCrowdstrikeInputRequest
        try {
            TeamsDevicesCrowdstrikeInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesCrowdstrikeInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesIntuneInputRequest
        try {
            TeamsDevicesIntuneInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesIntuneInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesKolideInputRequest
        try {
            TeamsDevicesKolideInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesKolideInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesTaniumInputRequest
        try {
            TeamsDevicesTaniumInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesTaniumInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TeamsDevicesSentineloneS2sInputRequest
        try {
            TeamsDevicesSentineloneS2sInputRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TeamsDevicesSentineloneS2sInputRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for TeamsDevicesInput with oneOf schemas: TeamsDevicesApplicationInputRequest, TeamsDevicesCarbonblackInputRequest, TeamsDevicesClientCertificateInputRequest, TeamsDevicesCrowdstrikeInputRequest, TeamsDevicesDiskEncryptionInputRequest, TeamsDevicesDomainJoinedInputRequest, TeamsDevicesFileInputRequest, TeamsDevicesFirewallInputRequest, TeamsDevicesIntuneInputRequest, TeamsDevicesKolideInputRequest, TeamsDevicesOsVersionInputRequest, TeamsDevicesSentineloneInputRequest, TeamsDevicesSentineloneS2sInputRequest, TeamsDevicesTaniumInputRequest, TeamsDevicesUniqueClientIdInputRequest, TeamsDevicesWorkspaceOneInputRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TeamsDevicesInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TeamsDevicesInput
     * @throws IOException if the JSON string is invalid with respect to TeamsDevicesInput
     */
    public static TeamsDevicesInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TeamsDevicesInput.class);
    }

    /**
     * Convert an instance of TeamsDevicesInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

