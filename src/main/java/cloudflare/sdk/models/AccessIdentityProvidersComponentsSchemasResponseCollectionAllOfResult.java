/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.AccessSchemasAzureAD;
import cloudflare.sdk.models.AccessSchemasCentrify;
import cloudflare.sdk.models.AccessSchemasFacebook;
import cloudflare.sdk.models.AccessSchemasGithub;
import cloudflare.sdk.models.AccessSchemasGoogle;
import cloudflare.sdk.models.AccessSchemasGoogleApps;
import cloudflare.sdk.models.AccessSchemasIdentityProviderScimConfig;
import cloudflare.sdk.models.AccessSchemasLinkedin;
import cloudflare.sdk.models.AccessSchemasOidc;
import cloudflare.sdk.models.AccessSchemasOkta;
import cloudflare.sdk.models.AccessSchemasOnelogin;
import cloudflare.sdk.models.AccessSchemasOnetimepin;
import cloudflare.sdk.models.AccessSchemasPingone;
import cloudflare.sdk.models.AccessSchemasSaml;
import cloudflare.sdk.models.AccessSchemasYandex;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import cloudflare.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccessSchemasAzureAD> adapterAccessSchemasAzureAD = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasAzureAD.class));
            final TypeAdapter<AccessSchemasCentrify> adapterAccessSchemasCentrify = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasCentrify.class));
            final TypeAdapter<AccessSchemasFacebook> adapterAccessSchemasFacebook = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasFacebook.class));
            final TypeAdapter<AccessSchemasGithub> adapterAccessSchemasGithub = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasGithub.class));
            final TypeAdapter<AccessSchemasGoogle> adapterAccessSchemasGoogle = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasGoogle.class));
            final TypeAdapter<AccessSchemasGoogleApps> adapterAccessSchemasGoogleApps = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasGoogleApps.class));
            final TypeAdapter<AccessSchemasLinkedin> adapterAccessSchemasLinkedin = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasLinkedin.class));
            final TypeAdapter<AccessSchemasOidc> adapterAccessSchemasOidc = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasOidc.class));
            final TypeAdapter<AccessSchemasOkta> adapterAccessSchemasOkta = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasOkta.class));
            final TypeAdapter<AccessSchemasOnelogin> adapterAccessSchemasOnelogin = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasOnelogin.class));
            final TypeAdapter<AccessSchemasPingone> adapterAccessSchemasPingone = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasPingone.class));
            final TypeAdapter<AccessSchemasSaml> adapterAccessSchemasSaml = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasSaml.class));
            final TypeAdapter<AccessSchemasYandex> adapterAccessSchemasYandex = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasYandex.class));
            final TypeAdapter<AccessSchemasOnetimepin> adapterAccessSchemasOnetimepin = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasOnetimepin.class));

            return (TypeAdapter<T>) new TypeAdapter<AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult>() {
                @Override
                public void write(JsonWriter out, AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccessSchemasAzureAD`
                    if (value.getActualInstance() instanceof AccessSchemasAzureAD) {
                        JsonElement element = adapterAccessSchemasAzureAD.toJsonTree((AccessSchemasAzureAD)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasCentrify`
                    if (value.getActualInstance() instanceof AccessSchemasCentrify) {
                        JsonElement element = adapterAccessSchemasCentrify.toJsonTree((AccessSchemasCentrify)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasFacebook`
                    if (value.getActualInstance() instanceof AccessSchemasFacebook) {
                        JsonElement element = adapterAccessSchemasFacebook.toJsonTree((AccessSchemasFacebook)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasGithub`
                    if (value.getActualInstance() instanceof AccessSchemasGithub) {
                        JsonElement element = adapterAccessSchemasGithub.toJsonTree((AccessSchemasGithub)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasGoogle`
                    if (value.getActualInstance() instanceof AccessSchemasGoogle) {
                        JsonElement element = adapterAccessSchemasGoogle.toJsonTree((AccessSchemasGoogle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasGoogleApps`
                    if (value.getActualInstance() instanceof AccessSchemasGoogleApps) {
                        JsonElement element = adapterAccessSchemasGoogleApps.toJsonTree((AccessSchemasGoogleApps)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasLinkedin`
                    if (value.getActualInstance() instanceof AccessSchemasLinkedin) {
                        JsonElement element = adapterAccessSchemasLinkedin.toJsonTree((AccessSchemasLinkedin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasOidc`
                    if (value.getActualInstance() instanceof AccessSchemasOidc) {
                        JsonElement element = adapterAccessSchemasOidc.toJsonTree((AccessSchemasOidc)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasOkta`
                    if (value.getActualInstance() instanceof AccessSchemasOkta) {
                        JsonElement element = adapterAccessSchemasOkta.toJsonTree((AccessSchemasOkta)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasOnelogin`
                    if (value.getActualInstance() instanceof AccessSchemasOnelogin) {
                        JsonElement element = adapterAccessSchemasOnelogin.toJsonTree((AccessSchemasOnelogin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasPingone`
                    if (value.getActualInstance() instanceof AccessSchemasPingone) {
                        JsonElement element = adapterAccessSchemasPingone.toJsonTree((AccessSchemasPingone)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasSaml`
                    if (value.getActualInstance() instanceof AccessSchemasSaml) {
                        JsonElement element = adapterAccessSchemasSaml.toJsonTree((AccessSchemasSaml)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasYandex`
                    if (value.getActualInstance() instanceof AccessSchemasYandex) {
                        JsonElement element = adapterAccessSchemasYandex.toJsonTree((AccessSchemasYandex)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSchemasOnetimepin`
                    if (value.getActualInstance() instanceof AccessSchemasOnetimepin) {
                        JsonElement element = adapterAccessSchemasOnetimepin.toJsonTree((AccessSchemasOnetimepin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex");
                }

                @Override
                public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccessSchemasAzureAD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasAzureAD.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasAzureAD;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasAzureAD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasAzureAD'", e);
                    }
                    // deserialize AccessSchemasCentrify
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasCentrify.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasCentrify;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasCentrify failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasCentrify'", e);
                    }
                    // deserialize AccessSchemasFacebook
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasFacebook.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasFacebook;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasFacebook failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasFacebook'", e);
                    }
                    // deserialize AccessSchemasGithub
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasGithub.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasGithub;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasGithub failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasGithub'", e);
                    }
                    // deserialize AccessSchemasGoogle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasGoogle.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasGoogle;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasGoogle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasGoogle'", e);
                    }
                    // deserialize AccessSchemasGoogleApps
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasGoogleApps.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasGoogleApps;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasGoogleApps failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasGoogleApps'", e);
                    }
                    // deserialize AccessSchemasLinkedin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasLinkedin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasLinkedin;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasLinkedin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasLinkedin'", e);
                    }
                    // deserialize AccessSchemasOidc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasOidc.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasOidc;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasOidc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasOidc'", e);
                    }
                    // deserialize AccessSchemasOkta
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasOkta.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasOkta;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasOkta failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasOkta'", e);
                    }
                    // deserialize AccessSchemasOnelogin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasOnelogin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasOnelogin;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasOnelogin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasOnelogin'", e);
                    }
                    // deserialize AccessSchemasPingone
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasPingone.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasPingone;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasPingone failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasPingone'", e);
                    }
                    // deserialize AccessSchemasSaml
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasSaml.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasSaml;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasSaml failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasSaml'", e);
                    }
                    // deserialize AccessSchemasYandex
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasYandex.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasYandex;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasYandex failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasYandex'", e);
                    }
                    // deserialize AccessSchemasOnetimepin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSchemasOnetimepin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSchemasOnetimepin;
                        AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult ret = new AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSchemasOnetimepin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSchemasOnetimepin'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult() {
        super("anyOf", Boolean.FALSE);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasAzureAD o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasCentrify o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasFacebook o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasGithub o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasGoogle o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasGoogleApps o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasLinkedin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasOidc o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasOkta o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasOnelogin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasOnetimepin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasPingone o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasSaml o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult(AccessSchemasYandex o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccessSchemasAzureAD", AccessSchemasAzureAD.class);
        schemas.put("AccessSchemasCentrify", AccessSchemasCentrify.class);
        schemas.put("AccessSchemasFacebook", AccessSchemasFacebook.class);
        schemas.put("AccessSchemasGithub", AccessSchemasGithub.class);
        schemas.put("AccessSchemasGoogle", AccessSchemasGoogle.class);
        schemas.put("AccessSchemasGoogleApps", AccessSchemasGoogleApps.class);
        schemas.put("AccessSchemasLinkedin", AccessSchemasLinkedin.class);
        schemas.put("AccessSchemasOidc", AccessSchemasOidc.class);
        schemas.put("AccessSchemasOkta", AccessSchemasOkta.class);
        schemas.put("AccessSchemasOnelogin", AccessSchemasOnelogin.class);
        schemas.put("AccessSchemasPingone", AccessSchemasPingone.class);
        schemas.put("AccessSchemasSaml", AccessSchemasSaml.class);
        schemas.put("AccessSchemasYandex", AccessSchemasYandex.class);
        schemas.put("AccessSchemasOnetimepin", AccessSchemasOnetimepin.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccessSchemasAzureAD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasCentrify) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasFacebook) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasGithub) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasGoogle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasGoogleApps) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasLinkedin) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasOidc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasOkta) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasOnelogin) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasPingone) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasSaml) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasYandex) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSchemasOnetimepin) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex
     *
     * @return The actual instance (AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccessSchemasAzureAD`. If the actual instance is not `AccessSchemasAzureAD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasAzureAD`
     * @throws ClassCastException if the instance is not `AccessSchemasAzureAD`
     */
    public AccessSchemasAzureAD getAccessSchemasAzureAD() throws ClassCastException {
        return (AccessSchemasAzureAD)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasCentrify`. If the actual instance is not `AccessSchemasCentrify`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasCentrify`
     * @throws ClassCastException if the instance is not `AccessSchemasCentrify`
     */
    public AccessSchemasCentrify getAccessSchemasCentrify() throws ClassCastException {
        return (AccessSchemasCentrify)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasFacebook`. If the actual instance is not `AccessSchemasFacebook`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasFacebook`
     * @throws ClassCastException if the instance is not `AccessSchemasFacebook`
     */
    public AccessSchemasFacebook getAccessSchemasFacebook() throws ClassCastException {
        return (AccessSchemasFacebook)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasGithub`. If the actual instance is not `AccessSchemasGithub`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasGithub`
     * @throws ClassCastException if the instance is not `AccessSchemasGithub`
     */
    public AccessSchemasGithub getAccessSchemasGithub() throws ClassCastException {
        return (AccessSchemasGithub)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasGoogle`. If the actual instance is not `AccessSchemasGoogle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasGoogle`
     * @throws ClassCastException if the instance is not `AccessSchemasGoogle`
     */
    public AccessSchemasGoogle getAccessSchemasGoogle() throws ClassCastException {
        return (AccessSchemasGoogle)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasGoogleApps`. If the actual instance is not `AccessSchemasGoogleApps`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasGoogleApps`
     * @throws ClassCastException if the instance is not `AccessSchemasGoogleApps`
     */
    public AccessSchemasGoogleApps getAccessSchemasGoogleApps() throws ClassCastException {
        return (AccessSchemasGoogleApps)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasLinkedin`. If the actual instance is not `AccessSchemasLinkedin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasLinkedin`
     * @throws ClassCastException if the instance is not `AccessSchemasLinkedin`
     */
    public AccessSchemasLinkedin getAccessSchemasLinkedin() throws ClassCastException {
        return (AccessSchemasLinkedin)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasOidc`. If the actual instance is not `AccessSchemasOidc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasOidc`
     * @throws ClassCastException if the instance is not `AccessSchemasOidc`
     */
    public AccessSchemasOidc getAccessSchemasOidc() throws ClassCastException {
        return (AccessSchemasOidc)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasOkta`. If the actual instance is not `AccessSchemasOkta`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasOkta`
     * @throws ClassCastException if the instance is not `AccessSchemasOkta`
     */
    public AccessSchemasOkta getAccessSchemasOkta() throws ClassCastException {
        return (AccessSchemasOkta)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasOnelogin`. If the actual instance is not `AccessSchemasOnelogin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasOnelogin`
     * @throws ClassCastException if the instance is not `AccessSchemasOnelogin`
     */
    public AccessSchemasOnelogin getAccessSchemasOnelogin() throws ClassCastException {
        return (AccessSchemasOnelogin)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasPingone`. If the actual instance is not `AccessSchemasPingone`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasPingone`
     * @throws ClassCastException if the instance is not `AccessSchemasPingone`
     */
    public AccessSchemasPingone getAccessSchemasPingone() throws ClassCastException {
        return (AccessSchemasPingone)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasSaml`. If the actual instance is not `AccessSchemasSaml`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasSaml`
     * @throws ClassCastException if the instance is not `AccessSchemasSaml`
     */
    public AccessSchemasSaml getAccessSchemasSaml() throws ClassCastException {
        return (AccessSchemasSaml)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasYandex`. If the actual instance is not `AccessSchemasYandex`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasYandex`
     * @throws ClassCastException if the instance is not `AccessSchemasYandex`
     */
    public AccessSchemasYandex getAccessSchemasYandex() throws ClassCastException {
        return (AccessSchemasYandex)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSchemasOnetimepin`. If the actual instance is not `AccessSchemasOnetimepin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSchemasOnetimepin`
     * @throws ClassCastException if the instance is not `AccessSchemasOnetimepin`
     */
    public AccessSchemasOnetimepin getAccessSchemasOnetimepin() throws ClassCastException {
        return (AccessSchemasOnetimepin)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccessSchemasAzureAD
        try {
            AccessSchemasAzureAD.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasAzureAD failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasCentrify
        try {
            AccessSchemasCentrify.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasCentrify failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasFacebook
        try {
            AccessSchemasFacebook.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasFacebook failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasGithub
        try {
            AccessSchemasGithub.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasGithub failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasGoogle
        try {
            AccessSchemasGoogle.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasGoogle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasGoogleApps
        try {
            AccessSchemasGoogleApps.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasGoogleApps failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasLinkedin
        try {
            AccessSchemasLinkedin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasLinkedin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasOidc
        try {
            AccessSchemasOidc.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasOidc failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasOkta
        try {
            AccessSchemasOkta.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasOkta failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasOnelogin
        try {
            AccessSchemasOnelogin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasOnelogin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasPingone
        try {
            AccessSchemasPingone.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasPingone failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasSaml
        try {
            AccessSchemasSaml.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasSaml failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasYandex
        try {
            AccessSchemasYandex.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasYandex failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSchemasOnetimepin
        try {
            AccessSchemasOnetimepin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSchemasOnetimepin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult with anyOf schemas: AccessSchemasAzureAD, AccessSchemasCentrify, AccessSchemasFacebook, AccessSchemasGithub, AccessSchemasGoogle, AccessSchemasGoogleApps, AccessSchemasLinkedin, AccessSchemasOidc, AccessSchemasOkta, AccessSchemasOnelogin, AccessSchemasOnetimepin, AccessSchemasPingone, AccessSchemasSaml, AccessSchemasYandex. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult
     * @throws IOException if the JSON string is invalid with respect to AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult
     */
    public static AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult.class);
    }

    /**
     * Convert an instance of AccessIdentityProvidersComponentsSchemasResponseCollectionAllOfResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

