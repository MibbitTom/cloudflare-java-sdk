/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 {
  public static final String SERIALIZED_NAME_N_O_T_S_P_A_M = "NOT_SPAM";
  @SerializedName(SERIALIZED_NAME_N_O_T_S_P_A_M)
  private String NOT_SPAM;

  public static final String SERIALIZED_NAME_S_P_A_M = "SPAM";
  @SerializedName(SERIALIZED_NAME_S_P_A_M)
  private String SPAM;

  public RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0() {
  }

  public RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 NOT_SPAM(String NOT_SPAM) {
    this.NOT_SPAM = NOT_SPAM;
    return this;
  }

   /**
   * Get NOT_SPAM
   * @return NOT_SPAM
  **/
  @javax.annotation.Nonnull
  public String getNOTSPAM() {
    return NOT_SPAM;
  }

  public void setNOTSPAM(String NOT_SPAM) {
    this.NOT_SPAM = NOT_SPAM;
  }


  public RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 SPAM(String SPAM) {
    this.SPAM = SPAM;
    return this;
  }

   /**
   * Get SPAM
   * @return SPAM
  **/
  @javax.annotation.Nonnull
  public String getSPAM() {
    return SPAM;
  }

  public void setSPAM(String SPAM) {
    this.SPAM = SPAM;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 radarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 = (RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0) o;
    return Objects.equals(this.NOT_SPAM, radarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.NOT_SPAM) &&
        Objects.equals(this.SPAM, radarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.SPAM);
  }

  @Override
  public int hashCode() {
    return Objects.hash(NOT_SPAM, SPAM);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 {\n");
    sb.append("    NOT_SPAM: ").append(toIndentedString(NOT_SPAM)).append("\n");
    sb.append("    SPAM: ").append(toIndentedString(SPAM)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NOT_SPAM");
    openapiFields.add("SPAM");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("NOT_SPAM");
    openapiRequiredFields.add("SPAM");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 is not found in the empty JSON string", RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("NOT_SPAM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NOT_SPAM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NOT_SPAM").toString()));
      }
      if (!jsonObj.get("SPAM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPAM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPAM").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0>() {
           @Override
           public void write(JsonWriter out, RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0
  * @throws IOException if the JSON string is invalid with respect to RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0
  */
  public static RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0.class);
  }

 /**
  * Convert an instance of RadarGetEmailSecuritySummaryBySpam200ResponseResultSummary0 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

