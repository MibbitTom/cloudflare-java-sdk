/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * The packet capture filter. When this field is empty, all packets are captured.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicVisibilityPcapsFilterV1 {
  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS = "destination_address";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS)
  private String destinationAddress;

  public static final String SERIALIZED_NAME_DESTINATION_PORT = "destination_port";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT)
  private BigDecimal destinationPort;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private BigDecimal protocol;

  public static final String SERIALIZED_NAME_SOURCE_ADDRESS = "source_address";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESS)
  private String sourceAddress;

  public static final String SERIALIZED_NAME_SOURCE_PORT = "source_port";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT)
  private BigDecimal sourcePort;

  public MagicVisibilityPcapsFilterV1() {
  }

  public MagicVisibilityPcapsFilterV1 destinationAddress(String destinationAddress) {
    this.destinationAddress = destinationAddress;
    return this;
  }

   /**
   * The destination IP address of the packet.
   * @return destinationAddress
  **/
  @javax.annotation.Nullable
  public String getDestinationAddress() {
    return destinationAddress;
  }

  public void setDestinationAddress(String destinationAddress) {
    this.destinationAddress = destinationAddress;
  }


  public MagicVisibilityPcapsFilterV1 destinationPort(BigDecimal destinationPort) {
    this.destinationPort = destinationPort;
    return this;
  }

   /**
   * The destination port of the packet.
   * @return destinationPort
  **/
  @javax.annotation.Nullable
  public BigDecimal getDestinationPort() {
    return destinationPort;
  }

  public void setDestinationPort(BigDecimal destinationPort) {
    this.destinationPort = destinationPort;
  }


  public MagicVisibilityPcapsFilterV1 protocol(BigDecimal protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol number of the packet.
   * @return protocol
  **/
  @javax.annotation.Nullable
  public BigDecimal getProtocol() {
    return protocol;
  }

  public void setProtocol(BigDecimal protocol) {
    this.protocol = protocol;
  }


  public MagicVisibilityPcapsFilterV1 sourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    return this;
  }

   /**
   * The source IP address of the packet.
   * @return sourceAddress
  **/
  @javax.annotation.Nullable
  public String getSourceAddress() {
    return sourceAddress;
  }

  public void setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
  }


  public MagicVisibilityPcapsFilterV1 sourcePort(BigDecimal sourcePort) {
    this.sourcePort = sourcePort;
    return this;
  }

   /**
   * The source port of the packet.
   * @return sourcePort
  **/
  @javax.annotation.Nullable
  public BigDecimal getSourcePort() {
    return sourcePort;
  }

  public void setSourcePort(BigDecimal sourcePort) {
    this.sourcePort = sourcePort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicVisibilityPcapsFilterV1 magicVisibilityPcapsFilterV1 = (MagicVisibilityPcapsFilterV1) o;
    return Objects.equals(this.destinationAddress, magicVisibilityPcapsFilterV1.destinationAddress) &&
        Objects.equals(this.destinationPort, magicVisibilityPcapsFilterV1.destinationPort) &&
        Objects.equals(this.protocol, magicVisibilityPcapsFilterV1.protocol) &&
        Objects.equals(this.sourceAddress, magicVisibilityPcapsFilterV1.sourceAddress) &&
        Objects.equals(this.sourcePort, magicVisibilityPcapsFilterV1.sourcePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationAddress, destinationPort, protocol, sourceAddress, sourcePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicVisibilityPcapsFilterV1 {\n");
    sb.append("    destinationAddress: ").append(toIndentedString(destinationAddress)).append("\n");
    sb.append("    destinationPort: ").append(toIndentedString(destinationPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination_address");
    openapiFields.add("destination_port");
    openapiFields.add("protocol");
    openapiFields.add("source_address");
    openapiFields.add("source_port");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicVisibilityPcapsFilterV1
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicVisibilityPcapsFilterV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicVisibilityPcapsFilterV1 is not found in the empty JSON string", MagicVisibilityPcapsFilterV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicVisibilityPcapsFilterV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicVisibilityPcapsFilterV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination_address") != null && !jsonObj.get("destination_address").isJsonNull()) && !jsonObj.get("destination_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_address").toString()));
      }
      if ((jsonObj.get("source_address") != null && !jsonObj.get("source_address").isJsonNull()) && !jsonObj.get("source_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicVisibilityPcapsFilterV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicVisibilityPcapsFilterV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicVisibilityPcapsFilterV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicVisibilityPcapsFilterV1.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicVisibilityPcapsFilterV1>() {
           @Override
           public void write(JsonWriter out, MagicVisibilityPcapsFilterV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicVisibilityPcapsFilterV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicVisibilityPcapsFilterV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicVisibilityPcapsFilterV1
  * @throws IOException if the JSON string is invalid with respect to MagicVisibilityPcapsFilterV1
  */
  public static MagicVisibilityPcapsFilterV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicVisibilityPcapsFilterV1.class);
  }

 /**
  * Convert an instance of MagicVisibilityPcapsFilterV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

