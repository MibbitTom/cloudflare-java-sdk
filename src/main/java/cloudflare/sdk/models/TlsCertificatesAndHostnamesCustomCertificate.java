/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesBundleMethod;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesGeoRestrictions;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesKeylessCertificate;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesCustomCertificate
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_BUNDLE_METHOD,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_EXPIRES_ON,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_GEO_RESTRICTIONS,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_HOSTS,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_ISSUER,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_KEYLESS_SERVER,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_MODIFIED_ON,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_POLICY,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_PRIORITY,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_SIGNATURE,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_STATUS,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_UPLOADED_ON,
  TlsCertificatesAndHostnamesCustomCertificate.JSON_PROPERTY_ZONE_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T11:53:03.004303930+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesCustomCertificate {
  public static final String JSON_PROPERTY_BUNDLE_METHOD = "bundle_method";
  private TlsCertificatesAndHostnamesBundleMethod bundleMethod = TlsCertificatesAndHostnamesBundleMethod.UBIQUITOUS;

  public static final String JSON_PROPERTY_EXPIRES_ON = "expires_on";
  private OffsetDateTime expiresOn;

  public static final String JSON_PROPERTY_GEO_RESTRICTIONS = "geo_restrictions";
  private TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions;

  public static final String JSON_PROPERTY_HOSTS = "hosts";
  private List<String> hosts = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_ISSUER = "issuer";
  private String issuer;

  public static final String JSON_PROPERTY_KEYLESS_SERVER = "keyless_server";
  private TlsCertificatesAndHostnamesKeylessCertificate keylessServer;

  public static final String JSON_PROPERTY_MODIFIED_ON = "modified_on";
  private OffsetDateTime modifiedOn;

  public static final String JSON_PROPERTY_POLICY = "policy";
  private String policy;

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  private BigDecimal priority = new BigDecimal("20");

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TlsCertificatesAndHostnamesStatus status;

  public static final String JSON_PROPERTY_UPLOADED_ON = "uploaded_on";
  private OffsetDateTime uploadedOn;

  public static final String JSON_PROPERTY_ZONE_ID = "zone_id";
  private String zoneId;

  public TlsCertificatesAndHostnamesCustomCertificate() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesCustomCertificate(
    @JsonProperty(JSON_PROPERTY_EXPIRES_ON) OffsetDateTime expiresOn, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_ISSUER) String issuer, 
    @JsonProperty(JSON_PROPERTY_MODIFIED_ON) OffsetDateTime modifiedOn, 
    @JsonProperty(JSON_PROPERTY_SIGNATURE) String signature, 
    @JsonProperty(JSON_PROPERTY_UPLOADED_ON) OffsetDateTime uploadedOn, 
    @JsonProperty(JSON_PROPERTY_ZONE_ID) String zoneId
  ) {
  this();
    this.expiresOn = expiresOn;
    this.id = id;
    this.issuer = issuer;
    this.modifiedOn = modifiedOn;
    this.signature = signature;
    this.uploadedOn = uploadedOn;
    this.zoneId = zoneId;
  }

  public TlsCertificatesAndHostnamesCustomCertificate bundleMethod(TlsCertificatesAndHostnamesBundleMethod bundleMethod) {
    this.bundleMethod = bundleMethod;
    return this;
  }

   /**
   * Get bundleMethod
   * @return bundleMethod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUNDLE_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesBundleMethod getBundleMethod() {
    return bundleMethod;
  }


  @JsonProperty(JSON_PROPERTY_BUNDLE_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBundleMethod(TlsCertificatesAndHostnamesBundleMethod bundleMethod) {
    this.bundleMethod = bundleMethod;
  }


   /**
   * When the certificate from the authority expires.
   * @return expiresOn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }




  public TlsCertificatesAndHostnamesCustomCertificate geoRestrictions(TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions) {
    this.geoRestrictions = geoRestrictions;
    return this;
  }

   /**
   * Get geoRestrictions
   * @return geoRestrictions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEO_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesGeoRestrictions getGeoRestrictions() {
    return geoRestrictions;
  }


  @JsonProperty(JSON_PROPERTY_GEO_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeoRestrictions(TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions) {
    this.geoRestrictions = geoRestrictions;
  }


  public TlsCertificatesAndHostnamesCustomCertificate hosts(List<String> hosts) {
    this.hosts = hosts;
    return this;
  }

  public TlsCertificatesAndHostnamesCustomCertificate addHostsItem(String hostsItem) {
    if (this.hosts == null) {
      this.hosts = new ArrayList<>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

   /**
   * Get hosts
   * @return hosts
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getHosts() {
    return hosts;
  }


  @JsonProperty(JSON_PROPERTY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHosts(List<String> hosts) {
    this.hosts = hosts;
  }


   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }




   /**
   * The certificate authority that issued the certificate.
   * @return issuer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIssuer() {
    return issuer;
  }




  public TlsCertificatesAndHostnamesCustomCertificate keylessServer(TlsCertificatesAndHostnamesKeylessCertificate keylessServer) {
    this.keylessServer = keylessServer;
    return this;
  }

   /**
   * Get keylessServer
   * @return keylessServer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEYLESS_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesKeylessCertificate getKeylessServer() {
    return keylessServer;
  }


  @JsonProperty(JSON_PROPERTY_KEYLESS_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeylessServer(TlsCertificatesAndHostnamesKeylessCertificate keylessServer) {
    this.keylessServer = keylessServer;
  }


   /**
   * When the certificate was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }




  public TlsCertificatesAndHostnamesCustomCertificate policy(String policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) can be chosen, such as &#39;country: IN&#39;, as well as &#39;region: EU&#39; which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
   * @return policy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPolicy() {
    return policy;
  }


  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public TlsCertificatesAndHostnamesCustomCertificate priority(BigDecimal priority) {
    this.priority = priority;
    return this;
  }

   /**
   * The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping &#39;legacy_custom&#39; certificates, but &#39;legacy_custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
   * @return priority
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getPriority() {
    return priority;
  }


  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPriority(BigDecimal priority) {
    this.priority = priority;
  }


   /**
   * The type of hash used for the certificate.
   * @return signature
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSignature() {
    return signature;
  }




  public TlsCertificatesAndHostnamesCustomCertificate status(TlsCertificatesAndHostnamesStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TlsCertificatesAndHostnamesStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(TlsCertificatesAndHostnamesStatus status) {
    this.status = status;
  }


   /**
   * When the certificate was uploaded to Cloudflare.
   * @return uploadedOn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPLOADED_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUploadedOn() {
    return uploadedOn;
  }




   /**
   * Identifier
   * @return zoneId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getZoneId() {
    return zoneId;
  }




  /**
   * Return true if this tls-certificates-and-hostnames_custom-certificate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesCustomCertificate tlsCertificatesAndHostnamesCustomCertificate = (TlsCertificatesAndHostnamesCustomCertificate) o;
    return Objects.equals(this.bundleMethod, tlsCertificatesAndHostnamesCustomCertificate.bundleMethod) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesCustomCertificate.expiresOn) &&
        Objects.equals(this.geoRestrictions, tlsCertificatesAndHostnamesCustomCertificate.geoRestrictions) &&
        Objects.equals(this.hosts, tlsCertificatesAndHostnamesCustomCertificate.hosts) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesCustomCertificate.id) &&
        Objects.equals(this.issuer, tlsCertificatesAndHostnamesCustomCertificate.issuer) &&
        Objects.equals(this.keylessServer, tlsCertificatesAndHostnamesCustomCertificate.keylessServer) &&
        Objects.equals(this.modifiedOn, tlsCertificatesAndHostnamesCustomCertificate.modifiedOn) &&
        Objects.equals(this.policy, tlsCertificatesAndHostnamesCustomCertificate.policy) &&
        Objects.equals(this.priority, tlsCertificatesAndHostnamesCustomCertificate.priority) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesCustomCertificate.signature) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesCustomCertificate.status) &&
        Objects.equals(this.uploadedOn, tlsCertificatesAndHostnamesCustomCertificate.uploadedOn) &&
        Objects.equals(this.zoneId, tlsCertificatesAndHostnamesCustomCertificate.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleMethod, expiresOn, geoRestrictions, hosts, id, issuer, keylessServer, modifiedOn, policy, priority, signature, status, uploadedOn, zoneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesCustomCertificate {\n");
    sb.append("    bundleMethod: ").append(toIndentedString(bundleMethod)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    geoRestrictions: ").append(toIndentedString(geoRestrictions)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    keylessServer: ").append(toIndentedString(keylessServer)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadedOn: ").append(toIndentedString(uploadedOn)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bundle_method` to the URL query string
    if (getBundleMethod() != null) {
      joiner.add(String.format("%sbundle_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBundleMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_on` to the URL query string
    if (getExpiresOn() != null) {
      joiner.add(String.format("%sexpires_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `geo_restrictions` to the URL query string
    if (getGeoRestrictions() != null) {
      joiner.add(getGeoRestrictions().toUrlQueryString(prefix + "geo_restrictions" + suffix));
    }

    // add `hosts` to the URL query string
    if (getHosts() != null) {
      for (int i = 0; i < getHosts().size(); i++) {
        joiner.add(String.format("%shosts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getHosts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `issuer` to the URL query string
    if (getIssuer() != null) {
      joiner.add(String.format("%sissuer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIssuer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `keyless_server` to the URL query string
    if (getKeylessServer() != null) {
      joiner.add(getKeylessServer().toUrlQueryString(prefix + "keyless_server" + suffix));
    }

    // add `modified_on` to the URL query string
    if (getModifiedOn() != null) {
      joiner.add(String.format("%smodified_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModifiedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `policy` to the URL query string
    if (getPolicy() != null) {
      joiner.add(String.format("%spolicy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `priority` to the URL query string
    if (getPriority() != null) {
      joiner.add(String.format("%spriority%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPriority()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(String.format("%ssignature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `uploaded_on` to the URL query string
    if (getUploadedOn() != null) {
      joiner.add(String.format("%suploaded_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUploadedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `zone_id` to the URL query string
    if (getZoneId() != null) {
      joiner.add(String.format("%szone_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getZoneId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

