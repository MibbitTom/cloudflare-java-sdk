/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest {
  /**
   * The level to attempt to delete similar rules defined for other zones with the same owner. The default value is &#x60;none&#x60;, which will only delete the current rule. Using &#x60;basic&#x60; will delete rules that match the same action (mode) and configuration, while using &#x60;aggressive&#x60; will delete rules that match the same configuration.
   */
  @JsonAdapter(CascadeEnum.Adapter.class)
  public enum CascadeEnum {
    NONE("none"),
    
    BASIC("basic"),
    
    AGGRESSIVE("aggressive");

    private String value;

    CascadeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CascadeEnum fromValue(String value) {
      for (CascadeEnum b : CascadeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CascadeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CascadeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CascadeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CascadeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CascadeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CASCADE = "cascade";
  @SerializedName(SERIALIZED_NAME_CASCADE)
  private CascadeEnum cascade = CascadeEnum.NONE;

  public IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest() {
  }

  public IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest cascade(CascadeEnum cascade) {
    this.cascade = cascade;
    return this;
  }

   /**
   * The level to attempt to delete similar rules defined for other zones with the same owner. The default value is &#x60;none&#x60;, which will only delete the current rule. Using &#x60;basic&#x60; will delete rules that match the same action (mode) and configuration, while using &#x60;aggressive&#x60; will delete rules that match the same configuration.
   * @return cascade
  **/
  @javax.annotation.Nullable
  public CascadeEnum getCascade() {
    return cascade;
  }

  public void setCascade(CascadeEnum cascade) {
    this.cascade = cascade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest = (IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest) o;
    return Objects.equals(this.cascade, ipAccessRulesForAZoneDeleteAnIpAccessRuleRequest.cascade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cascade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest {\n");
    sb.append("    cascade: ").append(toIndentedString(cascade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cascade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest is not found in the empty JSON string", IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cascade") != null && !jsonObj.get("cascade").isJsonNull()) && !jsonObj.get("cascade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cascade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cascade").toString()));
      }
      // validate the optional field `cascade`
      if (jsonObj.get("cascade") != null && !jsonObj.get("cascade").isJsonNull()) {
        CascadeEnum.validateJsonElement(jsonObj.get("cascade"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest>() {
           @Override
           public void write(JsonWriter out, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest
  * @throws IOException if the JSON string is invalid with respect to IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest
  */
  public static IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest.class);
  }

 /**
  * Convert an instance of IpAccessRulesForAZoneDeleteAnIpAccessRuleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

