/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SSL specific settings.
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesSslsettings.JSON_PROPERTY_CIPHERS,
  TlsCertificatesAndHostnamesSslsettings.JSON_PROPERTY_EARLY_HINTS,
  TlsCertificatesAndHostnamesSslsettings.JSON_PROPERTY_HTTP2,
  TlsCertificatesAndHostnamesSslsettings.JSON_PROPERTY_MIN_TLS_VERSION,
  TlsCertificatesAndHostnamesSslsettings.JSON_PROPERTY_TLS13
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T10:12:24.693742223+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesSslsettings {
  public static final String JSON_PROPERTY_CIPHERS = "ciphers";
  private Set<String> ciphers = new LinkedHashSet<>();

  /**
   * Whether or not Early Hints is enabled.
   */
  public enum EarlyHintsEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    EarlyHintsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EarlyHintsEnum fromValue(String value) {
      for (EarlyHintsEnum b : EarlyHintsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EARLY_HINTS = "early_hints";
  private EarlyHintsEnum earlyHints;

  /**
   * Whether or not HTTP2 is enabled.
   */
  public enum Http2Enum {
    ON("on"),
    
    OFF("off");

    private String value;

    Http2Enum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static Http2Enum fromValue(String value) {
      for (Http2Enum b : Http2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HTTP2 = "http2";
  private Http2Enum http2;

  /**
   * The minimum TLS version supported.
   */
  public enum MinTlsVersionEnum {
    _0("1.0"),
    
    _1("1.1"),
    
    _2("1.2"),
    
    _3("1.3");

    private String value;

    MinTlsVersionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MinTlsVersionEnum fromValue(String value) {
      for (MinTlsVersionEnum b : MinTlsVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MIN_TLS_VERSION = "min_tls_version";
  private MinTlsVersionEnum minTlsVersion;

  /**
   * Whether or not TLS 1.3 is enabled.
   */
  public enum Tls13Enum {
    ON("on"),
    
    OFF("off");

    private String value;

    Tls13Enum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static Tls13Enum fromValue(String value) {
      for (Tls13Enum b : Tls13Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TLS13 = "tls_1_3";
  private Tls13Enum tls13;

  public TlsCertificatesAndHostnamesSslsettings() { 
  }

  public TlsCertificatesAndHostnamesSslsettings ciphers(Set<String> ciphers) {
    this.ciphers = ciphers;
    return this;
  }

  public TlsCertificatesAndHostnamesSslsettings addCiphersItem(String ciphersItem) {
    if (this.ciphers == null) {
      this.ciphers = new LinkedHashSet<>();
    }
    this.ciphers.add(ciphersItem);
    return this;
  }

   /**
   * An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
   * @return ciphers
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CIPHERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getCiphers() {
    return ciphers;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CIPHERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCiphers(Set<String> ciphers) {
    this.ciphers = ciphers;
  }


  public TlsCertificatesAndHostnamesSslsettings earlyHints(EarlyHintsEnum earlyHints) {
    this.earlyHints = earlyHints;
    return this;
  }

   /**
   * Whether or not Early Hints is enabled.
   * @return earlyHints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EARLY_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EarlyHintsEnum getEarlyHints() {
    return earlyHints;
  }


  @JsonProperty(JSON_PROPERTY_EARLY_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEarlyHints(EarlyHintsEnum earlyHints) {
    this.earlyHints = earlyHints;
  }


  public TlsCertificatesAndHostnamesSslsettings http2(Http2Enum http2) {
    this.http2 = http2;
    return this;
  }

   /**
   * Whether or not HTTP2 is enabled.
   * @return http2
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Http2Enum getHttp2() {
    return http2;
  }


  @JsonProperty(JSON_PROPERTY_HTTP2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttp2(Http2Enum http2) {
    this.http2 = http2;
  }


  public TlsCertificatesAndHostnamesSslsettings minTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
    return this;
  }

   /**
   * The minimum TLS version supported.
   * @return minTlsVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_TLS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MinTlsVersionEnum getMinTlsVersion() {
    return minTlsVersion;
  }


  @JsonProperty(JSON_PROPERTY_MIN_TLS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }


  public TlsCertificatesAndHostnamesSslsettings tls13(Tls13Enum tls13) {
    this.tls13 = tls13;
    return this;
  }

   /**
   * Whether or not TLS 1.3 is enabled.
   * @return tls13
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TLS13)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tls13Enum getTls13() {
    return tls13;
  }


  @JsonProperty(JSON_PROPERTY_TLS13)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTls13(Tls13Enum tls13) {
    this.tls13 = tls13;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_sslsettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesSslsettings tlsCertificatesAndHostnamesSslsettings = (TlsCertificatesAndHostnamesSslsettings) o;
    return Objects.equals(this.ciphers, tlsCertificatesAndHostnamesSslsettings.ciphers) &&
        Objects.equals(this.earlyHints, tlsCertificatesAndHostnamesSslsettings.earlyHints) &&
        Objects.equals(this.http2, tlsCertificatesAndHostnamesSslsettings.http2) &&
        Objects.equals(this.minTlsVersion, tlsCertificatesAndHostnamesSslsettings.minTlsVersion) &&
        Objects.equals(this.tls13, tlsCertificatesAndHostnamesSslsettings.tls13);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciphers, earlyHints, http2, minTlsVersion, tls13);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesSslsettings {\n");
    sb.append("    ciphers: ").append(toIndentedString(ciphers)).append("\n");
    sb.append("    earlyHints: ").append(toIndentedString(earlyHints)).append("\n");
    sb.append("    http2: ").append(toIndentedString(http2)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    tls13: ").append(toIndentedString(tls13)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ciphers` to the URL query string
    if (getCiphers() != null) {
      int i = 0;
      for (String _item : getCiphers()) {
        joiner.add(String.format("%sciphers%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `early_hints` to the URL query string
    if (getEarlyHints() != null) {
      joiner.add(String.format("%searly_hints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEarlyHints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `http2` to the URL query string
    if (getHttp2() != null) {
      joiner.add(String.format("%shttp2%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHttp2()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `min_tls_version` to the URL query string
    if (getMinTlsVersion() != null) {
      joiner.add(String.format("%smin_tls_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinTlsVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tls_1_3` to the URL query string
    if (getTls13() != null) {
      joiner.add(String.format("%stls_1_3%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTls13()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

