/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * CloudforceOneQuota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class CloudforceOneQuota {
  public static final String SERIALIZED_NAME_ANNIVERSARY_DATE = "anniversary_date";
  @SerializedName(SERIALIZED_NAME_ANNIVERSARY_DATE)
  private OffsetDateTime anniversaryDate;

  public static final String SERIALIZED_NAME_QUARTER_ANNIVERSARY_DATE = "quarter_anniversary_date";
  @SerializedName(SERIALIZED_NAME_QUARTER_ANNIVERSARY_DATE)
  private OffsetDateTime quarterAnniversaryDate;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Integer quota;

  public static final String SERIALIZED_NAME_REMAINING = "remaining";
  @SerializedName(SERIALIZED_NAME_REMAINING)
  private Integer remaining;

  public CloudforceOneQuota() {
  }

  public CloudforceOneQuota anniversaryDate(OffsetDateTime anniversaryDate) {
    this.anniversaryDate = anniversaryDate;
    return this;
  }

   /**
   * Get anniversaryDate
   * @return anniversaryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAnniversaryDate() {
    return anniversaryDate;
  }

  public void setAnniversaryDate(OffsetDateTime anniversaryDate) {
    this.anniversaryDate = anniversaryDate;
  }


  public CloudforceOneQuota quarterAnniversaryDate(OffsetDateTime quarterAnniversaryDate) {
    this.quarterAnniversaryDate = quarterAnniversaryDate;
    return this;
  }

   /**
   * Get quarterAnniversaryDate
   * @return quarterAnniversaryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getQuarterAnniversaryDate() {
    return quarterAnniversaryDate;
  }

  public void setQuarterAnniversaryDate(OffsetDateTime quarterAnniversaryDate) {
    this.quarterAnniversaryDate = quarterAnniversaryDate;
  }


  public CloudforceOneQuota quota(Integer quota) {
    this.quota = quota;
    return this;
  }

   /**
   * Tokens for the quarter
   * @return quota
  **/
  @javax.annotation.Nullable
  public Integer getQuota() {
    return quota;
  }

  public void setQuota(Integer quota) {
    this.quota = quota;
  }


  public CloudforceOneQuota remaining(Integer remaining) {
    this.remaining = remaining;
    return this;
  }

   /**
   * Tokens remaining for the quarter
   * @return remaining
  **/
  @javax.annotation.Nullable
  public Integer getRemaining() {
    return remaining;
  }

  public void setRemaining(Integer remaining) {
    this.remaining = remaining;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudforceOneQuota cloudforceOneQuota = (CloudforceOneQuota) o;
    return Objects.equals(this.anniversaryDate, cloudforceOneQuota.anniversaryDate) &&
        Objects.equals(this.quarterAnniversaryDate, cloudforceOneQuota.quarterAnniversaryDate) &&
        Objects.equals(this.quota, cloudforceOneQuota.quota) &&
        Objects.equals(this.remaining, cloudforceOneQuota.remaining);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anniversaryDate, quarterAnniversaryDate, quota, remaining);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudforceOneQuota {\n");
    sb.append("    anniversaryDate: ").append(toIndentedString(anniversaryDate)).append("\n");
    sb.append("    quarterAnniversaryDate: ").append(toIndentedString(quarterAnniversaryDate)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anniversary_date");
    openapiFields.add("quarter_anniversary_date");
    openapiFields.add("quota");
    openapiFields.add("remaining");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CloudforceOneQuota
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudforceOneQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudforceOneQuota is not found in the empty JSON string", CloudforceOneQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudforceOneQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudforceOneQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `anniversary_date`
      if (jsonObj.get("anniversary_date") != null && !jsonObj.get("anniversary_date").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("anniversary_date"));
      }
      // validate the optional field `quarter_anniversary_date`
      if (jsonObj.get("quarter_anniversary_date") != null && !jsonObj.get("quarter_anniversary_date").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("quarter_anniversary_date"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudforceOneQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudforceOneQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudforceOneQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudforceOneQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudforceOneQuota>() {
           @Override
           public void write(JsonWriter out, CloudforceOneQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudforceOneQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CloudforceOneQuota given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CloudforceOneQuota
  * @throws IOException if the JSON string is invalid with respect to CloudforceOneQuota
  */
  public static CloudforceOneQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudforceOneQuota.class);
  }

 /**
  * Convert an instance of CloudforceOneQuota to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

