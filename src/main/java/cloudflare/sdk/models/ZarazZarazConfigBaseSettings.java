/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.ZarazZarazConfigBaseSettingsContextEnricher;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * General Zaraz settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZarazZarazConfigBaseSettings {
  public static final String SERIALIZED_NAME_AUTO_INJECT_SCRIPT = "autoInjectScript";
  @SerializedName(SERIALIZED_NAME_AUTO_INJECT_SCRIPT)
  private Boolean autoInjectScript;

  public static final String SERIALIZED_NAME_CONTEXT_ENRICHER = "contextEnricher";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ENRICHER)
  private ZarazZarazConfigBaseSettingsContextEnricher contextEnricher;

  public static final String SERIALIZED_NAME_COOKIE_DOMAIN = "cookieDomain";
  @SerializedName(SERIALIZED_NAME_COOKIE_DOMAIN)
  private String cookieDomain;

  public static final String SERIALIZED_NAME_ECOMMERCE = "ecommerce";
  @SerializedName(SERIALIZED_NAME_ECOMMERCE)
  private Boolean ecommerce;

  public static final String SERIALIZED_NAME_EVENTS_API_PATH = "eventsApiPath";
  @SerializedName(SERIALIZED_NAME_EVENTS_API_PATH)
  private String eventsApiPath;

  public static final String SERIALIZED_NAME_HIDE_EXTERNAL_REFERER = "hideExternalReferer";
  @SerializedName(SERIALIZED_NAME_HIDE_EXTERNAL_REFERER)
  private Boolean hideExternalReferer;

  public static final String SERIALIZED_NAME_HIDE_I_P_ADDRESS = "hideIPAddress";
  @SerializedName(SERIALIZED_NAME_HIDE_I_P_ADDRESS)
  private Boolean hideIPAddress;

  public static final String SERIALIZED_NAME_HIDE_QUERY_PARAMS = "hideQueryParams";
  @SerializedName(SERIALIZED_NAME_HIDE_QUERY_PARAMS)
  private Boolean hideQueryParams;

  public static final String SERIALIZED_NAME_HIDE_USER_AGENT = "hideUserAgent";
  @SerializedName(SERIALIZED_NAME_HIDE_USER_AGENT)
  private Boolean hideUserAgent;

  public static final String SERIALIZED_NAME_INIT_PATH = "initPath";
  @SerializedName(SERIALIZED_NAME_INIT_PATH)
  private String initPath;

  public static final String SERIALIZED_NAME_INJECT_IFRAMES = "injectIframes";
  @SerializedName(SERIALIZED_NAME_INJECT_IFRAMES)
  private Boolean injectIframes;

  public static final String SERIALIZED_NAME_MC_ROOT_PATH = "mcRootPath";
  @SerializedName(SERIALIZED_NAME_MC_ROOT_PATH)
  private String mcRootPath;

  public static final String SERIALIZED_NAME_SCRIPT_PATH = "scriptPath";
  @SerializedName(SERIALIZED_NAME_SCRIPT_PATH)
  private String scriptPath;

  public static final String SERIALIZED_NAME_TRACK_PATH = "trackPath";
  @SerializedName(SERIALIZED_NAME_TRACK_PATH)
  private String trackPath;

  public ZarazZarazConfigBaseSettings() {
  }

  public ZarazZarazConfigBaseSettings autoInjectScript(Boolean autoInjectScript) {
    this.autoInjectScript = autoInjectScript;
    return this;
  }

   /**
   * Automatic injection of Zaraz scripts enabled.
   * @return autoInjectScript
  **/
  @javax.annotation.Nonnull
  public Boolean getAutoInjectScript() {
    return autoInjectScript;
  }

  public void setAutoInjectScript(Boolean autoInjectScript) {
    this.autoInjectScript = autoInjectScript;
  }


  public ZarazZarazConfigBaseSettings contextEnricher(ZarazZarazConfigBaseSettingsContextEnricher contextEnricher) {
    this.contextEnricher = contextEnricher;
    return this;
  }

   /**
   * Get contextEnricher
   * @return contextEnricher
  **/
  @javax.annotation.Nullable
  public ZarazZarazConfigBaseSettingsContextEnricher getContextEnricher() {
    return contextEnricher;
  }

  public void setContextEnricher(ZarazZarazConfigBaseSettingsContextEnricher contextEnricher) {
    this.contextEnricher = contextEnricher;
  }


  public ZarazZarazConfigBaseSettings cookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
    return this;
  }

   /**
   * The domain Zaraz will use for writing and reading its cookies.
   * @return cookieDomain
  **/
  @javax.annotation.Nullable
  public String getCookieDomain() {
    return cookieDomain;
  }

  public void setCookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
  }


  public ZarazZarazConfigBaseSettings ecommerce(Boolean ecommerce) {
    this.ecommerce = ecommerce;
    return this;
  }

   /**
   * Ecommerce API enabled.
   * @return ecommerce
  **/
  @javax.annotation.Nullable
  public Boolean getEcommerce() {
    return ecommerce;
  }

  public void setEcommerce(Boolean ecommerce) {
    this.ecommerce = ecommerce;
  }


  public ZarazZarazConfigBaseSettings eventsApiPath(String eventsApiPath) {
    this.eventsApiPath = eventsApiPath;
    return this;
  }

   /**
   * Custom endpoint for server-side track events.
   * @return eventsApiPath
  **/
  @javax.annotation.Nullable
  public String getEventsApiPath() {
    return eventsApiPath;
  }

  public void setEventsApiPath(String eventsApiPath) {
    this.eventsApiPath = eventsApiPath;
  }


  public ZarazZarazConfigBaseSettings hideExternalReferer(Boolean hideExternalReferer) {
    this.hideExternalReferer = hideExternalReferer;
    return this;
  }

   /**
   * Hiding external referrer URL enabled.
   * @return hideExternalReferer
  **/
  @javax.annotation.Nullable
  public Boolean getHideExternalReferer() {
    return hideExternalReferer;
  }

  public void setHideExternalReferer(Boolean hideExternalReferer) {
    this.hideExternalReferer = hideExternalReferer;
  }


  public ZarazZarazConfigBaseSettings hideIPAddress(Boolean hideIPAddress) {
    this.hideIPAddress = hideIPAddress;
    return this;
  }

   /**
   * Trimming IP address enabled.
   * @return hideIPAddress
  **/
  @javax.annotation.Nullable
  public Boolean getHideIPAddress() {
    return hideIPAddress;
  }

  public void setHideIPAddress(Boolean hideIPAddress) {
    this.hideIPAddress = hideIPAddress;
  }


  public ZarazZarazConfigBaseSettings hideQueryParams(Boolean hideQueryParams) {
    this.hideQueryParams = hideQueryParams;
    return this;
  }

   /**
   * Removing URL query params enabled.
   * @return hideQueryParams
  **/
  @javax.annotation.Nullable
  public Boolean getHideQueryParams() {
    return hideQueryParams;
  }

  public void setHideQueryParams(Boolean hideQueryParams) {
    this.hideQueryParams = hideQueryParams;
  }


  public ZarazZarazConfigBaseSettings hideUserAgent(Boolean hideUserAgent) {
    this.hideUserAgent = hideUserAgent;
    return this;
  }

   /**
   * Removing sensitive data from User Aagent string enabled.
   * @return hideUserAgent
  **/
  @javax.annotation.Nullable
  public Boolean getHideUserAgent() {
    return hideUserAgent;
  }

  public void setHideUserAgent(Boolean hideUserAgent) {
    this.hideUserAgent = hideUserAgent;
  }


  public ZarazZarazConfigBaseSettings initPath(String initPath) {
    this.initPath = initPath;
    return this;
  }

   /**
   * Custom endpoint for Zaraz init script.
   * @return initPath
  **/
  @javax.annotation.Nullable
  public String getInitPath() {
    return initPath;
  }

  public void setInitPath(String initPath) {
    this.initPath = initPath;
  }


  public ZarazZarazConfigBaseSettings injectIframes(Boolean injectIframes) {
    this.injectIframes = injectIframes;
    return this;
  }

   /**
   * Injection of Zaraz scripts into iframes enabled.
   * @return injectIframes
  **/
  @javax.annotation.Nullable
  public Boolean getInjectIframes() {
    return injectIframes;
  }

  public void setInjectIframes(Boolean injectIframes) {
    this.injectIframes = injectIframes;
  }


  public ZarazZarazConfigBaseSettings mcRootPath(String mcRootPath) {
    this.mcRootPath = mcRootPath;
    return this;
  }

   /**
   * Custom path for Managed Components server functionalities.
   * @return mcRootPath
  **/
  @javax.annotation.Nullable
  public String getMcRootPath() {
    return mcRootPath;
  }

  public void setMcRootPath(String mcRootPath) {
    this.mcRootPath = mcRootPath;
  }


  public ZarazZarazConfigBaseSettings scriptPath(String scriptPath) {
    this.scriptPath = scriptPath;
    return this;
  }

   /**
   * Custom endpoint for Zaraz main script.
   * @return scriptPath
  **/
  @javax.annotation.Nullable
  public String getScriptPath() {
    return scriptPath;
  }

  public void setScriptPath(String scriptPath) {
    this.scriptPath = scriptPath;
  }


  public ZarazZarazConfigBaseSettings trackPath(String trackPath) {
    this.trackPath = trackPath;
    return this;
  }

   /**
   * Custom endpoint for Zaraz tracking requests.
   * @return trackPath
  **/
  @javax.annotation.Nullable
  public String getTrackPath() {
    return trackPath;
  }

  public void setTrackPath(String trackPath) {
    this.trackPath = trackPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZarazZarazConfigBaseSettings zarazZarazConfigBaseSettings = (ZarazZarazConfigBaseSettings) o;
    return Objects.equals(this.autoInjectScript, zarazZarazConfigBaseSettings.autoInjectScript) &&
        Objects.equals(this.contextEnricher, zarazZarazConfigBaseSettings.contextEnricher) &&
        Objects.equals(this.cookieDomain, zarazZarazConfigBaseSettings.cookieDomain) &&
        Objects.equals(this.ecommerce, zarazZarazConfigBaseSettings.ecommerce) &&
        Objects.equals(this.eventsApiPath, zarazZarazConfigBaseSettings.eventsApiPath) &&
        Objects.equals(this.hideExternalReferer, zarazZarazConfigBaseSettings.hideExternalReferer) &&
        Objects.equals(this.hideIPAddress, zarazZarazConfigBaseSettings.hideIPAddress) &&
        Objects.equals(this.hideQueryParams, zarazZarazConfigBaseSettings.hideQueryParams) &&
        Objects.equals(this.hideUserAgent, zarazZarazConfigBaseSettings.hideUserAgent) &&
        Objects.equals(this.initPath, zarazZarazConfigBaseSettings.initPath) &&
        Objects.equals(this.injectIframes, zarazZarazConfigBaseSettings.injectIframes) &&
        Objects.equals(this.mcRootPath, zarazZarazConfigBaseSettings.mcRootPath) &&
        Objects.equals(this.scriptPath, zarazZarazConfigBaseSettings.scriptPath) &&
        Objects.equals(this.trackPath, zarazZarazConfigBaseSettings.trackPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInjectScript, contextEnricher, cookieDomain, ecommerce, eventsApiPath, hideExternalReferer, hideIPAddress, hideQueryParams, hideUserAgent, initPath, injectIframes, mcRootPath, scriptPath, trackPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZarazZarazConfigBaseSettings {\n");
    sb.append("    autoInjectScript: ").append(toIndentedString(autoInjectScript)).append("\n");
    sb.append("    contextEnricher: ").append(toIndentedString(contextEnricher)).append("\n");
    sb.append("    cookieDomain: ").append(toIndentedString(cookieDomain)).append("\n");
    sb.append("    ecommerce: ").append(toIndentedString(ecommerce)).append("\n");
    sb.append("    eventsApiPath: ").append(toIndentedString(eventsApiPath)).append("\n");
    sb.append("    hideExternalReferer: ").append(toIndentedString(hideExternalReferer)).append("\n");
    sb.append("    hideIPAddress: ").append(toIndentedString(hideIPAddress)).append("\n");
    sb.append("    hideQueryParams: ").append(toIndentedString(hideQueryParams)).append("\n");
    sb.append("    hideUserAgent: ").append(toIndentedString(hideUserAgent)).append("\n");
    sb.append("    initPath: ").append(toIndentedString(initPath)).append("\n");
    sb.append("    injectIframes: ").append(toIndentedString(injectIframes)).append("\n");
    sb.append("    mcRootPath: ").append(toIndentedString(mcRootPath)).append("\n");
    sb.append("    scriptPath: ").append(toIndentedString(scriptPath)).append("\n");
    sb.append("    trackPath: ").append(toIndentedString(trackPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoInjectScript");
    openapiFields.add("contextEnricher");
    openapiFields.add("cookieDomain");
    openapiFields.add("ecommerce");
    openapiFields.add("eventsApiPath");
    openapiFields.add("hideExternalReferer");
    openapiFields.add("hideIPAddress");
    openapiFields.add("hideQueryParams");
    openapiFields.add("hideUserAgent");
    openapiFields.add("initPath");
    openapiFields.add("injectIframes");
    openapiFields.add("mcRootPath");
    openapiFields.add("scriptPath");
    openapiFields.add("trackPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autoInjectScript");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZarazZarazConfigBaseSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZarazZarazConfigBaseSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZarazZarazConfigBaseSettings is not found in the empty JSON string", ZarazZarazConfigBaseSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZarazZarazConfigBaseSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZarazZarazConfigBaseSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZarazZarazConfigBaseSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contextEnricher`
      if (jsonObj.get("contextEnricher") != null && !jsonObj.get("contextEnricher").isJsonNull()) {
        ZarazZarazConfigBaseSettingsContextEnricher.validateJsonElement(jsonObj.get("contextEnricher"));
      }
      if ((jsonObj.get("cookieDomain") != null && !jsonObj.get("cookieDomain").isJsonNull()) && !jsonObj.get("cookieDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieDomain").toString()));
      }
      if ((jsonObj.get("eventsApiPath") != null && !jsonObj.get("eventsApiPath").isJsonNull()) && !jsonObj.get("eventsApiPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventsApiPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventsApiPath").toString()));
      }
      if ((jsonObj.get("initPath") != null && !jsonObj.get("initPath").isJsonNull()) && !jsonObj.get("initPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initPath").toString()));
      }
      if ((jsonObj.get("mcRootPath") != null && !jsonObj.get("mcRootPath").isJsonNull()) && !jsonObj.get("mcRootPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcRootPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcRootPath").toString()));
      }
      if ((jsonObj.get("scriptPath") != null && !jsonObj.get("scriptPath").isJsonNull()) && !jsonObj.get("scriptPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptPath").toString()));
      }
      if ((jsonObj.get("trackPath") != null && !jsonObj.get("trackPath").isJsonNull()) && !jsonObj.get("trackPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZarazZarazConfigBaseSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZarazZarazConfigBaseSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZarazZarazConfigBaseSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZarazZarazConfigBaseSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ZarazZarazConfigBaseSettings>() {
           @Override
           public void write(JsonWriter out, ZarazZarazConfigBaseSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZarazZarazConfigBaseSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZarazZarazConfigBaseSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZarazZarazConfigBaseSettings
  * @throws IOException if the JSON string is invalid with respect to ZarazZarazConfigBaseSettings
  */
  public static ZarazZarazConfigBaseSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZarazZarazConfigBaseSettings.class);
  }

 /**
  * Convert an instance of ZarazZarazConfigBaseSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

