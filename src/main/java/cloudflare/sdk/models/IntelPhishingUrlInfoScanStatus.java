/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * Status of the most recent scan found.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IntelPhishingUrlInfoScanStatus {
  public static final String SERIALIZED_NAME_LAST_PROCESSED = "last_processed";
  @SerializedName(SERIALIZED_NAME_LAST_PROCESSED)
  private String lastProcessed;

  public static final String SERIALIZED_NAME_SCAN_COMPLETE = "scan_complete";
  @SerializedName(SERIALIZED_NAME_SCAN_COMPLETE)
  private Boolean scanComplete;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_SUBMISSION_ID = "submission_id";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_ID)
  private Integer submissionId;

  public IntelPhishingUrlInfoScanStatus() {
  }

  public IntelPhishingUrlInfoScanStatus lastProcessed(String lastProcessed) {
    this.lastProcessed = lastProcessed;
    return this;
  }

   /**
   * Timestamp of when the submission was processed.
   * @return lastProcessed
  **/
  @javax.annotation.Nullable
  public String getLastProcessed() {
    return lastProcessed;
  }

  public void setLastProcessed(String lastProcessed) {
    this.lastProcessed = lastProcessed;
  }


  public IntelPhishingUrlInfoScanStatus scanComplete(Boolean scanComplete) {
    this.scanComplete = scanComplete;
    return this;
  }

   /**
   * For internal use.
   * @return scanComplete
  **/
  @javax.annotation.Nullable
  public Boolean getScanComplete() {
    return scanComplete;
  }

  public void setScanComplete(Boolean scanComplete) {
    this.scanComplete = scanComplete;
  }


  public IntelPhishingUrlInfoScanStatus statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Status code that the crawler received when loading the submitted URL.
   * @return statusCode
  **/
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public IntelPhishingUrlInfoScanStatus submissionId(Integer submissionId) {
    this.submissionId = submissionId;
    return this;
  }

   /**
   * ID of the most recent submission.
   * @return submissionId
  **/
  @javax.annotation.Nullable
  public Integer getSubmissionId() {
    return submissionId;
  }

  public void setSubmissionId(Integer submissionId) {
    this.submissionId = submissionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelPhishingUrlInfoScanStatus intelPhishingUrlInfoScanStatus = (IntelPhishingUrlInfoScanStatus) o;
    return Objects.equals(this.lastProcessed, intelPhishingUrlInfoScanStatus.lastProcessed) &&
        Objects.equals(this.scanComplete, intelPhishingUrlInfoScanStatus.scanComplete) &&
        Objects.equals(this.statusCode, intelPhishingUrlInfoScanStatus.statusCode) &&
        Objects.equals(this.submissionId, intelPhishingUrlInfoScanStatus.submissionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastProcessed, scanComplete, statusCode, submissionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelPhishingUrlInfoScanStatus {\n");
    sb.append("    lastProcessed: ").append(toIndentedString(lastProcessed)).append("\n");
    sb.append("    scanComplete: ").append(toIndentedString(scanComplete)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_processed");
    openapiFields.add("scan_complete");
    openapiFields.add("status_code");
    openapiFields.add("submission_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntelPhishingUrlInfoScanStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelPhishingUrlInfoScanStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelPhishingUrlInfoScanStatus is not found in the empty JSON string", IntelPhishingUrlInfoScanStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelPhishingUrlInfoScanStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelPhishingUrlInfoScanStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("last_processed") != null && !jsonObj.get("last_processed").isJsonNull()) && !jsonObj.get("last_processed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_processed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_processed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelPhishingUrlInfoScanStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelPhishingUrlInfoScanStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelPhishingUrlInfoScanStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelPhishingUrlInfoScanStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelPhishingUrlInfoScanStatus>() {
           @Override
           public void write(JsonWriter out, IntelPhishingUrlInfoScanStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelPhishingUrlInfoScanStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntelPhishingUrlInfoScanStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntelPhishingUrlInfoScanStatus
  * @throws IOException if the JSON string is invalid with respect to IntelPhishingUrlInfoScanStatus
  */
  public static IntelPhishingUrlInfoScanStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelPhishingUrlInfoScanStatus.class);
  }

 /**
  * Convert an instance of IntelPhishingUrlInfoScanStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

