/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner;
import cloudflare.sdk.models.RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations;
import cloudflare.sdk.models.RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * RadarGetAnnotationsOutages200ResponseResultAnnotationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetAnnotationsOutages200ResponseResultAnnotationsInner {
  public static final String SERIALIZED_NAME_ASNS = "asns";
  @SerializedName(SERIALIZED_NAME_ASNS)
  private List<Integer> asns = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASNS_DETAILS = "asnsDetails";
  @SerializedName(SERIALIZED_NAME_ASNS_DETAILS)
  private List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner> asnsDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINKED_URL = "linkedUrl";
  @SerializedName(SERIALIZED_NAME_LINKED_URL)
  private String linkedUrl;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS_DETAILS = "locationsDetails";
  @SerializedName(SERIALIZED_NAME_LOCATIONS_DETAILS)
  private List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations> locationsDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTAGE = "outage";
  @SerializedName(SERIALIZED_NAME_OUTAGE)
  private RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage outage;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner() {
  }

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner asns(List<Integer> asns) {
    this.asns = asns;
    return this;
  }

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner addAsnsItem(Integer asnsItem) {
    if (this.asns == null) {
      this.asns = new ArrayList<>();
    }
    this.asns.add(asnsItem);
    return this;
  }

   /**
   * Get asns
   * @return asns
  **/
  @javax.annotation.Nonnull
  public List<Integer> getAsns() {
    return asns;
  }

  public void setAsns(List<Integer> asns) {
    this.asns = asns;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner asnsDetails(List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner> asnsDetails) {
    this.asnsDetails = asnsDetails;
    return this;
  }

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner addAsnsDetailsItem(RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner asnsDetailsItem) {
    if (this.asnsDetails == null) {
      this.asnsDetails = new ArrayList<>();
    }
    this.asnsDetails.add(asnsDetailsItem);
    return this;
  }

   /**
   * Get asnsDetails
   * @return asnsDetails
  **/
  @javax.annotation.Nonnull
  public List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner> getAsnsDetails() {
    return asnsDetails;
  }

  public void setAsnsDetails(List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner> asnsDetails) {
    this.asnsDetails = asnsDetails;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @javax.annotation.Nonnull
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner linkedUrl(String linkedUrl) {
    this.linkedUrl = linkedUrl;
    return this;
  }

   /**
   * Get linkedUrl
   * @return linkedUrl
  **/
  @javax.annotation.Nullable
  public String getLinkedUrl() {
    return linkedUrl;
  }

  public void setLinkedUrl(String linkedUrl) {
    this.linkedUrl = linkedUrl;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nonnull
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner locationsDetails(List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations> locationsDetails) {
    this.locationsDetails = locationsDetails;
    return this;
  }

  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner addLocationsDetailsItem(RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations locationsDetailsItem) {
    if (this.locationsDetails == null) {
      this.locationsDetails = new ArrayList<>();
    }
    this.locationsDetails.add(locationsDetailsItem);
    return this;
  }

   /**
   * Get locationsDetails
   * @return locationsDetails
  **/
  @javax.annotation.Nonnull
  public List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations> getLocationsDetails() {
    return locationsDetails;
  }

  public void setLocationsDetails(List<RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations> locationsDetails) {
    this.locationsDetails = locationsDetails;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner outage(RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage outage) {
    this.outage = outage;
    return this;
  }

   /**
   * Get outage
   * @return outage
  **/
  @javax.annotation.Nonnull
  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage getOutage() {
    return outage;
  }

  public void setOutage(RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage outage) {
    this.outage = outage;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetAnnotationsOutages200ResponseResultAnnotationsInner radarGetAnnotationsOutages200ResponseResultAnnotationsInner = (RadarGetAnnotationsOutages200ResponseResultAnnotationsInner) o;
    return Objects.equals(this.asns, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.asns) &&
        Objects.equals(this.asnsDetails, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.asnsDetails) &&
        Objects.equals(this.dataSource, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.dataSource) &&
        Objects.equals(this.description, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.description) &&
        Objects.equals(this.endDate, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.endDate) &&
        Objects.equals(this.eventType, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.eventType) &&
        Objects.equals(this.id, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.id) &&
        Objects.equals(this.linkedUrl, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.linkedUrl) &&
        Objects.equals(this.locations, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.locations) &&
        Objects.equals(this.locationsDetails, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.locationsDetails) &&
        Objects.equals(this.outage, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.outage) &&
        Objects.equals(this.scope, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.scope) &&
        Objects.equals(this.startDate, radarGetAnnotationsOutages200ResponseResultAnnotationsInner.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asns, asnsDetails, dataSource, description, endDate, eventType, id, linkedUrl, locations, locationsDetails, outage, scope, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetAnnotationsOutages200ResponseResultAnnotationsInner {\n");
    sb.append("    asns: ").append(toIndentedString(asns)).append("\n");
    sb.append("    asnsDetails: ").append(toIndentedString(asnsDetails)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    linkedUrl: ").append(toIndentedString(linkedUrl)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    locationsDetails: ").append(toIndentedString(locationsDetails)).append("\n");
    sb.append("    outage: ").append(toIndentedString(outage)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asns");
    openapiFields.add("asnsDetails");
    openapiFields.add("dataSource");
    openapiFields.add("description");
    openapiFields.add("endDate");
    openapiFields.add("eventType");
    openapiFields.add("id");
    openapiFields.add("linkedUrl");
    openapiFields.add("locations");
    openapiFields.add("locationsDetails");
    openapiFields.add("outage");
    openapiFields.add("scope");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asns");
    openapiRequiredFields.add("asnsDetails");
    openapiRequiredFields.add("dataSource");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("locations");
    openapiRequiredFields.add("locationsDetails");
    openapiRequiredFields.add("outage");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetAnnotationsOutages200ResponseResultAnnotationsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetAnnotationsOutages200ResponseResultAnnotationsInner is not found in the empty JSON string", RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetAnnotationsOutages200ResponseResultAnnotationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("asns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("asns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `asns` to be an array in the JSON string but got `%s`", jsonObj.get("asns").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("asnsDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnsDetails` to be an array in the JSON string but got `%s`", jsonObj.get("asnsDetails").toString()));
      }

      JsonArray jsonArrayasnsDetails = jsonObj.getAsJsonArray("asnsDetails");
      // validate the required field `asnsDetails` (array)
      for (int i = 0; i < jsonArrayasnsDetails.size(); i++) {
        RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInner.validateJsonElement(jsonArrayasnsDetails.get(i));
      };
      if (!jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("linkedUrl") != null && !jsonObj.get("linkedUrl").isJsonNull()) && !jsonObj.get("linkedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedUrl").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("locations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("locationsDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationsDetails` to be an array in the JSON string but got `%s`", jsonObj.get("locationsDetails").toString()));
      }

      JsonArray jsonArraylocationsDetails = jsonObj.getAsJsonArray("locationsDetails");
      // validate the required field `locationsDetails` (array)
      for (int i = 0; i < jsonArraylocationsDetails.size(); i++) {
        RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerAsnsDetailsInnerLocations.validateJsonElement(jsonArraylocationsDetails.get(i));
      };
      // validate the required field `outage`
      RadarGetAnnotationsOutages200ResponseResultAnnotationsInnerOutage.validateJsonElement(jsonObj.get("outage"));
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetAnnotationsOutages200ResponseResultAnnotationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetAnnotationsOutages200ResponseResultAnnotationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetAnnotationsOutages200ResponseResultAnnotationsInner>() {
           @Override
           public void write(JsonWriter out, RadarGetAnnotationsOutages200ResponseResultAnnotationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetAnnotationsOutages200ResponseResultAnnotationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetAnnotationsOutages200ResponseResultAnnotationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetAnnotationsOutages200ResponseResultAnnotationsInner
  * @throws IOException if the JSON string is invalid with respect to RadarGetAnnotationsOutages200ResponseResultAnnotationsInner
  */
  public static RadarGetAnnotationsOutages200ResponseResultAnnotationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetAnnotationsOutages200ResponseResultAnnotationsInner.class);
  }

 /**
  * Convert an instance of RadarGetAnnotationsOutages200ResponseResultAnnotationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

