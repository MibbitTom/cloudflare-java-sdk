/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * Geodata for tracing request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccountRequestTracerRequestTraceRequestContextGeoloc {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONTINENT = "continent";
  @SerializedName(SERIALIZED_NAME_CONTINENT)
  private String continent;

  public static final String SERIALIZED_NAME_IS_EU_COUNTRY = "is_eu_country";
  @SerializedName(SERIALIZED_NAME_IS_EU_COUNTRY)
  private Boolean isEuCountry;

  public static final String SERIALIZED_NAME_ISO_CODE = "iso_code";
  @SerializedName(SERIALIZED_NAME_ISO_CODE)
  private String isoCode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION_CODE = "region_code";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_SUBDIVISION2_ISO_CODE = "subdivision_2_iso_code";
  @SerializedName(SERIALIZED_NAME_SUBDIVISION2_ISO_CODE)
  private String subdivision2IsoCode;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public AccountRequestTracerRequestTraceRequestContextGeoloc() {
  }

  public AccountRequestTracerRequestTraceRequestContextGeoloc city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc continent(String continent) {
    this.continent = continent;
    return this;
  }

   /**
   * Get continent
   * @return continent
  **/
  @javax.annotation.Nullable
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc isEuCountry(Boolean isEuCountry) {
    this.isEuCountry = isEuCountry;
    return this;
  }

   /**
   * Get isEuCountry
   * @return isEuCountry
  **/
  @javax.annotation.Nullable
  public Boolean getIsEuCountry() {
    return isEuCountry;
  }

  public void setIsEuCountry(Boolean isEuCountry) {
    this.isEuCountry = isEuCountry;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc isoCode(String isoCode) {
    this.isoCode = isoCode;
    return this;
  }

   /**
   * Get isoCode
   * @return isoCode
  **/
  @javax.annotation.Nullable
  public String getIsoCode() {
    return isoCode;
  }

  public void setIsoCode(String isoCode) {
    this.isoCode = isoCode;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

   /**
   * Get regionCode
   * @return regionCode
  **/
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc subdivision2IsoCode(String subdivision2IsoCode) {
    this.subdivision2IsoCode = subdivision2IsoCode;
    return this;
  }

   /**
   * Get subdivision2IsoCode
   * @return subdivision2IsoCode
  **/
  @javax.annotation.Nullable
  public String getSubdivision2IsoCode() {
    return subdivision2IsoCode;
  }

  public void setSubdivision2IsoCode(String subdivision2IsoCode) {
    this.subdivision2IsoCode = subdivision2IsoCode;
  }


  public AccountRequestTracerRequestTraceRequestContextGeoloc timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountRequestTracerRequestTraceRequestContextGeoloc accountRequestTracerRequestTraceRequestContextGeoloc = (AccountRequestTracerRequestTraceRequestContextGeoloc) o;
    return Objects.equals(this.city, accountRequestTracerRequestTraceRequestContextGeoloc.city) &&
        Objects.equals(this.continent, accountRequestTracerRequestTraceRequestContextGeoloc.continent) &&
        Objects.equals(this.isEuCountry, accountRequestTracerRequestTraceRequestContextGeoloc.isEuCountry) &&
        Objects.equals(this.isoCode, accountRequestTracerRequestTraceRequestContextGeoloc.isoCode) &&
        Objects.equals(this.latitude, accountRequestTracerRequestTraceRequestContextGeoloc.latitude) &&
        Objects.equals(this.longitude, accountRequestTracerRequestTraceRequestContextGeoloc.longitude) &&
        Objects.equals(this.postalCode, accountRequestTracerRequestTraceRequestContextGeoloc.postalCode) &&
        Objects.equals(this.regionCode, accountRequestTracerRequestTraceRequestContextGeoloc.regionCode) &&
        Objects.equals(this.subdivision2IsoCode, accountRequestTracerRequestTraceRequestContextGeoloc.subdivision2IsoCode) &&
        Objects.equals(this.timezone, accountRequestTracerRequestTraceRequestContextGeoloc.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, continent, isEuCountry, isoCode, latitude, longitude, postalCode, regionCode, subdivision2IsoCode, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountRequestTracerRequestTraceRequestContextGeoloc {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    isEuCountry: ").append(toIndentedString(isEuCountry)).append("\n");
    sb.append("    isoCode: ").append(toIndentedString(isoCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    subdivision2IsoCode: ").append(toIndentedString(subdivision2IsoCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("continent");
    openapiFields.add("is_eu_country");
    openapiFields.add("iso_code");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("postal_code");
    openapiFields.add("region_code");
    openapiFields.add("subdivision_2_iso_code");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountRequestTracerRequestTraceRequestContextGeoloc
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountRequestTracerRequestTraceRequestContextGeoloc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountRequestTracerRequestTraceRequestContextGeoloc is not found in the empty JSON string", AccountRequestTracerRequestTraceRequestContextGeoloc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountRequestTracerRequestTraceRequestContextGeoloc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountRequestTracerRequestTraceRequestContextGeoloc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("continent") != null && !jsonObj.get("continent").isJsonNull()) && !jsonObj.get("continent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent").toString()));
      }
      if ((jsonObj.get("iso_code") != null && !jsonObj.get("iso_code").isJsonNull()) && !jsonObj.get("iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_code").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("region_code") != null && !jsonObj.get("region_code").isJsonNull()) && !jsonObj.get("region_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_code").toString()));
      }
      if ((jsonObj.get("subdivision_2_iso_code") != null && !jsonObj.get("subdivision_2_iso_code").isJsonNull()) && !jsonObj.get("subdivision_2_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdivision_2_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdivision_2_iso_code").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountRequestTracerRequestTraceRequestContextGeoloc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountRequestTracerRequestTraceRequestContextGeoloc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountRequestTracerRequestTraceRequestContextGeoloc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountRequestTracerRequestTraceRequestContextGeoloc.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountRequestTracerRequestTraceRequestContextGeoloc>() {
           @Override
           public void write(JsonWriter out, AccountRequestTracerRequestTraceRequestContextGeoloc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountRequestTracerRequestTraceRequestContextGeoloc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountRequestTracerRequestTraceRequestContextGeoloc given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountRequestTracerRequestTraceRequestContextGeoloc
  * @throws IOException if the JSON string is invalid with respect to AccountRequestTracerRequestTraceRequestContextGeoloc
  */
  public static AccountRequestTracerRequestTraceRequestContextGeoloc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountRequestTracerRequestTraceRequestContextGeoloc.class);
  }

 /**
  * Convert an instance of AccountRequestTracerRequestTraceRequestContextGeoloc to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

