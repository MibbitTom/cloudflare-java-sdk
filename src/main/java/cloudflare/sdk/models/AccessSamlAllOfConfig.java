/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.AccessSamlAllOfConfigHeaderAttributes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * AccessSamlAllOfConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessSamlAllOfConfig {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<String> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_ATTRIBUTE_NAME = "email_attribute_name";
  @SerializedName(SERIALIZED_NAME_EMAIL_ATTRIBUTE_NAME)
  private String emailAttributeName;

  public static final String SERIALIZED_NAME_HEADER_ATTRIBUTES = "header_attributes";
  @SerializedName(SERIALIZED_NAME_HEADER_ATTRIBUTES)
  private List<AccessSamlAllOfConfigHeaderAttributes> headerAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDP_PUBLIC_CERTS = "idp_public_certs";
  @SerializedName(SERIALIZED_NAME_IDP_PUBLIC_CERTS)
  private List<String> idpPublicCerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUER_URL = "issuer_url";
  @SerializedName(SERIALIZED_NAME_ISSUER_URL)
  private String issuerUrl;

  public static final String SERIALIZED_NAME_SIGN_REQUEST = "sign_request";
  @SerializedName(SERIALIZED_NAME_SIGN_REQUEST)
  private Boolean signRequest;

  public static final String SERIALIZED_NAME_SSO_TARGET_URL = "sso_target_url";
  @SerializedName(SERIALIZED_NAME_SSO_TARGET_URL)
  private String ssoTargetUrl;

  public AccessSamlAllOfConfig() {
  }

  public AccessSamlAllOfConfig attributes(List<String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public AccessSamlAllOfConfig addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
   * @return attributes
  **/
  @javax.annotation.Nullable
  public List<String> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<String> attributes) {
    this.attributes = attributes;
  }


  public AccessSamlAllOfConfig emailAttributeName(String emailAttributeName) {
    this.emailAttributeName = emailAttributeName;
    return this;
  }

   /**
   * The attribute name for email in the SAML response.
   * @return emailAttributeName
  **/
  @javax.annotation.Nullable
  public String getEmailAttributeName() {
    return emailAttributeName;
  }

  public void setEmailAttributeName(String emailAttributeName) {
    this.emailAttributeName = emailAttributeName;
  }


  public AccessSamlAllOfConfig headerAttributes(List<AccessSamlAllOfConfigHeaderAttributes> headerAttributes) {
    this.headerAttributes = headerAttributes;
    return this;
  }

  public AccessSamlAllOfConfig addHeaderAttributesItem(AccessSamlAllOfConfigHeaderAttributes headerAttributesItem) {
    if (this.headerAttributes == null) {
      this.headerAttributes = new ArrayList<>();
    }
    this.headerAttributes.add(headerAttributesItem);
    return this;
  }

   /**
   * Add a list of attribute names that will be returned in the response header from the Access callback.
   * @return headerAttributes
  **/
  @javax.annotation.Nullable
  public List<AccessSamlAllOfConfigHeaderAttributes> getHeaderAttributes() {
    return headerAttributes;
  }

  public void setHeaderAttributes(List<AccessSamlAllOfConfigHeaderAttributes> headerAttributes) {
    this.headerAttributes = headerAttributes;
  }


  public AccessSamlAllOfConfig idpPublicCerts(List<String> idpPublicCerts) {
    this.idpPublicCerts = idpPublicCerts;
    return this;
  }

  public AccessSamlAllOfConfig addIdpPublicCertsItem(String idpPublicCertsItem) {
    if (this.idpPublicCerts == null) {
      this.idpPublicCerts = new ArrayList<>();
    }
    this.idpPublicCerts.add(idpPublicCertsItem);
    return this;
  }

   /**
   * X509 certificate to verify the signature in the SAML authentication response
   * @return idpPublicCerts
  **/
  @javax.annotation.Nullable
  public List<String> getIdpPublicCerts() {
    return idpPublicCerts;
  }

  public void setIdpPublicCerts(List<String> idpPublicCerts) {
    this.idpPublicCerts = idpPublicCerts;
  }


  public AccessSamlAllOfConfig issuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
    return this;
  }

   /**
   * IdP Entity ID or Issuer URL
   * @return issuerUrl
  **/
  @javax.annotation.Nullable
  public String getIssuerUrl() {
    return issuerUrl;
  }

  public void setIssuerUrl(String issuerUrl) {
    this.issuerUrl = issuerUrl;
  }


  public AccessSamlAllOfConfig signRequest(Boolean signRequest) {
    this.signRequest = signRequest;
    return this;
  }

   /**
   * Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
   * @return signRequest
  **/
  @javax.annotation.Nullable
  public Boolean getSignRequest() {
    return signRequest;
  }

  public void setSignRequest(Boolean signRequest) {
    this.signRequest = signRequest;
  }


  public AccessSamlAllOfConfig ssoTargetUrl(String ssoTargetUrl) {
    this.ssoTargetUrl = ssoTargetUrl;
    return this;
  }

   /**
   * URL to send the SAML authentication requests to
   * @return ssoTargetUrl
  **/
  @javax.annotation.Nullable
  public String getSsoTargetUrl() {
    return ssoTargetUrl;
  }

  public void setSsoTargetUrl(String ssoTargetUrl) {
    this.ssoTargetUrl = ssoTargetUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessSamlAllOfConfig accessSamlAllOfConfig = (AccessSamlAllOfConfig) o;
    return Objects.equals(this.attributes, accessSamlAllOfConfig.attributes) &&
        Objects.equals(this.emailAttributeName, accessSamlAllOfConfig.emailAttributeName) &&
        Objects.equals(this.headerAttributes, accessSamlAllOfConfig.headerAttributes) &&
        Objects.equals(this.idpPublicCerts, accessSamlAllOfConfig.idpPublicCerts) &&
        Objects.equals(this.issuerUrl, accessSamlAllOfConfig.issuerUrl) &&
        Objects.equals(this.signRequest, accessSamlAllOfConfig.signRequest) &&
        Objects.equals(this.ssoTargetUrl, accessSamlAllOfConfig.ssoTargetUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, emailAttributeName, headerAttributes, idpPublicCerts, issuerUrl, signRequest, ssoTargetUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessSamlAllOfConfig {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    emailAttributeName: ").append(toIndentedString(emailAttributeName)).append("\n");
    sb.append("    headerAttributes: ").append(toIndentedString(headerAttributes)).append("\n");
    sb.append("    idpPublicCerts: ").append(toIndentedString(idpPublicCerts)).append("\n");
    sb.append("    issuerUrl: ").append(toIndentedString(issuerUrl)).append("\n");
    sb.append("    signRequest: ").append(toIndentedString(signRequest)).append("\n");
    sb.append("    ssoTargetUrl: ").append(toIndentedString(ssoTargetUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("email_attribute_name");
    openapiFields.add("header_attributes");
    openapiFields.add("idp_public_certs");
    openapiFields.add("issuer_url");
    openapiFields.add("sign_request");
    openapiFields.add("sso_target_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessSamlAllOfConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessSamlAllOfConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessSamlAllOfConfig is not found in the empty JSON string", AccessSamlAllOfConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessSamlAllOfConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessSamlAllOfConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull() && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("email_attribute_name") != null && !jsonObj.get("email_attribute_name").isJsonNull()) && !jsonObj.get("email_attribute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_attribute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_attribute_name").toString()));
      }
      if (jsonObj.get("header_attributes") != null && !jsonObj.get("header_attributes").isJsonNull()) {
        JsonArray jsonArrayheaderAttributes = jsonObj.getAsJsonArray("header_attributes");
        if (jsonArrayheaderAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("header_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `header_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("header_attributes").toString()));
          }

          // validate the optional field `header_attributes` (array)
          for (int i = 0; i < jsonArrayheaderAttributes.size(); i++) {
            AccessSamlAllOfConfigHeaderAttributes.validateJsonElement(jsonArrayheaderAttributes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("idp_public_certs") != null && !jsonObj.get("idp_public_certs").isJsonNull() && !jsonObj.get("idp_public_certs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_public_certs` to be an array in the JSON string but got `%s`", jsonObj.get("idp_public_certs").toString()));
      }
      if ((jsonObj.get("issuer_url") != null && !jsonObj.get("issuer_url").isJsonNull()) && !jsonObj.get("issuer_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_url").toString()));
      }
      if ((jsonObj.get("sso_target_url") != null && !jsonObj.get("sso_target_url").isJsonNull()) && !jsonObj.get("sso_target_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sso_target_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sso_target_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessSamlAllOfConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessSamlAllOfConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessSamlAllOfConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessSamlAllOfConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessSamlAllOfConfig>() {
           @Override
           public void write(JsonWriter out, AccessSamlAllOfConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessSamlAllOfConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessSamlAllOfConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessSamlAllOfConfig
  * @throws IOException if the JSON string is invalid with respect to AccessSamlAllOfConfig
  */
  public static AccessSamlAllOfConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessSamlAllOfConfig.class);
  }

 /**
  * Convert an instance of AccessSamlAllOfConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

