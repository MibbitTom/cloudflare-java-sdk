/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * Statuses for domain transfers into Cloudflare Registrar.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RegistrarApiTransferIn {
  public static final String SERIALIZED_NAME_ACCEPT_FOA = "accept_foa";
  @SerializedName(SERIALIZED_NAME_ACCEPT_FOA)
  private Object acceptFoa = null;

  public static final String SERIALIZED_NAME_APPROVE_TRANSFER = "approve_transfer";
  @SerializedName(SERIALIZED_NAME_APPROVE_TRANSFER)
  private Object approveTransfer = null;

  public static final String SERIALIZED_NAME_CAN_CANCEL_TRANSFER = "can_cancel_transfer";
  @SerializedName(SERIALIZED_NAME_CAN_CANCEL_TRANSFER)
  private Boolean canCancelTransfer;

  public static final String SERIALIZED_NAME_DISABLE_PRIVACY = "disable_privacy";
  @SerializedName(SERIALIZED_NAME_DISABLE_PRIVACY)
  private Object disablePrivacy = null;

  public static final String SERIALIZED_NAME_ENTER_AUTH_CODE = "enter_auth_code";
  @SerializedName(SERIALIZED_NAME_ENTER_AUTH_CODE)
  private Object enterAuthCode = null;

  public static final String SERIALIZED_NAME_UNLOCK_DOMAIN = "unlock_domain";
  @SerializedName(SERIALIZED_NAME_UNLOCK_DOMAIN)
  private Object unlockDomain = null;

  public RegistrarApiTransferIn() {
  }

  public RegistrarApiTransferIn acceptFoa(Object acceptFoa) {
    this.acceptFoa = acceptFoa;
    return this;
  }

   /**
   * Form of authorization has been accepted by the registrant.
   * @return acceptFoa
  **/
  @javax.annotation.Nullable
  public Object getAcceptFoa() {
    return acceptFoa;
  }

  public void setAcceptFoa(Object acceptFoa) {
    this.acceptFoa = acceptFoa;
  }


  public RegistrarApiTransferIn approveTransfer(Object approveTransfer) {
    this.approveTransfer = approveTransfer;
    return this;
  }

   /**
   * Shows transfer status with the registry.
   * @return approveTransfer
  **/
  @javax.annotation.Nullable
  public Object getApproveTransfer() {
    return approveTransfer;
  }

  public void setApproveTransfer(Object approveTransfer) {
    this.approveTransfer = approveTransfer;
  }


  public RegistrarApiTransferIn canCancelTransfer(Boolean canCancelTransfer) {
    this.canCancelTransfer = canCancelTransfer;
    return this;
  }

   /**
   * Indicates if cancellation is still possible.
   * @return canCancelTransfer
  **/
  @javax.annotation.Nullable
  public Boolean getCanCancelTransfer() {
    return canCancelTransfer;
  }

  public void setCanCancelTransfer(Boolean canCancelTransfer) {
    this.canCancelTransfer = canCancelTransfer;
  }


  public RegistrarApiTransferIn disablePrivacy(Object disablePrivacy) {
    this.disablePrivacy = disablePrivacy;
    return this;
  }

   /**
   * Privacy guards are disabled at the foreign registrar.
   * @return disablePrivacy
  **/
  @javax.annotation.Nullable
  public Object getDisablePrivacy() {
    return disablePrivacy;
  }

  public void setDisablePrivacy(Object disablePrivacy) {
    this.disablePrivacy = disablePrivacy;
  }


  public RegistrarApiTransferIn enterAuthCode(Object enterAuthCode) {
    this.enterAuthCode = enterAuthCode;
    return this;
  }

   /**
   * Auth code has been entered and verified.
   * @return enterAuthCode
  **/
  @javax.annotation.Nullable
  public Object getEnterAuthCode() {
    return enterAuthCode;
  }

  public void setEnterAuthCode(Object enterAuthCode) {
    this.enterAuthCode = enterAuthCode;
  }


  public RegistrarApiTransferIn unlockDomain(Object unlockDomain) {
    this.unlockDomain = unlockDomain;
    return this;
  }

   /**
   * Domain is unlocked at the foreign registrar.
   * @return unlockDomain
  **/
  @javax.annotation.Nullable
  public Object getUnlockDomain() {
    return unlockDomain;
  }

  public void setUnlockDomain(Object unlockDomain) {
    this.unlockDomain = unlockDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrarApiTransferIn registrarApiTransferIn = (RegistrarApiTransferIn) o;
    return Objects.equals(this.acceptFoa, registrarApiTransferIn.acceptFoa) &&
        Objects.equals(this.approveTransfer, registrarApiTransferIn.approveTransfer) &&
        Objects.equals(this.canCancelTransfer, registrarApiTransferIn.canCancelTransfer) &&
        Objects.equals(this.disablePrivacy, registrarApiTransferIn.disablePrivacy) &&
        Objects.equals(this.enterAuthCode, registrarApiTransferIn.enterAuthCode) &&
        Objects.equals(this.unlockDomain, registrarApiTransferIn.unlockDomain);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptFoa, approveTransfer, canCancelTransfer, disablePrivacy, enterAuthCode, unlockDomain);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrarApiTransferIn {\n");
    sb.append("    acceptFoa: ").append(toIndentedString(acceptFoa)).append("\n");
    sb.append("    approveTransfer: ").append(toIndentedString(approveTransfer)).append("\n");
    sb.append("    canCancelTransfer: ").append(toIndentedString(canCancelTransfer)).append("\n");
    sb.append("    disablePrivacy: ").append(toIndentedString(disablePrivacy)).append("\n");
    sb.append("    enterAuthCode: ").append(toIndentedString(enterAuthCode)).append("\n");
    sb.append("    unlockDomain: ").append(toIndentedString(unlockDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_foa");
    openapiFields.add("approve_transfer");
    openapiFields.add("can_cancel_transfer");
    openapiFields.add("disable_privacy");
    openapiFields.add("enter_auth_code");
    openapiFields.add("unlock_domain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RegistrarApiTransferIn
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrarApiTransferIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrarApiTransferIn is not found in the empty JSON string", RegistrarApiTransferIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrarApiTransferIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrarApiTransferIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrarApiTransferIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrarApiTransferIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrarApiTransferIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrarApiTransferIn.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrarApiTransferIn>() {
           @Override
           public void write(JsonWriter out, RegistrarApiTransferIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrarApiTransferIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegistrarApiTransferIn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegistrarApiTransferIn
  * @throws IOException if the JSON string is invalid with respect to RegistrarApiTransferIn
  */
  public static RegistrarApiTransferIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrarApiTransferIn.class);
  }

 /**
  * Convert an instance of RegistrarApiTransferIn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

