/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * Block page layout settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZeroTrustGatewayBlockPageSettings {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FOOTER_TEXT = "footer_text";
  @SerializedName(SERIALIZED_NAME_FOOTER_TEXT)
  private String footerText;

  public static final String SERIALIZED_NAME_HEADER_TEXT = "header_text";
  @SerializedName(SERIALIZED_NAME_HEADER_TEXT)
  private String headerText;

  public static final String SERIALIZED_NAME_LOGO_PATH = "logo_path";
  @SerializedName(SERIALIZED_NAME_LOGO_PATH)
  private String logoPath;

  public static final String SERIALIZED_NAME_MAILTO_ADDRESS = "mailto_address";
  @SerializedName(SERIALIZED_NAME_MAILTO_ADDRESS)
  private String mailtoAddress;

  public static final String SERIALIZED_NAME_MAILTO_SUBJECT = "mailto_subject";
  @SerializedName(SERIALIZED_NAME_MAILTO_SUBJECT)
  private String mailtoSubject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUPPRESS_FOOTER = "suppress_footer";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_FOOTER)
  private Boolean suppressFooter;

  public ZeroTrustGatewayBlockPageSettings() {
  }

  public ZeroTrustGatewayBlockPageSettings backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Block page background color in #rrggbb format.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public ZeroTrustGatewayBlockPageSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable only cipher suites and TLS versions compliant with FIPS 140-2.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ZeroTrustGatewayBlockPageSettings footerText(String footerText) {
    this.footerText = footerText;
    return this;
  }

   /**
   * Block page footer text.
   * @return footerText
  **/
  @javax.annotation.Nullable
  public String getFooterText() {
    return footerText;
  }

  public void setFooterText(String footerText) {
    this.footerText = footerText;
  }


  public ZeroTrustGatewayBlockPageSettings headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

   /**
   * Block page header text.
   * @return headerText
  **/
  @javax.annotation.Nullable
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }


  public ZeroTrustGatewayBlockPageSettings logoPath(String logoPath) {
    this.logoPath = logoPath;
    return this;
  }

   /**
   * Full URL to the logo file.
   * @return logoPath
  **/
  @javax.annotation.Nullable
  public String getLogoPath() {
    return logoPath;
  }

  public void setLogoPath(String logoPath) {
    this.logoPath = logoPath;
  }


  public ZeroTrustGatewayBlockPageSettings mailtoAddress(String mailtoAddress) {
    this.mailtoAddress = mailtoAddress;
    return this;
  }

   /**
   * Admin email for users to contact.
   * @return mailtoAddress
  **/
  @javax.annotation.Nullable
  public String getMailtoAddress() {
    return mailtoAddress;
  }

  public void setMailtoAddress(String mailtoAddress) {
    this.mailtoAddress = mailtoAddress;
  }


  public ZeroTrustGatewayBlockPageSettings mailtoSubject(String mailtoSubject) {
    this.mailtoSubject = mailtoSubject;
    return this;
  }

   /**
   * Subject line for emails created from block page.
   * @return mailtoSubject
  **/
  @javax.annotation.Nullable
  public String getMailtoSubject() {
    return mailtoSubject;
  }

  public void setMailtoSubject(String mailtoSubject) {
    this.mailtoSubject = mailtoSubject;
  }


  public ZeroTrustGatewayBlockPageSettings name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Block page title.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ZeroTrustGatewayBlockPageSettings suppressFooter(Boolean suppressFooter) {
    this.suppressFooter = suppressFooter;
    return this;
  }

   /**
   * Suppress detailed info at the bottom of the block page.
   * @return suppressFooter
  **/
  @javax.annotation.Nullable
  public Boolean getSuppressFooter() {
    return suppressFooter;
  }

  public void setSuppressFooter(Boolean suppressFooter) {
    this.suppressFooter = suppressFooter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZeroTrustGatewayBlockPageSettings zeroTrustGatewayBlockPageSettings = (ZeroTrustGatewayBlockPageSettings) o;
    return Objects.equals(this.backgroundColor, zeroTrustGatewayBlockPageSettings.backgroundColor) &&
        Objects.equals(this.enabled, zeroTrustGatewayBlockPageSettings.enabled) &&
        Objects.equals(this.footerText, zeroTrustGatewayBlockPageSettings.footerText) &&
        Objects.equals(this.headerText, zeroTrustGatewayBlockPageSettings.headerText) &&
        Objects.equals(this.logoPath, zeroTrustGatewayBlockPageSettings.logoPath) &&
        Objects.equals(this.mailtoAddress, zeroTrustGatewayBlockPageSettings.mailtoAddress) &&
        Objects.equals(this.mailtoSubject, zeroTrustGatewayBlockPageSettings.mailtoSubject) &&
        Objects.equals(this.name, zeroTrustGatewayBlockPageSettings.name) &&
        Objects.equals(this.suppressFooter, zeroTrustGatewayBlockPageSettings.suppressFooter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, enabled, footerText, headerText, logoPath, mailtoAddress, mailtoSubject, name, suppressFooter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZeroTrustGatewayBlockPageSettings {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    footerText: ").append(toIndentedString(footerText)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    logoPath: ").append(toIndentedString(logoPath)).append("\n");
    sb.append("    mailtoAddress: ").append(toIndentedString(mailtoAddress)).append("\n");
    sb.append("    mailtoSubject: ").append(toIndentedString(mailtoSubject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    suppressFooter: ").append(toIndentedString(suppressFooter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background_color");
    openapiFields.add("enabled");
    openapiFields.add("footer_text");
    openapiFields.add("header_text");
    openapiFields.add("logo_path");
    openapiFields.add("mailto_address");
    openapiFields.add("mailto_subject");
    openapiFields.add("name");
    openapiFields.add("suppress_footer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZeroTrustGatewayBlockPageSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZeroTrustGatewayBlockPageSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZeroTrustGatewayBlockPageSettings is not found in the empty JSON string", ZeroTrustGatewayBlockPageSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZeroTrustGatewayBlockPageSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZeroTrustGatewayBlockPageSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      if ((jsonObj.get("footer_text") != null && !jsonObj.get("footer_text").isJsonNull()) && !jsonObj.get("footer_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_text").toString()));
      }
      if ((jsonObj.get("header_text") != null && !jsonObj.get("header_text").isJsonNull()) && !jsonObj.get("header_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_text").toString()));
      }
      if ((jsonObj.get("logo_path") != null && !jsonObj.get("logo_path").isJsonNull()) && !jsonObj.get("logo_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_path").toString()));
      }
      if ((jsonObj.get("mailto_address") != null && !jsonObj.get("mailto_address").isJsonNull()) && !jsonObj.get("mailto_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailto_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailto_address").toString()));
      }
      if ((jsonObj.get("mailto_subject") != null && !jsonObj.get("mailto_subject").isJsonNull()) && !jsonObj.get("mailto_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailto_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailto_subject").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZeroTrustGatewayBlockPageSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZeroTrustGatewayBlockPageSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZeroTrustGatewayBlockPageSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZeroTrustGatewayBlockPageSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ZeroTrustGatewayBlockPageSettings>() {
           @Override
           public void write(JsonWriter out, ZeroTrustGatewayBlockPageSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZeroTrustGatewayBlockPageSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZeroTrustGatewayBlockPageSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZeroTrustGatewayBlockPageSettings
  * @throws IOException if the JSON string is invalid with respect to ZeroTrustGatewayBlockPageSettings
  */
  public static ZeroTrustGatewayBlockPageSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZeroTrustGatewayBlockPageSettings.class);
  }

 /**
  * Convert an instance of ZeroTrustGatewayBlockPageSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

