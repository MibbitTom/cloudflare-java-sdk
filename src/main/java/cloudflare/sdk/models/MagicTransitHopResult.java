/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.MagicTransitNodeResult;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * MagicTransitHopResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicTransitHopResult {
  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<MagicTransitNodeResult> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKETS_LOST = "packets_lost";
  @SerializedName(SERIALIZED_NAME_PACKETS_LOST)
  private Integer packetsLost;

  public static final String SERIALIZED_NAME_PACKETS_SENT = "packets_sent";
  @SerializedName(SERIALIZED_NAME_PACKETS_SENT)
  private Integer packetsSent;

  public static final String SERIALIZED_NAME_PACKETS_TTL = "packets_ttl";
  @SerializedName(SERIALIZED_NAME_PACKETS_TTL)
  private Integer packetsTtl;

  public MagicTransitHopResult() {
  }

  public MagicTransitHopResult nodes(List<MagicTransitNodeResult> nodes) {
    this.nodes = nodes;
    return this;
  }

  public MagicTransitHopResult addNodesItem(MagicTransitNodeResult nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * An array of node objects.
   * @return nodes
  **/
  @javax.annotation.Nullable
  public List<MagicTransitNodeResult> getNodes() {
    return nodes;
  }

  public void setNodes(List<MagicTransitNodeResult> nodes) {
    this.nodes = nodes;
  }


  public MagicTransitHopResult packetsLost(Integer packetsLost) {
    this.packetsLost = packetsLost;
    return this;
  }

   /**
   * Number of packets where no response was received.
   * @return packetsLost
  **/
  @javax.annotation.Nullable
  public Integer getPacketsLost() {
    return packetsLost;
  }

  public void setPacketsLost(Integer packetsLost) {
    this.packetsLost = packetsLost;
  }


  public MagicTransitHopResult packetsSent(Integer packetsSent) {
    this.packetsSent = packetsSent;
    return this;
  }

   /**
   * Number of packets sent with specified TTL.
   * @return packetsSent
  **/
  @javax.annotation.Nullable
  public Integer getPacketsSent() {
    return packetsSent;
  }

  public void setPacketsSent(Integer packetsSent) {
    this.packetsSent = packetsSent;
  }


  public MagicTransitHopResult packetsTtl(Integer packetsTtl) {
    this.packetsTtl = packetsTtl;
    return this;
  }

   /**
   * The time to live (TTL).
   * @return packetsTtl
  **/
  @javax.annotation.Nullable
  public Integer getPacketsTtl() {
    return packetsTtl;
  }

  public void setPacketsTtl(Integer packetsTtl) {
    this.packetsTtl = packetsTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicTransitHopResult magicTransitHopResult = (MagicTransitHopResult) o;
    return Objects.equals(this.nodes, magicTransitHopResult.nodes) &&
        Objects.equals(this.packetsLost, magicTransitHopResult.packetsLost) &&
        Objects.equals(this.packetsSent, magicTransitHopResult.packetsSent) &&
        Objects.equals(this.packetsTtl, magicTransitHopResult.packetsTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, packetsLost, packetsSent, packetsTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicTransitHopResult {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    packetsLost: ").append(toIndentedString(packetsLost)).append("\n");
    sb.append("    packetsSent: ").append(toIndentedString(packetsSent)).append("\n");
    sb.append("    packetsTtl: ").append(toIndentedString(packetsTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodes");
    openapiFields.add("packets_lost");
    openapiFields.add("packets_sent");
    openapiFields.add("packets_ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicTransitHopResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicTransitHopResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicTransitHopResult is not found in the empty JSON string", MagicTransitHopResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicTransitHopResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicTransitHopResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            MagicTransitNodeResult.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicTransitHopResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicTransitHopResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicTransitHopResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicTransitHopResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicTransitHopResult>() {
           @Override
           public void write(JsonWriter out, MagicTransitHopResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicTransitHopResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicTransitHopResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicTransitHopResult
  * @throws IOException if the JSON string is invalid with respect to MagicTransitHopResult
  */
  public static MagicTransitHopResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicTransitHopResult.class);
  }

 /**
  * Convert an instance of MagicTransitHopResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

