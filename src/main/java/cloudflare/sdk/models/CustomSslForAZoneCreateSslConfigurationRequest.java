/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesBundleMethod;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesGeoRestrictions;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * CustomSslForAZoneCreateSslConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class CustomSslForAZoneCreateSslConfigurationRequest {
  public static final String SERIALIZED_NAME_BUNDLE_METHOD = "bundle_method";
  @SerializedName(SERIALIZED_NAME_BUNDLE_METHOD)
  private TlsCertificatesAndHostnamesBundleMethod bundleMethod = TlsCertificatesAndHostnamesBundleMethod.UBIQUITOUS;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_GEO_RESTRICTIONS = "geo_restrictions";
  @SerializedName(SERIALIZED_NAME_GEO_RESTRICTIONS)
  private TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "private_key";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TlsCertificatesAndHostnamesType type = TlsCertificatesAndHostnamesType.LEGACY_CUSTOM;

  public CustomSslForAZoneCreateSslConfigurationRequest() {
  }

  public CustomSslForAZoneCreateSslConfigurationRequest bundleMethod(TlsCertificatesAndHostnamesBundleMethod bundleMethod) {
    this.bundleMethod = bundleMethod;
    return this;
  }

   /**
   * Get bundleMethod
   * @return bundleMethod
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesBundleMethod getBundleMethod() {
    return bundleMethod;
  }

  public void setBundleMethod(TlsCertificatesAndHostnamesBundleMethod bundleMethod) {
    this.bundleMethod = bundleMethod;
  }


  public CustomSslForAZoneCreateSslConfigurationRequest certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * The zone&#39;s SSL certificate or certificate and the intermediate(s).
   * @return certificate
  **/
  @javax.annotation.Nonnull
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public CustomSslForAZoneCreateSslConfigurationRequest geoRestrictions(TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions) {
    this.geoRestrictions = geoRestrictions;
    return this;
  }

   /**
   * Get geoRestrictions
   * @return geoRestrictions
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesGeoRestrictions getGeoRestrictions() {
    return geoRestrictions;
  }

  public void setGeoRestrictions(TlsCertificatesAndHostnamesGeoRestrictions geoRestrictions) {
    this.geoRestrictions = geoRestrictions;
  }


  public CustomSslForAZoneCreateSslConfigurationRequest policy(String policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) can be chosen, such as &#39;country: IN&#39;, as well as &#39;region: EU&#39; which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
   * @return policy
  **/
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public CustomSslForAZoneCreateSslConfigurationRequest privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

   /**
   * The zone&#39;s private key.
   * @return privateKey
  **/
  @javax.annotation.Nonnull
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public CustomSslForAZoneCreateSslConfigurationRequest type(TlsCertificatesAndHostnamesType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesType getType() {
    return type;
  }

  public void setType(TlsCertificatesAndHostnamesType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomSslForAZoneCreateSslConfigurationRequest customSslForAZoneCreateSslConfigurationRequest = (CustomSslForAZoneCreateSslConfigurationRequest) o;
    return Objects.equals(this.bundleMethod, customSslForAZoneCreateSslConfigurationRequest.bundleMethod) &&
        Objects.equals(this.certificate, customSslForAZoneCreateSslConfigurationRequest.certificate) &&
        Objects.equals(this.geoRestrictions, customSslForAZoneCreateSslConfigurationRequest.geoRestrictions) &&
        Objects.equals(this.policy, customSslForAZoneCreateSslConfigurationRequest.policy) &&
        Objects.equals(this.privateKey, customSslForAZoneCreateSslConfigurationRequest.privateKey) &&
        Objects.equals(this.type, customSslForAZoneCreateSslConfigurationRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleMethod, certificate, geoRestrictions, policy, privateKey, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomSslForAZoneCreateSslConfigurationRequest {\n");
    sb.append("    bundleMethod: ").append(toIndentedString(bundleMethod)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    geoRestrictions: ").append(toIndentedString(geoRestrictions)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundle_method");
    openapiFields.add("certificate");
    openapiFields.add("geo_restrictions");
    openapiFields.add("policy");
    openapiFields.add("private_key");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("certificate");
    openapiRequiredFields.add("private_key");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomSslForAZoneCreateSslConfigurationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomSslForAZoneCreateSslConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomSslForAZoneCreateSslConfigurationRequest is not found in the empty JSON string", CustomSslForAZoneCreateSslConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomSslForAZoneCreateSslConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomSslForAZoneCreateSslConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomSslForAZoneCreateSslConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bundle_method`
      if (jsonObj.get("bundle_method") != null && !jsonObj.get("bundle_method").isJsonNull()) {
        TlsCertificatesAndHostnamesBundleMethod.validateJsonElement(jsonObj.get("bundle_method"));
      }
      if (!jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      // validate the optional field `geo_restrictions`
      if (jsonObj.get("geo_restrictions") != null && !jsonObj.get("geo_restrictions").isJsonNull()) {
        TlsCertificatesAndHostnamesGeoRestrictions.validateJsonElement(jsonObj.get("geo_restrictions"));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      if (!jsonObj.get("private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TlsCertificatesAndHostnamesType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomSslForAZoneCreateSslConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomSslForAZoneCreateSslConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomSslForAZoneCreateSslConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomSslForAZoneCreateSslConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomSslForAZoneCreateSslConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, CustomSslForAZoneCreateSslConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomSslForAZoneCreateSslConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomSslForAZoneCreateSslConfigurationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomSslForAZoneCreateSslConfigurationRequest
  * @throws IOException if the JSON string is invalid with respect to CustomSslForAZoneCreateSslConfigurationRequest
  */
  public static CustomSslForAZoneCreateSslConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomSslForAZoneCreateSslConfigurationRequest.class);
  }

 /**
  * Convert an instance of CustomSslForAZoneCreateSslConfigurationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

