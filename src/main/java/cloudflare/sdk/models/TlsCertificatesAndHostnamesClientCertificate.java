/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TlsCertificatesAndHostnamesClientCertificate
 */
@JsonPropertyOrder({
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_CERTIFICATE,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_CERTIFICATE_AUTHORITY,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_COMMON_NAME,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_COUNTRY,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_CSR,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_EXPIRES_ON,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_FINGERPRINT_SHA256,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_ID,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_ISSUED_ON,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_LOCATION,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_ORGANIZATION,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_ORGANIZATIONAL_UNIT,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_SERIAL_NUMBER,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_SIGNATURE,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_SKI,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_STATE,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_STATUS,
  TlsCertificatesAndHostnamesClientCertificate.JSON_PROPERTY_VALIDITY_DAYS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-21T11:53:03.004303930+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesClientCertificate {
  public static final String JSON_PROPERTY_CERTIFICATE = "certificate";
  private String certificate;

  public static final String JSON_PROPERTY_CERTIFICATE_AUTHORITY = "certificate_authority";
  private TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority;

  public static final String JSON_PROPERTY_COMMON_NAME = "common_name";
  private String commonName;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public static final String JSON_PROPERTY_CSR = "csr";
  private String csr;

  public static final String JSON_PROPERTY_EXPIRES_ON = "expires_on";
  private String expiresOn;

  public static final String JSON_PROPERTY_FINGERPRINT_SHA256 = "fingerprint_sha256";
  private String fingerprintSha256;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_ISSUED_ON = "issued_on";
  private String issuedOn;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_ORGANIZATION = "organization";
  private String organization;

  public static final String JSON_PROPERTY_ORGANIZATIONAL_UNIT = "organizational_unit";
  private String organizationalUnit;

  public static final String JSON_PROPERTY_SERIAL_NUMBER = "serial_number";
  private String serialNumber;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_SKI = "ski";
  private String ski;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state;

  public static final String JSON_PROPERTY_STATUS = "status";
  private TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status;

  public static final String JSON_PROPERTY_VALIDITY_DAYS = "validity_days";
  private Integer validityDays;

  public TlsCertificatesAndHostnamesClientCertificate() { 
  }

  @JsonCreator
  public TlsCertificatesAndHostnamesClientCertificate(
    @JsonProperty(JSON_PROPERTY_CERTIFICATE) String certificate, 
    @JsonProperty(JSON_PROPERTY_COMMON_NAME) String commonName, 
    @JsonProperty(JSON_PROPERTY_COUNTRY) String country, 
    @JsonProperty(JSON_PROPERTY_EXPIRES_ON) String expiresOn, 
    @JsonProperty(JSON_PROPERTY_FINGERPRINT_SHA256) String fingerprintSha256, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_ISSUED_ON) String issuedOn, 
    @JsonProperty(JSON_PROPERTY_LOCATION) String location, 
    @JsonProperty(JSON_PROPERTY_ORGANIZATION) String organization, 
    @JsonProperty(JSON_PROPERTY_ORGANIZATIONAL_UNIT) String organizationalUnit, 
    @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER) String serialNumber, 
    @JsonProperty(JSON_PROPERTY_SIGNATURE) String signature, 
    @JsonProperty(JSON_PROPERTY_SKI) String ski, 
    @JsonProperty(JSON_PROPERTY_STATE) String state
  ) {
  this();
    this.certificate = certificate;
    this.commonName = commonName;
    this.country = country;
    this.expiresOn = expiresOn;
    this.fingerprintSha256 = fingerprintSha256;
    this.id = id;
    this.issuedOn = issuedOn;
    this.location = location;
    this.organization = organization;
    this.organizationalUnit = organizationalUnit;
    this.serialNumber = serialNumber;
    this.signature = signature;
    this.ski = ski;
    this.state = state;
  }

   /**
   * The Client Certificate PEM
   * @return certificate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCertificate() {
    return certificate;
  }




  public TlsCertificatesAndHostnamesClientCertificate certificateAuthority(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CERTIFICATE_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority getCertificateAuthority() {
    return certificateAuthority;
  }


  @JsonProperty(JSON_PROPERTY_CERTIFICATE_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCertificateAuthority(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


   /**
   * Common Name of the Client Certificate
   * @return commonName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMON_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommonName() {
    return commonName;
  }




   /**
   * Country, provided by the CSR
   * @return country
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }




  public TlsCertificatesAndHostnamesClientCertificate csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The Certificate Signing Request (CSR). Must be newline-encoded.
   * @return csr
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CSR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCsr() {
    return csr;
  }


  @JsonProperty(JSON_PROPERTY_CSR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCsr(String csr) {
    this.csr = csr;
  }


   /**
   * Date that the Client Certificate expires
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpiresOn() {
    return expiresOn;
  }




   /**
   * Unique identifier of the Client Certificate
   * @return fingerprintSha256
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINT_SHA256)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFingerprintSha256() {
    return fingerprintSha256;
  }




   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * Date that the Client Certificate was issued by the Certificate Authority
   * @return issuedOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssuedOn() {
    return issuedOn;
  }




   /**
   * Location, provided by the CSR
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }




   /**
   * Organization, provided by the CSR
   * @return organization
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORGANIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOrganization() {
    return organization;
  }




   /**
   * Organizational Unit, provided by the CSR
   * @return organizationalUnit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORGANIZATIONAL_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOrganizationalUnit() {
    return organizationalUnit;
  }




   /**
   * The serial number on the created Client Certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSerialNumber() {
    return serialNumber;
  }




   /**
   * The type of hash used for the Client Certificate..
   * @return signature
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignature() {
    return signature;
  }




   /**
   * Subject Key Identifier
   * @return ski
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSki() {
    return ski;
  }




   /**
   * State, provided by the CSR
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }




  public TlsCertificatesAndHostnamesClientCertificate status(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status) {
    this.status = status;
  }


  public TlsCertificatesAndHostnamesClientCertificate validityDays(Integer validityDays) {
    this.validityDays = validityDays;
    return this;
  }

   /**
   * The number of days the Client Certificate will be valid after the issued_on date
   * @return validityDays
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDITY_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getValidityDays() {
    return validityDays;
  }


  @JsonProperty(JSON_PROPERTY_VALIDITY_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidityDays(Integer validityDays) {
    this.validityDays = validityDays;
  }


  /**
   * Return true if this tls-certificates-and-hostnames_client_certificate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesClientCertificate tlsCertificatesAndHostnamesClientCertificate = (TlsCertificatesAndHostnamesClientCertificate) o;
    return Objects.equals(this.certificate, tlsCertificatesAndHostnamesClientCertificate.certificate) &&
        Objects.equals(this.certificateAuthority, tlsCertificatesAndHostnamesClientCertificate.certificateAuthority) &&
        Objects.equals(this.commonName, tlsCertificatesAndHostnamesClientCertificate.commonName) &&
        Objects.equals(this.country, tlsCertificatesAndHostnamesClientCertificate.country) &&
        Objects.equals(this.csr, tlsCertificatesAndHostnamesClientCertificate.csr) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesClientCertificate.expiresOn) &&
        Objects.equals(this.fingerprintSha256, tlsCertificatesAndHostnamesClientCertificate.fingerprintSha256) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesClientCertificate.id) &&
        Objects.equals(this.issuedOn, tlsCertificatesAndHostnamesClientCertificate.issuedOn) &&
        Objects.equals(this.location, tlsCertificatesAndHostnamesClientCertificate.location) &&
        Objects.equals(this.organization, tlsCertificatesAndHostnamesClientCertificate.organization) &&
        Objects.equals(this.organizationalUnit, tlsCertificatesAndHostnamesClientCertificate.organizationalUnit) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesClientCertificate.serialNumber) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesClientCertificate.signature) &&
        Objects.equals(this.ski, tlsCertificatesAndHostnamesClientCertificate.ski) &&
        Objects.equals(this.state, tlsCertificatesAndHostnamesClientCertificate.state) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesClientCertificate.status) &&
        Objects.equals(this.validityDays, tlsCertificatesAndHostnamesClientCertificate.validityDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, certificateAuthority, commonName, country, csr, expiresOn, fingerprintSha256, id, issuedOn, location, organization, organizationalUnit, serialNumber, signature, ski, state, status, validityDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesClientCertificate {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    fingerprintSha256: ").append(toIndentedString(fingerprintSha256)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuedOn: ").append(toIndentedString(issuedOn)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    organizationalUnit: ").append(toIndentedString(organizationalUnit)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    ski: ").append(toIndentedString(ski)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    validityDays: ").append(toIndentedString(validityDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `certificate` to the URL query string
    if (getCertificate() != null) {
      joiner.add(String.format("%scertificate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCertificate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `certificate_authority` to the URL query string
    if (getCertificateAuthority() != null) {
      joiner.add(getCertificateAuthority().toUrlQueryString(prefix + "certificate_authority" + suffix));
    }

    // add `common_name` to the URL query string
    if (getCommonName() != null) {
      joiner.add(String.format("%scommon_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommonName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `country` to the URL query string
    if (getCountry() != null) {
      joiner.add(String.format("%scountry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCountry()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `csr` to the URL query string
    if (getCsr() != null) {
      joiner.add(String.format("%scsr%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCsr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_on` to the URL query string
    if (getExpiresOn() != null) {
      joiner.add(String.format("%sexpires_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fingerprint_sha256` to the URL query string
    if (getFingerprintSha256() != null) {
      joiner.add(String.format("%sfingerprint_sha256%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFingerprintSha256()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `issued_on` to the URL query string
    if (getIssuedOn() != null) {
      joiner.add(String.format("%sissued_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIssuedOn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `location` to the URL query string
    if (getLocation() != null) {
      joiner.add(String.format("%slocation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLocation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `organization` to the URL query string
    if (getOrganization() != null) {
      joiner.add(String.format("%sorganization%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrganization()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `organizational_unit` to the URL query string
    if (getOrganizationalUnit() != null) {
      joiner.add(String.format("%sorganizational_unit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrganizationalUnit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serial_number` to the URL query string
    if (getSerialNumber() != null) {
      joiner.add(String.format("%sserial_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSerialNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(String.format("%ssignature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ski` to the URL query string
    if (getSki() != null) {
      joiner.add(String.format("%sski%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSki()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `validity_days` to the URL query string
    if (getValidityDays() != null) {
      joiner.add(String.format("%svalidity_days%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValidityDays()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

