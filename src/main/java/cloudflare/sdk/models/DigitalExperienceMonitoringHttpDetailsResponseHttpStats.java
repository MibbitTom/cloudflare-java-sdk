/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner;
import cloudflare.sdk.models.DigitalExperienceMonitoringTestStatOverTime;
import cloudflare.sdk.models.DigitalExperienceMonitoringTestStatPctOverTime;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * DigitalExperienceMonitoringHttpDetailsResponseHttpStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringHttpDetailsResponseHttpStats {
  public static final String SERIALIZED_NAME_AVAILABILITY_PCT = "availabilityPct";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_PCT)
  private DigitalExperienceMonitoringTestStatPctOverTime availabilityPct;

  public static final String SERIALIZED_NAME_DNS_RESPONSE_TIME_MS = "dnsResponseTimeMs";
  @SerializedName(SERIALIZED_NAME_DNS_RESPONSE_TIME_MS)
  private DigitalExperienceMonitoringTestStatOverTime dnsResponseTimeMs;

  public static final String SERIALIZED_NAME_HTTP_STATUS_CODE = "httpStatusCode";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_CODE)
  private List<DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner> httpStatusCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_FETCH_TIME_MS = "resourceFetchTimeMs";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FETCH_TIME_MS)
  private DigitalExperienceMonitoringTestStatOverTime resourceFetchTimeMs;

  public static final String SERIALIZED_NAME_SERVER_RESPONSE_TIME_MS = "serverResponseTimeMs";
  @SerializedName(SERIALIZED_NAME_SERVER_RESPONSE_TIME_MS)
  private DigitalExperienceMonitoringTestStatOverTime serverResponseTimeMs;

  public static final String SERIALIZED_NAME_UNIQUE_DEVICES_TOTAL = "uniqueDevicesTotal";
  @SerializedName(SERIALIZED_NAME_UNIQUE_DEVICES_TOTAL)
  private Integer uniqueDevicesTotal;

  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats() {
  }

  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats availabilityPct(DigitalExperienceMonitoringTestStatPctOverTime availabilityPct) {
    this.availabilityPct = availabilityPct;
    return this;
  }

   /**
   * Get availabilityPct
   * @return availabilityPct
  **/
  @javax.annotation.Nonnull
  public DigitalExperienceMonitoringTestStatPctOverTime getAvailabilityPct() {
    return availabilityPct;
  }

  public void setAvailabilityPct(DigitalExperienceMonitoringTestStatPctOverTime availabilityPct) {
    this.availabilityPct = availabilityPct;
  }


  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats dnsResponseTimeMs(DigitalExperienceMonitoringTestStatOverTime dnsResponseTimeMs) {
    this.dnsResponseTimeMs = dnsResponseTimeMs;
    return this;
  }

   /**
   * Get dnsResponseTimeMs
   * @return dnsResponseTimeMs
  **/
  @javax.annotation.Nonnull
  public DigitalExperienceMonitoringTestStatOverTime getDnsResponseTimeMs() {
    return dnsResponseTimeMs;
  }

  public void setDnsResponseTimeMs(DigitalExperienceMonitoringTestStatOverTime dnsResponseTimeMs) {
    this.dnsResponseTimeMs = dnsResponseTimeMs;
  }


  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats httpStatusCode(List<DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner> httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    return this;
  }

  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats addHttpStatusCodeItem(DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner httpStatusCodeItem) {
    if (this.httpStatusCode == null) {
      this.httpStatusCode = new ArrayList<>();
    }
    this.httpStatusCode.add(httpStatusCodeItem);
    return this;
  }

   /**
   * Get httpStatusCode
   * @return httpStatusCode
  **/
  @javax.annotation.Nonnull
  public List<DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner> getHttpStatusCode() {
    return httpStatusCode;
  }

  public void setHttpStatusCode(List<DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner> httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
  }


  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats resourceFetchTimeMs(DigitalExperienceMonitoringTestStatOverTime resourceFetchTimeMs) {
    this.resourceFetchTimeMs = resourceFetchTimeMs;
    return this;
  }

   /**
   * Get resourceFetchTimeMs
   * @return resourceFetchTimeMs
  **/
  @javax.annotation.Nonnull
  public DigitalExperienceMonitoringTestStatOverTime getResourceFetchTimeMs() {
    return resourceFetchTimeMs;
  }

  public void setResourceFetchTimeMs(DigitalExperienceMonitoringTestStatOverTime resourceFetchTimeMs) {
    this.resourceFetchTimeMs = resourceFetchTimeMs;
  }


  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats serverResponseTimeMs(DigitalExperienceMonitoringTestStatOverTime serverResponseTimeMs) {
    this.serverResponseTimeMs = serverResponseTimeMs;
    return this;
  }

   /**
   * Get serverResponseTimeMs
   * @return serverResponseTimeMs
  **/
  @javax.annotation.Nonnull
  public DigitalExperienceMonitoringTestStatOverTime getServerResponseTimeMs() {
    return serverResponseTimeMs;
  }

  public void setServerResponseTimeMs(DigitalExperienceMonitoringTestStatOverTime serverResponseTimeMs) {
    this.serverResponseTimeMs = serverResponseTimeMs;
  }


  public DigitalExperienceMonitoringHttpDetailsResponseHttpStats uniqueDevicesTotal(Integer uniqueDevicesTotal) {
    this.uniqueDevicesTotal = uniqueDevicesTotal;
    return this;
  }

   /**
   * Count of unique devices that have run this test in the given time period
   * @return uniqueDevicesTotal
  **/
  @javax.annotation.Nonnull
  public Integer getUniqueDevicesTotal() {
    return uniqueDevicesTotal;
  }

  public void setUniqueDevicesTotal(Integer uniqueDevicesTotal) {
    this.uniqueDevicesTotal = uniqueDevicesTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringHttpDetailsResponseHttpStats digitalExperienceMonitoringHttpDetailsResponseHttpStats = (DigitalExperienceMonitoringHttpDetailsResponseHttpStats) o;
    return Objects.equals(this.availabilityPct, digitalExperienceMonitoringHttpDetailsResponseHttpStats.availabilityPct) &&
        Objects.equals(this.dnsResponseTimeMs, digitalExperienceMonitoringHttpDetailsResponseHttpStats.dnsResponseTimeMs) &&
        Objects.equals(this.httpStatusCode, digitalExperienceMonitoringHttpDetailsResponseHttpStats.httpStatusCode) &&
        Objects.equals(this.resourceFetchTimeMs, digitalExperienceMonitoringHttpDetailsResponseHttpStats.resourceFetchTimeMs) &&
        Objects.equals(this.serverResponseTimeMs, digitalExperienceMonitoringHttpDetailsResponseHttpStats.serverResponseTimeMs) &&
        Objects.equals(this.uniqueDevicesTotal, digitalExperienceMonitoringHttpDetailsResponseHttpStats.uniqueDevicesTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityPct, dnsResponseTimeMs, httpStatusCode, resourceFetchTimeMs, serverResponseTimeMs, uniqueDevicesTotal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringHttpDetailsResponseHttpStats {\n");
    sb.append("    availabilityPct: ").append(toIndentedString(availabilityPct)).append("\n");
    sb.append("    dnsResponseTimeMs: ").append(toIndentedString(dnsResponseTimeMs)).append("\n");
    sb.append("    httpStatusCode: ").append(toIndentedString(httpStatusCode)).append("\n");
    sb.append("    resourceFetchTimeMs: ").append(toIndentedString(resourceFetchTimeMs)).append("\n");
    sb.append("    serverResponseTimeMs: ").append(toIndentedString(serverResponseTimeMs)).append("\n");
    sb.append("    uniqueDevicesTotal: ").append(toIndentedString(uniqueDevicesTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityPct");
    openapiFields.add("dnsResponseTimeMs");
    openapiFields.add("httpStatusCode");
    openapiFields.add("resourceFetchTimeMs");
    openapiFields.add("serverResponseTimeMs");
    openapiFields.add("uniqueDevicesTotal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availabilityPct");
    openapiRequiredFields.add("dnsResponseTimeMs");
    openapiRequiredFields.add("httpStatusCode");
    openapiRequiredFields.add("resourceFetchTimeMs");
    openapiRequiredFields.add("serverResponseTimeMs");
    openapiRequiredFields.add("uniqueDevicesTotal");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringHttpDetailsResponseHttpStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringHttpDetailsResponseHttpStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringHttpDetailsResponseHttpStats is not found in the empty JSON string", DigitalExperienceMonitoringHttpDetailsResponseHttpStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringHttpDetailsResponseHttpStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringHttpDetailsResponseHttpStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalExperienceMonitoringHttpDetailsResponseHttpStats.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `availabilityPct`
      DigitalExperienceMonitoringTestStatPctOverTime.validateJsonElement(jsonObj.get("availabilityPct"));
      // validate the required field `dnsResponseTimeMs`
      DigitalExperienceMonitoringTestStatOverTime.validateJsonElement(jsonObj.get("dnsResponseTimeMs"));
      // ensure the json data is an array
      if (!jsonObj.get("httpStatusCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpStatusCode` to be an array in the JSON string but got `%s`", jsonObj.get("httpStatusCode").toString()));
      }

      JsonArray jsonArrayhttpStatusCode = jsonObj.getAsJsonArray("httpStatusCode");
      // validate the required field `httpStatusCode` (array)
      for (int i = 0; i < jsonArrayhttpStatusCode.size(); i++) {
        DigitalExperienceMonitoringHttpDetailsResponseHttpStatsHttpStatusCodeInner.validateJsonElement(jsonArrayhttpStatusCode.get(i));
      };
      // validate the required field `resourceFetchTimeMs`
      DigitalExperienceMonitoringTestStatOverTime.validateJsonElement(jsonObj.get("resourceFetchTimeMs"));
      // validate the required field `serverResponseTimeMs`
      DigitalExperienceMonitoringTestStatOverTime.validateJsonElement(jsonObj.get("serverResponseTimeMs"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringHttpDetailsResponseHttpStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringHttpDetailsResponseHttpStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringHttpDetailsResponseHttpStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringHttpDetailsResponseHttpStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringHttpDetailsResponseHttpStats>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringHttpDetailsResponseHttpStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringHttpDetailsResponseHttpStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringHttpDetailsResponseHttpStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringHttpDetailsResponseHttpStats
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringHttpDetailsResponseHttpStats
  */
  public static DigitalExperienceMonitoringHttpDetailsResponseHttpStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringHttpDetailsResponseHttpStats.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringHttpDetailsResponseHttpStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

