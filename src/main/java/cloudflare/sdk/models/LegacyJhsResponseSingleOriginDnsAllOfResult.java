/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import java.util.Objects;
import cloudflare.sdk.models.LegacyJhsDns;
import cloudflare.sdk.models.LegacyJhsEdgeIps;
import cloudflare.sdk.models.LegacyJhsOriginDns;
import cloudflare.sdk.models.LegacyJhsOriginPort;
import cloudflare.sdk.models.LegacyJhsProxyProtocol;
import cloudflare.sdk.models.LegacyJhsTls;
import cloudflare.sdk.models.LegacyJhsTrafficType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloudflare.JSON;

/**
 * LegacyJhsResponseSingleOriginDnsAllOfResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:31:20.290775906+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class LegacyJhsResponseSingleOriginDnsAllOfResult {
  public static final String SERIALIZED_NAME_ARGO_SMART_ROUTING = "argo_smart_routing";
  @SerializedName(SERIALIZED_NAME_ARGO_SMART_ROUTING)
  private Boolean argoSmartRouting = false;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private LegacyJhsDns dns;

  public static final String SERIALIZED_NAME_EDGE_IPS = "edge_ips";
  @SerializedName(SERIALIZED_NAME_EDGE_IPS)
  private LegacyJhsEdgeIps edgeIps = {"connectivity":"all","type":"dynamic"};

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_FIREWALL = "ip_firewall";
  @SerializedName(SERIALIZED_NAME_IP_FIREWALL)
  private Boolean ipFirewall;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_ORIGIN_DNS = "origin_dns";
  @SerializedName(SERIALIZED_NAME_ORIGIN_DNS)
  private LegacyJhsOriginDns originDns;

  public static final String SERIALIZED_NAME_ORIGIN_PORT = "origin_port";
  @SerializedName(SERIALIZED_NAME_ORIGIN_PORT)
  private LegacyJhsOriginPort originPort;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_PROXY_PROTOCOL = "proxy_protocol";
  @SerializedName(SERIALIZED_NAME_PROXY_PROTOCOL)
  private LegacyJhsProxyProtocol proxyProtocol = LegacyJhsProxyProtocol.OFF;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  private LegacyJhsTls tls;

  public static final String SERIALIZED_NAME_TRAFFIC_TYPE = "traffic_type";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_TYPE)
  private LegacyJhsTrafficType trafficType = LegacyJhsTrafficType.DIRECT;

  public LegacyJhsResponseSingleOriginDnsAllOfResult() {
  }

  public LegacyJhsResponseSingleOriginDnsAllOfResult(
     OffsetDateTime createdOn, 
     String id, 
     OffsetDateTime modifiedOn
  ) {
    this();
    this.createdOn = createdOn;
    this.id = id;
    this.modifiedOn = modifiedOn;
  }

  public LegacyJhsResponseSingleOriginDnsAllOfResult argoSmartRouting(Boolean argoSmartRouting) {
    this.argoSmartRouting = argoSmartRouting;
    return this;
  }

   /**
   * Enables Argo Smart Routing for this application. Notes: Only available for TCP applications with traffic_type set to \&quot;direct\&quot;.
   * @return argoSmartRouting
  **/
  @javax.annotation.Nullable
  public Boolean getArgoSmartRouting() {
    return argoSmartRouting;
  }

  public void setArgoSmartRouting(Boolean argoSmartRouting) {
    this.argoSmartRouting = argoSmartRouting;
  }


   /**
   * When the Application was created.
   * @return createdOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public LegacyJhsResponseSingleOriginDnsAllOfResult dns(LegacyJhsDns dns) {
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * @return dns
  **/
  @javax.annotation.Nullable
  public LegacyJhsDns getDns() {
    return dns;
  }

  public void setDns(LegacyJhsDns dns) {
    this.dns = dns;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult edgeIps(LegacyJhsEdgeIps edgeIps) {
    this.edgeIps = edgeIps;
    return this;
  }

   /**
   * Get edgeIps
   * @return edgeIps
  **/
  @javax.annotation.Nullable
  public LegacyJhsEdgeIps getEdgeIps() {
    return edgeIps;
  }

  public void setEdgeIps(LegacyJhsEdgeIps edgeIps) {
    this.edgeIps = edgeIps;
  }


   /**
   * Application identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public LegacyJhsResponseSingleOriginDnsAllOfResult ipFirewall(Boolean ipFirewall) {
    this.ipFirewall = ipFirewall;
    return this;
  }

   /**
   * Enables IP Access Rules for this application. Notes: Only available for TCP applications.
   * @return ipFirewall
  **/
  @javax.annotation.Nullable
  public Boolean getIpFirewall() {
    return ipFirewall;
  }

  public void setIpFirewall(Boolean ipFirewall) {
    this.ipFirewall = ipFirewall;
  }


   /**
   * When the Application was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  public LegacyJhsResponseSingleOriginDnsAllOfResult originDns(LegacyJhsOriginDns originDns) {
    this.originDns = originDns;
    return this;
  }

   /**
   * Get originDns
   * @return originDns
  **/
  @javax.annotation.Nullable
  public LegacyJhsOriginDns getOriginDns() {
    return originDns;
  }

  public void setOriginDns(LegacyJhsOriginDns originDns) {
    this.originDns = originDns;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult originPort(LegacyJhsOriginPort originPort) {
    this.originPort = originPort;
    return this;
  }

   /**
   * Get originPort
   * @return originPort
  **/
  @javax.annotation.Nullable
  public LegacyJhsOriginPort getOriginPort() {
    return originPort;
  }

  public void setOriginPort(LegacyJhsOriginPort originPort) {
    this.originPort = originPort;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The port configuration at Cloudflareâ€™s edge. May specify a single port, for example &#x60;\&quot;tcp/1000\&quot;&#x60;, or a range of ports, for example &#x60;\&quot;tcp/1000-2000\&quot;&#x60;.
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult proxyProtocol(LegacyJhsProxyProtocol proxyProtocol) {
    this.proxyProtocol = proxyProtocol;
    return this;
  }

   /**
   * Get proxyProtocol
   * @return proxyProtocol
  **/
  @javax.annotation.Nullable
  public LegacyJhsProxyProtocol getProxyProtocol() {
    return proxyProtocol;
  }

  public void setProxyProtocol(LegacyJhsProxyProtocol proxyProtocol) {
    this.proxyProtocol = proxyProtocol;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult tls(LegacyJhsTls tls) {
    this.tls = tls;
    return this;
  }

   /**
   * Get tls
   * @return tls
  **/
  @javax.annotation.Nullable
  public LegacyJhsTls getTls() {
    return tls;
  }

  public void setTls(LegacyJhsTls tls) {
    this.tls = tls;
  }


  public LegacyJhsResponseSingleOriginDnsAllOfResult trafficType(LegacyJhsTrafficType trafficType) {
    this.trafficType = trafficType;
    return this;
  }

   /**
   * Get trafficType
   * @return trafficType
  **/
  @javax.annotation.Nullable
  public LegacyJhsTrafficType getTrafficType() {
    return trafficType;
  }

  public void setTrafficType(LegacyJhsTrafficType trafficType) {
    this.trafficType = trafficType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegacyJhsResponseSingleOriginDnsAllOfResult legacyJhsResponseSingleOriginDnsAllOfResult = (LegacyJhsResponseSingleOriginDnsAllOfResult) o;
    return Objects.equals(this.argoSmartRouting, legacyJhsResponseSingleOriginDnsAllOfResult.argoSmartRouting) &&
        Objects.equals(this.createdOn, legacyJhsResponseSingleOriginDnsAllOfResult.createdOn) &&
        Objects.equals(this.dns, legacyJhsResponseSingleOriginDnsAllOfResult.dns) &&
        Objects.equals(this.edgeIps, legacyJhsResponseSingleOriginDnsAllOfResult.edgeIps) &&
        Objects.equals(this.id, legacyJhsResponseSingleOriginDnsAllOfResult.id) &&
        Objects.equals(this.ipFirewall, legacyJhsResponseSingleOriginDnsAllOfResult.ipFirewall) &&
        Objects.equals(this.modifiedOn, legacyJhsResponseSingleOriginDnsAllOfResult.modifiedOn) &&
        Objects.equals(this.originDns, legacyJhsResponseSingleOriginDnsAllOfResult.originDns) &&
        Objects.equals(this.originPort, legacyJhsResponseSingleOriginDnsAllOfResult.originPort) &&
        Objects.equals(this.protocol, legacyJhsResponseSingleOriginDnsAllOfResult.protocol) &&
        Objects.equals(this.proxyProtocol, legacyJhsResponseSingleOriginDnsAllOfResult.proxyProtocol) &&
        Objects.equals(this.tls, legacyJhsResponseSingleOriginDnsAllOfResult.tls) &&
        Objects.equals(this.trafficType, legacyJhsResponseSingleOriginDnsAllOfResult.trafficType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(argoSmartRouting, createdOn, dns, edgeIps, id, ipFirewall, modifiedOn, originDns, originPort, protocol, proxyProtocol, tls, trafficType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegacyJhsResponseSingleOriginDnsAllOfResult {\n");
    sb.append("    argoSmartRouting: ").append(toIndentedString(argoSmartRouting)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    edgeIps: ").append(toIndentedString(edgeIps)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipFirewall: ").append(toIndentedString(ipFirewall)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    originDns: ").append(toIndentedString(originDns)).append("\n");
    sb.append("    originPort: ").append(toIndentedString(originPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    proxyProtocol: ").append(toIndentedString(proxyProtocol)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    trafficType: ").append(toIndentedString(trafficType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("argo_smart_routing");
    openapiFields.add("created_on");
    openapiFields.add("dns");
    openapiFields.add("edge_ips");
    openapiFields.add("id");
    openapiFields.add("ip_firewall");
    openapiFields.add("modified_on");
    openapiFields.add("origin_dns");
    openapiFields.add("origin_port");
    openapiFields.add("protocol");
    openapiFields.add("proxy_protocol");
    openapiFields.add("tls");
    openapiFields.add("traffic_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LegacyJhsResponseSingleOriginDnsAllOfResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegacyJhsResponseSingleOriginDnsAllOfResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegacyJhsResponseSingleOriginDnsAllOfResult is not found in the empty JSON string", LegacyJhsResponseSingleOriginDnsAllOfResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegacyJhsResponseSingleOriginDnsAllOfResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegacyJhsResponseSingleOriginDnsAllOfResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dns`
      if (jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) {
        LegacyJhsDns.validateJsonElement(jsonObj.get("dns"));
      }
      // validate the optional field `edge_ips`
      if (jsonObj.get("edge_ips") != null && !jsonObj.get("edge_ips").isJsonNull()) {
        LegacyJhsEdgeIps.validateJsonElement(jsonObj.get("edge_ips"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `origin_dns`
      if (jsonObj.get("origin_dns") != null && !jsonObj.get("origin_dns").isJsonNull()) {
        LegacyJhsOriginDns.validateJsonElement(jsonObj.get("origin_dns"));
      }
      // validate the optional field `origin_port`
      if (jsonObj.get("origin_port") != null && !jsonObj.get("origin_port").isJsonNull()) {
        LegacyJhsOriginPort.validateJsonElement(jsonObj.get("origin_port"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `proxy_protocol`
      if (jsonObj.get("proxy_protocol") != null && !jsonObj.get("proxy_protocol").isJsonNull()) {
        LegacyJhsProxyProtocol.validateJsonElement(jsonObj.get("proxy_protocol"));
      }
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        LegacyJhsTls.validateJsonElement(jsonObj.get("tls"));
      }
      // validate the optional field `traffic_type`
      if (jsonObj.get("traffic_type") != null && !jsonObj.get("traffic_type").isJsonNull()) {
        LegacyJhsTrafficType.validateJsonElement(jsonObj.get("traffic_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegacyJhsResponseSingleOriginDnsAllOfResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegacyJhsResponseSingleOriginDnsAllOfResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegacyJhsResponseSingleOriginDnsAllOfResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegacyJhsResponseSingleOriginDnsAllOfResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LegacyJhsResponseSingleOriginDnsAllOfResult>() {
           @Override
           public void write(JsonWriter out, LegacyJhsResponseSingleOriginDnsAllOfResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegacyJhsResponseSingleOriginDnsAllOfResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegacyJhsResponseSingleOriginDnsAllOfResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegacyJhsResponseSingleOriginDnsAllOfResult
  * @throws IOException if the JSON string is invalid with respect to LegacyJhsResponseSingleOriginDnsAllOfResult
  */
  public static LegacyJhsResponseSingleOriginDnsAllOfResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegacyJhsResponseSingleOriginDnsAllOfResult.class);
  }

 /**
  * Convert an instance of LegacyJhsResponseSingleOriginDnsAllOfResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

