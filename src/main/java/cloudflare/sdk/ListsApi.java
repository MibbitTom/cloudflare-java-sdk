/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.ListsBulkOperationResponseCollection;
import cloudflare.sdk.models.ListsCreateAList4XXResponse;
import cloudflare.sdk.models.ListsCreateAListRequest;
import cloudflare.sdk.models.ListsDeleteAList4XXResponse;
import cloudflare.sdk.models.ListsDeleteListItemsRequest;
import cloudflare.sdk.models.ListsGetAListItem4XXResponse;
import cloudflare.sdk.models.ListsGetBulkOperationStatus4XXResponse;
import cloudflare.sdk.models.ListsGetListItems4XXResponse;
import cloudflare.sdk.models.ListsGetLists4XXResponse;
import cloudflare.sdk.models.ListsItemResponseCollection;
import cloudflare.sdk.models.ListsItemsListResponseCollection;
import cloudflare.sdk.models.ListsItemsUpdateRequestCollectionInner;
import cloudflare.sdk.models.ListsListDeleteResponseCollection;
import cloudflare.sdk.models.ListsListResponseCollection;
import cloudflare.sdk.models.ListsListsAsyncResponse;
import cloudflare.sdk.models.ListsListsResponseCollection;
import cloudflare.sdk.models.ListsUpdateAListRequest;
import cloudflare.sdk.models.ListsUpdateAllListItems4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listsCreateAList
     * @param accountId  (required)
     * @param listsCreateAListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsCreateAListCall(String accountId, ListsCreateAListRequest listsCreateAListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCreateAListRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsCreateAListValidateBeforeCall(String accountId, ListsCreateAListRequest listsCreateAListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsCreateAList(Async)");
        }

        // verify the required parameter 'listsCreateAListRequest' is set
        if (listsCreateAListRequest == null) {
            throw new ApiException("Missing the required parameter 'listsCreateAListRequest' when calling listsCreateAList(Async)");
        }

        return listsCreateAListCall(accountId, listsCreateAListRequest, _callback);

    }

    /**
     * Create a list
     * Creates a new list of the specified type.
     * @param accountId  (required)
     * @param listsCreateAListRequest  (required)
     * @return ListsListResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListResponseCollection listsCreateAList(String accountId, ListsCreateAListRequest listsCreateAListRequest) throws ApiException {
        ApiResponse<ListsListResponseCollection> localVarResp = listsCreateAListWithHttpInfo(accountId, listsCreateAListRequest);
        return localVarResp.getData();
    }

    /**
     * Create a list
     * Creates a new list of the specified type.
     * @param accountId  (required)
     * @param listsCreateAListRequest  (required)
     * @return ApiResponse&lt;ListsListResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListResponseCollection> listsCreateAListWithHttpInfo(String accountId, ListsCreateAListRequest listsCreateAListRequest) throws ApiException {
        okhttp3.Call localVarCall = listsCreateAListValidateBeforeCall(accountId, listsCreateAListRequest, null);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a list (asynchronously)
     * Creates a new list of the specified type.
     * @param accountId  (required)
     * @param listsCreateAListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsCreateAListAsync(String accountId, ListsCreateAListRequest listsCreateAListRequest, final ApiCallback<ListsListResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsCreateAListValidateBeforeCall(accountId, listsCreateAListRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsCreateListItems
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsCreateListItemsCall(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsItemsUpdateRequestCollectionInner;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}/items"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsCreateListItemsValidateBeforeCall(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsCreateListItems(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsCreateListItems(Async)");
        }

        // verify the required parameter 'listsItemsUpdateRequestCollectionInner' is set
        if (listsItemsUpdateRequestCollectionInner == null) {
            throw new ApiException("Missing the required parameter 'listsItemsUpdateRequestCollectionInner' when calling listsCreateListItems(Async)");
        }

        return listsCreateListItemsCall(listId, accountId, listsItemsUpdateRequestCollectionInner, _callback);

    }

    /**
     * Create list items
     * Appends new items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @return ListsListsAsyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListsAsyncResponse listsCreateListItems(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner) throws ApiException {
        ApiResponse<ListsListsAsyncResponse> localVarResp = listsCreateListItemsWithHttpInfo(listId, accountId, listsItemsUpdateRequestCollectionInner);
        return localVarResp.getData();
    }

    /**
     * Create list items
     * Appends new items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @return ApiResponse&lt;ListsListsAsyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListsAsyncResponse> listsCreateListItemsWithHttpInfo(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner) throws ApiException {
        okhttp3.Call localVarCall = listsCreateListItemsValidateBeforeCall(listId, accountId, listsItemsUpdateRequestCollectionInner, null);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create list items (asynchronously)
     * Appends new items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsCreateListItemsAsync(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback<ListsListsAsyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsCreateListItemsValidateBeforeCall(listId, accountId, listsItemsUpdateRequestCollectionInner, _callback);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsDeleteAList
     * @param listId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsDeleteAListCall(String listId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsDeleteAListValidateBeforeCall(String listId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsDeleteAList(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsDeleteAList(Async)");
        }

        return listsDeleteAListCall(listId, accountId, _callback);

    }

    /**
     * Delete a list
     * Deletes a specific list and all its items.
     * @param listId  (required)
     * @param accountId  (required)
     * @return ListsListDeleteResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListDeleteResponseCollection listsDeleteAList(String listId, String accountId) throws ApiException {
        ApiResponse<ListsListDeleteResponseCollection> localVarResp = listsDeleteAListWithHttpInfo(listId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete a list
     * Deletes a specific list and all its items.
     * @param listId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ListsListDeleteResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListDeleteResponseCollection> listsDeleteAListWithHttpInfo(String listId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = listsDeleteAListValidateBeforeCall(listId, accountId, null);
        Type localVarReturnType = new TypeToken<ListsListDeleteResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a list (asynchronously)
     * Deletes a specific list and all its items.
     * @param listId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsDeleteAListAsync(String listId, String accountId, final ApiCallback<ListsListDeleteResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsDeleteAListValidateBeforeCall(listId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListsListDeleteResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsDeleteListItems
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsDeleteListItemsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsDeleteListItemsCall(String listId, String accountId, ListsDeleteListItemsRequest listsDeleteListItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsDeleteListItemsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}/items"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsDeleteListItemsValidateBeforeCall(String listId, String accountId, ListsDeleteListItemsRequest listsDeleteListItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsDeleteListItems(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsDeleteListItems(Async)");
        }

        // verify the required parameter 'listsDeleteListItemsRequest' is set
        if (listsDeleteListItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'listsDeleteListItemsRequest' when calling listsDeleteListItems(Async)");
        }

        return listsDeleteListItemsCall(listId, accountId, listsDeleteListItemsRequest, _callback);

    }

    /**
     * Delete list items
     * Removes one or more items from a list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsDeleteListItemsRequest  (required)
     * @return ListsListsAsyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListsAsyncResponse listsDeleteListItems(String listId, String accountId, ListsDeleteListItemsRequest listsDeleteListItemsRequest) throws ApiException {
        ApiResponse<ListsListsAsyncResponse> localVarResp = listsDeleteListItemsWithHttpInfo(listId, accountId, listsDeleteListItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Delete list items
     * Removes one or more items from a list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsDeleteListItemsRequest  (required)
     * @return ApiResponse&lt;ListsListsAsyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListsAsyncResponse> listsDeleteListItemsWithHttpInfo(String listId, String accountId, ListsDeleteListItemsRequest listsDeleteListItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = listsDeleteListItemsValidateBeforeCall(listId, accountId, listsDeleteListItemsRequest, null);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete list items (asynchronously)
     * Removes one or more items from a list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsDeleteListItemsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsDeleteListItemsAsync(String listId, String accountId, ListsDeleteListItemsRequest listsDeleteListItemsRequest, final ApiCallback<ListsListsAsyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsDeleteListItemsValidateBeforeCall(listId, accountId, listsDeleteListItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsGetAList
     * @param listId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetAListCall(String listId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsGetAListValidateBeforeCall(String listId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsGetAList(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsGetAList(Async)");
        }

        return listsGetAListCall(listId, accountId, _callback);

    }

    /**
     * Get a list
     * Fetches the details of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @return ListsListResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListResponseCollection listsGetAList(String listId, String accountId) throws ApiException {
        ApiResponse<ListsListResponseCollection> localVarResp = listsGetAListWithHttpInfo(listId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get a list
     * Fetches the details of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ListsListResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListResponseCollection> listsGetAListWithHttpInfo(String listId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = listsGetAListValidateBeforeCall(listId, accountId, null);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list (asynchronously)
     * Fetches the details of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetAListAsync(String listId, String accountId, final ApiCallback<ListsListResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsGetAListValidateBeforeCall(listId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsGetAListItem
     * @param itemId  (required)
     * @param listId  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list item response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list item response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetAListItemCall(String itemId, String listId, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/rules/lists/{list_id}/items/{item_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsGetAListItemValidateBeforeCall(String itemId, String listId, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling listsGetAListItem(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsGetAListItem(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listsGetAListItem(Async)");
        }

        return listsGetAListItemCall(itemId, listId, accountIdentifier, _callback);

    }

    /**
     * Get a list item
     * Fetches a list item in the list.
     * @param itemId  (required)
     * @param listId  (required)
     * @param accountIdentifier  (required)
     * @return ListsItemResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list item response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list item response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsItemResponseCollection listsGetAListItem(String itemId, String listId, String accountIdentifier) throws ApiException {
        ApiResponse<ListsItemResponseCollection> localVarResp = listsGetAListItemWithHttpInfo(itemId, listId, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a list item
     * Fetches a list item in the list.
     * @param itemId  (required)
     * @param listId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ListsItemResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list item response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list item response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsItemResponseCollection> listsGetAListItemWithHttpInfo(String itemId, String listId, String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = listsGetAListItemValidateBeforeCall(itemId, listId, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<ListsItemResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list item (asynchronously)
     * Fetches a list item in the list.
     * @param itemId  (required)
     * @param listId  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list item response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a list item response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetAListItemAsync(String itemId, String listId, String accountIdentifier, final ApiCallback<ListsItemResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsGetAListItemValidateBeforeCall(itemId, listId, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ListsItemResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsGetBulkOperationStatus
     * @param operationId  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get bulk operation status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get bulk operation status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetBulkOperationStatusCall(String operationId, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/rules/lists/bulk_operations/{operation_id}"
            .replace("{" + "operation_id" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsGetBulkOperationStatusValidateBeforeCall(String operationId, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling listsGetBulkOperationStatus(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listsGetBulkOperationStatus(Async)");
        }

        return listsGetBulkOperationStatusCall(operationId, accountIdentifier, _callback);

    }

    /**
     * Get bulk operation status
     * Gets the current status of an asynchronous operation on a list.  The &#x60;status&#x60; property can have one of the following values: &#x60;pending&#x60;, &#x60;running&#x60;, &#x60;completed&#x60;, or &#x60;failed&#x60;. If the status is &#x60;failed&#x60;, the &#x60;error&#x60; property will contain a message describing the error.
     * @param operationId  (required)
     * @param accountIdentifier  (required)
     * @return ListsBulkOperationResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get bulk operation status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get bulk operation status response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsBulkOperationResponseCollection listsGetBulkOperationStatus(String operationId, String accountIdentifier) throws ApiException {
        ApiResponse<ListsBulkOperationResponseCollection> localVarResp = listsGetBulkOperationStatusWithHttpInfo(operationId, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get bulk operation status
     * Gets the current status of an asynchronous operation on a list.  The &#x60;status&#x60; property can have one of the following values: &#x60;pending&#x60;, &#x60;running&#x60;, &#x60;completed&#x60;, or &#x60;failed&#x60;. If the status is &#x60;failed&#x60;, the &#x60;error&#x60; property will contain a message describing the error.
     * @param operationId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ListsBulkOperationResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get bulk operation status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get bulk operation status response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsBulkOperationResponseCollection> listsGetBulkOperationStatusWithHttpInfo(String operationId, String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = listsGetBulkOperationStatusValidateBeforeCall(operationId, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<ListsBulkOperationResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bulk operation status (asynchronously)
     * Gets the current status of an asynchronous operation on a list.  The &#x60;status&#x60; property can have one of the following values: &#x60;pending&#x60;, &#x60;running&#x60;, &#x60;completed&#x60;, or &#x60;failed&#x60;. If the status is &#x60;failed&#x60;, the &#x60;error&#x60; property will contain a message describing the error.
     * @param operationId  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get bulk operation status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get bulk operation status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetBulkOperationStatusAsync(String operationId, String accountIdentifier, final ApiCallback<ListsBulkOperationResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsGetBulkOperationStatusValidateBeforeCall(operationId, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ListsBulkOperationResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsGetListItems
     * @param listId  (required)
     * @param accountId  (required)
     * @param cursor  (optional)
     * @param perPage  (optional)
     * @param search  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetListItemsCall(String listId, String accountId, String cursor, Integer perPage, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}/items"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsGetListItemsValidateBeforeCall(String listId, String accountId, String cursor, Integer perPage, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsGetListItems(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsGetListItems(Async)");
        }

        return listsGetListItemsCall(listId, accountId, cursor, perPage, search, _callback);

    }

    /**
     * Get list items
     * Fetches all the items in the list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param cursor  (optional)
     * @param perPage  (optional)
     * @param search  (optional)
     * @return ListsItemsListResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsItemsListResponseCollection listsGetListItems(String listId, String accountId, String cursor, Integer perPage, String search) throws ApiException {
        ApiResponse<ListsItemsListResponseCollection> localVarResp = listsGetListItemsWithHttpInfo(listId, accountId, cursor, perPage, search);
        return localVarResp.getData();
    }

    /**
     * Get list items
     * Fetches all the items in the list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param cursor  (optional)
     * @param perPage  (optional)
     * @param search  (optional)
     * @return ApiResponse&lt;ListsItemsListResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsItemsListResponseCollection> listsGetListItemsWithHttpInfo(String listId, String accountId, String cursor, Integer perPage, String search) throws ApiException {
        okhttp3.Call localVarCall = listsGetListItemsValidateBeforeCall(listId, accountId, cursor, perPage, search, null);
        Type localVarReturnType = new TypeToken<ListsItemsListResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list items (asynchronously)
     * Fetches all the items in the list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param cursor  (optional)
     * @param perPage  (optional)
     * @param search  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetListItemsAsync(String listId, String accountId, String cursor, Integer perPage, String search, final ApiCallback<ListsItemsListResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsGetListItemsValidateBeforeCall(listId, accountId, cursor, perPage, search, _callback);
        Type localVarReturnType = new TypeToken<ListsItemsListResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsGetLists
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get lists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get lists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetListsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsGetListsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsGetLists(Async)");
        }

        return listsGetListsCall(accountId, _callback);

    }

    /**
     * Get lists
     * Fetches all lists in the account.
     * @param accountId  (required)
     * @return ListsListsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get lists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get lists response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListsResponseCollection listsGetLists(String accountId) throws ApiException {
        ApiResponse<ListsListsResponseCollection> localVarResp = listsGetListsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get lists
     * Fetches all lists in the account.
     * @param accountId  (required)
     * @return ApiResponse&lt;ListsListsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get lists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get lists response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListsResponseCollection> listsGetListsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = listsGetListsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<ListsListsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lists (asynchronously)
     * Fetches all lists in the account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get lists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get lists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsGetListsAsync(String accountId, final ApiCallback<ListsListsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsGetListsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<ListsListsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsUpdateAList
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsUpdateAListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsUpdateAListCall(String listId, String accountId, ListsUpdateAListRequest listsUpdateAListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsUpdateAListRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsUpdateAListValidateBeforeCall(String listId, String accountId, ListsUpdateAListRequest listsUpdateAListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsUpdateAList(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsUpdateAList(Async)");
        }

        // verify the required parameter 'listsUpdateAListRequest' is set
        if (listsUpdateAListRequest == null) {
            throw new ApiException("Missing the required parameter 'listsUpdateAListRequest' when calling listsUpdateAList(Async)");
        }

        return listsUpdateAListCall(listId, accountId, listsUpdateAListRequest, _callback);

    }

    /**
     * Update a list
     * Updates the description of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsUpdateAListRequest  (required)
     * @return ListsListResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListResponseCollection listsUpdateAList(String listId, String accountId, ListsUpdateAListRequest listsUpdateAListRequest) throws ApiException {
        ApiResponse<ListsListResponseCollection> localVarResp = listsUpdateAListWithHttpInfo(listId, accountId, listsUpdateAListRequest);
        return localVarResp.getData();
    }

    /**
     * Update a list
     * Updates the description of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsUpdateAListRequest  (required)
     * @return ApiResponse&lt;ListsListResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListResponseCollection> listsUpdateAListWithHttpInfo(String listId, String accountId, ListsUpdateAListRequest listsUpdateAListRequest) throws ApiException {
        okhttp3.Call localVarCall = listsUpdateAListValidateBeforeCall(listId, accountId, listsUpdateAListRequest, null);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a list (asynchronously)
     * Updates the description of a list.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsUpdateAListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a list response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsUpdateAListAsync(String listId, String accountId, ListsUpdateAListRequest listsUpdateAListRequest, final ApiCallback<ListsListResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsUpdateAListValidateBeforeCall(listId, accountId, listsUpdateAListRequest, _callback);
        Type localVarReturnType = new TypeToken<ListsListResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsUpdateAllListItems
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update all list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update all list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsUpdateAllListItemsCall(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsItemsUpdateRequestCollectionInner;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rules/lists/{list_id}/items"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsUpdateAllListItemsValidateBeforeCall(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsUpdateAllListItems(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listsUpdateAllListItems(Async)");
        }

        // verify the required parameter 'listsItemsUpdateRequestCollectionInner' is set
        if (listsItemsUpdateRequestCollectionInner == null) {
            throw new ApiException("Missing the required parameter 'listsItemsUpdateRequestCollectionInner' when calling listsUpdateAllListItems(Async)");
        }

        return listsUpdateAllListItemsCall(listId, accountId, listsItemsUpdateRequestCollectionInner, _callback);

    }

    /**
     * Update all list items
     * Removes all existing items from the list and adds the provided items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @return ListsListsAsyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update all list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update all list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ListsListsAsyncResponse listsUpdateAllListItems(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner) throws ApiException {
        ApiResponse<ListsListsAsyncResponse> localVarResp = listsUpdateAllListItemsWithHttpInfo(listId, accountId, listsItemsUpdateRequestCollectionInner);
        return localVarResp.getData();
    }

    /**
     * Update all list items
     * Removes all existing items from the list and adds the provided items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @return ApiResponse&lt;ListsListsAsyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update all list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update all list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListsListsAsyncResponse> listsUpdateAllListItemsWithHttpInfo(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner) throws ApiException {
        okhttp3.Call localVarCall = listsUpdateAllListItemsValidateBeforeCall(listId, accountId, listsItemsUpdateRequestCollectionInner, null);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update all list items (asynchronously)
     * Removes all existing items from the list and adds the provided items to the list.  This operation is asynchronous. To get current the operation status, invoke the [Get bulk operation status](/operations/lists-get-bulk-operation-status) endpoint with the returned &#x60;operation_id&#x60;.
     * @param listId  (required)
     * @param accountId  (required)
     * @param listsItemsUpdateRequestCollectionInner  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update all list items response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update all list items response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listsUpdateAllListItemsAsync(String listId, String accountId, List<ListsItemsUpdateRequestCollectionInner> listsItemsUpdateRequestCollectionInner, final ApiCallback<ListsListsAsyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsUpdateAllListItemsValidateBeforeCall(listId, accountId, listsItemsUpdateRequestCollectionInner, _callback);
        Type localVarReturnType = new TypeToken<ListsListsAsyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
