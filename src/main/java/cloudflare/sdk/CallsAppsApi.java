/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.CallsApiResponseCommonFailure;
import cloudflare.sdk.models.CallsAppEditableFields;
import cloudflare.sdk.models.CallsAppResponseCollection;
import cloudflare.sdk.models.CallsAppResponseSingle;
import cloudflare.sdk.models.CallsAppResponseSingleWithSecret;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallsAppsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallsAppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callsAppsCreateANewApp
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created a new app </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsCreateANewAppCall(String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsAppEditableFields;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/calls/apps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAppsCreateANewAppValidateBeforeCall(String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling callsAppsCreateANewApp(Async)");
        }

        // verify the required parameter 'callsAppEditableFields' is set
        if (callsAppEditableFields == null) {
            throw new ApiException("Missing the required parameter 'callsAppEditableFields' when calling callsAppsCreateANewApp(Async)");
        }

        return callsAppsCreateANewAppCall(accountId, callsAppEditableFields, _callback);

    }

    /**
     * Create a new app
     * Creates a new Cloudflare calls app. An app is an unique enviroment where each Session can access all Tracks within the app.
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @return CallsAppResponseSingleWithSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created a new app </td><td>  -  </td></tr>
     </table>
     */
    public CallsAppResponseSingleWithSecret callsAppsCreateANewApp(String accountId, CallsAppEditableFields callsAppEditableFields) throws ApiException {
        ApiResponse<CallsAppResponseSingleWithSecret> localVarResp = callsAppsCreateANewAppWithHttpInfo(accountId, callsAppEditableFields);
        return localVarResp.getData();
    }

    /**
     * Create a new app
     * Creates a new Cloudflare calls app. An app is an unique enviroment where each Session can access all Tracks within the app.
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @return ApiResponse&lt;CallsAppResponseSingleWithSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created a new app </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallsAppResponseSingleWithSecret> callsAppsCreateANewAppWithHttpInfo(String accountId, CallsAppEditableFields callsAppEditableFields) throws ApiException {
        okhttp3.Call localVarCall = callsAppsCreateANewAppValidateBeforeCall(accountId, callsAppEditableFields, null);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingleWithSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new app (asynchronously)
     * Creates a new Cloudflare calls app. An app is an unique enviroment where each Session can access all Tracks within the app.
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created a new app </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsCreateANewAppAsync(String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback<CallsAppResponseSingleWithSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAppsCreateANewAppValidateBeforeCall(accountId, callsAppEditableFields, _callback);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingleWithSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsAppsDeleteApp
     * @param appId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete app response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete app response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsDeleteAppCall(String appId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/calls/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAppsDeleteAppValidateBeforeCall(String appId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling callsAppsDeleteApp(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling callsAppsDeleteApp(Async)");
        }

        return callsAppsDeleteAppCall(appId, accountId, _callback);

    }

    /**
     * Delete app
     * Deletes an app from Cloudflare Calls
     * @param appId  (required)
     * @param accountId  (required)
     * @return CallsAppResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete app response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete app response failure </td><td>  -  </td></tr>
     </table>
     */
    public CallsAppResponseSingle callsAppsDeleteApp(String appId, String accountId) throws ApiException {
        ApiResponse<CallsAppResponseSingle> localVarResp = callsAppsDeleteAppWithHttpInfo(appId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete app
     * Deletes an app from Cloudflare Calls
     * @param appId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CallsAppResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete app response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete app response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallsAppResponseSingle> callsAppsDeleteAppWithHttpInfo(String appId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = callsAppsDeleteAppValidateBeforeCall(appId, accountId, null);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete app (asynchronously)
     * Deletes an app from Cloudflare Calls
     * @param appId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete app response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete app response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsDeleteAppAsync(String appId, String accountId, final ApiCallback<CallsAppResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAppsDeleteAppValidateBeforeCall(appId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsAppsList
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List apps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsListCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/calls/apps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAppsListValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling callsAppsList(Async)");
        }

        return callsAppsListCall(accountId, _callback);

    }

    /**
     * List apps
     * Lists all apps in the Cloudflare account
     * @param accountId  (required)
     * @return CallsAppResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List apps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public CallsAppResponseCollection callsAppsList(String accountId) throws ApiException {
        ApiResponse<CallsAppResponseCollection> localVarResp = callsAppsListWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List apps
     * Lists all apps in the Cloudflare account
     * @param accountId  (required)
     * @return ApiResponse&lt;CallsAppResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List apps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallsAppResponseCollection> callsAppsListWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = callsAppsListValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<CallsAppResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List apps (asynchronously)
     * Lists all apps in the Cloudflare account
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List apps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List videos response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsListAsync(String accountId, final ApiCallback<CallsAppResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAppsListValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<CallsAppResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsAppsRetrieveAppDetails
     * @param appId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsRetrieveAppDetailsCall(String appId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/calls/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAppsRetrieveAppDetailsValidateBeforeCall(String appId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling callsAppsRetrieveAppDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling callsAppsRetrieveAppDetails(Async)");
        }

        return callsAppsRetrieveAppDetailsCall(appId, accountId, _callback);

    }

    /**
     * Retrieve app details
     * Fetches details for a single Calls app.
     * @param appId  (required)
     * @param accountId  (required)
     * @return CallsAppResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public CallsAppResponseSingle callsAppsRetrieveAppDetails(String appId, String accountId) throws ApiException {
        ApiResponse<CallsAppResponseSingle> localVarResp = callsAppsRetrieveAppDetailsWithHttpInfo(appId, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve app details
     * Fetches details for a single Calls app.
     * @param appId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;CallsAppResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallsAppResponseSingle> callsAppsRetrieveAppDetailsWithHttpInfo(String appId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = callsAppsRetrieveAppDetailsValidateBeforeCall(appId, accountId, null);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve app details (asynchronously)
     * Fetches details for a single Calls app.
     * @param appId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve video details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsRetrieveAppDetailsAsync(String appId, String accountId, final ApiCallback<CallsAppResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAppsRetrieveAppDetailsValidateBeforeCall(appId, accountId, _callback);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsAppsUpdateAppDetails
     * @param appId  (required)
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit app details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsUpdateAppDetailsCall(String appId, String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsAppEditableFields;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/calls/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAppsUpdateAppDetailsValidateBeforeCall(String appId, String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling callsAppsUpdateAppDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling callsAppsUpdateAppDetails(Async)");
        }

        // verify the required parameter 'callsAppEditableFields' is set
        if (callsAppEditableFields == null) {
            throw new ApiException("Missing the required parameter 'callsAppEditableFields' when calling callsAppsUpdateAppDetails(Async)");
        }

        return callsAppsUpdateAppDetailsCall(appId, accountId, callsAppEditableFields, _callback);

    }

    /**
     * Edit app details
     * Edit details for a single app.
     * @param appId  (required)
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @return CallsAppResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit app details response failure </td><td>  -  </td></tr>
     </table>
     */
    public CallsAppResponseSingle callsAppsUpdateAppDetails(String appId, String accountId, CallsAppEditableFields callsAppEditableFields) throws ApiException {
        ApiResponse<CallsAppResponseSingle> localVarResp = callsAppsUpdateAppDetailsWithHttpInfo(appId, accountId, callsAppEditableFields);
        return localVarResp.getData();
    }

    /**
     * Edit app details
     * Edit details for a single app.
     * @param appId  (required)
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @return ApiResponse&lt;CallsAppResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit app details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallsAppResponseSingle> callsAppsUpdateAppDetailsWithHttpInfo(String appId, String accountId, CallsAppEditableFields callsAppEditableFields) throws ApiException {
        okhttp3.Call localVarCall = callsAppsUpdateAppDetailsValidateBeforeCall(appId, accountId, callsAppEditableFields, null);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit app details (asynchronously)
     * Edit details for a single app.
     * @param appId  (required)
     * @param accountId  (required)
     * @param callsAppEditableFields  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit app details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit app details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callsAppsUpdateAppDetailsAsync(String appId, String accountId, CallsAppEditableFields callsAppEditableFields, final ApiCallback<CallsAppResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAppsUpdateAppDetailsValidateBeforeCall(appId, accountId, callsAppEditableFields, _callback);
        Type localVarReturnType = new TypeToken<CallsAppResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
