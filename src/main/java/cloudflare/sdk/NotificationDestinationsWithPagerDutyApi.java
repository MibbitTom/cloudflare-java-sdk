/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AaaApiResponseCollection;
import cloudflare.sdk.models.AaaComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AaaIdResponse;
import cloudflare.sdk.models.AaaSensitiveIdResponse;
import cloudflare.sdk.models.NotificationDestinationsWithPagerDutyConnectPagerDuty4XXResponse;
import cloudflare.sdk.models.NotificationDestinationsWithPagerDutyDeletePagerDutyServices4XXResponse;
import cloudflare.sdk.models.NotificationDestinationsWithPagerDutyListPagerDutyServices4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationDestinationsWithPagerDutyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationDestinationsWithPagerDutyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationDestinationsWithPagerDutyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationDestinationsWithPagerDutyConnectPagerDuty
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token for PagerDuty integration </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a token for PagerDuty integration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/destinations/pagerduty/connect"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationDestinationsWithPagerDutyConnectPagerDuty(Async)");
        }

        return notificationDestinationsWithPagerDutyConnectPagerDutyCall(accountId, _callback);

    }

    /**
     * Create PagerDuty integration token
     * Creates a new token for integrating with PagerDuty.
     * @param accountId  (required)
     * @return AaaSensitiveIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token for PagerDuty integration </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a token for PagerDuty integration failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaSensitiveIdResponse notificationDestinationsWithPagerDutyConnectPagerDuty(String accountId) throws ApiException {
        ApiResponse<AaaSensitiveIdResponse> localVarResp = notificationDestinationsWithPagerDutyConnectPagerDutyWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Create PagerDuty integration token
     * Creates a new token for integrating with PagerDuty.
     * @param accountId  (required)
     * @return ApiResponse&lt;AaaSensitiveIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token for PagerDuty integration </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a token for PagerDuty integration failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaSensitiveIdResponse> notificationDestinationsWithPagerDutyConnectPagerDutyWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyConnectPagerDutyValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AaaSensitiveIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create PagerDuty integration token (asynchronously)
     * Creates a new token for integrating with PagerDuty.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Token for PagerDuty integration </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a token for PagerDuty integration failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyAsync(String accountId, final ApiCallback<AaaSensitiveIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyConnectPagerDutyValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AaaSensitiveIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationDestinationsWithPagerDutyConnectPagerDutyToken
     * @param accountId  (required)
     * @param tokenId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyTokenCall(String accountId, String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/destinations/pagerduty/connect/{token_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyTokenValidateBeforeCall(String accountId, String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationDestinationsWithPagerDutyConnectPagerDutyToken(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling notificationDestinationsWithPagerDutyConnectPagerDutyToken(Async)");
        }

        return notificationDestinationsWithPagerDutyConnectPagerDutyTokenCall(accountId, tokenId, _callback);

    }

    /**
     * Connect PagerDuty
     * Links PagerDuty with the account using the integration token.
     * @param accountId  (required)
     * @param tokenId  (required)
     * @return AaaIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaIdResponse notificationDestinationsWithPagerDutyConnectPagerDutyToken(String accountId, String tokenId) throws ApiException {
        ApiResponse<AaaIdResponse> localVarResp = notificationDestinationsWithPagerDutyConnectPagerDutyTokenWithHttpInfo(accountId, tokenId);
        return localVarResp.getData();
    }

    /**
     * Connect PagerDuty
     * Links PagerDuty with the account using the integration token.
     * @param accountId  (required)
     * @param tokenId  (required)
     * @return ApiResponse&lt;AaaIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaIdResponse> notificationDestinationsWithPagerDutyConnectPagerDutyTokenWithHttpInfo(String accountId, String tokenId) throws ApiException {
        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyConnectPagerDutyTokenValidateBeforeCall(accountId, tokenId, null);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connect PagerDuty (asynchronously)
     * Links PagerDuty with the account using the integration token.
     * @param accountId  (required)
     * @param tokenId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Notification policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Notification policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyConnectPagerDutyTokenAsync(String accountId, String tokenId, final ApiCallback<AaaIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyConnectPagerDutyTokenValidateBeforeCall(accountId, tokenId, _callback);
        Type localVarReturnType = new TypeToken<AaaIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationDestinationsWithPagerDutyDeletePagerDutyServices
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete PagerDuty Services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete PagerDuty Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyDeletePagerDutyServicesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/destinations/pagerduty"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDestinationsWithPagerDutyDeletePagerDutyServicesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationDestinationsWithPagerDutyDeletePagerDutyServices(Async)");
        }

        return notificationDestinationsWithPagerDutyDeletePagerDutyServicesCall(accountId, _callback);

    }

    /**
     * Delete PagerDuty Services
     * Deletes all the PagerDuty Services connected to the account.
     * @param accountId  (required)
     * @return AaaApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete PagerDuty Services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete PagerDuty Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaApiResponseCollection notificationDestinationsWithPagerDutyDeletePagerDutyServices(String accountId) throws ApiException {
        ApiResponse<AaaApiResponseCollection> localVarResp = notificationDestinationsWithPagerDutyDeletePagerDutyServicesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Delete PagerDuty Services
     * Deletes all the PagerDuty Services connected to the account.
     * @param accountId  (required)
     * @return ApiResponse&lt;AaaApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete PagerDuty Services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete PagerDuty Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaApiResponseCollection> notificationDestinationsWithPagerDutyDeletePagerDutyServicesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyDeletePagerDutyServicesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AaaApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete PagerDuty Services (asynchronously)
     * Deletes all the PagerDuty Services connected to the account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete PagerDuty Services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete PagerDuty Services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyDeletePagerDutyServicesAsync(String accountId, final ApiCallback<AaaApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyDeletePagerDutyServicesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AaaApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationDestinationsWithPagerDutyListPagerDutyServices
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PagerDuty services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List PagerDuty services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyListPagerDutyServicesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/alerting/v3/destinations/pagerduty"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDestinationsWithPagerDutyListPagerDutyServicesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling notificationDestinationsWithPagerDutyListPagerDutyServices(Async)");
        }

        return notificationDestinationsWithPagerDutyListPagerDutyServicesCall(accountId, _callback);

    }

    /**
     * List PagerDuty services
     * Get a list of all configured PagerDuty services.
     * @param accountId  (required)
     * @return AaaComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PagerDuty services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List PagerDuty services response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaComponentsSchemasResponseCollection notificationDestinationsWithPagerDutyListPagerDutyServices(String accountId) throws ApiException {
        ApiResponse<AaaComponentsSchemasResponseCollection> localVarResp = notificationDestinationsWithPagerDutyListPagerDutyServicesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List PagerDuty services
     * Get a list of all configured PagerDuty services.
     * @param accountId  (required)
     * @return ApiResponse&lt;AaaComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PagerDuty services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List PagerDuty services response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaComponentsSchemasResponseCollection> notificationDestinationsWithPagerDutyListPagerDutyServicesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyListPagerDutyServicesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AaaComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List PagerDuty services (asynchronously)
     * Get a list of all configured PagerDuty services.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PagerDuty services response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List PagerDuty services response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDestinationsWithPagerDutyListPagerDutyServicesAsync(String accountId, final ApiCallback<AaaComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDestinationsWithPagerDutyListPagerDutyServicesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AaaComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
