/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.FirewallFirewalluablockResponseCollection;
import cloudflare.sdk.models.FirewallFirewalluablockResponseSingle;
import cloudflare.sdk.models.UserAgentBlockingRulesCreateAUserAgentBlockingRule4XXResponse;
import cloudflare.sdk.models.UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response;
import cloudflare.sdk.models.UserAgentBlockingRulesDeleteAUserAgentBlockingRule4XXResponse;
import cloudflare.sdk.models.UserAgentBlockingRulesListUserAgentBlockingRules4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAgentBlockingRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAgentBlockingRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAgentBlockingRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userAgentBlockingRulesCreateAUserAgentBlockingRule
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesCreateAUserAgentBlockingRuleCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/ua_rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAgentBlockingRulesCreateAUserAgentBlockingRuleValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling userAgentBlockingRulesCreateAUserAgentBlockingRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userAgentBlockingRulesCreateAUserAgentBlockingRule(Async)");
        }

        return userAgentBlockingRulesCreateAUserAgentBlockingRuleCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create a User Agent Blocking rule
     * Creates a new User Agent Blocking rule in a zone.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFirewalluablockResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallFirewalluablockResponseSingle userAgentBlockingRulesCreateAUserAgentBlockingRule(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFirewalluablockResponseSingle> localVarResp = userAgentBlockingRulesCreateAUserAgentBlockingRuleWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create a User Agent Blocking rule
     * Creates a new User Agent Blocking rule in a zone.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFirewalluablockResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallFirewalluablockResponseSingle> userAgentBlockingRulesCreateAUserAgentBlockingRuleWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = userAgentBlockingRulesCreateAUserAgentBlockingRuleValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a User Agent Blocking rule (asynchronously)
     * Creates a new User Agent Blocking rule in a zone.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesCreateAUserAgentBlockingRuleAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFirewalluablockResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAgentBlockingRulesCreateAUserAgentBlockingRuleValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAgentBlockingRulesDeleteAUserAgentBlockingRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesDeleteAUserAgentBlockingRuleCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/ua_rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAgentBlockingRulesDeleteAUserAgentBlockingRuleValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userAgentBlockingRulesDeleteAUserAgentBlockingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling userAgentBlockingRulesDeleteAUserAgentBlockingRule(Async)");
        }

        return userAgentBlockingRulesDeleteAUserAgentBlockingRuleCall(id, zoneIdentifier, _callback);

    }

    /**
     * Delete a User Agent Blocking rule
     * Deletes an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response userAgentBlockingRulesDeleteAUserAgentBlockingRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response> localVarResp = userAgentBlockingRulesDeleteAUserAgentBlockingRuleWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a User Agent Blocking rule
     * Deletes an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response> userAgentBlockingRulesDeleteAUserAgentBlockingRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = userAgentBlockingRulesDeleteAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a User Agent Blocking rule (asynchronously)
     * Deletes an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesDeleteAUserAgentBlockingRuleAsync(String id, String zoneIdentifier, final ApiCallback<UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAgentBlockingRulesDeleteAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<UserAgentBlockingRulesDeleteAUserAgentBlockingRule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAgentBlockingRulesGetAUserAgentBlockingRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesGetAUserAgentBlockingRuleCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/ua_rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAgentBlockingRulesGetAUserAgentBlockingRuleValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userAgentBlockingRulesGetAUserAgentBlockingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling userAgentBlockingRulesGetAUserAgentBlockingRule(Async)");
        }

        return userAgentBlockingRulesGetAUserAgentBlockingRuleCall(id, zoneIdentifier, _callback);

    }

    /**
     * Get a User Agent Blocking rule
     * Fetches the details of a User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallFirewalluablockResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallFirewalluablockResponseSingle userAgentBlockingRulesGetAUserAgentBlockingRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallFirewalluablockResponseSingle> localVarResp = userAgentBlockingRulesGetAUserAgentBlockingRuleWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a User Agent Blocking rule
     * Fetches the details of a User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallFirewalluablockResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallFirewalluablockResponseSingle> userAgentBlockingRulesGetAUserAgentBlockingRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = userAgentBlockingRulesGetAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a User Agent Blocking rule (asynchronously)
     * Fetches the details of a User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesGetAUserAgentBlockingRuleAsync(String id, String zoneIdentifier, final ApiCallback<FirewallFirewalluablockResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAgentBlockingRulesGetAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAgentBlockingRulesListUserAgentBlockingRules
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param descriptionSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param uaSearch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List User Agent Blocking rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List User Agent Blocking rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesListUserAgentBlockingRulesCall(String zoneIdentifier, BigDecimal page, String description, String descriptionSearch, BigDecimal perPage, String uaSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/ua_rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (descriptionSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description_search", descriptionSearch));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (uaSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ua_search", uaSearch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAgentBlockingRulesListUserAgentBlockingRulesValidateBeforeCall(String zoneIdentifier, BigDecimal page, String description, String descriptionSearch, BigDecimal perPage, String uaSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling userAgentBlockingRulesListUserAgentBlockingRules(Async)");
        }

        return userAgentBlockingRulesListUserAgentBlockingRulesCall(zoneIdentifier, page, description, descriptionSearch, perPage, uaSearch, _callback);

    }

    /**
     * List User Agent Blocking rules
     * Fetches User Agent Blocking rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param descriptionSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param uaSearch  (optional)
     * @return FirewallFirewalluablockResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List User Agent Blocking rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List User Agent Blocking rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallFirewalluablockResponseCollection userAgentBlockingRulesListUserAgentBlockingRules(String zoneIdentifier, BigDecimal page, String description, String descriptionSearch, BigDecimal perPage, String uaSearch) throws ApiException {
        ApiResponse<FirewallFirewalluablockResponseCollection> localVarResp = userAgentBlockingRulesListUserAgentBlockingRulesWithHttpInfo(zoneIdentifier, page, description, descriptionSearch, perPage, uaSearch);
        return localVarResp.getData();
    }

    /**
     * List User Agent Blocking rules
     * Fetches User Agent Blocking rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param descriptionSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param uaSearch  (optional)
     * @return ApiResponse&lt;FirewallFirewalluablockResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List User Agent Blocking rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List User Agent Blocking rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallFirewalluablockResponseCollection> userAgentBlockingRulesListUserAgentBlockingRulesWithHttpInfo(String zoneIdentifier, BigDecimal page, String description, String descriptionSearch, BigDecimal perPage, String uaSearch) throws ApiException {
        okhttp3.Call localVarCall = userAgentBlockingRulesListUserAgentBlockingRulesValidateBeforeCall(zoneIdentifier, page, description, descriptionSearch, perPage, uaSearch, null);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Agent Blocking rules (asynchronously)
     * Fetches User Agent Blocking rules in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param descriptionSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param uaSearch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List User Agent Blocking rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List User Agent Blocking rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesListUserAgentBlockingRulesAsync(String zoneIdentifier, BigDecimal page, String description, String descriptionSearch, BigDecimal perPage, String uaSearch, final ApiCallback<FirewallFirewalluablockResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAgentBlockingRulesListUserAgentBlockingRulesValidateBeforeCall(zoneIdentifier, page, description, descriptionSearch, perPage, uaSearch, _callback);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAgentBlockingRulesUpdateAUserAgentBlockingRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesUpdateAUserAgentBlockingRuleCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/ua_rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAgentBlockingRulesUpdateAUserAgentBlockingRuleValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userAgentBlockingRulesUpdateAUserAgentBlockingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling userAgentBlockingRulesUpdateAUserAgentBlockingRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userAgentBlockingRulesUpdateAUserAgentBlockingRule(Async)");
        }

        return userAgentBlockingRulesUpdateAUserAgentBlockingRuleCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update a User Agent Blocking rule
     * Updates an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFirewalluablockResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallFirewalluablockResponseSingle userAgentBlockingRulesUpdateAUserAgentBlockingRule(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFirewalluablockResponseSingle> localVarResp = userAgentBlockingRulesUpdateAUserAgentBlockingRuleWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update a User Agent Blocking rule
     * Updates an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFirewalluablockResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallFirewalluablockResponseSingle> userAgentBlockingRulesUpdateAUserAgentBlockingRuleWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = userAgentBlockingRulesUpdateAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a User Agent Blocking rule (asynchronously)
     * Updates an existing User Agent Blocking rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a User Agent Blocking rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a User Agent Blocking rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAgentBlockingRulesUpdateAUserAgentBlockingRuleAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallFirewalluablockResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAgentBlockingRulesUpdateAUserAgentBlockingRuleValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFirewalluablockResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
