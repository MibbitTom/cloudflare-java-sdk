/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.WafManagedRulesMode;
import cloudflare.sdk.models.WafManagedRulesRuleGroupResponseCollection;
import cloudflare.sdk.models.WafManagedRulesRuleGroupResponseSingle;
import cloudflare.sdk.models.WafRuleGroupsGetAWafRuleGroup4XXResponse;
import cloudflare.sdk.models.WafRuleGroupsListWafRuleGroups4XXResponse;
import cloudflare.sdk.models.WafRuleGroupsUpdateAWafRuleGroupRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WafRuleGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WafRuleGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WafRuleGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wafRuleGroupsGetAWafRuleGroup
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsGetAWafRuleGroupCall(String groupId, String packageId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/waf/packages/{package_id}/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(String groupId, String packageId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }

        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }

        return wafRuleGroupsGetAWafRuleGroupCall(groupId, packageId, zoneId, _callback);

    }

    /**
     * Get a WAF rule group
     * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @return WafManagedRulesRuleGroupResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public WafManagedRulesRuleGroupResponseSingle wafRuleGroupsGetAWafRuleGroup(String groupId, String packageId, String zoneId) throws ApiException {
        ApiResponse<WafManagedRulesRuleGroupResponseSingle> localVarResp = wafRuleGroupsGetAWafRuleGroupWithHttpInfo(groupId, packageId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get a WAF rule group
     * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;WafManagedRulesRuleGroupResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WafManagedRulesRuleGroupResponseSingle> wafRuleGroupsGetAWafRuleGroupWithHttpInfo(String groupId, String packageId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(groupId, packageId, zoneId, null);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a WAF rule group (asynchronously)
     * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsGetAWafRuleGroupAsync(String groupId, String packageId, String zoneId, final ApiCallback<WafManagedRulesRuleGroupResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(groupId, packageId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafRuleGroupsListWafRuleGroups
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param mode  (optional, default to on)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param rulesCount  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF rule groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF rule groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsListWafRuleGroupsCall(String packageId, String zoneId, WafManagedRulesMode mode, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, BigDecimal rulesCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/waf/packages/{package_id}/groups"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (rulesCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rules_count", rulesCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafRuleGroupsListWafRuleGroupsValidateBeforeCall(String packageId, String zoneId, WafManagedRulesMode mode, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, BigDecimal rulesCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling wafRuleGroupsListWafRuleGroups(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling wafRuleGroupsListWafRuleGroups(Async)");
        }

        return wafRuleGroupsListWafRuleGroupsCall(packageId, zoneId, mode, page, perPage, order, direction, match, name, rulesCount, _callback);

    }

    /**
     * List WAF rule groups
     * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param mode  (optional, default to on)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param rulesCount  (optional, default to 0)
     * @return WafManagedRulesRuleGroupResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF rule groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF rule groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public WafManagedRulesRuleGroupResponseCollection wafRuleGroupsListWafRuleGroups(String packageId, String zoneId, WafManagedRulesMode mode, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, BigDecimal rulesCount) throws ApiException {
        ApiResponse<WafManagedRulesRuleGroupResponseCollection> localVarResp = wafRuleGroupsListWafRuleGroupsWithHttpInfo(packageId, zoneId, mode, page, perPage, order, direction, match, name, rulesCount);
        return localVarResp.getData();
    }

    /**
     * List WAF rule groups
     * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param mode  (optional, default to on)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param rulesCount  (optional, default to 0)
     * @return ApiResponse&lt;WafManagedRulesRuleGroupResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF rule groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF rule groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WafManagedRulesRuleGroupResponseCollection> wafRuleGroupsListWafRuleGroupsWithHttpInfo(String packageId, String zoneId, WafManagedRulesMode mode, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, BigDecimal rulesCount) throws ApiException {
        okhttp3.Call localVarCall = wafRuleGroupsListWafRuleGroupsValidateBeforeCall(packageId, zoneId, mode, page, perPage, order, direction, match, name, rulesCount, null);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List WAF rule groups (asynchronously)
     * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param mode  (optional, default to on)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param rulesCount  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF rule groups response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF rule groups response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsListWafRuleGroupsAsync(String packageId, String zoneId, WafManagedRulesMode mode, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, BigDecimal rulesCount, final ApiCallback<WafManagedRulesRuleGroupResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafRuleGroupsListWafRuleGroupsValidateBeforeCall(packageId, zoneId, mode, page, perPage, order, direction, match, name, rulesCount, _callback);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafRuleGroupsUpdateAWafRuleGroup
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param wafRuleGroupsUpdateAWafRuleGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsUpdateAWafRuleGroupCall(String groupId, String packageId, String zoneId, WafRuleGroupsUpdateAWafRuleGroupRequest wafRuleGroupsUpdateAWafRuleGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wafRuleGroupsUpdateAWafRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/firewall/waf/packages/{package_id}/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(String groupId, String packageId, String zoneId, WafRuleGroupsUpdateAWafRuleGroupRequest wafRuleGroupsUpdateAWafRuleGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }

        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }

        // verify the required parameter 'wafRuleGroupsUpdateAWafRuleGroupRequest' is set
        if (wafRuleGroupsUpdateAWafRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'wafRuleGroupsUpdateAWafRuleGroupRequest' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }

        return wafRuleGroupsUpdateAWafRuleGroupCall(groupId, packageId, zoneId, wafRuleGroupsUpdateAWafRuleGroupRequest, _callback);

    }

    /**
     * Update a WAF rule group
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param wafRuleGroupsUpdateAWafRuleGroupRequest  (required)
     * @return WafManagedRulesRuleGroupResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public WafManagedRulesRuleGroupResponseSingle wafRuleGroupsUpdateAWafRuleGroup(String groupId, String packageId, String zoneId, WafRuleGroupsUpdateAWafRuleGroupRequest wafRuleGroupsUpdateAWafRuleGroupRequest) throws ApiException {
        ApiResponse<WafManagedRulesRuleGroupResponseSingle> localVarResp = wafRuleGroupsUpdateAWafRuleGroupWithHttpInfo(groupId, packageId, zoneId, wafRuleGroupsUpdateAWafRuleGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update a WAF rule group
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param wafRuleGroupsUpdateAWafRuleGroupRequest  (required)
     * @return ApiResponse&lt;WafManagedRulesRuleGroupResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WafManagedRulesRuleGroupResponseSingle> wafRuleGroupsUpdateAWafRuleGroupWithHttpInfo(String groupId, String packageId, String zoneId, WafRuleGroupsUpdateAWafRuleGroupRequest wafRuleGroupsUpdateAWafRuleGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(groupId, packageId, zoneId, wafRuleGroupsUpdateAWafRuleGroupRequest, null);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a WAF rule group (asynchronously)
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param groupId  (required)
     * @param packageId  (required)
     * @param zoneId  (required)
     * @param wafRuleGroupsUpdateAWafRuleGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF rule group response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF rule group response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wafRuleGroupsUpdateAWafRuleGroupAsync(String groupId, String packageId, String zoneId, WafRuleGroupsUpdateAWafRuleGroupRequest wafRuleGroupsUpdateAWafRuleGroupRequest, final ApiCallback<WafManagedRulesRuleGroupResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(groupId, packageId, zoneId, wafRuleGroupsUpdateAWafRuleGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<WafManagedRulesRuleGroupResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
