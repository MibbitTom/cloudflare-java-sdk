/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.DataZoneAnalyticsApiEnd;
import cloudflare.sdk.models.DataZoneAnalyticsApiFieldsResponse;
import cloudflare.sdk.models.DataZoneAnalyticsApiFlagResponse;
import cloudflare.sdk.models.DataZoneAnalyticsApiLogs;
import cloudflare.sdk.models.DataZoneAnalyticsApiTimestamps;
import cloudflare.sdk.models.LogsReceivedGetLogRetentionFlag4XXResponse;
import cloudflare.sdk.models.LogsReceivedGetLogsRayIDs4XXResponse;
import cloudflare.sdk.models.LogsReceivedGetLogsReceivedStartParameter;
import cloudflare.sdk.models.LogsReceivedListFields4XXResponse;
import cloudflare.sdk.models.LogsReceivedUpdateLogRetentionFlagRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsReceivedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsReceivedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsReceivedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for logsReceivedGetLogRetentionFlag
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogRetentionFlagCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logs/control/retention/flag"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReceivedGetLogRetentionFlagValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling logsReceivedGetLogRetentionFlag(Async)");
        }

        return logsReceivedGetLogRetentionFlagCall(zoneIdentifier, _callback);

    }

    /**
     * Get log retention flag
     * Gets log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @return DataZoneAnalyticsApiFlagResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public DataZoneAnalyticsApiFlagResponse logsReceivedGetLogRetentionFlag(String zoneIdentifier) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiFlagResponse> localVarResp = logsReceivedGetLogRetentionFlagWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get log retention flag
     * Gets log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DataZoneAnalyticsApiFlagResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataZoneAnalyticsApiFlagResponse> logsReceivedGetLogRetentionFlagWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = logsReceivedGetLogRetentionFlagValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFlagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get log retention flag (asynchronously)
     * Gets log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogRetentionFlagAsync(String zoneIdentifier, final ApiCallback<DataZoneAnalyticsApiFlagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReceivedGetLogRetentionFlagValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFlagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsReceivedGetLogsRayIDs
     * @param rayIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param timestamps  (optional, default to unixnano)
     * @param fields  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs RayIDs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs RayIDs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogsRayIDsCall(String rayIdentifier, String zoneIdentifier, DataZoneAnalyticsApiTimestamps timestamps, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logs/rayids/{ray_identifier}"
            .replace("{" + "ray_identifier" + "}", localVarApiClient.escapeString(rayIdentifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamps", timestamps));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReceivedGetLogsRayIDsValidateBeforeCall(String rayIdentifier, String zoneIdentifier, DataZoneAnalyticsApiTimestamps timestamps, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rayIdentifier' is set
        if (rayIdentifier == null) {
            throw new ApiException("Missing the required parameter 'rayIdentifier' when calling logsReceivedGetLogsRayIDs(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling logsReceivedGetLogsRayIDs(Async)");
        }

        return logsReceivedGetLogsRayIDsCall(rayIdentifier, zoneIdentifier, timestamps, fields, _callback);

    }

    /**
     * Get logs RayIDs
     * The &#x60;/rayids&#x60; api route allows lookups by specific rayid. The rayids route will return zero, one, or more records (ray ids are not unique).
     * @param rayIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param timestamps  (optional, default to unixnano)
     * @param fields  (optional)
     * @return DataZoneAnalyticsApiLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs RayIDs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs RayIDs response failure </td><td>  -  </td></tr>
     </table>
     */
    public DataZoneAnalyticsApiLogs logsReceivedGetLogsRayIDs(String rayIdentifier, String zoneIdentifier, DataZoneAnalyticsApiTimestamps timestamps, String fields) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiLogs> localVarResp = logsReceivedGetLogsRayIDsWithHttpInfo(rayIdentifier, zoneIdentifier, timestamps, fields);
        return localVarResp.getData();
    }

    /**
     * Get logs RayIDs
     * The &#x60;/rayids&#x60; api route allows lookups by specific rayid. The rayids route will return zero, one, or more records (ray ids are not unique).
     * @param rayIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param timestamps  (optional, default to unixnano)
     * @param fields  (optional)
     * @return ApiResponse&lt;DataZoneAnalyticsApiLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs RayIDs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs RayIDs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataZoneAnalyticsApiLogs> logsReceivedGetLogsRayIDsWithHttpInfo(String rayIdentifier, String zoneIdentifier, DataZoneAnalyticsApiTimestamps timestamps, String fields) throws ApiException {
        okhttp3.Call localVarCall = logsReceivedGetLogsRayIDsValidateBeforeCall(rayIdentifier, zoneIdentifier, timestamps, fields, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs RayIDs (asynchronously)
     * The &#x60;/rayids&#x60; api route allows lookups by specific rayid. The rayids route will return zero, one, or more records (ray ids are not unique).
     * @param rayIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param timestamps  (optional, default to unixnano)
     * @param fields  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs RayIDs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs RayIDs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogsRayIDsAsync(String rayIdentifier, String zoneIdentifier, DataZoneAnalyticsApiTimestamps timestamps, String fields, final ApiCallback<DataZoneAnalyticsApiLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReceivedGetLogsRayIDsValidateBeforeCall(rayIdentifier, zoneIdentifier, timestamps, fields, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsReceivedGetLogsReceived
     * @param zoneIdentifier  (required)
     * @param end  (required)
     * @param sample  (optional)
     * @param timestamps  (optional, default to unixnano)
     * @param count  (optional)
     * @param fields  (optional)
     * @param start  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs received response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs received response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogsReceivedCall(String zoneIdentifier, DataZoneAnalyticsApiEnd end, BigDecimal sample, DataZoneAnalyticsApiTimestamps timestamps, Integer count, String fields, LogsReceivedGetLogsReceivedStartParameter start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logs/received"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (sample != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sample", sample));
        }

        if (timestamps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamps", timestamps));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReceivedGetLogsReceivedValidateBeforeCall(String zoneIdentifier, DataZoneAnalyticsApiEnd end, BigDecimal sample, DataZoneAnalyticsApiTimestamps timestamps, Integer count, String fields, LogsReceivedGetLogsReceivedStartParameter start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling logsReceivedGetLogsReceived(Async)");
        }

        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling logsReceivedGetLogsReceived(Async)");
        }

        return logsReceivedGetLogsReceivedCall(zoneIdentifier, end, sample, timestamps, count, fields, start, _callback);

    }

    /**
     * Get logs received
     * The &#x60;/received&#x60; api route allows customers to retrieve their edge HTTP logs. The basic access pattern is \&quot;give me all the logs for zone Z for minute M\&quot;, where the minute M refers to the time records were received at Cloudflare&#39;s central data center. &#x60;start&#x60; is inclusive, and &#x60;end&#x60; is exclusive. Because of that, to get all data, at minutely cadence, starting at 10AM, the proper values are: &#x60;start&#x3D;2018-05-20T10:00:00Z&amp;end&#x3D;2018-05-20T10:01:00Z&#x60;, then &#x60;start&#x3D;2018-05-20T10:01:00Z&amp;end&#x3D;2018-05-20T10:02:00Z&#x60; and so on; the overlap will be handled properly.
     * @param zoneIdentifier  (required)
     * @param end  (required)
     * @param sample  (optional)
     * @param timestamps  (optional, default to unixnano)
     * @param count  (optional)
     * @param fields  (optional)
     * @param start  (optional)
     * @return DataZoneAnalyticsApiLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs received response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs received response failure </td><td>  -  </td></tr>
     </table>
     */
    public DataZoneAnalyticsApiLogs logsReceivedGetLogsReceived(String zoneIdentifier, DataZoneAnalyticsApiEnd end, BigDecimal sample, DataZoneAnalyticsApiTimestamps timestamps, Integer count, String fields, LogsReceivedGetLogsReceivedStartParameter start) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiLogs> localVarResp = logsReceivedGetLogsReceivedWithHttpInfo(zoneIdentifier, end, sample, timestamps, count, fields, start);
        return localVarResp.getData();
    }

    /**
     * Get logs received
     * The &#x60;/received&#x60; api route allows customers to retrieve their edge HTTP logs. The basic access pattern is \&quot;give me all the logs for zone Z for minute M\&quot;, where the minute M refers to the time records were received at Cloudflare&#39;s central data center. &#x60;start&#x60; is inclusive, and &#x60;end&#x60; is exclusive. Because of that, to get all data, at minutely cadence, starting at 10AM, the proper values are: &#x60;start&#x3D;2018-05-20T10:00:00Z&amp;end&#x3D;2018-05-20T10:01:00Z&#x60;, then &#x60;start&#x3D;2018-05-20T10:01:00Z&amp;end&#x3D;2018-05-20T10:02:00Z&#x60; and so on; the overlap will be handled properly.
     * @param zoneIdentifier  (required)
     * @param end  (required)
     * @param sample  (optional)
     * @param timestamps  (optional, default to unixnano)
     * @param count  (optional)
     * @param fields  (optional)
     * @param start  (optional)
     * @return ApiResponse&lt;DataZoneAnalyticsApiLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs received response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs received response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataZoneAnalyticsApiLogs> logsReceivedGetLogsReceivedWithHttpInfo(String zoneIdentifier, DataZoneAnalyticsApiEnd end, BigDecimal sample, DataZoneAnalyticsApiTimestamps timestamps, Integer count, String fields, LogsReceivedGetLogsReceivedStartParameter start) throws ApiException {
        okhttp3.Call localVarCall = logsReceivedGetLogsReceivedValidateBeforeCall(zoneIdentifier, end, sample, timestamps, count, fields, start, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs received (asynchronously)
     * The &#x60;/received&#x60; api route allows customers to retrieve their edge HTTP logs. The basic access pattern is \&quot;give me all the logs for zone Z for minute M\&quot;, where the minute M refers to the time records were received at Cloudflare&#39;s central data center. &#x60;start&#x60; is inclusive, and &#x60;end&#x60; is exclusive. Because of that, to get all data, at minutely cadence, starting at 10AM, the proper values are: &#x60;start&#x3D;2018-05-20T10:00:00Z&amp;end&#x3D;2018-05-20T10:01:00Z&#x60;, then &#x60;start&#x3D;2018-05-20T10:01:00Z&amp;end&#x3D;2018-05-20T10:02:00Z&#x60; and so on; the overlap will be handled properly.
     * @param zoneIdentifier  (required)
     * @param end  (required)
     * @param sample  (optional)
     * @param timestamps  (optional, default to unixnano)
     * @param count  (optional)
     * @param fields  (optional)
     * @param start  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get logs received response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get logs received response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedGetLogsReceivedAsync(String zoneIdentifier, DataZoneAnalyticsApiEnd end, BigDecimal sample, DataZoneAnalyticsApiTimestamps timestamps, Integer count, String fields, LogsReceivedGetLogsReceivedStartParameter start, final ApiCallback<DataZoneAnalyticsApiLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReceivedGetLogsReceivedValidateBeforeCall(zoneIdentifier, end, sample, timestamps, count, fields, start, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsReceivedListFields
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedListFieldsCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logs/received/fields"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReceivedListFieldsValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling logsReceivedListFields(Async)");
        }

        return logsReceivedListFieldsCall(zoneIdentifier, _callback);

    }

    /**
     * List fields
     * Lists all fields available. The response is json object with key-value pairs, where keys are field names, and values are descriptions.
     * @param zoneIdentifier  (required)
     * @return DataZoneAnalyticsApiFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public DataZoneAnalyticsApiFieldsResponse logsReceivedListFields(String zoneIdentifier) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiFieldsResponse> localVarResp = logsReceivedListFieldsWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * List fields
     * Lists all fields available. The response is json object with key-value pairs, where keys are field names, and values are descriptions.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DataZoneAnalyticsApiFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataZoneAnalyticsApiFieldsResponse> logsReceivedListFieldsWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = logsReceivedListFieldsValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List fields (asynchronously)
     * Lists all fields available. The response is json object with key-value pairs, where keys are field names, and values are descriptions.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedListFieldsAsync(String zoneIdentifier, final ApiCallback<DataZoneAnalyticsApiFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReceivedListFieldsValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsReceivedUpdateLogRetentionFlag
     * @param zoneIdentifier  (required)
     * @param logsReceivedUpdateLogRetentionFlagRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedUpdateLogRetentionFlagCall(String zoneIdentifier, LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logsReceivedUpdateLogRetentionFlagRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logs/control/retention/flag"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReceivedUpdateLogRetentionFlagValidateBeforeCall(String zoneIdentifier, LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling logsReceivedUpdateLogRetentionFlag(Async)");
        }

        // verify the required parameter 'logsReceivedUpdateLogRetentionFlagRequest' is set
        if (logsReceivedUpdateLogRetentionFlagRequest == null) {
            throw new ApiException("Missing the required parameter 'logsReceivedUpdateLogRetentionFlagRequest' when calling logsReceivedUpdateLogRetentionFlag(Async)");
        }

        return logsReceivedUpdateLogRetentionFlagCall(zoneIdentifier, logsReceivedUpdateLogRetentionFlagRequest, _callback);

    }

    /**
     * Update log retention flag
     * Updates log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @param logsReceivedUpdateLogRetentionFlagRequest  (required)
     * @return DataZoneAnalyticsApiFlagResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public DataZoneAnalyticsApiFlagResponse logsReceivedUpdateLogRetentionFlag(String zoneIdentifier, LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiFlagResponse> localVarResp = logsReceivedUpdateLogRetentionFlagWithHttpInfo(zoneIdentifier, logsReceivedUpdateLogRetentionFlagRequest);
        return localVarResp.getData();
    }

    /**
     * Update log retention flag
     * Updates log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @param logsReceivedUpdateLogRetentionFlagRequest  (required)
     * @return ApiResponse&lt;DataZoneAnalyticsApiFlagResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataZoneAnalyticsApiFlagResponse> logsReceivedUpdateLogRetentionFlagWithHttpInfo(String zoneIdentifier, LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest) throws ApiException {
        okhttp3.Call localVarCall = logsReceivedUpdateLogRetentionFlagValidateBeforeCall(zoneIdentifier, logsReceivedUpdateLogRetentionFlagRequest, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFlagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update log retention flag (asynchronously)
     * Updates log retention flag for Logpull API.
     * @param zoneIdentifier  (required)
     * @param logsReceivedUpdateLogRetentionFlagRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update log retention flag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update log retention flag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReceivedUpdateLogRetentionFlagAsync(String zoneIdentifier, LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest, final ApiCallback<DataZoneAnalyticsApiFlagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReceivedUpdateLogRetentionFlagValidateBeforeCall(zoneIdentifier, logsReceivedUpdateLogRetentionFlagRequest, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiFlagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
