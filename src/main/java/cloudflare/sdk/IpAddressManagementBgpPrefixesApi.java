/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AddressingBgpPrefixUpdateAdvertisement;
import cloudflare.sdk.models.AddressingResponseCollectionBgp;
import cloudflare.sdk.models.AddressingSingleResponseBgp;
import cloudflare.sdk.models.IpAddressManagementPrefixesFetchBgpPrefix4XXResponse;
import cloudflare.sdk.models.IpAddressManagementPrefixesListBgpPrefixes4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementBgpPrefixesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAddressManagementBgpPrefixesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementBgpPrefixesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAddressManagementPrefixesFetchBgpPrefix
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesFetchBgpPrefixCall(String accountId, String prefixId, String bgpPrefixId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes/{bgp_prefix_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "bgp_prefix_id" + "}", localVarApiClient.escapeString(bgpPrefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesFetchBgpPrefixValidateBeforeCall(String accountId, String prefixId, String bgpPrefixId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesFetchBgpPrefix(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesFetchBgpPrefix(Async)");
        }

        // verify the required parameter 'bgpPrefixId' is set
        if (bgpPrefixId == null) {
            throw new ApiException("Missing the required parameter 'bgpPrefixId' when calling ipAddressManagementPrefixesFetchBgpPrefix(Async)");
        }

        return ipAddressManagementPrefixesFetchBgpPrefixCall(accountId, prefixId, bgpPrefixId, _callback);

    }

    /**
     * Fetch BGP Prefix
     * Retrieve a single BGP Prefix according to its identifier
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @return AddressingSingleResponseBgp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingSingleResponseBgp ipAddressManagementPrefixesFetchBgpPrefix(String accountId, String prefixId, String bgpPrefixId) throws ApiException {
        ApiResponse<AddressingSingleResponseBgp> localVarResp = ipAddressManagementPrefixesFetchBgpPrefixWithHttpInfo(accountId, prefixId, bgpPrefixId);
        return localVarResp.getData();
    }

    /**
     * Fetch BGP Prefix
     * Retrieve a single BGP Prefix according to its identifier
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @return ApiResponse&lt;AddressingSingleResponseBgp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingSingleResponseBgp> ipAddressManagementPrefixesFetchBgpPrefixWithHttpInfo(String accountId, String prefixId, String bgpPrefixId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesFetchBgpPrefixValidateBeforeCall(accountId, prefixId, bgpPrefixId, null);
        Type localVarReturnType = new TypeToken<AddressingSingleResponseBgp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch BGP Prefix (asynchronously)
     * Retrieve a single BGP Prefix according to its identifier
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fetch BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Fetch BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesFetchBgpPrefixAsync(String accountId, String prefixId, String bgpPrefixId, final ApiCallback<AddressingSingleResponseBgp> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesFetchBgpPrefixValidateBeforeCall(accountId, prefixId, bgpPrefixId, _callback);
        Type localVarReturnType = new TypeToken<AddressingSingleResponseBgp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesListBgpPrefixes
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List BGP Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List BGP Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesListBgpPrefixesCall(String accountId, String prefixId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesListBgpPrefixesValidateBeforeCall(String accountId, String prefixId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesListBgpPrefixes(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesListBgpPrefixes(Async)");
        }

        return ipAddressManagementPrefixesListBgpPrefixesCall(accountId, prefixId, _callback);

    }

    /**
     * List BGP Prefixes
     * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
     * @param accountId  (required)
     * @param prefixId  (required)
     * @return AddressingResponseCollectionBgp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List BGP Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List BGP Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingResponseCollectionBgp ipAddressManagementPrefixesListBgpPrefixes(String accountId, String prefixId) throws ApiException {
        ApiResponse<AddressingResponseCollectionBgp> localVarResp = ipAddressManagementPrefixesListBgpPrefixesWithHttpInfo(accountId, prefixId);
        return localVarResp.getData();
    }

    /**
     * List BGP Prefixes
     * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
     * @param accountId  (required)
     * @param prefixId  (required)
     * @return ApiResponse&lt;AddressingResponseCollectionBgp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List BGP Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List BGP Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingResponseCollectionBgp> ipAddressManagementPrefixesListBgpPrefixesWithHttpInfo(String accountId, String prefixId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesListBgpPrefixesValidateBeforeCall(accountId, prefixId, null);
        Type localVarReturnType = new TypeToken<AddressingResponseCollectionBgp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List BGP Prefixes (asynchronously)
     * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List BGP Prefixes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List BGP Prefixes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesListBgpPrefixesAsync(String accountId, String prefixId, final ApiCallback<AddressingResponseCollectionBgp> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesListBgpPrefixesValidateBeforeCall(accountId, prefixId, _callback);
        Type localVarReturnType = new TypeToken<AddressingResponseCollectionBgp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementPrefixesUpdateBgpPrefix
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param addressingBgpPrefixUpdateAdvertisement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUpdateBgpPrefixCall(String accountId, String prefixId, String bgpPrefixId, AddressingBgpPrefixUpdateAdvertisement addressingBgpPrefixUpdateAdvertisement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addressingBgpPrefixUpdateAdvertisement;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes/{bgp_prefix_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "prefix_id" + "}", localVarApiClient.escapeString(prefixId.toString()))
            .replace("{" + "bgp_prefix_id" + "}", localVarApiClient.escapeString(bgpPrefixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementPrefixesUpdateBgpPrefixValidateBeforeCall(String accountId, String prefixId, String bgpPrefixId, AddressingBgpPrefixUpdateAdvertisement addressingBgpPrefixUpdateAdvertisement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementPrefixesUpdateBgpPrefix(Async)");
        }

        // verify the required parameter 'prefixId' is set
        if (prefixId == null) {
            throw new ApiException("Missing the required parameter 'prefixId' when calling ipAddressManagementPrefixesUpdateBgpPrefix(Async)");
        }

        // verify the required parameter 'bgpPrefixId' is set
        if (bgpPrefixId == null) {
            throw new ApiException("Missing the required parameter 'bgpPrefixId' when calling ipAddressManagementPrefixesUpdateBgpPrefix(Async)");
        }

        // verify the required parameter 'addressingBgpPrefixUpdateAdvertisement' is set
        if (addressingBgpPrefixUpdateAdvertisement == null) {
            throw new ApiException("Missing the required parameter 'addressingBgpPrefixUpdateAdvertisement' when calling ipAddressManagementPrefixesUpdateBgpPrefix(Async)");
        }

        return ipAddressManagementPrefixesUpdateBgpPrefixCall(accountId, prefixId, bgpPrefixId, addressingBgpPrefixUpdateAdvertisement, _callback);

    }

    /**
     * Update BGP Prefix
     * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param addressingBgpPrefixUpdateAdvertisement  (required)
     * @return AddressingSingleResponseBgp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingSingleResponseBgp ipAddressManagementPrefixesUpdateBgpPrefix(String accountId, String prefixId, String bgpPrefixId, AddressingBgpPrefixUpdateAdvertisement addressingBgpPrefixUpdateAdvertisement) throws ApiException {
        ApiResponse<AddressingSingleResponseBgp> localVarResp = ipAddressManagementPrefixesUpdateBgpPrefixWithHttpInfo(accountId, prefixId, bgpPrefixId, addressingBgpPrefixUpdateAdvertisement);
        return localVarResp.getData();
    }

    /**
     * Update BGP Prefix
     * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param addressingBgpPrefixUpdateAdvertisement  (required)
     * @return ApiResponse&lt;AddressingSingleResponseBgp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingSingleResponseBgp> ipAddressManagementPrefixesUpdateBgpPrefixWithHttpInfo(String accountId, String prefixId, String bgpPrefixId, AddressingBgpPrefixUpdateAdvertisement addressingBgpPrefixUpdateAdvertisement) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementPrefixesUpdateBgpPrefixValidateBeforeCall(accountId, prefixId, bgpPrefixId, addressingBgpPrefixUpdateAdvertisement, null);
        Type localVarReturnType = new TypeToken<AddressingSingleResponseBgp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update BGP Prefix (asynchronously)
     * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
     * @param accountId  (required)
     * @param prefixId  (required)
     * @param bgpPrefixId  (required)
     * @param addressingBgpPrefixUpdateAdvertisement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update BGP Prefix response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update BGP Prefix response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementPrefixesUpdateBgpPrefixAsync(String accountId, String prefixId, String bgpPrefixId, AddressingBgpPrefixUpdateAdvertisement addressingBgpPrefixUpdateAdvertisement, final ApiCallback<AddressingSingleResponseBgp> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementPrefixesUpdateBgpPrefixValidateBeforeCall(accountId, prefixId, bgpPrefixId, addressingBgpPrefixUpdateAdvertisement, _callback);
        Type localVarReturnType = new TypeToken<AddressingSingleResponseBgp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
