/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccountLoadBalancerMonitorsCreateMonitorRequest;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsCreatePool4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsCreatePoolRequest;
import cloudflare.sdk.models.AccountLoadBalancerPoolsDeletePool4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsListPoolReferences4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsListPools4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsPatchPoolRequest;
import cloudflare.sdk.models.AccountLoadBalancerPoolsPatchPoolsRequest;
import cloudflare.sdk.models.AccountLoadBalancerPoolsPoolHealthDetails4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerPoolsUpdatePoolRequest;
import cloudflare.sdk.models.LoadBalancingHealthDetails;
import cloudflare.sdk.models.LoadBalancingPreviewResponse;
import cloudflare.sdk.models.LoadBalancingSchemasIdResponse;
import cloudflare.sdk.models.LoadBalancingSchemasReferencesResponse;
import cloudflare.sdk.models.LoadBalancingSchemasResponseCollection;
import cloudflare.sdk.models.LoadBalancingSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountLoadBalancerPoolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountLoadBalancerPoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountLoadBalancerPoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountLoadBalancerPoolsCreatePool
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsCreatePoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsCreatePoolCall(String accountId, AccountLoadBalancerPoolsCreatePoolRequest accountLoadBalancerPoolsCreatePoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsCreatePoolRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsCreatePoolValidateBeforeCall(String accountId, AccountLoadBalancerPoolsCreatePoolRequest accountLoadBalancerPoolsCreatePoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsCreatePool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsCreatePoolRequest' is set
        if (accountLoadBalancerPoolsCreatePoolRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsCreatePoolRequest' when calling accountLoadBalancerPoolsCreatePool(Async)");
        }

        return accountLoadBalancerPoolsCreatePoolCall(accountId, accountLoadBalancerPoolsCreatePoolRequest, _callback);

    }

    /**
     * Create Pool
     * Create a new pool.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsCreatePoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse accountLoadBalancerPoolsCreatePool(String accountId, AccountLoadBalancerPoolsCreatePoolRequest accountLoadBalancerPoolsCreatePoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = accountLoadBalancerPoolsCreatePoolWithHttpInfo(accountId, accountLoadBalancerPoolsCreatePoolRequest);
        return localVarResp.getData();
    }

    /**
     * Create Pool
     * Create a new pool.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsCreatePoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> accountLoadBalancerPoolsCreatePoolWithHttpInfo(String accountId, AccountLoadBalancerPoolsCreatePoolRequest accountLoadBalancerPoolsCreatePoolRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsCreatePoolValidateBeforeCall(accountId, accountLoadBalancerPoolsCreatePoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Pool (asynchronously)
     * Create a new pool.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsCreatePoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsCreatePoolAsync(String accountId, AccountLoadBalancerPoolsCreatePoolRequest accountLoadBalancerPoolsCreatePoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsCreatePoolValidateBeforeCall(accountId, accountLoadBalancerPoolsCreatePoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsDeletePool
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsDeletePoolCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsDeletePoolValidateBeforeCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsDeletePool(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsDeletePool(Async)");
        }

        return accountLoadBalancerPoolsDeletePoolCall(poolId, accountId, _callback);

    }

    /**
     * Delete Pool
     * Delete a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return LoadBalancingSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasIdResponse accountLoadBalancerPoolsDeletePool(String poolId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingSchemasIdResponse> localVarResp = accountLoadBalancerPoolsDeletePoolWithHttpInfo(poolId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Pool
     * Delete a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasIdResponse> accountLoadBalancerPoolsDeletePoolWithHttpInfo(String poolId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsDeletePoolValidateBeforeCall(poolId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Pool (asynchronously)
     * Delete a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsDeletePoolAsync(String poolId, String accountId, final ApiCallback<LoadBalancingSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsDeletePoolValidateBeforeCall(poolId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsListPoolReferences
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsListPoolReferencesCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}/references"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsListPoolReferencesValidateBeforeCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsListPoolReferences(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsListPoolReferences(Async)");
        }

        return accountLoadBalancerPoolsListPoolReferencesCall(poolId, accountId, _callback);

    }

    /**
     * List Pool References
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return LoadBalancingSchemasReferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasReferencesResponse accountLoadBalancerPoolsListPoolReferences(String poolId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingSchemasReferencesResponse> localVarResp = accountLoadBalancerPoolsListPoolReferencesWithHttpInfo(poolId, accountId);
        return localVarResp.getData();
    }

    /**
     * List Pool References
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasReferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasReferencesResponse> accountLoadBalancerPoolsListPoolReferencesWithHttpInfo(String poolId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsListPoolReferencesValidateBeforeCall(poolId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasReferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pool References (asynchronously)
     * Get the list of resources that reference the provided pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pool References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pool References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsListPoolReferencesAsync(String poolId, String accountId, final ApiCallback<LoadBalancingSchemasReferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsListPoolReferencesValidateBeforeCall(poolId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasReferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsListPools
     * @param accountId  (required)
     * @param monitor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsListPoolsCall(String accountId, Object monitor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (monitor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitor", monitor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsListPoolsValidateBeforeCall(String accountId, Object monitor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsListPools(Async)");
        }

        return accountLoadBalancerPoolsListPoolsCall(accountId, monitor, _callback);

    }

    /**
     * List Pools
     * List configured pools.
     * @param accountId  (required)
     * @param monitor  (optional)
     * @return LoadBalancingSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasResponseCollection accountLoadBalancerPoolsListPools(String accountId, Object monitor) throws ApiException {
        ApiResponse<LoadBalancingSchemasResponseCollection> localVarResp = accountLoadBalancerPoolsListPoolsWithHttpInfo(accountId, monitor);
        return localVarResp.getData();
    }

    /**
     * List Pools
     * List configured pools.
     * @param accountId  (required)
     * @param monitor  (optional)
     * @return ApiResponse&lt;LoadBalancingSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasResponseCollection> accountLoadBalancerPoolsListPoolsWithHttpInfo(String accountId, Object monitor) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsListPoolsValidateBeforeCall(accountId, monitor, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pools (asynchronously)
     * List configured pools.
     * @param accountId  (required)
     * @param monitor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsListPoolsAsync(String accountId, Object monitor, final ApiCallback<LoadBalancingSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsListPoolsValidateBeforeCall(accountId, monitor, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsPatchPool
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPatchPoolCall(String poolId, String accountId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsPatchPoolRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsPatchPoolValidateBeforeCall(String poolId, String accountId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsPatchPool(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsPatchPool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsPatchPoolRequest' is set
        if (accountLoadBalancerPoolsPatchPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsPatchPoolRequest' when calling accountLoadBalancerPoolsPatchPool(Async)");
        }

        return accountLoadBalancerPoolsPatchPoolCall(poolId, accountId, accountLoadBalancerPoolsPatchPoolRequest, _callback);

    }

    /**
     * Patch Pool
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse accountLoadBalancerPoolsPatchPool(String poolId, String accountId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = accountLoadBalancerPoolsPatchPoolWithHttpInfo(poolId, accountId, accountLoadBalancerPoolsPatchPoolRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Pool
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> accountLoadBalancerPoolsPatchPoolWithHttpInfo(String poolId, String accountId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsPatchPoolValidateBeforeCall(poolId, accountId, accountLoadBalancerPoolsPatchPoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Pool (asynchronously)
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPatchPoolAsync(String poolId, String accountId, AccountLoadBalancerPoolsPatchPoolRequest accountLoadBalancerPoolsPatchPoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsPatchPoolValidateBeforeCall(poolId, accountId, accountLoadBalancerPoolsPatchPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsPatchPools
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPatchPoolsCall(String accountId, AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsPatchPoolsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsPatchPoolsValidateBeforeCall(String accountId, AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsPatchPools(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsPatchPoolsRequest' is set
        if (accountLoadBalancerPoolsPatchPoolsRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsPatchPoolsRequest' when calling accountLoadBalancerPoolsPatchPools(Async)");
        }

        return accountLoadBalancerPoolsPatchPoolsCall(accountId, accountLoadBalancerPoolsPatchPoolsRequest, _callback);

    }

    /**
     * Patch Pools
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @return LoadBalancingSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasResponseCollection accountLoadBalancerPoolsPatchPools(String accountId, AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasResponseCollection> localVarResp = accountLoadBalancerPoolsPatchPoolsWithHttpInfo(accountId, accountLoadBalancerPoolsPatchPoolsRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Pools
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasResponseCollection> accountLoadBalancerPoolsPatchPoolsWithHttpInfo(String accountId, AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsPatchPoolsValidateBeforeCall(accountId, accountLoadBalancerPoolsPatchPoolsRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Pools (asynchronously)
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending &#x60;name&#x60;. Returns the list of affected pools. Supports the standard pagination query parameters, either &#x60;limit&#x60;/&#x60;offset&#x60; or &#x60;per_page&#x60;/&#x60;page&#x60;.
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsPatchPoolsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Pools response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Pools response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPatchPoolsAsync(String accountId, AccountLoadBalancerPoolsPatchPoolsRequest accountLoadBalancerPoolsPatchPoolsRequest, final ApiCallback<LoadBalancingSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsPatchPoolsValidateBeforeCall(accountId, accountLoadBalancerPoolsPatchPoolsRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsPoolDetails
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPoolDetailsCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsPoolDetailsValidateBeforeCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsPoolDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsPoolDetails(Async)");
        }

        return accountLoadBalancerPoolsPoolDetailsCall(poolId, accountId, _callback);

    }

    /**
     * Pool Details
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse accountLoadBalancerPoolsPoolDetails(String poolId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = accountLoadBalancerPoolsPoolDetailsWithHttpInfo(poolId, accountId);
        return localVarResp.getData();
    }

    /**
     * Pool Details
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> accountLoadBalancerPoolsPoolDetailsWithHttpInfo(String poolId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsPoolDetailsValidateBeforeCall(poolId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pool Details (asynchronously)
     * Fetch a single configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPoolDetailsAsync(String poolId, String accountId, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsPoolDetailsValidateBeforeCall(poolId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsPoolHealthDetails
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPoolHealthDetailsCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}/health"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsPoolHealthDetailsValidateBeforeCall(String poolId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsPoolHealthDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsPoolHealthDetails(Async)");
        }

        return accountLoadBalancerPoolsPoolHealthDetailsCall(poolId, accountId, _callback);

    }

    /**
     * Pool Health Details
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return LoadBalancingHealthDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingHealthDetails accountLoadBalancerPoolsPoolHealthDetails(String poolId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingHealthDetails> localVarResp = accountLoadBalancerPoolsPoolHealthDetailsWithHttpInfo(poolId, accountId);
        return localVarResp.getData();
    }

    /**
     * Pool Health Details
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingHealthDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingHealthDetails> accountLoadBalancerPoolsPoolHealthDetailsWithHttpInfo(String poolId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsPoolHealthDetailsValidateBeforeCall(poolId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingHealthDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pool Health Details (asynchronously)
     * Fetch the latest pool health status for a single pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pool Health Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pool Health Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPoolHealthDetailsAsync(String poolId, String accountId, final ApiCallback<LoadBalancingHealthDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsPoolHealthDetailsValidateBeforeCall(poolId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingHealthDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsPreviewPool
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPreviewPoolCall(String poolId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}/preview"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsPreviewPoolValidateBeforeCall(String poolId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsPreviewPool(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsPreviewPool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling accountLoadBalancerPoolsPreviewPool(Async)");
        }

        return accountLoadBalancerPoolsPreviewPoolCall(poolId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Preview Pool
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResponse accountLoadBalancerPoolsPreviewPool(String poolId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingPreviewResponse> localVarResp = accountLoadBalancerPoolsPreviewPoolWithHttpInfo(poolId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Preview Pool
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResponse> accountLoadBalancerPoolsPreviewPoolWithHttpInfo(String poolId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsPreviewPoolValidateBeforeCall(poolId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Pool (asynchronously)
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsPreviewPoolAsync(String poolId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsPreviewPoolValidateBeforeCall(poolId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerPoolsUpdatePool
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsUpdatePoolCall(String poolId, String accountId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerPoolsUpdatePoolRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/pools/{pool_id}"
            .replace("{" + "pool_id" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerPoolsUpdatePoolValidateBeforeCall(String poolId, String accountId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling accountLoadBalancerPoolsUpdatePool(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerPoolsUpdatePool(Async)");
        }

        // verify the required parameter 'accountLoadBalancerPoolsUpdatePoolRequest' is set
        if (accountLoadBalancerPoolsUpdatePoolRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerPoolsUpdatePoolRequest' when calling accountLoadBalancerPoolsUpdatePool(Async)");
        }

        return accountLoadBalancerPoolsUpdatePoolCall(poolId, accountId, accountLoadBalancerPoolsUpdatePoolRequest, _callback);

    }

    /**
     * Update Pool
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @return LoadBalancingSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingSchemasSingleResponse accountLoadBalancerPoolsUpdatePool(String poolId, String accountId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest) throws ApiException {
        ApiResponse<LoadBalancingSchemasSingleResponse> localVarResp = accountLoadBalancerPoolsUpdatePoolWithHttpInfo(poolId, accountId, accountLoadBalancerPoolsUpdatePoolRequest);
        return localVarResp.getData();
    }

    /**
     * Update Pool
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @return ApiResponse&lt;LoadBalancingSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingSchemasSingleResponse> accountLoadBalancerPoolsUpdatePoolWithHttpInfo(String poolId, String accountId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerPoolsUpdatePoolValidateBeforeCall(poolId, accountId, accountLoadBalancerPoolsUpdatePoolRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Pool (asynchronously)
     * Modify a configured pool.
     * @param poolId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerPoolsUpdatePoolRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Pool response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Pool response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerPoolsUpdatePoolAsync(String poolId, String accountId, AccountLoadBalancerPoolsUpdatePoolRequest accountLoadBalancerPoolsUpdatePoolRequest, final ApiCallback<LoadBalancingSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerPoolsUpdatePoolValidateBeforeCall(poolId, accountId, accountLoadBalancerPoolsUpdatePoolRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
