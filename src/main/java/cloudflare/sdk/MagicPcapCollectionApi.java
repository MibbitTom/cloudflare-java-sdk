/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.MagicPcapCollectionAddBucketsForFullPacketCapturesDefaultResponse;
import cloudflare.sdk.models.MagicPcapCollectionCreatePcapRequestDefaultResponse;
import cloudflare.sdk.models.MagicPcapCollectionListPacketCaptureRequestsDefaultResponse;
import cloudflare.sdk.models.MagicPcapCollectionListPcaPsBucketOwnershipDefaultResponse;
import cloudflare.sdk.models.MagicVisibilityPcapsCollectionResponse;
import cloudflare.sdk.models.MagicVisibilityPcapsOwnershipCollection;
import cloudflare.sdk.models.MagicVisibilityPcapsOwnershipRequest;
import cloudflare.sdk.models.MagicVisibilityPcapsOwnershipSingleResponse;
import cloudflare.sdk.models.MagicVisibilityPcapsOwnershipValidateRequest;
import cloudflare.sdk.models.MagicVisibilityPcapsRequestPcap;
import cloudflare.sdk.models.MagicVisibilityPcapsSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicPcapCollectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicPcapCollectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicPcapCollectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicPcapCollectionAddBucketsForFullPacketCaptures
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Add buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionAddBucketsForFullPacketCapturesCall(String accountId, MagicVisibilityPcapsOwnershipRequest magicVisibilityPcapsOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicVisibilityPcapsOwnershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/ownership"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionAddBucketsForFullPacketCapturesValidateBeforeCall(String accountId, MagicVisibilityPcapsOwnershipRequest magicVisibilityPcapsOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionAddBucketsForFullPacketCaptures(Async)");
        }

        // verify the required parameter 'magicVisibilityPcapsOwnershipRequest' is set
        if (magicVisibilityPcapsOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'magicVisibilityPcapsOwnershipRequest' when calling magicPcapCollectionAddBucketsForFullPacketCaptures(Async)");
        }

        return magicPcapCollectionAddBucketsForFullPacketCapturesCall(accountId, magicVisibilityPcapsOwnershipRequest, _callback);

    }

    /**
     * Add buckets for full packet captures
     * Adds an AWS or GCP bucket to use with full packet captures.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipRequest  (required)
     * @return MagicVisibilityPcapsOwnershipSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Add buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsOwnershipSingleResponse magicPcapCollectionAddBucketsForFullPacketCaptures(String accountId, MagicVisibilityPcapsOwnershipRequest magicVisibilityPcapsOwnershipRequest) throws ApiException {
        ApiResponse<MagicVisibilityPcapsOwnershipSingleResponse> localVarResp = magicPcapCollectionAddBucketsForFullPacketCapturesWithHttpInfo(accountId, magicVisibilityPcapsOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Add buckets for full packet captures
     * Adds an AWS or GCP bucket to use with full packet captures.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipRequest  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsOwnershipSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Add buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsOwnershipSingleResponse> magicPcapCollectionAddBucketsForFullPacketCapturesWithHttpInfo(String accountId, MagicVisibilityPcapsOwnershipRequest magicVisibilityPcapsOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionAddBucketsForFullPacketCapturesValidateBeforeCall(accountId, magicVisibilityPcapsOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add buckets for full packet captures (asynchronously)
     * Adds an AWS or GCP bucket to use with full packet captures.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Add buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionAddBucketsForFullPacketCapturesAsync(String accountId, MagicVisibilityPcapsOwnershipRequest magicVisibilityPcapsOwnershipRequest, final ApiCallback<MagicVisibilityPcapsOwnershipSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionAddBucketsForFullPacketCapturesValidateBeforeCall(accountId, magicVisibilityPcapsOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionCreatePcapRequest
     * @param accountId  (required)
     * @param magicVisibilityPcapsRequestPcap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionCreatePcapRequestCall(String accountId, MagicVisibilityPcapsRequestPcap magicVisibilityPcapsRequestPcap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicVisibilityPcapsRequestPcap;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionCreatePcapRequestValidateBeforeCall(String accountId, MagicVisibilityPcapsRequestPcap magicVisibilityPcapsRequestPcap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionCreatePcapRequest(Async)");
        }

        // verify the required parameter 'magicVisibilityPcapsRequestPcap' is set
        if (magicVisibilityPcapsRequestPcap == null) {
            throw new ApiException("Missing the required parameter 'magicVisibilityPcapsRequestPcap' when calling magicPcapCollectionCreatePcapRequest(Async)");
        }

        return magicPcapCollectionCreatePcapRequestCall(accountId, magicVisibilityPcapsRequestPcap, _callback);

    }

    /**
     * Create PCAP request
     * Create new PCAP request for account.
     * @param accountId  (required)
     * @param magicVisibilityPcapsRequestPcap  (required)
     * @return MagicVisibilityPcapsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsSingleResponse magicPcapCollectionCreatePcapRequest(String accountId, MagicVisibilityPcapsRequestPcap magicVisibilityPcapsRequestPcap) throws ApiException {
        ApiResponse<MagicVisibilityPcapsSingleResponse> localVarResp = magicPcapCollectionCreatePcapRequestWithHttpInfo(accountId, magicVisibilityPcapsRequestPcap);
        return localVarResp.getData();
    }

    /**
     * Create PCAP request
     * Create new PCAP request for account.
     * @param accountId  (required)
     * @param magicVisibilityPcapsRequestPcap  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsSingleResponse> magicPcapCollectionCreatePcapRequestWithHttpInfo(String accountId, MagicVisibilityPcapsRequestPcap magicVisibilityPcapsRequestPcap) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionCreatePcapRequestValidateBeforeCall(accountId, magicVisibilityPcapsRequestPcap, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create PCAP request (asynchronously)
     * Create new PCAP request for account.
     * @param accountId  (required)
     * @param magicVisibilityPcapsRequestPcap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionCreatePcapRequestAsync(String accountId, MagicVisibilityPcapsRequestPcap magicVisibilityPcapsRequestPcap, final ApiCallback<MagicVisibilityPcapsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionCreatePcapRequestValidateBeforeCall(accountId, magicVisibilityPcapsRequestPcap, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionDeleteBucketsForFullPacketCaptures
     * @param ownershipId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionDeleteBucketsForFullPacketCapturesCall(String ownershipId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/ownership/{ownership_id}"
            .replace("{" + "ownership_id" + "}", localVarApiClient.escapeString(ownershipId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionDeleteBucketsForFullPacketCapturesValidateBeforeCall(String ownershipId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling magicPcapCollectionDeleteBucketsForFullPacketCaptures(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionDeleteBucketsForFullPacketCaptures(Async)");
        }

        return magicPcapCollectionDeleteBucketsForFullPacketCapturesCall(ownershipId, accountId, _callback);

    }

    /**
     * Delete buckets for full packet captures
     * Deletes buckets added to the packet captures API.
     * @param ownershipId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public void magicPcapCollectionDeleteBucketsForFullPacketCaptures(String ownershipId, String accountId) throws ApiException {
        magicPcapCollectionDeleteBucketsForFullPacketCapturesWithHttpInfo(ownershipId, accountId);
    }

    /**
     * Delete buckets for full packet captures
     * Deletes buckets added to the packet captures API.
     * @param ownershipId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> magicPcapCollectionDeleteBucketsForFullPacketCapturesWithHttpInfo(String ownershipId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionDeleteBucketsForFullPacketCapturesValidateBeforeCall(ownershipId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete buckets for full packet captures (asynchronously)
     * Deletes buckets added to the packet captures API.
     * @param ownershipId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionDeleteBucketsForFullPacketCapturesAsync(String ownershipId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionDeleteBucketsForFullPacketCapturesValidateBeforeCall(ownershipId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionDownloadSimplePcap
     * @param pcapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Simple PCAP response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Download Simple PCAP response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionDownloadSimplePcapCall(String pcapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/{pcap_id}/download"
            .replace("{" + "pcap_id" + "}", localVarApiClient.escapeString(pcapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.tcpdump.pcap",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionDownloadSimplePcapValidateBeforeCall(String pcapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pcapId' is set
        if (pcapId == null) {
            throw new ApiException("Missing the required parameter 'pcapId' when calling magicPcapCollectionDownloadSimplePcap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionDownloadSimplePcap(Async)");
        }

        return magicPcapCollectionDownloadSimplePcapCall(pcapId, accountId, _callback);

    }

    /**
     * Download Simple PCAP
     * Download PCAP information into a file. Response is a binary PCAP file.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Simple PCAP response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Download Simple PCAP response failure </td><td>  -  </td></tr>
     </table>
     */
    public void magicPcapCollectionDownloadSimplePcap(String pcapId, String accountId) throws ApiException {
        magicPcapCollectionDownloadSimplePcapWithHttpInfo(pcapId, accountId);
    }

    /**
     * Download Simple PCAP
     * Download PCAP information into a file. Response is a binary PCAP file.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Simple PCAP response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Download Simple PCAP response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> magicPcapCollectionDownloadSimplePcapWithHttpInfo(String pcapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionDownloadSimplePcapValidateBeforeCall(pcapId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Simple PCAP (asynchronously)
     * Download PCAP information into a file. Response is a binary PCAP file.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download Simple PCAP response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Download Simple PCAP response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionDownloadSimplePcapAsync(String pcapId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionDownloadSimplePcapValidateBeforeCall(pcapId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionGetPcapRequest
     * @param pcapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionGetPcapRequestCall(String pcapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/{pcap_id}"
            .replace("{" + "pcap_id" + "}", localVarApiClient.escapeString(pcapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionGetPcapRequestValidateBeforeCall(String pcapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pcapId' is set
        if (pcapId == null) {
            throw new ApiException("Missing the required parameter 'pcapId' when calling magicPcapCollectionGetPcapRequest(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionGetPcapRequest(Async)");
        }

        return magicPcapCollectionGetPcapRequestCall(pcapId, accountId, _callback);

    }

    /**
     * Get PCAP request
     * Get information for a PCAP request by id.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @return MagicVisibilityPcapsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsSingleResponse magicPcapCollectionGetPcapRequest(String pcapId, String accountId) throws ApiException {
        ApiResponse<MagicVisibilityPcapsSingleResponse> localVarResp = magicPcapCollectionGetPcapRequestWithHttpInfo(pcapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get PCAP request
     * Get information for a PCAP request by id.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsSingleResponse> magicPcapCollectionGetPcapRequestWithHttpInfo(String pcapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionGetPcapRequestValidateBeforeCall(pcapId, accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PCAP request (asynchronously)
     * Get information for a PCAP request by id.
     * @param pcapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get PCAP request response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get PCAP request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionGetPcapRequestAsync(String pcapId, String accountId, final ApiCallback<MagicVisibilityPcapsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionGetPcapRequestValidateBeforeCall(pcapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionListPacketCaptureRequests
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List packet capture requests response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List packet capture requests response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionListPacketCaptureRequestsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionListPacketCaptureRequestsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionListPacketCaptureRequests(Async)");
        }

        return magicPcapCollectionListPacketCaptureRequestsCall(accountId, _callback);

    }

    /**
     * List packet capture requests
     * Lists all packet capture requests for an account.
     * @param accountId  (required)
     * @return MagicVisibilityPcapsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List packet capture requests response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List packet capture requests response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsCollectionResponse magicPcapCollectionListPacketCaptureRequests(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityPcapsCollectionResponse> localVarResp = magicPcapCollectionListPacketCaptureRequestsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List packet capture requests
     * Lists all packet capture requests for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List packet capture requests response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List packet capture requests response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsCollectionResponse> magicPcapCollectionListPacketCaptureRequestsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionListPacketCaptureRequestsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List packet capture requests (asynchronously)
     * Lists all packet capture requests for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List packet capture requests response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List packet capture requests response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionListPacketCaptureRequestsAsync(String accountId, final ApiCallback<MagicVisibilityPcapsCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionListPacketCaptureRequestsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionListPcaPsBucketOwnership
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PCAPs Bucket Ownership response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List PCAPs Bucket Ownership response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionListPcaPsBucketOwnershipCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/ownership"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionListPcaPsBucketOwnershipValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionListPcaPsBucketOwnership(Async)");
        }

        return magicPcapCollectionListPcaPsBucketOwnershipCall(accountId, _callback);

    }

    /**
     * List PCAPs Bucket Ownership
     * List all buckets configured for use with PCAPs API.
     * @param accountId  (required)
     * @return MagicVisibilityPcapsOwnershipCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PCAPs Bucket Ownership response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List PCAPs Bucket Ownership response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsOwnershipCollection magicPcapCollectionListPcaPsBucketOwnership(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityPcapsOwnershipCollection> localVarResp = magicPcapCollectionListPcaPsBucketOwnershipWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List PCAPs Bucket Ownership
     * List all buckets configured for use with PCAPs API.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsOwnershipCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PCAPs Bucket Ownership response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List PCAPs Bucket Ownership response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsOwnershipCollection> magicPcapCollectionListPcaPsBucketOwnershipWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionListPcaPsBucketOwnershipValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List PCAPs Bucket Ownership (asynchronously)
     * List all buckets configured for use with PCAPs API.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List PCAPs Bucket Ownership response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List PCAPs Bucket Ownership response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionListPcaPsBucketOwnershipAsync(String accountId, final ApiCallback<MagicVisibilityPcapsOwnershipCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionListPcaPsBucketOwnershipValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicPcapCollectionValidateBucketsForFullPacketCaptures
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipValidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Validate buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionValidateBucketsForFullPacketCapturesCall(String accountId, MagicVisibilityPcapsOwnershipValidateRequest magicVisibilityPcapsOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicVisibilityPcapsOwnershipValidateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pcaps/ownership/validate"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicPcapCollectionValidateBucketsForFullPacketCapturesValidateBeforeCall(String accountId, MagicVisibilityPcapsOwnershipValidateRequest magicVisibilityPcapsOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicPcapCollectionValidateBucketsForFullPacketCaptures(Async)");
        }

        // verify the required parameter 'magicVisibilityPcapsOwnershipValidateRequest' is set
        if (magicVisibilityPcapsOwnershipValidateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicVisibilityPcapsOwnershipValidateRequest' when calling magicPcapCollectionValidateBucketsForFullPacketCaptures(Async)");
        }

        return magicPcapCollectionValidateBucketsForFullPacketCapturesCall(accountId, magicVisibilityPcapsOwnershipValidateRequest, _callback);

    }

    /**
     * Validate buckets for full packet captures
     * Validates buckets added to the packet captures API.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipValidateRequest  (required)
     * @return MagicVisibilityPcapsOwnershipSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Validate buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityPcapsOwnershipSingleResponse magicPcapCollectionValidateBucketsForFullPacketCaptures(String accountId, MagicVisibilityPcapsOwnershipValidateRequest magicVisibilityPcapsOwnershipValidateRequest) throws ApiException {
        ApiResponse<MagicVisibilityPcapsOwnershipSingleResponse> localVarResp = magicPcapCollectionValidateBucketsForFullPacketCapturesWithHttpInfo(accountId, magicVisibilityPcapsOwnershipValidateRequest);
        return localVarResp.getData();
    }

    /**
     * Validate buckets for full packet captures
     * Validates buckets added to the packet captures API.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipValidateRequest  (required)
     * @return ApiResponse&lt;MagicVisibilityPcapsOwnershipSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Validate buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityPcapsOwnershipSingleResponse> magicPcapCollectionValidateBucketsForFullPacketCapturesWithHttpInfo(String accountId, MagicVisibilityPcapsOwnershipValidateRequest magicVisibilityPcapsOwnershipValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicPcapCollectionValidateBucketsForFullPacketCapturesValidateBeforeCall(accountId, magicVisibilityPcapsOwnershipValidateRequest, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate buckets for full packet captures (asynchronously)
     * Validates buckets added to the packet captures API.
     * @param accountId  (required)
     * @param magicVisibilityPcapsOwnershipValidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate buckets for full packet captures response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Validate buckets for full packet captures response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicPcapCollectionValidateBucketsForFullPacketCapturesAsync(String accountId, MagicVisibilityPcapsOwnershipValidateRequest magicVisibilityPcapsOwnershipValidateRequest, final ApiCallback<MagicVisibilityPcapsOwnershipSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicPcapCollectionValidateBucketsForFullPacketCapturesValidateBeforeCall(accountId, magicVisibilityPcapsOwnershipValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityPcapsOwnershipSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
