/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.CloudflareImagesKeysListSigningKeys4XXResponse;
import cloudflare.sdk.models.ImagesImageKeyResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudflareImagesKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CloudflareImagesKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudflareImagesKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudflareImagesKeysAddSigningKey
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysAddSigningKeyCall(Object signingKeyName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/keys/{signing_key_name}"
            .replace("{" + "signing_key_name" + "}", localVarApiClient.escapeString(signingKeyName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesKeysAddSigningKeyValidateBeforeCall(Object signingKeyName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signingKeyName' is set
        if (signingKeyName == null) {
            throw new ApiException("Missing the required parameter 'signingKeyName' when calling cloudflareImagesKeysAddSigningKey(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesKeysAddSigningKey(Async)");
        }

        return cloudflareImagesKeysAddSigningKeyCall(signingKeyName, accountId, _callback);

    }

    /**
     * Create a new Signing Key
     * Create a new signing key with specified name. Returns all keys available.
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @return ImagesImageKeyResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageKeyResponseCollection cloudflareImagesKeysAddSigningKey(Object signingKeyName, String accountId) throws ApiException {
        ApiResponse<ImagesImageKeyResponseCollection> localVarResp = cloudflareImagesKeysAddSigningKeyWithHttpInfo(signingKeyName, accountId);
        return localVarResp.getData();
    }

    /**
     * Create a new Signing Key
     * Create a new signing key with specified name. Returns all keys available.
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesImageKeyResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageKeyResponseCollection> cloudflareImagesKeysAddSigningKeyWithHttpInfo(Object signingKeyName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesKeysAddSigningKeyValidateBeforeCall(signingKeyName, accountId, null);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Signing Key (asynchronously)
     * Create a new signing key with specified name. Returns all keys available.
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysAddSigningKeyAsync(Object signingKeyName, String accountId, final ApiCallback<ImagesImageKeyResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesKeysAddSigningKeyValidateBeforeCall(signingKeyName, accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesKeysDeleteSigningKey
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysDeleteSigningKeyCall(Object signingKeyName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/keys/{signing_key_name}"
            .replace("{" + "signing_key_name" + "}", localVarApiClient.escapeString(signingKeyName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesKeysDeleteSigningKeyValidateBeforeCall(Object signingKeyName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signingKeyName' is set
        if (signingKeyName == null) {
            throw new ApiException("Missing the required parameter 'signingKeyName' when calling cloudflareImagesKeysDeleteSigningKey(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesKeysDeleteSigningKey(Async)");
        }

        return cloudflareImagesKeysDeleteSigningKeyCall(signingKeyName, accountId, _callback);

    }

    /**
     * Delete Signing Key
     * Delete signing key with specified name. Returns all keys available. When last key is removed, a new default signing key will be generated. 
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @return ImagesImageKeyResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageKeyResponseCollection cloudflareImagesKeysDeleteSigningKey(Object signingKeyName, String accountId) throws ApiException {
        ApiResponse<ImagesImageKeyResponseCollection> localVarResp = cloudflareImagesKeysDeleteSigningKeyWithHttpInfo(signingKeyName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Signing Key
     * Delete signing key with specified name. Returns all keys available. When last key is removed, a new default signing key will be generated. 
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesImageKeyResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageKeyResponseCollection> cloudflareImagesKeysDeleteSigningKeyWithHttpInfo(Object signingKeyName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesKeysDeleteSigningKeyValidateBeforeCall(signingKeyName, accountId, null);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Signing Key (asynchronously)
     * Delete signing key with specified name. Returns all keys available. When last key is removed, a new default signing key will be generated. 
     * @param signingKeyName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Signing Key response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Signing Key response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysDeleteSigningKeyAsync(Object signingKeyName, String accountId, final ApiCallback<ImagesImageKeyResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesKeysDeleteSigningKeyValidateBeforeCall(signingKeyName, accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesKeysListSigningKeys
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Signing Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Signing Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysListSigningKeysCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/keys"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesKeysListSigningKeysValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesKeysListSigningKeys(Async)");
        }

        return cloudflareImagesKeysListSigningKeysCall(accountId, _callback);

    }

    /**
     * List Signing Keys
     * Lists your signing keys. These can be found on your Cloudflare Images dashboard.
     * @param accountId  (required)
     * @return ImagesImageKeyResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Signing Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Signing Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageKeyResponseCollection cloudflareImagesKeysListSigningKeys(String accountId) throws ApiException {
        ApiResponse<ImagesImageKeyResponseCollection> localVarResp = cloudflareImagesKeysListSigningKeysWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Signing Keys
     * Lists your signing keys. These can be found on your Cloudflare Images dashboard.
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesImageKeyResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Signing Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Signing Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageKeyResponseCollection> cloudflareImagesKeysListSigningKeysWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesKeysListSigningKeysValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Signing Keys (asynchronously)
     * Lists your signing keys. These can be found on your Cloudflare Images dashboard.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Signing Keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Signing Keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesKeysListSigningKeysAsync(String accountId, final ApiCallback<ImagesImageKeyResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesKeysListSigningKeysValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageKeyResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
