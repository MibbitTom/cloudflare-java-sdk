/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccountLoadBalancerMonitorsCreateMonitor4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsCreateMonitorRequest;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsDeleteMonitor4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsListMonitorReferences4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsListMonitors4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import cloudflare.sdk.models.AccountLoadBalancerMonitorsPreviewResult4XXResponse;
import cloudflare.sdk.models.LoadBalancingIdResponse;
import cloudflare.sdk.models.LoadBalancingMonitorResponseCollection;
import cloudflare.sdk.models.LoadBalancingMonitorResponseSingle;
import cloudflare.sdk.models.LoadBalancingPreviewResponse;
import cloudflare.sdk.models.LoadBalancingPreviewResultResponse;
import cloudflare.sdk.models.LoadBalancingReferencesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountLoadBalancerMonitorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountLoadBalancerMonitorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountLoadBalancerMonitorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountLoadBalancerMonitorsCreateMonitor
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsCreateMonitorCall(String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsCreateMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling accountLoadBalancerMonitorsCreateMonitor(Async)");
        }

        return accountLoadBalancerMonitorsCreateMonitorCall(accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle accountLoadBalancerMonitorsCreateMonitor(String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = accountLoadBalancerMonitorsCreateMonitorWithHttpInfo(accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> accountLoadBalancerMonitorsCreateMonitorWithHttpInfo(String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(accountId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Monitor (asynchronously)
     * Create a configured monitor.
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsCreateMonitorAsync(String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsDeleteMonitor
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsDeleteMonitorCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsDeleteMonitor(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsDeleteMonitor(Async)");
        }

        return accountLoadBalancerMonitorsDeleteMonitorCall(monitorId, accountId, _callback);

    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return LoadBalancingIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingIdResponse accountLoadBalancerMonitorsDeleteMonitor(String monitorId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingIdResponse> localVarResp = accountLoadBalancerMonitorsDeleteMonitorWithHttpInfo(monitorId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingIdResponse> accountLoadBalancerMonitorsDeleteMonitorWithHttpInfo(String monitorId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(monitorId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Monitor (asynchronously)
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsDeleteMonitorAsync(String monitorId, String accountId, final ApiCallback<LoadBalancingIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(monitorId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsListMonitorReferences
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsListMonitorReferencesCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}/references"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsListMonitorReferences(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsListMonitorReferences(Async)");
        }

        return accountLoadBalancerMonitorsListMonitorReferencesCall(monitorId, accountId, _callback);

    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return LoadBalancingReferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingReferencesResponse accountLoadBalancerMonitorsListMonitorReferences(String monitorId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingReferencesResponse> localVarResp = accountLoadBalancerMonitorsListMonitorReferencesWithHttpInfo(monitorId, accountId);
        return localVarResp.getData();
    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingReferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingReferencesResponse> accountLoadBalancerMonitorsListMonitorReferencesWithHttpInfo(String monitorId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(monitorId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingReferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Monitor References (asynchronously)
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsListMonitorReferencesAsync(String monitorId, String accountId, final ApiCallback<LoadBalancingReferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(monitorId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingReferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsListMonitors
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsListMonitorsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsListMonitors(Async)");
        }

        return accountLoadBalancerMonitorsListMonitorsCall(accountId, _callback);

    }

    /**
     * List Monitors
     * List configured monitors for an account.
     * @param accountId  (required)
     * @return LoadBalancingMonitorResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseCollection accountLoadBalancerMonitorsListMonitors(String accountId) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseCollection> localVarResp = accountLoadBalancerMonitorsListMonitorsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Monitors
     * List configured monitors for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseCollection> accountLoadBalancerMonitorsListMonitorsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Monitors (asynchronously)
     * List configured monitors for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsListMonitorsAsync(String accountId, final ApiCallback<LoadBalancingMonitorResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsMonitorDetails
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsMonitorDetailsCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(String monitorId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsMonitorDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsMonitorDetails(Async)");
        }

        return accountLoadBalancerMonitorsMonitorDetailsCall(monitorId, accountId, _callback);

    }

    /**
     * Monitor Details
     * List a single configured monitor for an account.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle accountLoadBalancerMonitorsMonitorDetails(String monitorId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = accountLoadBalancerMonitorsMonitorDetailsWithHttpInfo(monitorId, accountId);
        return localVarResp.getData();
    }

    /**
     * Monitor Details
     * List a single configured monitor for an account.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> accountLoadBalancerMonitorsMonitorDetailsWithHttpInfo(String monitorId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(monitorId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Monitor Details (asynchronously)
     * List a single configured monitor for an account.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsMonitorDetailsAsync(String monitorId, String accountId, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(monitorId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPatchMonitor
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPatchMonitorCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }

        return accountLoadBalancerMonitorsPatchMonitorCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle accountLoadBalancerMonitorsPatchMonitor(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = accountLoadBalancerMonitorsPatchMonitorWithHttpInfo(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> accountLoadBalancerMonitorsPatchMonitorWithHttpInfo(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Monitor (asynchronously)
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPatchMonitorAsync(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPreviewMonitor
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPreviewMonitorCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}/preview"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }

        return accountLoadBalancerMonitorsPreviewMonitorCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResponse accountLoadBalancerMonitorsPreviewMonitor(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingPreviewResponse> localVarResp = accountLoadBalancerMonitorsPreviewMonitorWithHttpInfo(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResponse> accountLoadBalancerMonitorsPreviewMonitorWithHttpInfo(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Monitor (asynchronously)
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPreviewMonitorAsync(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPreviewResult
     * @param previewId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPreviewResultCall(Object previewId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/preview/{preview_id}"
            .replace("{" + "preview_id" + "}", localVarApiClient.escapeString(previewId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(Object previewId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'previewId' is set
        if (previewId == null) {
            throw new ApiException("Missing the required parameter 'previewId' when calling accountLoadBalancerMonitorsPreviewResult(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsPreviewResult(Async)");
        }

        return accountLoadBalancerMonitorsPreviewResultCall(previewId, accountId, _callback);

    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountId  (required)
     * @return LoadBalancingPreviewResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResultResponse accountLoadBalancerMonitorsPreviewResult(Object previewId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingPreviewResultResponse> localVarResp = accountLoadBalancerMonitorsPreviewResultWithHttpInfo(previewId, accountId);
        return localVarResp.getData();
    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResultResponse> accountLoadBalancerMonitorsPreviewResultWithHttpInfo(Object previewId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Result (asynchronously)
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsPreviewResultAsync(Object previewId, String accountId, final ApiCallback<LoadBalancingPreviewResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLoadBalancerMonitorsUpdateMonitor
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsUpdateMonitorCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }

        return accountLoadBalancerMonitorsUpdateMonitorCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle accountLoadBalancerMonitorsUpdateMonitor(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = accountLoadBalancerMonitorsUpdateMonitorWithHttpInfo(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> accountLoadBalancerMonitorsUpdateMonitorWithHttpInfo(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Monitor (asynchronously)
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoadBalancerMonitorsUpdateMonitorAsync(String monitorId, String accountId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
