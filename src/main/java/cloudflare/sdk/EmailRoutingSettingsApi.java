/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.EmailDnsSettingsResponseCollection;
import cloudflare.sdk.models.EmailEmailSettingsResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailRoutingSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailRoutingSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailRoutingSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for emailRoutingSettingsDisableEmailRouting
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsDisableEmailRoutingCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/disable"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingSettingsDisableEmailRoutingValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingSettingsDisableEmailRouting(Async)");
        }

        return emailRoutingSettingsDisableEmailRoutingCall(zoneIdentifier, _callback);

    }

    /**
     * Disable Email Routing
     * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
     * @param zoneIdentifier  (required)
     * @return EmailEmailSettingsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public EmailEmailSettingsResponseSingle emailRoutingSettingsDisableEmailRouting(String zoneIdentifier) throws ApiException {
        ApiResponse<EmailEmailSettingsResponseSingle> localVarResp = emailRoutingSettingsDisableEmailRoutingWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Disable Email Routing
     * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailEmailSettingsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailEmailSettingsResponseSingle> emailRoutingSettingsDisableEmailRoutingWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingSettingsDisableEmailRoutingValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Email Routing (asynchronously)
     * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsDisableEmailRoutingAsync(String zoneIdentifier, final ApiCallback<EmailEmailSettingsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingSettingsDisableEmailRoutingValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingSettingsEmailRoutingDnsSettings
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email Routing - DNS settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsEmailRoutingDnsSettingsCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/dns"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingSettingsEmailRoutingDnsSettingsValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingSettingsEmailRoutingDnsSettings(Async)");
        }

        return emailRoutingSettingsEmailRoutingDnsSettingsCall(zoneIdentifier, _callback);

    }

    /**
     * Email Routing - DNS settings
     * Show the DNS records needed to configure your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @return EmailDnsSettingsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email Routing - DNS settings response </td><td>  -  </td></tr>
     </table>
     */
    public EmailDnsSettingsResponseCollection emailRoutingSettingsEmailRoutingDnsSettings(String zoneIdentifier) throws ApiException {
        ApiResponse<EmailDnsSettingsResponseCollection> localVarResp = emailRoutingSettingsEmailRoutingDnsSettingsWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Email Routing - DNS settings
     * Show the DNS records needed to configure your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailDnsSettingsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email Routing - DNS settings response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailDnsSettingsResponseCollection> emailRoutingSettingsEmailRoutingDnsSettingsWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingSettingsEmailRoutingDnsSettingsValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailDnsSettingsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Email Routing - DNS settings (asynchronously)
     * Show the DNS records needed to configure your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email Routing - DNS settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsEmailRoutingDnsSettingsAsync(String zoneIdentifier, final ApiCallback<EmailDnsSettingsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingSettingsEmailRoutingDnsSettingsValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailDnsSettingsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingSettingsEnableEmailRouting
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsEnableEmailRoutingCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/enable"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingSettingsEnableEmailRoutingValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingSettingsEnableEmailRouting(Async)");
        }

        return emailRoutingSettingsEnableEmailRoutingCall(zoneIdentifier, _callback);

    }

    /**
     * Enable Email Routing
     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
     * @param zoneIdentifier  (required)
     * @return EmailEmailSettingsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public EmailEmailSettingsResponseSingle emailRoutingSettingsEnableEmailRouting(String zoneIdentifier) throws ApiException {
        ApiResponse<EmailEmailSettingsResponseSingle> localVarResp = emailRoutingSettingsEnableEmailRoutingWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Enable Email Routing
     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailEmailSettingsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailEmailSettingsResponseSingle> emailRoutingSettingsEnableEmailRoutingWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingSettingsEnableEmailRoutingValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Email Routing (asynchronously)
     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enable Email Routing response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsEnableEmailRoutingAsync(String zoneIdentifier, final ApiCallback<EmailEmailSettingsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingSettingsEnableEmailRoutingValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingSettingsGetEmailRoutingSettings
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Routing settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsGetEmailRoutingSettingsCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingSettingsGetEmailRoutingSettingsValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingSettingsGetEmailRoutingSettings(Async)");
        }

        return emailRoutingSettingsGetEmailRoutingSettingsCall(zoneIdentifier, _callback);

    }

    /**
     * Get Email Routing settings
     * Get information about the settings for your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @return EmailEmailSettingsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Routing settings response </td><td>  -  </td></tr>
     </table>
     */
    public EmailEmailSettingsResponseSingle emailRoutingSettingsGetEmailRoutingSettings(String zoneIdentifier) throws ApiException {
        ApiResponse<EmailEmailSettingsResponseSingle> localVarResp = emailRoutingSettingsGetEmailRoutingSettingsWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Email Routing settings
     * Get information about the settings for your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailEmailSettingsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Routing settings response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailEmailSettingsResponseSingle> emailRoutingSettingsGetEmailRoutingSettingsWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingSettingsGetEmailRoutingSettingsValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Email Routing settings (asynchronously)
     * Get information about the settings for your Email Routing zone.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Routing settings response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingSettingsGetEmailRoutingSettingsAsync(String zoneIdentifier, final ApiCallback<EmailEmailSettingsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingSettingsGetEmailRoutingSettingsValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailEmailSettingsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
