/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import java.util.UUID;
import cloudflare.sdk.models.UrlscannerCreateScan200Response;
import cloudflare.sdk.models.UrlscannerCreateScan409Response;
import cloudflare.sdk.models.UrlscannerCreateScan429Response;
import cloudflare.sdk.models.UrlscannerCreateScanRequest;
import cloudflare.sdk.models.UrlscannerGetScan200Response;
import cloudflare.sdk.models.UrlscannerGetScan202Response;
import cloudflare.sdk.models.UrlscannerGetScan404Response;
import cloudflare.sdk.models.UrlscannerGetScanHar200Response;
import cloudflare.sdk.models.UrlscannerSearchScans200Response;
import cloudflare.sdk.models.UrlscannerSearchScans400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UrlScannerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UrlScannerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UrlScannerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for urlscannerCreateScan
     * @param accountId  (required)
     * @param urlscannerCreateScanRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan request accepted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Scan request denied: hostname was recently scanned. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Scan request denied: rate limited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerCreateScanCall(String accountId, UrlscannerCreateScanRequest urlscannerCreateScanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlscannerCreateScanRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/urlscanner/scan"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlscannerCreateScanValidateBeforeCall(String accountId, UrlscannerCreateScanRequest urlscannerCreateScanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling urlscannerCreateScan(Async)");
        }

        return urlscannerCreateScanCall(accountId, urlscannerCreateScanRequest, _callback);

    }

    /**
     * Create URL Scan
     * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
     * @param accountId  (required)
     * @param urlscannerCreateScanRequest  (optional)
     * @return UrlscannerCreateScan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan request accepted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Scan request denied: hostname was recently scanned. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Scan request denied: rate limited. </td><td>  -  </td></tr>
     </table>
     */
    public UrlscannerCreateScan200Response urlscannerCreateScan(String accountId, UrlscannerCreateScanRequest urlscannerCreateScanRequest) throws ApiException {
        ApiResponse<UrlscannerCreateScan200Response> localVarResp = urlscannerCreateScanWithHttpInfo(accountId, urlscannerCreateScanRequest);
        return localVarResp.getData();
    }

    /**
     * Create URL Scan
     * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
     * @param accountId  (required)
     * @param urlscannerCreateScanRequest  (optional)
     * @return ApiResponse&lt;UrlscannerCreateScan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan request accepted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Scan request denied: hostname was recently scanned. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Scan request denied: rate limited. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlscannerCreateScan200Response> urlscannerCreateScanWithHttpInfo(String accountId, UrlscannerCreateScanRequest urlscannerCreateScanRequest) throws ApiException {
        okhttp3.Call localVarCall = urlscannerCreateScanValidateBeforeCall(accountId, urlscannerCreateScanRequest, null);
        Type localVarReturnType = new TypeToken<UrlscannerCreateScan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create URL Scan (asynchronously)
     * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
     * @param accountId  (required)
     * @param urlscannerCreateScanRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan request accepted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Scan request denied: hostname was recently scanned. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Scan request denied: rate limited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerCreateScanAsync(String accountId, UrlscannerCreateScanRequest urlscannerCreateScanRequest, final ApiCallback<UrlscannerCreateScan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlscannerCreateScanValidateBeforeCall(accountId, urlscannerCreateScanRequest, _callback);
        Type localVarReturnType = new TypeToken<UrlscannerCreateScan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlscannerGetScan
     * @param scanId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan has finished. It may or may not have been successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanCall(UUID scanId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/urlscanner/scan/{scanId}"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlscannerGetScanValidateBeforeCall(UUID scanId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling urlscannerGetScan(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling urlscannerGetScan(Async)");
        }

        return urlscannerGetScanCall(scanId, accountId, _callback);

    }

    /**
     * Get URL scan
     * Get URL scan by uuid
     * @param scanId  (required)
     * @param accountId  (required)
     * @return UrlscannerGetScan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan has finished. It may or may not have been successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public UrlscannerGetScan200Response urlscannerGetScan(UUID scanId, String accountId) throws ApiException {
        ApiResponse<UrlscannerGetScan200Response> localVarResp = urlscannerGetScanWithHttpInfo(scanId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get URL scan
     * Get URL scan by uuid
     * @param scanId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;UrlscannerGetScan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan has finished. It may or may not have been successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlscannerGetScan200Response> urlscannerGetScanWithHttpInfo(UUID scanId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = urlscannerGetScanValidateBeforeCall(scanId, accountId, null);
        Type localVarReturnType = new TypeToken<UrlscannerGetScan200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get URL scan (asynchronously)
     * Get URL scan by uuid
     * @param scanId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scan has finished. It may or may not have been successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanAsync(UUID scanId, String accountId, final ApiCallback<UrlscannerGetScan200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlscannerGetScanValidateBeforeCall(scanId, accountId, _callback);
        Type localVarReturnType = new TypeToken<UrlscannerGetScan200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlscannerGetScanHar
     * @param scanId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s har. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanHarCall(UUID scanId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/urlscanner/scan/{scanId}/har"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlscannerGetScanHarValidateBeforeCall(UUID scanId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling urlscannerGetScanHar(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling urlscannerGetScanHar(Async)");
        }

        return urlscannerGetScanHarCall(scanId, accountId, _callback);

    }

    /**
     * Get URL scan&#39;s HAR
     * Get a URL scan&#39;s HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
     * @param scanId  (required)
     * @param accountId  (required)
     * @return UrlscannerGetScanHar200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s har. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public UrlscannerGetScanHar200Response urlscannerGetScanHar(UUID scanId, String accountId) throws ApiException {
        ApiResponse<UrlscannerGetScanHar200Response> localVarResp = urlscannerGetScanHarWithHttpInfo(scanId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get URL scan&#39;s HAR
     * Get a URL scan&#39;s HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
     * @param scanId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;UrlscannerGetScanHar200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s har. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlscannerGetScanHar200Response> urlscannerGetScanHarWithHttpInfo(UUID scanId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = urlscannerGetScanHarValidateBeforeCall(scanId, accountId, null);
        Type localVarReturnType = new TypeToken<UrlscannerGetScanHar200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get URL scan&#39;s HAR (asynchronously)
     * Get a URL scan&#39;s HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
     * @param scanId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s har. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanHarAsync(UUID scanId, String accountId, final ApiCallback<UrlscannerGetScanHar200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlscannerGetScanHarValidateBeforeCall(scanId, accountId, _callback);
        Type localVarReturnType = new TypeToken<UrlscannerGetScanHar200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlscannerGetScanScreenshot
     * @param scanId  (required)
     * @param accountId  (required)
     * @param resolution  (optional, default to desktop)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s requested screenshot. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanScreenshotCall(UUID scanId, String accountId, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/urlscanner/scan/{scanId}/screenshot"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlscannerGetScanScreenshotValidateBeforeCall(UUID scanId, String accountId, String resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling urlscannerGetScanScreenshot(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling urlscannerGetScanScreenshot(Async)");
        }

        return urlscannerGetScanScreenshotCall(scanId, accountId, resolution, _callback);

    }

    /**
     * Get screenshot
     * Get scan&#39;s screenshot by resolution (desktop/mobile/tablet).
     * @param scanId  (required)
     * @param accountId  (required)
     * @param resolution  (optional, default to desktop)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s requested screenshot. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public String urlscannerGetScanScreenshot(UUID scanId, String accountId, String resolution) throws ApiException {
        ApiResponse<String> localVarResp = urlscannerGetScanScreenshotWithHttpInfo(scanId, accountId, resolution);
        return localVarResp.getData();
    }

    /**
     * Get screenshot
     * Get scan&#39;s screenshot by resolution (desktop/mobile/tablet).
     * @param scanId  (required)
     * @param accountId  (required)
     * @param resolution  (optional, default to desktop)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s requested screenshot. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> urlscannerGetScanScreenshotWithHttpInfo(UUID scanId, String accountId, String resolution) throws ApiException {
        okhttp3.Call localVarCall = urlscannerGetScanScreenshotValidateBeforeCall(scanId, accountId, resolution, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get screenshot (asynchronously)
     * Get scan&#39;s screenshot by resolution (desktop/mobile/tablet).
     * @param scanId  (required)
     * @param accountId  (required)
     * @param resolution  (optional, default to desktop)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the scan&#39;s requested screenshot. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Scan is in progress. Check current status in &#x60;result.scan.task.status&#x60;. Possible statuses: &#x60;Queued&#x60;,&#x60;InProgress&#x60;,&#x60;InPostProcessing&#x60;,&#x60;Finished&#x60;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scan not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerGetScanScreenshotAsync(UUID scanId, String accountId, String resolution, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlscannerGetScanScreenshotValidateBeforeCall(scanId, accountId, resolution, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlscannerSearchScans
     * @param accountId  (required)
     * @param scanId  (optional)
     * @param limit  (optional)
     * @param nextCursor  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param url  (optional)
     * @param hostname  (optional)
     * @param path  (optional)
     * @param ip  (optional)
     * @param asn  (optional)
     * @param hash  (optional)
     * @param pageUrl  (optional)
     * @param pageHostname  (optional)
     * @param pagePath  (optional)
     * @param pageAsn  (optional)
     * @param pageIp  (optional)
     * @param accountScans  (optional)
     * @param isMalicious  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerSearchScansCall(String accountId, UUID scanId, Integer limit, String nextCursor, OffsetDateTime dateStart, OffsetDateTime dateEnd, String url, String hostname, String path, String ip, String asn, String hash, String pageUrl, String pageHostname, String pagePath, String pageAsn, String pageIp, Boolean accountScans, Boolean isMalicious, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/urlscanner/scan"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scanId", scanId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nextCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_cursor", nextCursor));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (hostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostname", hostname));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (pageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_url", pageUrl));
        }

        if (pageHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_hostname", pageHostname));
        }

        if (pagePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_path", pagePath));
        }

        if (pageAsn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_asn", pageAsn));
        }

        if (pageIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_ip", pageIp));
        }

        if (accountScans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_scans", accountScans));
        }

        if (isMalicious != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_malicious", isMalicious));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlscannerSearchScansValidateBeforeCall(String accountId, UUID scanId, Integer limit, String nextCursor, OffsetDateTime dateStart, OffsetDateTime dateEnd, String url, String hostname, String path, String ip, String asn, String hash, String pageUrl, String pageHostname, String pagePath, String pageAsn, String pageIp, Boolean accountScans, Boolean isMalicious, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling urlscannerSearchScans(Async)");
        }

        return urlscannerSearchScansCall(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, ip, asn, hash, pageUrl, pageHostname, pagePath, pageAsn, pageIp, accountScans, isMalicious, _callback);

    }

    /**
     * Search URL scans
     * Search scans by date and webpages&#39; requests, including full URL (after redirects), hostname, and path. &lt;br/&gt; A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by &#x60;scanId&#x60;. Please take into account that older scans may be removed from the search index at an unspecified time.
     * @param accountId  (required)
     * @param scanId  (optional)
     * @param limit  (optional)
     * @param nextCursor  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param url  (optional)
     * @param hostname  (optional)
     * @param path  (optional)
     * @param ip  (optional)
     * @param asn  (optional)
     * @param hash  (optional)
     * @param pageUrl  (optional)
     * @param pageHostname  (optional)
     * @param pagePath  (optional)
     * @param pageAsn  (optional)
     * @param pageIp  (optional)
     * @param accountScans  (optional)
     * @param isMalicious  (optional)
     * @return UrlscannerSearchScans200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
     </table>
     */
    public UrlscannerSearchScans200Response urlscannerSearchScans(String accountId, UUID scanId, Integer limit, String nextCursor, OffsetDateTime dateStart, OffsetDateTime dateEnd, String url, String hostname, String path, String ip, String asn, String hash, String pageUrl, String pageHostname, String pagePath, String pageAsn, String pageIp, Boolean accountScans, Boolean isMalicious) throws ApiException {
        ApiResponse<UrlscannerSearchScans200Response> localVarResp = urlscannerSearchScansWithHttpInfo(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, ip, asn, hash, pageUrl, pageHostname, pagePath, pageAsn, pageIp, accountScans, isMalicious);
        return localVarResp.getData();
    }

    /**
     * Search URL scans
     * Search scans by date and webpages&#39; requests, including full URL (after redirects), hostname, and path. &lt;br/&gt; A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by &#x60;scanId&#x60;. Please take into account that older scans may be removed from the search index at an unspecified time.
     * @param accountId  (required)
     * @param scanId  (optional)
     * @param limit  (optional)
     * @param nextCursor  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param url  (optional)
     * @param hostname  (optional)
     * @param path  (optional)
     * @param ip  (optional)
     * @param asn  (optional)
     * @param hash  (optional)
     * @param pageUrl  (optional)
     * @param pageHostname  (optional)
     * @param pagePath  (optional)
     * @param pageAsn  (optional)
     * @param pageIp  (optional)
     * @param accountScans  (optional)
     * @param isMalicious  (optional)
     * @return ApiResponse&lt;UrlscannerSearchScans200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlscannerSearchScans200Response> urlscannerSearchScansWithHttpInfo(String accountId, UUID scanId, Integer limit, String nextCursor, OffsetDateTime dateStart, OffsetDateTime dateEnd, String url, String hostname, String path, String ip, String asn, String hash, String pageUrl, String pageHostname, String pagePath, String pageAsn, String pageIp, Boolean accountScans, Boolean isMalicious) throws ApiException {
        okhttp3.Call localVarCall = urlscannerSearchScansValidateBeforeCall(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, ip, asn, hash, pageUrl, pageHostname, pagePath, pageAsn, pageIp, accountScans, isMalicious, null);
        Type localVarReturnType = new TypeToken<UrlscannerSearchScans200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search URL scans (asynchronously)
     * Search scans by date and webpages&#39; requests, including full URL (after redirects), hostname, and path. &lt;br/&gt; A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by &#x60;scanId&#x60;. Please take into account that older scans may be removed from the search index at an unspecified time.
     * @param accountId  (required)
     * @param scanId  (optional)
     * @param limit  (optional)
     * @param nextCursor  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param url  (optional)
     * @param hostname  (optional)
     * @param path  (optional)
     * @param ip  (optional)
     * @param asn  (optional)
     * @param hash  (optional)
     * @param pageUrl  (optional)
     * @param pageHostname  (optional)
     * @param pagePath  (optional)
     * @param pageAsn  (optional)
     * @param pageIp  (optional)
     * @param accountScans  (optional)
     * @param isMalicious  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid params. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlscannerSearchScansAsync(String accountId, UUID scanId, Integer limit, String nextCursor, OffsetDateTime dateStart, OffsetDateTime dateEnd, String url, String hostname, String path, String ip, String asn, String hash, String pageUrl, String pageHostname, String pagePath, String pageAsn, String pageIp, Boolean accountScans, Boolean isMalicious, final ApiCallback<UrlscannerSearchScans200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlscannerSearchScansValidateBeforeCall(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, ip, asn, hash, pageUrl, pageHostname, pagePath, pageAsn, pageIp, accountScans, isMalicious, _callback);
        Type localVarReturnType = new TypeToken<UrlscannerSearchScans200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
