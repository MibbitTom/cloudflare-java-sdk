/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.DnssecDeleteDnssecRecords4XXResponse;
import cloudflare.sdk.models.DnssecDeleteDnssecResponseSingle;
import cloudflare.sdk.models.DnssecDnssecDetails4XXResponse;
import cloudflare.sdk.models.DnssecDnssecResponseSingle;
import cloudflare.sdk.models.DnssecEditDnssecStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnssecApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnssecApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnssecApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dnssecDeleteDnssecRecords
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNSSEC records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNSSEC records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecDeleteDnssecRecordsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dnssec"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnssecDeleteDnssecRecordsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnssecDeleteDnssecRecords(Async)");
        }

        return dnssecDeleteDnssecRecordsCall(zoneId, _callback);

    }

    /**
     * Delete DNSSEC records
     * Delete DNSSEC.
     * @param zoneId  (required)
     * @return DnssecDeleteDnssecResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNSSEC records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNSSEC records response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnssecDeleteDnssecResponseSingle dnssecDeleteDnssecRecords(String zoneId) throws ApiException {
        ApiResponse<DnssecDeleteDnssecResponseSingle> localVarResp = dnssecDeleteDnssecRecordsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete DNSSEC records
     * Delete DNSSEC.
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnssecDeleteDnssecResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNSSEC records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNSSEC records response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnssecDeleteDnssecResponseSingle> dnssecDeleteDnssecRecordsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnssecDeleteDnssecRecordsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DnssecDeleteDnssecResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete DNSSEC records (asynchronously)
     * Delete DNSSEC.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete DNSSEC records response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete DNSSEC records response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecDeleteDnssecRecordsAsync(String zoneId, final ApiCallback<DnssecDeleteDnssecResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnssecDeleteDnssecRecordsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnssecDeleteDnssecResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnssecDnssecDetails
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNSSEC Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNSSEC Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecDnssecDetailsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dnssec"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnssecDnssecDetailsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnssecDnssecDetails(Async)");
        }

        return dnssecDnssecDetailsCall(zoneId, _callback);

    }

    /**
     * DNSSEC Details
     * Details about DNSSEC status and configuration.
     * @param zoneId  (required)
     * @return DnssecDnssecResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNSSEC Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNSSEC Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnssecDnssecResponseSingle dnssecDnssecDetails(String zoneId) throws ApiException {
        ApiResponse<DnssecDnssecResponseSingle> localVarResp = dnssecDnssecDetailsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * DNSSEC Details
     * Details about DNSSEC status and configuration.
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnssecDnssecResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNSSEC Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNSSEC Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnssecDnssecResponseSingle> dnssecDnssecDetailsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = dnssecDnssecDetailsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DnssecDnssecResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DNSSEC Details (asynchronously)
     * Details about DNSSEC status and configuration.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DNSSEC Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DNSSEC Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecDnssecDetailsAsync(String zoneId, final ApiCallback<DnssecDnssecResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnssecDnssecDetailsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnssecDnssecResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnssecEditDnssecStatus
     * @param zoneId  (required)
     * @param dnssecEditDnssecStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit DNSSEC Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit DNSSEC Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecEditDnssecStatusCall(String zoneId, DnssecEditDnssecStatusRequest dnssecEditDnssecStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnssecEditDnssecStatusRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/dnssec"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnssecEditDnssecStatusValidateBeforeCall(String zoneId, DnssecEditDnssecStatusRequest dnssecEditDnssecStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling dnssecEditDnssecStatus(Async)");
        }

        // verify the required parameter 'dnssecEditDnssecStatusRequest' is set
        if (dnssecEditDnssecStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'dnssecEditDnssecStatusRequest' when calling dnssecEditDnssecStatus(Async)");
        }

        return dnssecEditDnssecStatusCall(zoneId, dnssecEditDnssecStatusRequest, _callback);

    }

    /**
     * Edit DNSSEC Status
     * Enable or disable DNSSEC.
     * @param zoneId  (required)
     * @param dnssecEditDnssecStatusRequest  (required)
     * @return DnssecDnssecResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit DNSSEC Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit DNSSEC Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnssecDnssecResponseSingle dnssecEditDnssecStatus(String zoneId, DnssecEditDnssecStatusRequest dnssecEditDnssecStatusRequest) throws ApiException {
        ApiResponse<DnssecDnssecResponseSingle> localVarResp = dnssecEditDnssecStatusWithHttpInfo(zoneId, dnssecEditDnssecStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Edit DNSSEC Status
     * Enable or disable DNSSEC.
     * @param zoneId  (required)
     * @param dnssecEditDnssecStatusRequest  (required)
     * @return ApiResponse&lt;DnssecDnssecResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit DNSSEC Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit DNSSEC Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnssecDnssecResponseSingle> dnssecEditDnssecStatusWithHttpInfo(String zoneId, DnssecEditDnssecStatusRequest dnssecEditDnssecStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = dnssecEditDnssecStatusValidateBeforeCall(zoneId, dnssecEditDnssecStatusRequest, null);
        Type localVarReturnType = new TypeToken<DnssecDnssecResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit DNSSEC Status (asynchronously)
     * Enable or disable DNSSEC.
     * @param zoneId  (required)
     * @param dnssecEditDnssecStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit DNSSEC Status response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit DNSSEC Status response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnssecEditDnssecStatusAsync(String zoneId, DnssecEditDnssecStatusRequest dnssecEditDnssecStatusRequest, final ApiCallback<DnssecDnssecResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnssecEditDnssecStatusValidateBeforeCall(zoneId, dnssecEditDnssecStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<DnssecDnssecResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
