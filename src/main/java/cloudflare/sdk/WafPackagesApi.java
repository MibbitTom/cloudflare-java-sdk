/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.FirewallApiResponseCollection;
import cloudflare.sdk.models.FirewallApiResponseSingle;
import cloudflare.sdk.models.WafPackagesGetAWafPackage4XXResponse;
import cloudflare.sdk.models.WafPackagesListWafPackages4XXResponse;
import cloudflare.sdk.models.WafPackagesUpdateAWafPackage200Response;
import cloudflare.sdk.models.WafPackagesUpdateAWafPackage4XXResponse;
import cloudflare.sdk.models.WafPackagesUpdateAWafPackageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WafPackagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WafPackagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WafPackagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wafPackagesGetAWafPackage
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesGetAWafPackageCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafPackagesGetAWafPackageValidateBeforeCall(String identifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling wafPackagesGetAWafPackage(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafPackagesGetAWafPackage(Async)");
        }

        return wafPackagesGetAWafPackageCall(identifier, zoneIdentifier, _callback);

    }

    /**
     * Get a WAF package
     * Fetches the details of a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallApiResponseSingle wafPackagesGetAWafPackage(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallApiResponseSingle> localVarResp = wafPackagesGetAWafPackageWithHttpInfo(identifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a WAF package
     * Fetches the details of a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallApiResponseSingle> wafPackagesGetAWafPackageWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = wafPackagesGetAWafPackageValidateBeforeCall(identifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a WAF package (asynchronously)
     * Fetches the details of a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesGetAWafPackageAsync(String identifier, String zoneIdentifier, final ApiCallback<FirewallApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafPackagesGetAWafPackageValidateBeforeCall(identifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafPackagesListWafPackages
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF packages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF packages response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesListWafPackagesCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafPackagesListWafPackagesValidateBeforeCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafPackagesListWafPackages(Async)");
        }

        return wafPackagesListWafPackagesCall(zoneIdentifier, page, perPage, order, direction, match, name, _callback);

    }

    /**
     * List WAF packages
     * Fetches WAF packages for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @return FirewallApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF packages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF packages response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallApiResponseCollection wafPackagesListWafPackages(String zoneIdentifier, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name) throws ApiException {
        ApiResponse<FirewallApiResponseCollection> localVarResp = wafPackagesListWafPackagesWithHttpInfo(zoneIdentifier, page, perPage, order, direction, match, name);
        return localVarResp.getData();
    }

    /**
     * List WAF packages
     * Fetches WAF packages for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @return ApiResponse&lt;FirewallApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF packages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF packages response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallApiResponseCollection> wafPackagesListWafPackagesWithHttpInfo(String zoneIdentifier, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name) throws ApiException {
        okhttp3.Call localVarCall = wafPackagesListWafPackagesValidateBeforeCall(zoneIdentifier, page, perPage, order, direction, match, name, null);
        Type localVarReturnType = new TypeToken<FirewallApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List WAF packages (asynchronously)
     * Fetches WAF packages for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF packages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF packages response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesListWafPackagesAsync(String zoneIdentifier, BigDecimal page, BigDecimal perPage, String order, String direction, String match, String name, final ApiCallback<FirewallApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafPackagesListWafPackagesValidateBeforeCall(zoneIdentifier, page, perPage, order, direction, match, name, _callback);
        Type localVarReturnType = new TypeToken<FirewallApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafPackagesUpdateAWafPackage
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param wafPackagesUpdateAWafPackageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesUpdateAWafPackageCall(String identifier, String zoneIdentifier, WafPackagesUpdateAWafPackageRequest wafPackagesUpdateAWafPackageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wafPackagesUpdateAWafPackageRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafPackagesUpdateAWafPackageValidateBeforeCall(String identifier, String zoneIdentifier, WafPackagesUpdateAWafPackageRequest wafPackagesUpdateAWafPackageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling wafPackagesUpdateAWafPackage(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafPackagesUpdateAWafPackage(Async)");
        }

        // verify the required parameter 'wafPackagesUpdateAWafPackageRequest' is set
        if (wafPackagesUpdateAWafPackageRequest == null) {
            throw new ApiException("Missing the required parameter 'wafPackagesUpdateAWafPackageRequest' when calling wafPackagesUpdateAWafPackage(Async)");
        }

        return wafPackagesUpdateAWafPackageCall(identifier, zoneIdentifier, wafPackagesUpdateAWafPackageRequest, _callback);

    }

    /**
     * Update a WAF package
     * Updates a WAF package. You can update the sensitivity and the action of an anomaly detection WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param wafPackagesUpdateAWafPackageRequest  (required)
     * @return WafPackagesUpdateAWafPackage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public WafPackagesUpdateAWafPackage200Response wafPackagesUpdateAWafPackage(String identifier, String zoneIdentifier, WafPackagesUpdateAWafPackageRequest wafPackagesUpdateAWafPackageRequest) throws ApiException {
        ApiResponse<WafPackagesUpdateAWafPackage200Response> localVarResp = wafPackagesUpdateAWafPackageWithHttpInfo(identifier, zoneIdentifier, wafPackagesUpdateAWafPackageRequest);
        return localVarResp.getData();
    }

    /**
     * Update a WAF package
     * Updates a WAF package. You can update the sensitivity and the action of an anomaly detection WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param wafPackagesUpdateAWafPackageRequest  (required)
     * @return ApiResponse&lt;WafPackagesUpdateAWafPackage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<WafPackagesUpdateAWafPackage200Response> wafPackagesUpdateAWafPackageWithHttpInfo(String identifier, String zoneIdentifier, WafPackagesUpdateAWafPackageRequest wafPackagesUpdateAWafPackageRequest) throws ApiException {
        okhttp3.Call localVarCall = wafPackagesUpdateAWafPackageValidateBeforeCall(identifier, zoneIdentifier, wafPackagesUpdateAWafPackageRequest, null);
        Type localVarReturnType = new TypeToken<WafPackagesUpdateAWafPackage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a WAF package (asynchronously)
     * Updates a WAF package. You can update the sensitivity and the action of an anomaly detection WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param wafPackagesUpdateAWafPackageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a WAF package response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a WAF package response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafPackagesUpdateAWafPackageAsync(String identifier, String zoneIdentifier, WafPackagesUpdateAWafPackageRequest wafPackagesUpdateAWafPackageRequest, final ApiCallback<WafPackagesUpdateAWafPackage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafPackagesUpdateAWafPackageValidateBeforeCall(identifier, zoneIdentifier, wafPackagesUpdateAWafPackageRequest, _callback);
        Type localVarReturnType = new TypeToken<WafPackagesUpdateAWafPackage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
