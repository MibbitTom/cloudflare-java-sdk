/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.RumApiResponseCommonFailure;
import cloudflare.sdk.models.RumCreateRuleRequest;
import cloudflare.sdk.models.RumCreateSiteRequest;
import cloudflare.sdk.models.RumModifyRulesRequest;
import cloudflare.sdk.models.RumOrderBy;
import cloudflare.sdk.models.RumRuleIdResponseSingle;
import cloudflare.sdk.models.RumRuleResponseSingle;
import cloudflare.sdk.models.RumRulesResponseCollection;
import cloudflare.sdk.models.RumSiteResponseSingle;
import cloudflare.sdk.models.RumSiteTagResponseSingle;
import cloudflare.sdk.models.RumSitesResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebAnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebAnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebAnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webAnalyticsCreateRule
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumCreateRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsCreateRuleCall(String accountId, String rulesetId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rumCreateRuleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/v2/{ruleset_id}/rule"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsCreateRuleValidateBeforeCall(String accountId, String rulesetId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsCreateRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling webAnalyticsCreateRule(Async)");
        }

        // verify the required parameter 'rumCreateRuleRequest' is set
        if (rumCreateRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'rumCreateRuleRequest' when calling webAnalyticsCreateRule(Async)");
        }

        return webAnalyticsCreateRuleCall(accountId, rulesetId, rumCreateRuleRequest, _callback);

    }

    /**
     * Create a Web Analytics rule
     * Creates a new rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumCreateRuleRequest  (required)
     * @return RumRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumRuleResponseSingle webAnalyticsCreateRule(String accountId, String rulesetId, RumCreateRuleRequest rumCreateRuleRequest) throws ApiException {
        ApiResponse<RumRuleResponseSingle> localVarResp = webAnalyticsCreateRuleWithHttpInfo(accountId, rulesetId, rumCreateRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Web Analytics rule
     * Creates a new rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumCreateRuleRequest  (required)
     * @return ApiResponse&lt;RumRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumRuleResponseSingle> webAnalyticsCreateRuleWithHttpInfo(String accountId, String rulesetId, RumCreateRuleRequest rumCreateRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsCreateRuleValidateBeforeCall(accountId, rulesetId, rumCreateRuleRequest, null);
        Type localVarReturnType = new TypeToken<RumRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Web Analytics rule (asynchronously)
     * Creates a new rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumCreateRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsCreateRuleAsync(String accountId, String rulesetId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback<RumRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsCreateRuleValidateBeforeCall(accountId, rulesetId, rumCreateRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<RumRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsCreateSite
     * @param accountId  (required)
     * @param rumCreateSiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsCreateSiteCall(String accountId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rumCreateSiteRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/site_info"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsCreateSiteValidateBeforeCall(String accountId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsCreateSite(Async)");
        }

        // verify the required parameter 'rumCreateSiteRequest' is set
        if (rumCreateSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'rumCreateSiteRequest' when calling webAnalyticsCreateSite(Async)");
        }

        return webAnalyticsCreateSiteCall(accountId, rumCreateSiteRequest, _callback);

    }

    /**
     * Create a Web Analytics site
     * Creates a new Web Analytics site.
     * @param accountId  (required)
     * @param rumCreateSiteRequest  (required)
     * @return RumSiteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumSiteResponseSingle webAnalyticsCreateSite(String accountId, RumCreateSiteRequest rumCreateSiteRequest) throws ApiException {
        ApiResponse<RumSiteResponseSingle> localVarResp = webAnalyticsCreateSiteWithHttpInfo(accountId, rumCreateSiteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Web Analytics site
     * Creates a new Web Analytics site.
     * @param accountId  (required)
     * @param rumCreateSiteRequest  (required)
     * @return ApiResponse&lt;RumSiteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumSiteResponseSingle> webAnalyticsCreateSiteWithHttpInfo(String accountId, RumCreateSiteRequest rumCreateSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsCreateSiteValidateBeforeCall(accountId, rumCreateSiteRequest, null);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Web Analytics site (asynchronously)
     * Creates a new Web Analytics site.
     * @param accountId  (required)
     * @param rumCreateSiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsCreateSiteAsync(String accountId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback<RumSiteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsCreateSiteValidateBeforeCall(accountId, rumCreateSiteRequest, _callback);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsDeleteRule
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics rule identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsDeleteRuleCall(String accountId, String rulesetId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/v2/{ruleset_id}/rule/{rule_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsDeleteRuleValidateBeforeCall(String accountId, String rulesetId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsDeleteRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling webAnalyticsDeleteRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling webAnalyticsDeleteRule(Async)");
        }

        return webAnalyticsDeleteRuleCall(accountId, rulesetId, ruleId, _callback);

    }

    /**
     * Delete a Web Analytics rule
     * Deletes an existing rule from a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @return RumRuleIdResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics rule identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumRuleIdResponseSingle webAnalyticsDeleteRule(String accountId, String rulesetId, String ruleId) throws ApiException {
        ApiResponse<RumRuleIdResponseSingle> localVarResp = webAnalyticsDeleteRuleWithHttpInfo(accountId, rulesetId, ruleId);
        return localVarResp.getData();
    }

    /**
     * Delete a Web Analytics rule
     * Deletes an existing rule from a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;RumRuleIdResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics rule identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumRuleIdResponseSingle> webAnalyticsDeleteRuleWithHttpInfo(String accountId, String rulesetId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsDeleteRuleValidateBeforeCall(accountId, rulesetId, ruleId, null);
        Type localVarReturnType = new TypeToken<RumRuleIdResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Web Analytics rule (asynchronously)
     * Deletes an existing rule from a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics rule identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsDeleteRuleAsync(String accountId, String rulesetId, String ruleId, final ApiCallback<RumRuleIdResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsDeleteRuleValidateBeforeCall(accountId, rulesetId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<RumRuleIdResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsDeleteSite
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics site identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsDeleteSiteCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/site_info/{site_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsDeleteSiteValidateBeforeCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsDeleteSite(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling webAnalyticsDeleteSite(Async)");
        }

        return webAnalyticsDeleteSiteCall(accountId, siteId, _callback);

    }

    /**
     * Delete a Web Analytics site
     * Deletes an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return RumSiteTagResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics site identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumSiteTagResponseSingle webAnalyticsDeleteSite(String accountId, String siteId) throws ApiException {
        ApiResponse<RumSiteTagResponseSingle> localVarResp = webAnalyticsDeleteSiteWithHttpInfo(accountId, siteId);
        return localVarResp.getData();
    }

    /**
     * Delete a Web Analytics site
     * Deletes an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;RumSiteTagResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics site identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumSiteTagResponseSingle> webAnalyticsDeleteSiteWithHttpInfo(String accountId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsDeleteSiteValidateBeforeCall(accountId, siteId, null);
        Type localVarReturnType = new TypeToken<RumSiteTagResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Web Analytics site (asynchronously)
     * Deletes an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted Web Analytics site identifier </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsDeleteSiteAsync(String accountId, String siteId, final ApiCallback<RumSiteTagResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsDeleteSiteValidateBeforeCall(accountId, siteId, _callback);
        Type localVarReturnType = new TypeToken<RumSiteTagResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsGetSite
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsGetSiteCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/site_info/{site_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsGetSiteValidateBeforeCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsGetSite(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling webAnalyticsGetSite(Async)");
        }

        return webAnalyticsGetSiteCall(accountId, siteId, _callback);

    }

    /**
     * Get a Web Analytics site
     * Retrieves a Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return RumSiteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumSiteResponseSingle webAnalyticsGetSite(String accountId, String siteId) throws ApiException {
        ApiResponse<RumSiteResponseSingle> localVarResp = webAnalyticsGetSiteWithHttpInfo(accountId, siteId);
        return localVarResp.getData();
    }

    /**
     * Get a Web Analytics site
     * Retrieves a Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;RumSiteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumSiteResponseSingle> webAnalyticsGetSiteWithHttpInfo(String accountId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsGetSiteValidateBeforeCall(accountId, siteId, null);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Web Analytics site (asynchronously)
     * Retrieves a Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsGetSiteAsync(String accountId, String siteId, final ApiCallback<RumSiteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsGetSiteValidateBeforeCall(accountId, siteId, _callback);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsListRules
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics rules in the ruleset </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsListRulesCall(String accountId, String rulesetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/v2/{ruleset_id}/rules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsListRulesValidateBeforeCall(String accountId, String rulesetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsListRules(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling webAnalyticsListRules(Async)");
        }

        return webAnalyticsListRulesCall(accountId, rulesetId, _callback);

    }

    /**
     * List rules in Web Analytics ruleset
     * Lists all the rules in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @return RumRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics rules in the ruleset </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumRulesResponseCollection webAnalyticsListRules(String accountId, String rulesetId) throws ApiException {
        ApiResponse<RumRulesResponseCollection> localVarResp = webAnalyticsListRulesWithHttpInfo(accountId, rulesetId);
        return localVarResp.getData();
    }

    /**
     * List rules in Web Analytics ruleset
     * Lists all the rules in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @return ApiResponse&lt;RumRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics rules in the ruleset </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumRulesResponseCollection> webAnalyticsListRulesWithHttpInfo(String accountId, String rulesetId) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsListRulesValidateBeforeCall(accountId, rulesetId, null);
        Type localVarReturnType = new TypeToken<RumRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rules in Web Analytics ruleset (asynchronously)
     * Lists all the rules in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics rules in the ruleset </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsListRulesAsync(String accountId, String rulesetId, final ApiCallback<RumRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsListRulesValidateBeforeCall(accountId, rulesetId, _callback);
        Type localVarReturnType = new TypeToken<RumRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsListSites
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param orderBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics sites </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsListSitesCall(String accountId, BigDecimal perPage, BigDecimal page, RumOrderBy orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/site_info/list"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsListSitesValidateBeforeCall(String accountId, BigDecimal perPage, BigDecimal page, RumOrderBy orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsListSites(Async)");
        }

        return webAnalyticsListSitesCall(accountId, perPage, page, orderBy, _callback);

    }

    /**
     * List Web Analytics sites
     * Lists all Web Analytics sites of an account.
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param orderBy  (optional)
     * @return RumSitesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics sites </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumSitesResponseCollection webAnalyticsListSites(String accountId, BigDecimal perPage, BigDecimal page, RumOrderBy orderBy) throws ApiException {
        ApiResponse<RumSitesResponseCollection> localVarResp = webAnalyticsListSitesWithHttpInfo(accountId, perPage, page, orderBy);
        return localVarResp.getData();
    }

    /**
     * List Web Analytics sites
     * Lists all Web Analytics sites of an account.
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param orderBy  (optional)
     * @return ApiResponse&lt;RumSitesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics sites </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumSitesResponseCollection> webAnalyticsListSitesWithHttpInfo(String accountId, BigDecimal perPage, BigDecimal page, RumOrderBy orderBy) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsListSitesValidateBeforeCall(accountId, perPage, page, orderBy, null);
        Type localVarReturnType = new TypeToken<RumSitesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Web Analytics sites (asynchronously)
     * Lists all Web Analytics sites of an account.
     * @param accountId  (required)
     * @param perPage  (optional)
     * @param page  (optional)
     * @param orderBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Web Analytics sites </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsListSitesAsync(String accountId, BigDecimal perPage, BigDecimal page, RumOrderBy orderBy, final ApiCallback<RumSitesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsListSitesValidateBeforeCall(accountId, perPage, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<RumSitesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsModifyRules
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumModifyRulesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of modified Web Analytics rules </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsModifyRulesCall(String accountId, String rulesetId, RumModifyRulesRequest rumModifyRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rumModifyRulesRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/v2/{ruleset_id}/rules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsModifyRulesValidateBeforeCall(String accountId, String rulesetId, RumModifyRulesRequest rumModifyRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsModifyRules(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling webAnalyticsModifyRules(Async)");
        }

        // verify the required parameter 'rumModifyRulesRequest' is set
        if (rumModifyRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'rumModifyRulesRequest' when calling webAnalyticsModifyRules(Async)");
        }

        return webAnalyticsModifyRulesCall(accountId, rulesetId, rumModifyRulesRequest, _callback);

    }

    /**
     * Update Web Analytics rules
     * Modifies one or more rules in a Web Analytics ruleset with a single request.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumModifyRulesRequest  (required)
     * @return RumRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of modified Web Analytics rules </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumRulesResponseCollection webAnalyticsModifyRules(String accountId, String rulesetId, RumModifyRulesRequest rumModifyRulesRequest) throws ApiException {
        ApiResponse<RumRulesResponseCollection> localVarResp = webAnalyticsModifyRulesWithHttpInfo(accountId, rulesetId, rumModifyRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update Web Analytics rules
     * Modifies one or more rules in a Web Analytics ruleset with a single request.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumModifyRulesRequest  (required)
     * @return ApiResponse&lt;RumRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of modified Web Analytics rules </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumRulesResponseCollection> webAnalyticsModifyRulesWithHttpInfo(String accountId, String rulesetId, RumModifyRulesRequest rumModifyRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsModifyRulesValidateBeforeCall(accountId, rulesetId, rumModifyRulesRequest, null);
        Type localVarReturnType = new TypeToken<RumRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Web Analytics rules (asynchronously)
     * Modifies one or more rules in a Web Analytics ruleset with a single request.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param rumModifyRulesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of modified Web Analytics rules </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsModifyRulesAsync(String accountId, String rulesetId, RumModifyRulesRequest rumModifyRulesRequest, final ApiCallback<RumRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsModifyRulesValidateBeforeCall(accountId, rulesetId, rumModifyRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<RumRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsUpdateRule
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param rumCreateRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsUpdateRuleCall(String accountId, String rulesetId, String ruleId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rumCreateRuleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/v2/{ruleset_id}/rule/{rule_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "ruleset_id" + "}", localVarApiClient.escapeString(rulesetId.toString()))
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsUpdateRuleValidateBeforeCall(String accountId, String rulesetId, String ruleId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsUpdateRule(Async)");
        }

        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling webAnalyticsUpdateRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling webAnalyticsUpdateRule(Async)");
        }

        // verify the required parameter 'rumCreateRuleRequest' is set
        if (rumCreateRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'rumCreateRuleRequest' when calling webAnalyticsUpdateRule(Async)");
        }

        return webAnalyticsUpdateRuleCall(accountId, rulesetId, ruleId, rumCreateRuleRequest, _callback);

    }

    /**
     * Update a Web Analytics rule
     * Updates a rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param rumCreateRuleRequest  (required)
     * @return RumRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumRuleResponseSingle webAnalyticsUpdateRule(String accountId, String rulesetId, String ruleId, RumCreateRuleRequest rumCreateRuleRequest) throws ApiException {
        ApiResponse<RumRuleResponseSingle> localVarResp = webAnalyticsUpdateRuleWithHttpInfo(accountId, rulesetId, ruleId, rumCreateRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Web Analytics rule
     * Updates a rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param rumCreateRuleRequest  (required)
     * @return ApiResponse&lt;RumRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumRuleResponseSingle> webAnalyticsUpdateRuleWithHttpInfo(String accountId, String rulesetId, String ruleId, RumCreateRuleRequest rumCreateRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsUpdateRuleValidateBeforeCall(accountId, rulesetId, ruleId, rumCreateRuleRequest, null);
        Type localVarReturnType = new TypeToken<RumRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Web Analytics rule (asynchronously)
     * Updates a rule in a Web Analytics ruleset.
     * @param accountId  (required)
     * @param rulesetId  (required)
     * @param ruleId  (required)
     * @param rumCreateRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics rule </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsUpdateRuleAsync(String accountId, String rulesetId, String ruleId, RumCreateRuleRequest rumCreateRuleRequest, final ApiCallback<RumRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsUpdateRuleValidateBeforeCall(accountId, rulesetId, ruleId, rumCreateRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<RumRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAnalyticsUpdateSite
     * @param accountId  (required)
     * @param siteId  (required)
     * @param rumCreateSiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsUpdateSiteCall(String accountId, String siteId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rumCreateSiteRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rum/site_info/{site_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAnalyticsUpdateSiteValidateBeforeCall(String accountId, String siteId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling webAnalyticsUpdateSite(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling webAnalyticsUpdateSite(Async)");
        }

        // verify the required parameter 'rumCreateSiteRequest' is set
        if (rumCreateSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'rumCreateSiteRequest' when calling webAnalyticsUpdateSite(Async)");
        }

        return webAnalyticsUpdateSiteCall(accountId, siteId, rumCreateSiteRequest, _callback);

    }

    /**
     * Update a Web Analytics site
     * Updates an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param rumCreateSiteRequest  (required)
     * @return RumSiteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public RumSiteResponseSingle webAnalyticsUpdateSite(String accountId, String siteId, RumCreateSiteRequest rumCreateSiteRequest) throws ApiException {
        ApiResponse<RumSiteResponseSingle> localVarResp = webAnalyticsUpdateSiteWithHttpInfo(accountId, siteId, rumCreateSiteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Web Analytics site
     * Updates an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param rumCreateSiteRequest  (required)
     * @return ApiResponse&lt;RumSiteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RumSiteResponseSingle> webAnalyticsUpdateSiteWithHttpInfo(String accountId, String siteId, RumCreateSiteRequest rumCreateSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = webAnalyticsUpdateSiteValidateBeforeCall(accountId, siteId, rumCreateSiteRequest, null);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Web Analytics site (asynchronously)
     * Updates an existing Web Analytics site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param rumCreateSiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Web Analytics site </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAnalyticsUpdateSiteAsync(String accountId, String siteId, RumCreateSiteRequest rumCreateSiteRequest, final ApiCallback<RumSiteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAnalyticsUpdateSiteValidateBeforeCall(accountId, siteId, rumCreateSiteRequest, _callback);
        Type localVarReturnType = new TypeToken<RumSiteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
