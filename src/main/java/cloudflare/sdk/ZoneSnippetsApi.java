/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.SnippetsApiApiResponseCommon;
import cloudflare.sdk.models.SnippetsApiApiResponseCommonFailure;
import cloudflare.sdk.models.ZoneSnippets200Response;
import cloudflare.sdk.models.ZoneSnippetsSnippet200Response;
import cloudflare.sdk.models.ZoneSnippetsSnippetContent200Response;
import cloudflare.sdk.models.ZoneSnippetsSnippetPutRequestMetadata;
import cloudflare.sdk.models.ZoneSnippetsSnippetRules200Response;
import cloudflare.sdk.models.ZoneSnippetsSnippetRulesPutRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneSnippetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneSnippetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneSnippetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneSnippets
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippets(Async)");
        }

        return zoneSnippetsCall(zoneIdentifier, _callback);

    }

    /**
     * All Snippets
     * 
     * @param zoneIdentifier  (required)
     * @return ZoneSnippets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippets200Response zoneSnippets(String zoneIdentifier) throws ApiException {
        ApiResponse<ZoneSnippets200Response> localVarResp = zoneSnippetsWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * All Snippets
     * 
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZoneSnippets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippets200Response> zoneSnippetsWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<ZoneSnippets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Snippets (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsAsync(String zoneIdentifier, final ApiCallback<ZoneSnippets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippet
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/{snippet_name}"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()))
            .replace("{" + "snippet_name" + "}", localVarApiClient.escapeString(snippetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetValidateBeforeCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippet(Async)");
        }

        // verify the required parameter 'snippetName' is set
        if (snippetName == null) {
            throw new ApiException("Missing the required parameter 'snippetName' when calling zoneSnippetsSnippet(Async)");
        }

        return zoneSnippetsSnippetCall(zoneIdentifier, snippetName, _callback);

    }

    /**
     * Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return ZoneSnippetsSnippet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippetsSnippet200Response zoneSnippetsSnippet(String zoneIdentifier, String snippetName) throws ApiException {
        ApiResponse<ZoneSnippetsSnippet200Response> localVarResp = zoneSnippetsSnippetWithHttpInfo(zoneIdentifier, snippetName);
        return localVarResp.getData();
    }

    /**
     * Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return ApiResponse&lt;ZoneSnippetsSnippet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippetsSnippet200Response> zoneSnippetsSnippetWithHttpInfo(String zoneIdentifier, String snippetName) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetValidateBeforeCall(zoneIdentifier, snippetName, null);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Snippet (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetAsync(String zoneIdentifier, String snippetName, final ApiCallback<ZoneSnippetsSnippet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetValidateBeforeCall(zoneIdentifier, snippetName, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippetContent
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetContentCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/{snippet_name}/content"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()))
            .replace("{" + "snippet_name" + "}", localVarApiClient.escapeString(snippetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetContentValidateBeforeCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippetContent(Async)");
        }

        // verify the required parameter 'snippetName' is set
        if (snippetName == null) {
            throw new ApiException("Missing the required parameter 'snippetName' when calling zoneSnippetsSnippetContent(Async)");
        }

        return zoneSnippetsSnippetContentCall(zoneIdentifier, snippetName, _callback);

    }

    /**
     * Snippet Content
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return ZoneSnippetsSnippetContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippetsSnippetContent200Response zoneSnippetsSnippetContent(String zoneIdentifier, String snippetName) throws ApiException {
        ApiResponse<ZoneSnippetsSnippetContent200Response> localVarResp = zoneSnippetsSnippetContentWithHttpInfo(zoneIdentifier, snippetName);
        return localVarResp.getData();
    }

    /**
     * Snippet Content
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return ApiResponse&lt;ZoneSnippetsSnippetContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippetsSnippetContent200Response> zoneSnippetsSnippetContentWithHttpInfo(String zoneIdentifier, String snippetName) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetContentValidateBeforeCall(zoneIdentifier, snippetName, null);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Snippet Content (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetContentAsync(String zoneIdentifier, String snippetName, final ApiCallback<ZoneSnippetsSnippetContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetContentValidateBeforeCall(zoneIdentifier, snippetName, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippetDelete
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetDeleteCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/{snippet_name}"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()))
            .replace("{" + "snippet_name" + "}", localVarApiClient.escapeString(snippetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetDeleteValidateBeforeCall(String zoneIdentifier, String snippetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippetDelete(Async)");
        }

        // verify the required parameter 'snippetName' is set
        if (snippetName == null) {
            throw new ApiException("Missing the required parameter 'snippetName' when calling zoneSnippetsSnippetDelete(Async)");
        }

        return zoneSnippetsSnippetDeleteCall(zoneIdentifier, snippetName, _callback);

    }

    /**
     * Delete Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return SnippetsApiApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public SnippetsApiApiResponseCommon zoneSnippetsSnippetDelete(String zoneIdentifier, String snippetName) throws ApiException {
        ApiResponse<SnippetsApiApiResponseCommon> localVarResp = zoneSnippetsSnippetDeleteWithHttpInfo(zoneIdentifier, snippetName);
        return localVarResp.getData();
    }

    /**
     * Delete Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @return ApiResponse&lt;SnippetsApiApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnippetsApiApiResponseCommon> zoneSnippetsSnippetDeleteWithHttpInfo(String zoneIdentifier, String snippetName) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetDeleteValidateBeforeCall(zoneIdentifier, snippetName, null);
        Type localVarReturnType = new TypeToken<SnippetsApiApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Snippet (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetDeleteAsync(String zoneIdentifier, String snippetName, final ApiCallback<SnippetsApiApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetDeleteValidateBeforeCall(zoneIdentifier, snippetName, _callback);
        Type localVarReturnType = new TypeToken<SnippetsApiApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippetPut
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param files Content files of uploaded snippet (optional)
     * @param metadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetPutCall(String zoneIdentifier, String snippetName, String files, ZoneSnippetsSnippetPutRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/{snippet_name}"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()))
            .replace("{" + "snippet_name" + "}", localVarApiClient.escapeString(snippetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetPutValidateBeforeCall(String zoneIdentifier, String snippetName, String files, ZoneSnippetsSnippetPutRequestMetadata metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippetPut(Async)");
        }

        // verify the required parameter 'snippetName' is set
        if (snippetName == null) {
            throw new ApiException("Missing the required parameter 'snippetName' when calling zoneSnippetsSnippetPut(Async)");
        }

        return zoneSnippetsSnippetPutCall(zoneIdentifier, snippetName, files, metadata, _callback);

    }

    /**
     * Put Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param files Content files of uploaded snippet (optional)
     * @param metadata  (optional)
     * @return ZoneSnippetsSnippet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippetsSnippet200Response zoneSnippetsSnippetPut(String zoneIdentifier, String snippetName, String files, ZoneSnippetsSnippetPutRequestMetadata metadata) throws ApiException {
        ApiResponse<ZoneSnippetsSnippet200Response> localVarResp = zoneSnippetsSnippetPutWithHttpInfo(zoneIdentifier, snippetName, files, metadata);
        return localVarResp.getData();
    }

    /**
     * Put Snippet
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param files Content files of uploaded snippet (optional)
     * @param metadata  (optional)
     * @return ApiResponse&lt;ZoneSnippetsSnippet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippetsSnippet200Response> zoneSnippetsSnippetPutWithHttpInfo(String zoneIdentifier, String snippetName, String files, ZoneSnippetsSnippetPutRequestMetadata metadata) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetPutValidateBeforeCall(zoneIdentifier, snippetName, files, metadata, null);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Snippet (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param snippetName  (required)
     * @param files Content files of uploaded snippet (optional)
     * @param metadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippet response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetPutAsync(String zoneIdentifier, String snippetName, String files, ZoneSnippetsSnippetPutRequestMetadata metadata, final ApiCallback<ZoneSnippetsSnippet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetPutValidateBeforeCall(zoneIdentifier, snippetName, files, metadata, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippetRules
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetRulesCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/snippet_rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetRulesValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippetRules(Async)");
        }

        return zoneSnippetsSnippetRulesCall(zoneIdentifier, _callback);

    }

    /**
     * Rules
     * 
     * @param zoneIdentifier  (required)
     * @return ZoneSnippetsSnippetRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippetsSnippetRules200Response zoneSnippetsSnippetRules(String zoneIdentifier) throws ApiException {
        ApiResponse<ZoneSnippetsSnippetRules200Response> localVarResp = zoneSnippetsSnippetRulesWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Rules
     * 
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZoneSnippetsSnippetRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippetsSnippetRules200Response> zoneSnippetsSnippetRulesWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetRulesValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rules (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetRulesAsync(String zoneIdentifier, final ApiCallback<ZoneSnippetsSnippetRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetRulesValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSnippetsSnippetRulesPut
     * @param zoneIdentifier  (required)
     * @param zoneSnippetsSnippetRulesPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetRulesPutCall(String zoneIdentifier, ZoneSnippetsSnippetRulesPutRequest zoneSnippetsSnippetRulesPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSnippetsSnippetRulesPutRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/snippets/snippet_rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSnippetsSnippetRulesPutValidateBeforeCall(String zoneIdentifier, ZoneSnippetsSnippetRulesPutRequest zoneSnippetsSnippetRulesPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneSnippetsSnippetRulesPut(Async)");
        }

        return zoneSnippetsSnippetRulesPutCall(zoneIdentifier, zoneSnippetsSnippetRulesPutRequest, _callback);

    }

    /**
     * Put Rules
     * 
     * @param zoneIdentifier  (required)
     * @param zoneSnippetsSnippetRulesPutRequest  (optional)
     * @return ZoneSnippetsSnippetRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSnippetsSnippetRules200Response zoneSnippetsSnippetRulesPut(String zoneIdentifier, ZoneSnippetsSnippetRulesPutRequest zoneSnippetsSnippetRulesPutRequest) throws ApiException {
        ApiResponse<ZoneSnippetsSnippetRules200Response> localVarResp = zoneSnippetsSnippetRulesPutWithHttpInfo(zoneIdentifier, zoneSnippetsSnippetRulesPutRequest);
        return localVarResp.getData();
    }

    /**
     * Put Rules
     * 
     * @param zoneIdentifier  (required)
     * @param zoneSnippetsSnippetRulesPutRequest  (optional)
     * @return ApiResponse&lt;ZoneSnippetsSnippetRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSnippetsSnippetRules200Response> zoneSnippetsSnippetRulesPutWithHttpInfo(String zoneIdentifier, ZoneSnippetsSnippetRulesPutRequest zoneSnippetsSnippetRulesPutRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSnippetsSnippetRulesPutValidateBeforeCall(zoneIdentifier, zoneSnippetsSnippetRulesPutRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put Rules (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param zoneSnippetsSnippetRulesPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snippets rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Snippet response failure </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Snippet response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSnippetsSnippetRulesPutAsync(String zoneIdentifier, ZoneSnippetsSnippetRulesPutRequest zoneSnippetsSnippetRulesPutRequest, final ApiCallback<ZoneSnippetsSnippetRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSnippetsSnippetRulesPutValidateBeforeCall(zoneIdentifier, zoneSnippetsSnippetRulesPutRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSnippetsSnippetRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
