/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.ConfigRulesUpdateConfigRules4XXResponse;
import cloudflare.sdk.models.FirewallApiResponseSingle;
import cloudflare.sdk.models.FirewallPhase;
import cloudflare.sdk.models.FirewallTransformRulesComponentsSchemasRuleset;
import cloudflare.sdk.models.FirewallUpdateRuleset;
import cloudflare.sdk.models.TransformRulesListTransformRules4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transformRulesListTransformRules
     * @param phase  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformRulesListTransformRulesCall(FirewallPhase phase, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{phase}/entrypoint"
            .replace("{" + "phase" + "}", localVarApiClient.escapeString(phase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformRulesListTransformRulesValidateBeforeCall(FirewallPhase phase, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phase' is set
        if (phase == null) {
            throw new ApiException("Missing the required parameter 'phase' when calling transformRulesListTransformRules(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling transformRulesListTransformRules(Async)");
        }

        return transformRulesListTransformRulesCall(phase, zoneId, _callback);

    }

    /**
     * List Transform Rules
     * Fetches all Transform Rules in a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @return FirewallTransformRulesComponentsSchemasRuleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallTransformRulesComponentsSchemasRuleset transformRulesListTransformRules(FirewallPhase phase, String zoneId) throws ApiException {
        ApiResponse<FirewallTransformRulesComponentsSchemasRuleset> localVarResp = transformRulesListTransformRulesWithHttpInfo(phase, zoneId);
        return localVarResp.getData();
    }

    /**
     * List Transform Rules
     * Fetches all Transform Rules in a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;FirewallTransformRulesComponentsSchemasRuleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallTransformRulesComponentsSchemasRuleset> transformRulesListTransformRulesWithHttpInfo(FirewallPhase phase, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = transformRulesListTransformRulesValidateBeforeCall(phase, zoneId, null);
        Type localVarReturnType = new TypeToken<FirewallTransformRulesComponentsSchemasRuleset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Transform Rules (asynchronously)
     * Fetches all Transform Rules in a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformRulesListTransformRulesAsync(FirewallPhase phase, String zoneId, final ApiCallback<FirewallTransformRulesComponentsSchemasRuleset> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformRulesListTransformRulesValidateBeforeCall(phase, zoneId, _callback);
        Type localVarReturnType = new TypeToken<FirewallTransformRulesComponentsSchemasRuleset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformRulesUpdateTransformRules
     * @param phase  (required)
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformRulesUpdateTransformRulesCall(FirewallPhase phase, String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallUpdateRuleset;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{phase}/entrypoint"
            .replace("{" + "phase" + "}", localVarApiClient.escapeString(phase.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformRulesUpdateTransformRulesValidateBeforeCall(FirewallPhase phase, String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phase' is set
        if (phase == null) {
            throw new ApiException("Missing the required parameter 'phase' when calling transformRulesUpdateTransformRules(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling transformRulesUpdateTransformRules(Async)");
        }

        // verify the required parameter 'firewallUpdateRuleset' is set
        if (firewallUpdateRuleset == null) {
            throw new ApiException("Missing the required parameter 'firewallUpdateRuleset' when calling transformRulesUpdateTransformRules(Async)");
        }

        return transformRulesUpdateTransformRulesCall(phase, zoneId, firewallUpdateRuleset, _callback);

    }

    /**
     * Update Transform Rules
     * Updates the Transform Rules of a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @return FirewallApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallApiResponseSingle transformRulesUpdateTransformRules(FirewallPhase phase, String zoneId, FirewallUpdateRuleset firewallUpdateRuleset) throws ApiException {
        ApiResponse<FirewallApiResponseSingle> localVarResp = transformRulesUpdateTransformRulesWithHttpInfo(phase, zoneId, firewallUpdateRuleset);
        return localVarResp.getData();
    }

    /**
     * Update Transform Rules
     * Updates the Transform Rules of a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @return ApiResponse&lt;FirewallApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallApiResponseSingle> transformRulesUpdateTransformRulesWithHttpInfo(FirewallPhase phase, String zoneId, FirewallUpdateRuleset firewallUpdateRuleset) throws ApiException {
        okhttp3.Call localVarCall = transformRulesUpdateTransformRulesValidateBeforeCall(phase, zoneId, firewallUpdateRuleset, null);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Transform Rules (asynchronously)
     * Updates the Transform Rules of a zone.
     * @param phase  (required)
     * @param zoneId  (required)
     * @param firewallUpdateRuleset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Transform Rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Transform Rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformRulesUpdateTransformRulesAsync(FirewallPhase phase, String zoneId, FirewallUpdateRuleset firewallUpdateRuleset, final ApiCallback<FirewallApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformRulesUpdateTransformRulesValidateBeforeCall(phase, zoneId, firewallUpdateRuleset, _callback);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
