/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.PageShieldCreateAPageShieldPolicy4XXResponse;
import cloudflare.sdk.models.PageShieldCreateAPageShieldPolicyRequest;
import cloudflare.sdk.models.PageShieldGetAPageShieldConnection4XXResponse;
import cloudflare.sdk.models.PageShieldGetAPageShieldScript4XXResponse;
import cloudflare.sdk.models.PageShieldGetPageShieldSettings200Response;
import cloudflare.sdk.models.PageShieldGetPageShieldSettings4XXResponse;
import cloudflare.sdk.models.PageShieldGetZoneConnectionResponse;
import cloudflare.sdk.models.PageShieldGetZonePolicyResponse;
import cloudflare.sdk.models.PageShieldGetZoneScriptResponse;
import cloudflare.sdk.models.PageShieldListPageShieldConnections4XXResponse;
import cloudflare.sdk.models.PageShieldListPageShieldPolicies4XXResponse;
import cloudflare.sdk.models.PageShieldListPageShieldScripts4XXResponse;
import cloudflare.sdk.models.PageShieldListZoneConnectionsResponse;
import cloudflare.sdk.models.PageShieldListZonePoliciesResponse;
import cloudflare.sdk.models.PageShieldListZoneScriptsResponse;
import cloudflare.sdk.models.PageShieldUpdatePageShieldSettings200Response;
import cloudflare.sdk.models.PageShieldUpdatePageShieldSettings4XXResponse;
import cloudflare.sdk.models.PageShieldUpdatePageShieldSettingsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PageShieldApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PageShieldApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PageShieldApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pageShieldCreateAPageShieldPolicy
     * @param zoneId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldCreateAPageShieldPolicyCall(String zoneId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageShieldCreateAPageShieldPolicyRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/policies"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldCreateAPageShieldPolicyValidateBeforeCall(String zoneId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldCreateAPageShieldPolicy(Async)");
        }

        // verify the required parameter 'pageShieldCreateAPageShieldPolicyRequest' is set
        if (pageShieldCreateAPageShieldPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'pageShieldCreateAPageShieldPolicyRequest' when calling pageShieldCreateAPageShieldPolicy(Async)");
        }

        return pageShieldCreateAPageShieldPolicyCall(zoneId, pageShieldCreateAPageShieldPolicyRequest, _callback);

    }

    /**
     * Create a Page Shield policy
     * Create a Page Shield policy.
     * @param zoneId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @return PageShieldGetZonePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetZonePolicyResponse pageShieldCreateAPageShieldPolicy(String zoneId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest) throws ApiException {
        ApiResponse<PageShieldGetZonePolicyResponse> localVarResp = pageShieldCreateAPageShieldPolicyWithHttpInfo(zoneId, pageShieldCreateAPageShieldPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a Page Shield policy
     * Create a Page Shield policy.
     * @param zoneId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @return ApiResponse&lt;PageShieldGetZonePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetZonePolicyResponse> pageShieldCreateAPageShieldPolicyWithHttpInfo(String zoneId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = pageShieldCreateAPageShieldPolicyValidateBeforeCall(zoneId, pageShieldCreateAPageShieldPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Page Shield policy (asynchronously)
     * Create a Page Shield policy.
     * @param zoneId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldCreateAPageShieldPolicyAsync(String zoneId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback<PageShieldGetZonePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldCreateAPageShieldPolicyValidateBeforeCall(zoneId, pageShieldCreateAPageShieldPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldDeleteAPageShieldPolicy
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldDeleteAPageShieldPolicyCall(String zoneId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/policies/{policy_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldDeleteAPageShieldPolicyValidateBeforeCall(String zoneId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldDeleteAPageShieldPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling pageShieldDeleteAPageShieldPolicy(Async)");
        }

        return pageShieldDeleteAPageShieldPolicyCall(zoneId, policyId, _callback);

    }

    /**
     * Delete a Page Shield policy
     * Delete a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public void pageShieldDeleteAPageShieldPolicy(String zoneId, String policyId) throws ApiException {
        pageShieldDeleteAPageShieldPolicyWithHttpInfo(zoneId, policyId);
    }

    /**
     * Delete a Page Shield policy
     * Delete a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pageShieldDeleteAPageShieldPolicyWithHttpInfo(String zoneId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldDeleteAPageShieldPolicyValidateBeforeCall(zoneId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Page Shield policy (asynchronously)
     * Delete a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldDeleteAPageShieldPolicyAsync(String zoneId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldDeleteAPageShieldPolicyValidateBeforeCall(zoneId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldGetAPageShieldConnection
     * @param zoneId  (required)
     * @param connectionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield connection response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield connection response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldConnectionCall(String zoneId, String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/connections/{connection_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldGetAPageShieldConnectionValidateBeforeCall(String zoneId, String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldGetAPageShieldConnection(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling pageShieldGetAPageShieldConnection(Async)");
        }

        return pageShieldGetAPageShieldConnectionCall(zoneId, connectionId, _callback);

    }

    /**
     * Get a Page Shield connection
     * Fetches a connection detected by Page Shield by connection ID.
     * @param zoneId  (required)
     * @param connectionId  (required)
     * @return PageShieldGetZoneConnectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield connection response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield connection response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetZoneConnectionResponse pageShieldGetAPageShieldConnection(String zoneId, String connectionId) throws ApiException {
        ApiResponse<PageShieldGetZoneConnectionResponse> localVarResp = pageShieldGetAPageShieldConnectionWithHttpInfo(zoneId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Get a Page Shield connection
     * Fetches a connection detected by Page Shield by connection ID.
     * @param zoneId  (required)
     * @param connectionId  (required)
     * @return ApiResponse&lt;PageShieldGetZoneConnectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield connection response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield connection response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetZoneConnectionResponse> pageShieldGetAPageShieldConnectionWithHttpInfo(String zoneId, String connectionId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldGetAPageShieldConnectionValidateBeforeCall(zoneId, connectionId, null);
        Type localVarReturnType = new TypeToken<PageShieldGetZoneConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Page Shield connection (asynchronously)
     * Fetches a connection detected by Page Shield by connection ID.
     * @param zoneId  (required)
     * @param connectionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield connection response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield connection response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldConnectionAsync(String zoneId, String connectionId, final ApiCallback<PageShieldGetZoneConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldGetAPageShieldConnectionValidateBeforeCall(zoneId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetZoneConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldGetAPageShieldPolicy
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldPolicyCall(String zoneId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/policies/{policy_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldGetAPageShieldPolicyValidateBeforeCall(String zoneId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldGetAPageShieldPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling pageShieldGetAPageShieldPolicy(Async)");
        }

        return pageShieldGetAPageShieldPolicyCall(zoneId, policyId, _callback);

    }

    /**
     * Get a Page Shield policy
     * Fetches a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @return PageShieldGetZonePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetZonePolicyResponse pageShieldGetAPageShieldPolicy(String zoneId, String policyId) throws ApiException {
        ApiResponse<PageShieldGetZonePolicyResponse> localVarResp = pageShieldGetAPageShieldPolicyWithHttpInfo(zoneId, policyId);
        return localVarResp.getData();
    }

    /**
     * Get a Page Shield policy
     * Fetches a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @return ApiResponse&lt;PageShieldGetZonePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetZonePolicyResponse> pageShieldGetAPageShieldPolicyWithHttpInfo(String zoneId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldGetAPageShieldPolicyValidateBeforeCall(zoneId, policyId, null);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Page Shield policy (asynchronously)
     * Fetches a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldPolicyAsync(String zoneId, String policyId, final ApiCallback<PageShieldGetZonePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldGetAPageShieldPolicyValidateBeforeCall(zoneId, policyId, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldGetAPageShieldScript
     * @param zoneId  (required)
     * @param scriptId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield script response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield script response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldScriptCall(String zoneId, String scriptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/scripts/{script_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "script_id" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldGetAPageShieldScriptValidateBeforeCall(String zoneId, String scriptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldGetAPageShieldScript(Async)");
        }

        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling pageShieldGetAPageShieldScript(Async)");
        }

        return pageShieldGetAPageShieldScriptCall(zoneId, scriptId, _callback);

    }

    /**
     * Get a Page Shield script
     * Fetches a script detected by Page Shield by script ID.
     * @param zoneId  (required)
     * @param scriptId  (required)
     * @return PageShieldGetZoneScriptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield script response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield script response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetZoneScriptResponse pageShieldGetAPageShieldScript(String zoneId, String scriptId) throws ApiException {
        ApiResponse<PageShieldGetZoneScriptResponse> localVarResp = pageShieldGetAPageShieldScriptWithHttpInfo(zoneId, scriptId);
        return localVarResp.getData();
    }

    /**
     * Get a Page Shield script
     * Fetches a script detected by Page Shield by script ID.
     * @param zoneId  (required)
     * @param scriptId  (required)
     * @return ApiResponse&lt;PageShieldGetZoneScriptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield script response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield script response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetZoneScriptResponse> pageShieldGetAPageShieldScriptWithHttpInfo(String zoneId, String scriptId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldGetAPageShieldScriptValidateBeforeCall(zoneId, scriptId, null);
        Type localVarReturnType = new TypeToken<PageShieldGetZoneScriptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Page Shield script (asynchronously)
     * Fetches a script detected by Page Shield by script ID.
     * @param zoneId  (required)
     * @param scriptId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Page Shield script response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Page Shield script response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetAPageShieldScriptAsync(String zoneId, String scriptId, final ApiCallback<PageShieldGetZoneScriptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldGetAPageShieldScriptValidateBeforeCall(zoneId, scriptId, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetZoneScriptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldGetPageShieldSettings
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetPageShieldSettingsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldGetPageShieldSettingsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldGetPageShieldSettings(Async)");
        }

        return pageShieldGetPageShieldSettingsCall(zoneId, _callback);

    }

    /**
     * Get Page Shield settings
     * Fetches the Page Shield settings.
     * @param zoneId  (required)
     * @return PageShieldGetPageShieldSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetPageShieldSettings200Response pageShieldGetPageShieldSettings(String zoneId) throws ApiException {
        ApiResponse<PageShieldGetPageShieldSettings200Response> localVarResp = pageShieldGetPageShieldSettingsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Page Shield settings
     * Fetches the Page Shield settings.
     * @param zoneId  (required)
     * @return ApiResponse&lt;PageShieldGetPageShieldSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetPageShieldSettings200Response> pageShieldGetPageShieldSettingsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldGetPageShieldSettingsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<PageShieldGetPageShieldSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Page Shield settings (asynchronously)
     * Fetches the Page Shield settings.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldGetPageShieldSettingsAsync(String zoneId, final ApiCallback<PageShieldGetPageShieldSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldGetPageShieldSettingsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetPageShieldSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldListPageShieldConnections
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield connections response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldConnectionsCall(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, String status, String pageUrl, String export, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/connections"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_urls", excludeUrls));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (hosts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosts", hosts));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (prioritizeMalicious != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prioritize_malicious", prioritizeMalicious));
        }

        if (excludeCdnCgi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_cdn_cgi", excludeCdnCgi));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_url", pageUrl));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldListPageShieldConnectionsValidateBeforeCall(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, String status, String pageUrl, String export, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldListPageShieldConnections(Async)");
        }

        return pageShieldListPageShieldConnectionsCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, export, _callback);

    }

    /**
     * List Page Shield connections
     * Lists all connections detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @return PageShieldListZoneConnectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield connections response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldListZoneConnectionsResponse pageShieldListPageShieldConnections(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, String status, String pageUrl, String export) throws ApiException {
        ApiResponse<PageShieldListZoneConnectionsResponse> localVarResp = pageShieldListPageShieldConnectionsWithHttpInfo(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, export);
        return localVarResp.getData();
    }

    /**
     * List Page Shield connections
     * Lists all connections detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @return ApiResponse&lt;PageShieldListZoneConnectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield connections response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldListZoneConnectionsResponse> pageShieldListPageShieldConnectionsWithHttpInfo(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, String status, String pageUrl, String export) throws ApiException {
        okhttp3.Call localVarCall = pageShieldListPageShieldConnectionsValidateBeforeCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, export, null);
        Type localVarReturnType = new TypeToken<PageShieldListZoneConnectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Page Shield connections (asynchronously)
     * Lists all connections detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield connections response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldConnectionsAsync(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, String status, String pageUrl, String export, final ApiCallback<PageShieldListZoneConnectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldListPageShieldConnectionsValidateBeforeCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, export, _callback);
        Type localVarReturnType = new TypeToken<PageShieldListZoneConnectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldListPageShieldPolicies
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldPoliciesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/policies"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldListPageShieldPoliciesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldListPageShieldPolicies(Async)");
        }

        return pageShieldListPageShieldPoliciesCall(zoneId, _callback);

    }

    /**
     * List Page Shield policies
     * Lists all Page Shield policies.
     * @param zoneId  (required)
     * @return PageShieldListZonePoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldListZonePoliciesResponse pageShieldListPageShieldPolicies(String zoneId) throws ApiException {
        ApiResponse<PageShieldListZonePoliciesResponse> localVarResp = pageShieldListPageShieldPoliciesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Page Shield policies
     * Lists all Page Shield policies.
     * @param zoneId  (required)
     * @return ApiResponse&lt;PageShieldListZonePoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldListZonePoliciesResponse> pageShieldListPageShieldPoliciesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = pageShieldListPageShieldPoliciesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<PageShieldListZonePoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Page Shield policies (asynchronously)
     * Lists all Page Shield policies.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldPoliciesAsync(String zoneId, final ApiCallback<PageShieldListZonePoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldListPageShieldPoliciesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<PageShieldListZonePoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldListPageShieldScripts
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional, default to true)
     * @param excludeDuplicates  (optional, default to true)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield scripts response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield scripts response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldScriptsCall(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, Boolean excludeDuplicates, String status, String pageUrl, String export, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/scripts"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_urls", excludeUrls));
        }

        if (urls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("urls", urls));
        }

        if (hosts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hosts", hosts));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (prioritizeMalicious != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prioritize_malicious", prioritizeMalicious));
        }

        if (excludeCdnCgi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_cdn_cgi", excludeCdnCgi));
        }

        if (excludeDuplicates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_duplicates", excludeDuplicates));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_url", pageUrl));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldListPageShieldScriptsValidateBeforeCall(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, Boolean excludeDuplicates, String status, String pageUrl, String export, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldListPageShieldScripts(Async)");
        }

        return pageShieldListPageShieldScriptsCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, export, _callback);

    }

    /**
     * List Page Shield scripts
     * Lists all scripts detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional, default to true)
     * @param excludeDuplicates  (optional, default to true)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @return PageShieldListZoneScriptsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield scripts response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield scripts response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldListZoneScriptsResponse pageShieldListPageShieldScripts(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, Boolean excludeDuplicates, String status, String pageUrl, String export) throws ApiException {
        ApiResponse<PageShieldListZoneScriptsResponse> localVarResp = pageShieldListPageShieldScriptsWithHttpInfo(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, export);
        return localVarResp.getData();
    }

    /**
     * List Page Shield scripts
     * Lists all scripts detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional, default to true)
     * @param excludeDuplicates  (optional, default to true)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @return ApiResponse&lt;PageShieldListZoneScriptsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield scripts response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield scripts response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldListZoneScriptsResponse> pageShieldListPageShieldScriptsWithHttpInfo(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, Boolean excludeDuplicates, String status, String pageUrl, String export) throws ApiException {
        okhttp3.Call localVarCall = pageShieldListPageShieldScriptsValidateBeforeCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, export, null);
        Type localVarReturnType = new TypeToken<PageShieldListZoneScriptsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Page Shield scripts (asynchronously)
     * Lists all scripts detected by Page Shield.
     * @param zoneId  (required)
     * @param excludeUrls  (optional)
     * @param urls  (optional)
     * @param hosts  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param prioritizeMalicious  (optional)
     * @param excludeCdnCgi  (optional, default to true)
     * @param excludeDuplicates  (optional, default to true)
     * @param status  (optional)
     * @param pageUrl  (optional)
     * @param export  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Page Shield scripts response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Page Shield scripts response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldListPageShieldScriptsAsync(String zoneId, String excludeUrls, String urls, String hosts, String page, BigDecimal perPage, String orderBy, String direction, Boolean prioritizeMalicious, Boolean excludeCdnCgi, Boolean excludeDuplicates, String status, String pageUrl, String export, final ApiCallback<PageShieldListZoneScriptsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldListPageShieldScriptsValidateBeforeCall(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, export, _callback);
        Type localVarReturnType = new TypeToken<PageShieldListZoneScriptsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldUpdateAPageShieldPolicy
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldUpdateAPageShieldPolicyCall(String zoneId, String policyId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageShieldCreateAPageShieldPolicyRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield/policies/{policy_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldUpdateAPageShieldPolicyValidateBeforeCall(String zoneId, String policyId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldUpdateAPageShieldPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling pageShieldUpdateAPageShieldPolicy(Async)");
        }

        // verify the required parameter 'pageShieldCreateAPageShieldPolicyRequest' is set
        if (pageShieldCreateAPageShieldPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'pageShieldCreateAPageShieldPolicyRequest' when calling pageShieldUpdateAPageShieldPolicy(Async)");
        }

        return pageShieldUpdateAPageShieldPolicyCall(zoneId, policyId, pageShieldCreateAPageShieldPolicyRequest, _callback);

    }

    /**
     * Update a Page Shield policy
     * Update a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @return PageShieldGetZonePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldGetZonePolicyResponse pageShieldUpdateAPageShieldPolicy(String zoneId, String policyId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest) throws ApiException {
        ApiResponse<PageShieldGetZonePolicyResponse> localVarResp = pageShieldUpdateAPageShieldPolicyWithHttpInfo(zoneId, policyId, pageShieldCreateAPageShieldPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a Page Shield policy
     * Update a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @return ApiResponse&lt;PageShieldGetZonePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldGetZonePolicyResponse> pageShieldUpdateAPageShieldPolicyWithHttpInfo(String zoneId, String policyId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = pageShieldUpdateAPageShieldPolicyValidateBeforeCall(zoneId, policyId, pageShieldCreateAPageShieldPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Page Shield policy (asynchronously)
     * Update a Page Shield policy by ID.
     * @param zoneId  (required)
     * @param policyId  (required)
     * @param pageShieldCreateAPageShieldPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Page Shield policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Page Shield policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldUpdateAPageShieldPolicyAsync(String zoneId, String policyId, PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest, final ApiCallback<PageShieldGetZonePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldUpdateAPageShieldPolicyValidateBeforeCall(zoneId, policyId, pageShieldCreateAPageShieldPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PageShieldGetZonePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageShieldUpdatePageShieldSettings
     * @param zoneId  (required)
     * @param pageShieldUpdatePageShieldSettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldUpdatePageShieldSettingsCall(String zoneId, PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageShieldUpdatePageShieldSettingsRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/page_shield"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageShieldUpdatePageShieldSettingsValidateBeforeCall(String zoneId, PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling pageShieldUpdatePageShieldSettings(Async)");
        }

        // verify the required parameter 'pageShieldUpdatePageShieldSettingsRequest' is set
        if (pageShieldUpdatePageShieldSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'pageShieldUpdatePageShieldSettingsRequest' when calling pageShieldUpdatePageShieldSettings(Async)");
        }

        return pageShieldUpdatePageShieldSettingsCall(zoneId, pageShieldUpdatePageShieldSettingsRequest, _callback);

    }

    /**
     * Update Page Shield settings
     * Updates Page Shield settings.
     * @param zoneId  (required)
     * @param pageShieldUpdatePageShieldSettingsRequest  (required)
     * @return PageShieldUpdatePageShieldSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public PageShieldUpdatePageShieldSettings200Response pageShieldUpdatePageShieldSettings(String zoneId, PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest) throws ApiException {
        ApiResponse<PageShieldUpdatePageShieldSettings200Response> localVarResp = pageShieldUpdatePageShieldSettingsWithHttpInfo(zoneId, pageShieldUpdatePageShieldSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Page Shield settings
     * Updates Page Shield settings.
     * @param zoneId  (required)
     * @param pageShieldUpdatePageShieldSettingsRequest  (required)
     * @return ApiResponse&lt;PageShieldUpdatePageShieldSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageShieldUpdatePageShieldSettings200Response> pageShieldUpdatePageShieldSettingsWithHttpInfo(String zoneId, PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = pageShieldUpdatePageShieldSettingsValidateBeforeCall(zoneId, pageShieldUpdatePageShieldSettingsRequest, null);
        Type localVarReturnType = new TypeToken<PageShieldUpdatePageShieldSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Page Shield settings (asynchronously)
     * Updates Page Shield settings.
     * @param zoneId  (required)
     * @param pageShieldUpdatePageShieldSettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Page Shield settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Page Shield settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageShieldUpdatePageShieldSettingsAsync(String zoneId, PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest, final ApiCallback<PageShieldUpdatePageShieldSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageShieldUpdatePageShieldSettingsValidateBeforeCall(zoneId, pageShieldUpdatePageShieldSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<PageShieldUpdatePageShieldSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
