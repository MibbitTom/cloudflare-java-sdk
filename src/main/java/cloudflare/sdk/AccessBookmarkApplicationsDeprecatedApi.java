/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccessApiResponseCommonFailure;
import cloudflare.sdk.models.AccessBookmarksComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AccessBookmarksComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AccessIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessBookmarkApplicationsDeprecatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessBookmarkApplicationsDeprecatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessBookmarkApplicationsDeprecatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessBookmarkApplicationsDeprecatedCreateABookmarkApplication
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/bookmarks/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessBookmarkApplicationsDeprecatedCreateABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessBookmarkApplicationsDeprecatedCreateABookmarkApplication(Async)");
        }

        return accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationCall(uuid, identifier, _callback);

    }

    /**
     * Create a Bookmark application
     * Create a new Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessBookmarksComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccessBookmarksComponentsSchemasSingleResponse accessBookmarkApplicationsDeprecatedCreateABookmarkApplication(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> localVarResp = accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Create a Bookmark application
     * Create a new Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessBookmarksComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Bookmark application (asynchronously)
     * Create a new Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationAsync(String uuid, String identifier, final ApiCallback<AccessBookmarksComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedCreateABookmarkApplicationValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessBookmarkApplicationsDeprecatedDeleteABookmarkApplication
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/bookmarks/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessBookmarkApplicationsDeprecatedDeleteABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessBookmarkApplicationsDeprecatedDeleteABookmarkApplication(Async)");
        }

        return accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationCall(uuid, identifier, _callback);

    }

    /**
     * Delete a Bookmark application
     * Deletes a Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccessIdResponse accessBookmarkApplicationsDeprecatedDeleteABookmarkApplication(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete a Bookmark application
     * Deletes a Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccessIdResponse> accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Bookmark application (asynchronously)
     * Deletes a Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationAsync(String uuid, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedDeleteABookmarkApplicationValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessBookmarkApplicationsDeprecatedGetABookmarkApplication
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedGetABookmarkApplicationCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/bookmarks/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessBookmarkApplicationsDeprecatedGetABookmarkApplicationValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessBookmarkApplicationsDeprecatedGetABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessBookmarkApplicationsDeprecatedGetABookmarkApplication(Async)");
        }

        return accessBookmarkApplicationsDeprecatedGetABookmarkApplicationCall(uuid, identifier, _callback);

    }

    /**
     * Get a Bookmark application
     * Fetches a single Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessBookmarksComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccessBookmarksComponentsSchemasSingleResponse accessBookmarkApplicationsDeprecatedGetABookmarkApplication(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> localVarResp = accessBookmarkApplicationsDeprecatedGetABookmarkApplicationWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get a Bookmark application
     * Fetches a single Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessBookmarksComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> accessBookmarkApplicationsDeprecatedGetABookmarkApplicationWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedGetABookmarkApplicationValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Bookmark application (asynchronously)
     * Fetches a single Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedGetABookmarkApplicationAsync(String uuid, String identifier, final ApiCallback<AccessBookmarksComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedGetABookmarkApplicationValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessBookmarkApplicationsDeprecatedListBookmarkApplications
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Bookmark applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Bookmark applications response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedListBookmarkApplicationsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/bookmarks"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessBookmarkApplicationsDeprecatedListBookmarkApplicationsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessBookmarkApplicationsDeprecatedListBookmarkApplications(Async)");
        }

        return accessBookmarkApplicationsDeprecatedListBookmarkApplicationsCall(identifier, _callback);

    }

    /**
     * List Bookmark applications
     * Lists Bookmark applications.
     * @param identifier  (required)
     * @return AccessBookmarksComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Bookmark applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Bookmark applications response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccessBookmarksComponentsSchemasResponseCollection accessBookmarkApplicationsDeprecatedListBookmarkApplications(String identifier) throws ApiException {
        ApiResponse<AccessBookmarksComponentsSchemasResponseCollection> localVarResp = accessBookmarkApplicationsDeprecatedListBookmarkApplicationsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Bookmark applications
     * Lists Bookmark applications.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessBookmarksComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Bookmark applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Bookmark applications response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccessBookmarksComponentsSchemasResponseCollection> accessBookmarkApplicationsDeprecatedListBookmarkApplicationsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedListBookmarkApplicationsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bookmark applications (asynchronously)
     * Lists Bookmark applications.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Bookmark applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Bookmark applications response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedListBookmarkApplicationsAsync(String identifier, final ApiCallback<AccessBookmarksComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedListBookmarkApplicationsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessBookmarkApplicationsDeprecatedUpdateABookmarkApplication
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/bookmarks/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessBookmarkApplicationsDeprecatedUpdateABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessBookmarkApplicationsDeprecatedUpdateABookmarkApplication(Async)");
        }

        return accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationCall(uuid, identifier, _callback);

    }

    /**
     * Update a Bookmark application
     * Updates a configured Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessBookmarksComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccessBookmarksComponentsSchemasSingleResponse accessBookmarkApplicationsDeprecatedUpdateABookmarkApplication(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> localVarResp = accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Update a Bookmark application
     * Updates a configured Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessBookmarksComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccessBookmarksComponentsSchemasSingleResponse> accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Bookmark application (asynchronously)
     * Updates a configured Bookmark application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Bookmark application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationAsync(String uuid, String identifier, final ApiCallback<AccessBookmarksComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessBookmarkApplicationsDeprecatedUpdateABookmarkApplicationValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessBookmarksComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
