/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccessApiResponseCommonFailure;
import cloudflare.sdk.models.AccessAppId;
import cloudflare.sdk.models.AccessApplicationsAddAnApplication201Response;
import cloudflare.sdk.models.AccessApps;
import cloudflare.sdk.models.AccessAppsComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AccessAppsComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AccessIdResponse;
import cloudflare.sdk.models.AccessPolicyCheckResponse;
import cloudflare.sdk.models.AccessSchemasEmptyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessApplicationsAddAnApplication
     * @param identifier  (required)
     * @param accessApps  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsAddAnApplicationCall(String identifier, AccessApps accessApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessApps;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsAddAnApplicationValidateBeforeCall(String identifier, AccessApps accessApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsAddAnApplication(Async)");
        }

        // verify the required parameter 'accessApps' is set
        if (accessApps == null) {
            throw new ApiException("Missing the required parameter 'accessApps' when calling accessApplicationsAddAnApplication(Async)");
        }

        return accessApplicationsAddAnApplicationCall(identifier, accessApps, _callback);

    }

    /**
     * Add an Access Application
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessApps  (required)
     * @return AccessApplicationsAddAnApplication201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessApplicationsAddAnApplication201Response accessApplicationsAddAnApplication(String identifier, AccessApps accessApps) throws ApiException {
        ApiResponse<AccessApplicationsAddAnApplication201Response> localVarResp = accessApplicationsAddAnApplicationWithHttpInfo(identifier, accessApps);
        return localVarResp.getData();
    }

    /**
     * Add an Access Application
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessApps  (required)
     * @return ApiResponse&lt;AccessApplicationsAddAnApplication201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessApplicationsAddAnApplication201Response> accessApplicationsAddAnApplicationWithHttpInfo(String identifier, AccessApps accessApps) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsAddAnApplicationValidateBeforeCall(identifier, accessApps, null);
        Type localVarReturnType = new TypeToken<AccessApplicationsAddAnApplication201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Access Application (asynchronously)
     * Adds a new application to Access.
     * @param identifier  (required)
     * @param accessApps  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a Bookmark application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsAddAnApplicationAsync(String identifier, AccessApps accessApps, final ApiCallback<AccessApplicationsAddAnApplication201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsAddAnApplicationValidateBeforeCall(identifier, accessApps, _callback);
        Type localVarReturnType = new TypeToken<AccessApplicationsAddAnApplication201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsDeleteAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsDeleteAnAccessApplicationCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsDeleteAnAccessApplicationValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling accessApplicationsDeleteAnAccessApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsDeleteAnAccessApplication(Async)");
        }

        return accessApplicationsDeleteAnAccessApplicationCall(appId, identifier, _callback);

    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse accessApplicationsDeleteAnAccessApplication(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = accessApplicationsDeleteAnAccessApplicationWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> accessApplicationsDeleteAnAccessApplicationWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access application (asynchronously)
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsDeleteAnAccessApplicationAsync(AccessAppId appId, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsGetAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsGetAnAccessApplicationCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsGetAnAccessApplicationValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling accessApplicationsGetAnAccessApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsGetAnAccessApplication(Async)");
        }

        return accessApplicationsGetAnAccessApplicationCall(appId, identifier, _callback);

    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessAppsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessAppsComponentsSchemasSingleResponse accessApplicationsGetAnAccessApplication(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessAppsComponentsSchemasSingleResponse> localVarResp = accessApplicationsGetAnAccessApplicationWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessAppsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessAppsComponentsSchemasSingleResponse> accessApplicationsGetAnAccessApplicationWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access application (asynchronously)
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsGetAnAccessApplicationAsync(AccessAppId appId, String identifier, final ApiCallback<AccessAppsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsListAccessApplications
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsListAccessApplicationsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsListAccessApplicationsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsListAccessApplications(Async)");
        }

        return accessApplicationsListAccessApplicationsCall(identifier, _callback);

    }

    /**
     * List Access applications
     * Lists all Access applications in an account.
     * @param identifier  (required)
     * @return AccessAppsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessAppsComponentsSchemasResponseCollection accessApplicationsListAccessApplications(String identifier) throws ApiException {
        ApiResponse<AccessAppsComponentsSchemasResponseCollection> localVarResp = accessApplicationsListAccessApplicationsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Access applications
     * Lists all Access applications in an account.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessAppsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessAppsComponentsSchemasResponseCollection> accessApplicationsListAccessApplicationsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsListAccessApplicationsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access applications (asynchronously)
     * Lists all Access applications in an account.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsListAccessApplicationsAsync(String identifier, final ApiCallback<AccessAppsComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsListAccessApplicationsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessAppsComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsRevokeServiceTokens
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsRevokeServiceTokensCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{app_id}/revoke_tokens"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsRevokeServiceTokensValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling accessApplicationsRevokeServiceTokens(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsRevokeServiceTokens(Async)");
        }

        return accessApplicationsRevokeServiceTokensCall(appId, identifier, _callback);

    }

    /**
     * Revoke application tokens
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessSchemasEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessSchemasEmptyResponse accessApplicationsRevokeServiceTokens(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessSchemasEmptyResponse> localVarResp = accessApplicationsRevokeServiceTokensWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Revoke application tokens
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessSchemasEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessSchemasEmptyResponse> accessApplicationsRevokeServiceTokensWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessSchemasEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke application tokens (asynchronously)
     * Revokes all tokens issued for an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Revoke application tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke application tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsRevokeServiceTokensAsync(AccessAppId appId, String identifier, final ApiCallback<AccessSchemasEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessSchemasEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsTestAccessPolicies
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsTestAccessPoliciesCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{app_id}/user_policy_checks"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsTestAccessPoliciesValidateBeforeCall(AccessAppId appId, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling accessApplicationsTestAccessPolicies(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsTestAccessPolicies(Async)");
        }

        return accessApplicationsTestAccessPoliciesCall(appId, identifier, _callback);

    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AccessPolicyCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPolicyCheckResponse accessApplicationsTestAccessPolicies(AccessAppId appId, String identifier) throws ApiException {
        ApiResponse<AccessPolicyCheckResponse> localVarResp = accessApplicationsTestAccessPoliciesWithHttpInfo(appId, identifier);
        return localVarResp.getData();
    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessPolicyCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPolicyCheckResponse> accessApplicationsTestAccessPoliciesWithHttpInfo(AccessAppId appId, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, null);
        Type localVarReturnType = new TypeToken<AccessPolicyCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Access policies (asynchronously)
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Test Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsTestAccessPoliciesAsync(AccessAppId appId, String identifier, final ApiCallback<AccessPolicyCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessPolicyCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessApplicationsUpdateABookmarkApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessApps  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsUpdateABookmarkApplicationCall(AccessAppId appId, String identifier, AccessApps accessApps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessApps;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessApplicationsUpdateABookmarkApplicationValidateBeforeCall(AccessAppId appId, String identifier, AccessApps accessApps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling accessApplicationsUpdateABookmarkApplication(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessApplicationsUpdateABookmarkApplication(Async)");
        }

        // verify the required parameter 'accessApps' is set
        if (accessApps == null) {
            throw new ApiException("Missing the required parameter 'accessApps' when calling accessApplicationsUpdateABookmarkApplication(Async)");
        }

        return accessApplicationsUpdateABookmarkApplicationCall(appId, identifier, accessApps, _callback);

    }

    /**
     * Update an Access application
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessApps  (required)
     * @return AccessApplicationsAddAnApplication201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessApplicationsAddAnApplication201Response accessApplicationsUpdateABookmarkApplication(AccessAppId appId, String identifier, AccessApps accessApps) throws ApiException {
        ApiResponse<AccessApplicationsAddAnApplication201Response> localVarResp = accessApplicationsUpdateABookmarkApplicationWithHttpInfo(appId, identifier, accessApps);
        return localVarResp.getData();
    }

    /**
     * Update an Access application
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessApps  (required)
     * @return ApiResponse&lt;AccessApplicationsAddAnApplication201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessApplicationsAddAnApplication201Response> accessApplicationsUpdateABookmarkApplicationWithHttpInfo(AccessAppId appId, String identifier, AccessApps accessApps) throws ApiException {
        okhttp3.Call localVarCall = accessApplicationsUpdateABookmarkApplicationValidateBeforeCall(appId, identifier, accessApps, null);
        Type localVarReturnType = new TypeToken<AccessApplicationsAddAnApplication201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access application (asynchronously)
     * Updates an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param accessApps  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessApplicationsUpdateABookmarkApplicationAsync(AccessAppId appId, String identifier, AccessApps accessApps, final ApiCallback<AccessApplicationsAddAnApplication201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessApplicationsUpdateABookmarkApplicationValidateBeforeCall(appId, identifier, accessApps, _callback);
        Type localVarReturnType = new TypeToken<AccessApplicationsAddAnApplication201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
