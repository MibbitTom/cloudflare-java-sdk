/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.EmailCatchAllRuleResponseSingle;
import cloudflare.sdk.models.EmailCreateRuleProperties;
import cloudflare.sdk.models.EmailRuleResponseSingle;
import cloudflare.sdk.models.EmailRulesResponseCollection;
import cloudflare.sdk.models.EmailUpdateCatchAllRuleProperties;
import cloudflare.sdk.models.EmailUpdateRuleProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailRoutingRoutingRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailRoutingRoutingRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailRoutingRoutingRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for emailRoutingRoutingRulesCreateRoutingRule
     * @param zoneIdentifier  (required)
     * @param emailCreateRuleProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesCreateRoutingRuleCall(String zoneIdentifier, EmailCreateRuleProperties emailCreateRuleProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailCreateRuleProperties;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(String zoneIdentifier, EmailCreateRuleProperties emailCreateRuleProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesCreateRoutingRule(Async)");
        }

        // verify the required parameter 'emailCreateRuleProperties' is set
        if (emailCreateRuleProperties == null) {
            throw new ApiException("Missing the required parameter 'emailCreateRuleProperties' when calling emailRoutingRoutingRulesCreateRoutingRule(Async)");
        }

        return emailRoutingRoutingRulesCreateRoutingRuleCall(zoneIdentifier, emailCreateRuleProperties, _callback);

    }

    /**
     * Create routing rule
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param zoneIdentifier  (required)
     * @param emailCreateRuleProperties  (required)
     * @return EmailRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailRuleResponseSingle emailRoutingRoutingRulesCreateRoutingRule(String zoneIdentifier, EmailCreateRuleProperties emailCreateRuleProperties) throws ApiException {
        ApiResponse<EmailRuleResponseSingle> localVarResp = emailRoutingRoutingRulesCreateRoutingRuleWithHttpInfo(zoneIdentifier, emailCreateRuleProperties);
        return localVarResp.getData();
    }

    /**
     * Create routing rule
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param zoneIdentifier  (required)
     * @param emailCreateRuleProperties  (required)
     * @return ApiResponse&lt;EmailRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailRuleResponseSingle> emailRoutingRoutingRulesCreateRoutingRuleWithHttpInfo(String zoneIdentifier, EmailCreateRuleProperties emailCreateRuleProperties) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(zoneIdentifier, emailCreateRuleProperties, null);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create routing rule (asynchronously)
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param zoneIdentifier  (required)
     * @param emailCreateRuleProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesCreateRoutingRuleAsync(String zoneIdentifier, EmailCreateRuleProperties emailCreateRuleProperties, final ApiCallback<EmailRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(zoneIdentifier, emailCreateRuleProperties, _callback);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesDeleteRoutingRule
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesDeleteRoutingRuleCall(String ruleIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replace("{" + "rule_identifier" + "}", localVarApiClient.escapeString(ruleIdentifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(String ruleIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesDeleteRoutingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesDeleteRoutingRule(Async)");
        }

        return emailRoutingRoutingRulesDeleteRoutingRuleCall(ruleIdentifier, zoneIdentifier, _callback);

    }

    /**
     * Delete routing rule
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return EmailRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailRuleResponseSingle emailRoutingRoutingRulesDeleteRoutingRule(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<EmailRuleResponseSingle> localVarResp = emailRoutingRoutingRulesDeleteRoutingRuleWithHttpInfo(ruleIdentifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete routing rule
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailRuleResponseSingle> emailRoutingRoutingRulesDeleteRoutingRuleWithHttpInfo(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete routing rule (asynchronously)
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesDeleteRoutingRuleAsync(String ruleIdentifier, String zoneIdentifier, final ApiCallback<EmailRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesGetCatchAllRule
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesGetCatchAllRuleCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/catch_all"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesGetCatchAllRule(Async)");
        }

        return emailRoutingRoutingRulesGetCatchAllRuleCall(zoneIdentifier, _callback);

    }

    /**
     * Get catch-all rule
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @return EmailCatchAllRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailCatchAllRuleResponseSingle emailRoutingRoutingRulesGetCatchAllRule(String zoneIdentifier) throws ApiException {
        ApiResponse<EmailCatchAllRuleResponseSingle> localVarResp = emailRoutingRoutingRulesGetCatchAllRuleWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get catch-all rule
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailCatchAllRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailCatchAllRuleResponseSingle> emailRoutingRoutingRulesGetCatchAllRuleWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailCatchAllRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get catch-all rule (asynchronously)
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesGetCatchAllRuleAsync(String zoneIdentifier, final ApiCallback<EmailCatchAllRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailCatchAllRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesGetRoutingRule
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesGetRoutingRuleCall(String ruleIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replace("{" + "rule_identifier" + "}", localVarApiClient.escapeString(ruleIdentifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(String ruleIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesGetRoutingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesGetRoutingRule(Async)");
        }

        return emailRoutingRoutingRulesGetRoutingRuleCall(ruleIdentifier, zoneIdentifier, _callback);

    }

    /**
     * Get routing rule
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return EmailRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailRuleResponseSingle emailRoutingRoutingRulesGetRoutingRule(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<EmailRuleResponseSingle> localVarResp = emailRoutingRoutingRulesGetRoutingRuleWithHttpInfo(ruleIdentifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get routing rule
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EmailRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailRuleResponseSingle> emailRoutingRoutingRulesGetRoutingRuleWithHttpInfo(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get routing rule (asynchronously)
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesGetRoutingRuleAsync(String ruleIdentifier, String zoneIdentifier, final ApiCallback<EmailRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesListRoutingRules
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param enabled  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List routing rules response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesListRoutingRulesCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesListRoutingRules(Async)");
        }

        return emailRoutingRoutingRulesListRoutingRulesCall(zoneIdentifier, page, perPage, enabled, _callback);

    }

    /**
     * List routing rules
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param enabled  (optional)
     * @return EmailRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List routing rules response </td><td>  -  </td></tr>
     </table>
     */
    public EmailRulesResponseCollection emailRoutingRoutingRulesListRoutingRules(String zoneIdentifier, BigDecimal page, BigDecimal perPage, Boolean enabled) throws ApiException {
        ApiResponse<EmailRulesResponseCollection> localVarResp = emailRoutingRoutingRulesListRoutingRulesWithHttpInfo(zoneIdentifier, page, perPage, enabled);
        return localVarResp.getData();
    }

    /**
     * List routing rules
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param enabled  (optional)
     * @return ApiResponse&lt;EmailRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List routing rules response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailRulesResponseCollection> emailRoutingRoutingRulesListRoutingRulesWithHttpInfo(String zoneIdentifier, BigDecimal page, BigDecimal perPage, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(zoneIdentifier, page, perPage, enabled, null);
        Type localVarReturnType = new TypeToken<EmailRulesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List routing rules (asynchronously)
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param enabled  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List routing rules response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesListRoutingRulesAsync(String zoneIdentifier, BigDecimal page, BigDecimal perPage, Boolean enabled, final ApiCallback<EmailRulesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(zoneIdentifier, page, perPage, enabled, _callback);
        Type localVarReturnType = new TypeToken<EmailRulesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesUpdateCatchAllRule
     * @param zoneIdentifier  (required)
     * @param emailUpdateCatchAllRuleProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesUpdateCatchAllRuleCall(String zoneIdentifier, EmailUpdateCatchAllRuleProperties emailUpdateCatchAllRuleProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailUpdateCatchAllRuleProperties;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/catch_all"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(String zoneIdentifier, EmailUpdateCatchAllRuleProperties emailUpdateCatchAllRuleProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesUpdateCatchAllRule(Async)");
        }

        // verify the required parameter 'emailUpdateCatchAllRuleProperties' is set
        if (emailUpdateCatchAllRuleProperties == null) {
            throw new ApiException("Missing the required parameter 'emailUpdateCatchAllRuleProperties' when calling emailRoutingRoutingRulesUpdateCatchAllRule(Async)");
        }

        return emailRoutingRoutingRulesUpdateCatchAllRuleCall(zoneIdentifier, emailUpdateCatchAllRuleProperties, _callback);

    }

    /**
     * Update catch-all rule
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param zoneIdentifier  (required)
     * @param emailUpdateCatchAllRuleProperties  (required)
     * @return EmailCatchAllRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailCatchAllRuleResponseSingle emailRoutingRoutingRulesUpdateCatchAllRule(String zoneIdentifier, EmailUpdateCatchAllRuleProperties emailUpdateCatchAllRuleProperties) throws ApiException {
        ApiResponse<EmailCatchAllRuleResponseSingle> localVarResp = emailRoutingRoutingRulesUpdateCatchAllRuleWithHttpInfo(zoneIdentifier, emailUpdateCatchAllRuleProperties);
        return localVarResp.getData();
    }

    /**
     * Update catch-all rule
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param zoneIdentifier  (required)
     * @param emailUpdateCatchAllRuleProperties  (required)
     * @return ApiResponse&lt;EmailCatchAllRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailCatchAllRuleResponseSingle> emailRoutingRoutingRulesUpdateCatchAllRuleWithHttpInfo(String zoneIdentifier, EmailUpdateCatchAllRuleProperties emailUpdateCatchAllRuleProperties) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(zoneIdentifier, emailUpdateCatchAllRuleProperties, null);
        Type localVarReturnType = new TypeToken<EmailCatchAllRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update catch-all rule (asynchronously)
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param zoneIdentifier  (required)
     * @param emailUpdateCatchAllRuleProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update catch-all rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesUpdateCatchAllRuleAsync(String zoneIdentifier, EmailUpdateCatchAllRuleProperties emailUpdateCatchAllRuleProperties, final ApiCallback<EmailCatchAllRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(zoneIdentifier, emailUpdateCatchAllRuleProperties, _callback);
        Type localVarReturnType = new TypeToken<EmailCatchAllRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingRoutingRulesUpdateRoutingRule
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param emailUpdateRuleProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesUpdateRoutingRuleCall(String ruleIdentifier, String zoneIdentifier, EmailUpdateRuleProperties emailUpdateRuleProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailUpdateRuleProperties;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replace("{" + "rule_identifier" + "}", localVarApiClient.escapeString(ruleIdentifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(String ruleIdentifier, String zoneIdentifier, EmailUpdateRuleProperties emailUpdateRuleProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }

        // verify the required parameter 'emailUpdateRuleProperties' is set
        if (emailUpdateRuleProperties == null) {
            throw new ApiException("Missing the required parameter 'emailUpdateRuleProperties' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }

        return emailRoutingRoutingRulesUpdateRoutingRuleCall(ruleIdentifier, zoneIdentifier, emailUpdateRuleProperties, _callback);

    }

    /**
     * Update routing rule
     * Update actions and matches, or enable/disable specific routing rules.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param emailUpdateRuleProperties  (required)
     * @return EmailRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public EmailRuleResponseSingle emailRoutingRoutingRulesUpdateRoutingRule(String ruleIdentifier, String zoneIdentifier, EmailUpdateRuleProperties emailUpdateRuleProperties) throws ApiException {
        ApiResponse<EmailRuleResponseSingle> localVarResp = emailRoutingRoutingRulesUpdateRoutingRuleWithHttpInfo(ruleIdentifier, zoneIdentifier, emailUpdateRuleProperties);
        return localVarResp.getData();
    }

    /**
     * Update routing rule
     * Update actions and matches, or enable/disable specific routing rules.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param emailUpdateRuleProperties  (required)
     * @return ApiResponse&lt;EmailRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailRuleResponseSingle> emailRoutingRoutingRulesUpdateRoutingRuleWithHttpInfo(String ruleIdentifier, String zoneIdentifier, EmailUpdateRuleProperties emailUpdateRuleProperties) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, emailUpdateRuleProperties, null);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update routing rule (asynchronously)
     * Update actions and matches, or enable/disable specific routing rules.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param emailUpdateRuleProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update routing rule response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingRoutingRulesUpdateRoutingRuleAsync(String ruleIdentifier, String zoneIdentifier, EmailUpdateRuleProperties emailUpdateRuleProperties, final ApiCallback<EmailRuleResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, emailUpdateRuleProperties, _callback);
        Type localVarReturnType = new TypeToken<EmailRuleResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
