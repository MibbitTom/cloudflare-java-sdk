/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.CertificatePacksDeleteAdvancedCertificateManagerCertificatePack4XXResponse;
import cloudflare.sdk.models.CertificatePacksGetCertificatePack4XXResponse;
import cloudflare.sdk.models.CertificatePacksGetCertificatePackQuotas4XXResponse;
import cloudflare.sdk.models.CertificatePacksListCertificatePacks4XXResponse;
import cloudflare.sdk.models.CertificatePacksOrderAdvancedCertificateManagerCertificatePack4XXResponse;
import cloudflare.sdk.models.CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCertificatePackQuotaResponse;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCertificatePackResponseCollection;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesCertificatePackResponseSingle;
import cloudflare.sdk.models.TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatePacksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatePacksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatePacksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificatePacksDeleteAdvancedCertificateManagerCertificatePack
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksDeleteAdvancedCertificateManagerCertificatePackCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}"
            .replace("{" + "certificate_pack_id" + "}", localVarApiClient.escapeString(certificatePackId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksDeleteAdvancedCertificateManagerCertificatePackValidateBeforeCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificatePackId' is set
        if (certificatePackId == null) {
            throw new ApiException("Missing the required parameter 'certificatePackId' when calling certificatePacksDeleteAdvancedCertificateManagerCertificatePack(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksDeleteAdvancedCertificateManagerCertificatePack(Async)");
        }

        return certificatePacksDeleteAdvancedCertificateManagerCertificatePackCall(certificatePackId, zoneId, _callback);

    }

    /**
     * Delete Advanced Certificate Manager Certificate Pack
     * For a given zone, delete an advanced certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle certificatePacksDeleteAdvancedCertificateManagerCertificatePack(String certificatePackId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle> localVarResp = certificatePacksDeleteAdvancedCertificateManagerCertificatePackWithHttpInfo(certificatePackId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Advanced Certificate Manager Certificate Pack
     * For a given zone, delete an advanced certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle> certificatePacksDeleteAdvancedCertificateManagerCertificatePackWithHttpInfo(String certificatePackId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksDeleteAdvancedCertificateManagerCertificatePackValidateBeforeCall(certificatePackId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Advanced Certificate Manager Certificate Pack (asynchronously)
     * For a given zone, delete an advanced certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksDeleteAdvancedCertificateManagerCertificatePackAsync(String certificatePackId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksDeleteAdvancedCertificateManagerCertificatePackValidateBeforeCall(certificatePackId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatePacksGetCertificatePack
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksGetCertificatePackCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}"
            .replace("{" + "certificate_pack_id" + "}", localVarApiClient.escapeString(certificatePackId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksGetCertificatePackValidateBeforeCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificatePackId' is set
        if (certificatePackId == null) {
            throw new ApiException("Missing the required parameter 'certificatePackId' when calling certificatePacksGetCertificatePack(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksGetCertificatePack(Async)");
        }

        return certificatePacksGetCertificatePackCall(certificatePackId, zoneId, _callback);

    }

    /**
     * Get Certificate Pack
     * For a given zone, get a certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificatePackResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificatePackResponseSingle certificatePacksGetCertificatePack(String certificatePackId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificatePackResponseSingle> localVarResp = certificatePacksGetCertificatePackWithHttpInfo(certificatePackId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Certificate Pack
     * For a given zone, get a certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificatePackResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificatePackResponseSingle> certificatePacksGetCertificatePackWithHttpInfo(String certificatePackId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksGetCertificatePackValidateBeforeCall(certificatePackId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Certificate Pack (asynchronously)
     * For a given zone, get a certificate pack.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksGetCertificatePackAsync(String certificatePackId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificatePackResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksGetCertificatePackValidateBeforeCall(certificatePackId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatePacksGetCertificatePackQuotas
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack Quotas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack Quotas response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksGetCertificatePackQuotasCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs/quota"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksGetCertificatePackQuotasValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksGetCertificatePackQuotas(Async)");
        }

        return certificatePacksGetCertificatePackQuotasCall(zoneId, _callback);

    }

    /**
     * Get Certificate Pack Quotas
     * For a given zone, list certificate pack quotas.
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificatePackQuotaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack Quotas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack Quotas response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificatePackQuotaResponse certificatePacksGetCertificatePackQuotas(String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificatePackQuotaResponse> localVarResp = certificatePacksGetCertificatePackQuotasWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Certificate Pack Quotas
     * For a given zone, list certificate pack quotas.
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificatePackQuotaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack Quotas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack Quotas response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificatePackQuotaResponse> certificatePacksGetCertificatePackQuotasWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksGetCertificatePackQuotasValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackQuotaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Certificate Pack Quotas (asynchronously)
     * For a given zone, list certificate pack quotas.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Pack Quotas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Pack Quotas response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksGetCertificatePackQuotasAsync(String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificatePackQuotaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksGetCertificatePackQuotasValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackQuotaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatePacksListCertificatePacks
     * @param zoneId  (required)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificate Packs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificate Packs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksListCertificatePacksCall(String zoneId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksListCertificatePacksValidateBeforeCall(String zoneId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksListCertificatePacks(Async)");
        }

        return certificatePacksListCertificatePacksCall(zoneId, status, _callback);

    }

    /**
     * List Certificate Packs
     * For a given zone, list all active certificate packs.
     * @param zoneId  (required)
     * @param status  (optional)
     * @return TlsCertificatesAndHostnamesCertificatePackResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificate Packs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificate Packs response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificatePackResponseCollection certificatePacksListCertificatePacks(String zoneId, String status) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificatePackResponseCollection> localVarResp = certificatePacksListCertificatePacksWithHttpInfo(zoneId, status);
        return localVarResp.getData();
    }

    /**
     * List Certificate Packs
     * For a given zone, list all active certificate packs.
     * @param zoneId  (required)
     * @param status  (optional)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificatePackResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificate Packs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificate Packs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificatePackResponseCollection> certificatePacksListCertificatePacksWithHttpInfo(String zoneId, String status) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksListCertificatePacksValidateBeforeCall(zoneId, status, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Certificate Packs (asynchronously)
     * For a given zone, list all active certificate packs.
     * @param zoneId  (required)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificate Packs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificate Packs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksListCertificatePacksAsync(String zoneId, String status, final ApiCallback<TlsCertificatesAndHostnamesCertificatePackResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksListCertificatePacksValidateBeforeCall(zoneId, status, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificatePackResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatePacksOrderAdvancedCertificateManagerCertificatePack
     * @param zoneId  (required)
     * @param certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Order Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksOrderAdvancedCertificateManagerCertificatePackCall(String zoneId, CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs/order"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksOrderAdvancedCertificateManagerCertificatePackValidateBeforeCall(String zoneId, CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksOrderAdvancedCertificateManagerCertificatePack(Async)");
        }

        // verify the required parameter 'certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest' is set
        if (certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest == null) {
            throw new ApiException("Missing the required parameter 'certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest' when calling certificatePacksOrderAdvancedCertificateManagerCertificatePack(Async)");
        }

        return certificatePacksOrderAdvancedCertificateManagerCertificatePackCall(zoneId, certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, _callback);

    }

    /**
     * Order Advanced Certificate Manager Certificate Pack
     * For a given zone, order an advanced certificate pack.
     * @param zoneId  (required)
     * @param certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest  (required)
     * @return TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Order Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle certificatePacksOrderAdvancedCertificateManagerCertificatePack(String zoneId, CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> localVarResp = certificatePacksOrderAdvancedCertificateManagerCertificatePackWithHttpInfo(zoneId, certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest);
        return localVarResp.getData();
    }

    /**
     * Order Advanced Certificate Manager Certificate Pack
     * For a given zone, order an advanced certificate pack.
     * @param zoneId  (required)
     * @param certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Order Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> certificatePacksOrderAdvancedCertificateManagerCertificatePackWithHttpInfo(String zoneId, CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksOrderAdvancedCertificateManagerCertificatePackValidateBeforeCall(zoneId, certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order Advanced Certificate Manager Certificate Pack (asynchronously)
     * For a given zone, order an advanced certificate pack.
     * @param zoneId  (required)
     * @param certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Order Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksOrderAdvancedCertificateManagerCertificatePackAsync(String zoneId, CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, final ApiCallback<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksOrderAdvancedCertificateManagerCertificatePackValidateBeforeCall(zoneId, certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePack
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}"
            .replace("{" + "certificate_pack_id" + "}", localVarApiClient.escapeString(certificatePackId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackValidateBeforeCall(String certificatePackId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificatePackId' is set
        if (certificatePackId == null) {
            throw new ApiException("Missing the required parameter 'certificatePackId' when calling certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePack(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePack(Async)");
        }

        return certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackCall(certificatePackId, zoneId, _callback);

    }

    /**
     * Restart Validation for Advanced Certificate Manager Certificate Pack
     * For a given zone, restart validation for an advanced certificate pack.  This is only a validation operation for a Certificate Pack in a validation_timed_out status.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePack(String certificatePackId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> localVarResp = certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackWithHttpInfo(certificatePackId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Restart Validation for Advanced Certificate Manager Certificate Pack
     * For a given zone, restart validation for an advanced certificate pack.  This is only a validation operation for a Certificate Pack in a validation_timed_out status.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackWithHttpInfo(String certificatePackId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackValidateBeforeCall(certificatePackId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restart Validation for Advanced Certificate Manager Certificate Pack (asynchronously)
     * For a given zone, restart validation for an advanced certificate pack.  This is only a validation operation for a Certificate Pack in a validation_timed_out status.
     * @param certificatePackId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Restart Validation for Advanced Certificate Manager Certificate Pack response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackAsync(String certificatePackId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackValidateBeforeCall(certificatePackId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
