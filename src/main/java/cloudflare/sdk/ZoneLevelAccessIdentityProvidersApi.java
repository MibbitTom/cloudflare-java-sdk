/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccessApiResponseCommonFailure;
import cloudflare.sdk.models.AccessIdResponse;
import cloudflare.sdk.models.AccessIdentityProvidersComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AccessIdentityProvidersComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AccessSchemasIdentityProviders;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessIdentityProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAccessIdentityProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessIdentityProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAccessIdentityProvidersAddAnAccessIdentityProvider
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderCall(String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessSchemasIdentityProviders;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/identity_providers"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'accessSchemasIdentityProviders' is set
        if (accessSchemasIdentityProviders == null) {
            throw new ApiException("Missing the required parameter 'accessSchemasIdentityProviders' when calling zoneLevelAccessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }

        return zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderCall(identifier, accessSchemasIdentityProviders, _callback);

    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @return AccessIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdentityProvidersComponentsSchemasSingleResponse zoneLevelAccessIdentityProvidersAddAnAccessIdentityProvider(String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders) throws ApiException {
        ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(identifier, accessSchemasIdentityProviders);
        return localVarResp.getData();
    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @return ApiResponse&lt;AccessIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(identifier, accessSchemasIdentityProviders, null);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Access identity provider (asynchronously)
     * Adds a new identity provider to Access.
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderAsync(String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback<AccessIdentityProvidersComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(identifier, accessSchemasIdentityProviders, _callback);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }

        return zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderCall(uuid, identifier, _callback);

    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProvider(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access identity provider (asynchronously)
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderAsync(String uuid, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessIdentityProvidersGetAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }

        return zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderCall(uuid, identifier, _callback);

    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdentityProvidersComponentsSchemasSingleResponse zoneLevelAccessIdentityProvidersGetAnAccessIdentityProvider(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access identity provider (asynchronously)
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderAsync(String uuid, String identifier, final ApiCallback<AccessIdentityProvidersComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessIdentityProvidersListAccessIdentityProviders
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersListAccessIdentityProvidersCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/identity_providers"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessIdentityProvidersListAccessIdentityProviders(Async)");
        }

        return zoneLevelAccessIdentityProvidersListAccessIdentityProvidersCall(identifier, _callback);

    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return AccessIdentityProvidersComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdentityProvidersComponentsSchemasResponseCollection zoneLevelAccessIdentityProvidersListAccessIdentityProviders(String identifier) throws ApiException {
        ApiResponse<AccessIdentityProvidersComponentsSchemasResponseCollection> localVarResp = zoneLevelAccessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdentityProvidersComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdentityProvidersComponentsSchemasResponseCollection> zoneLevelAccessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access identity providers (asynchronously)
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access identity providers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access identity providers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersListAccessIdentityProvidersAsync(String identifier, final ApiCallback<AccessIdentityProvidersComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderCall(String uuid, String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessSchemasIdentityProviders;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/identity_providers/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(String uuid, String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        // verify the required parameter 'accessSchemasIdentityProviders' is set
        if (accessSchemasIdentityProviders == null) {
            throw new ApiException("Missing the required parameter 'accessSchemasIdentityProviders' when calling zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }

        return zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderCall(uuid, identifier, accessSchemasIdentityProviders, _callback);

    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @return AccessIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdentityProvidersComponentsSchemasSingleResponse zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProvider(String uuid, String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders) throws ApiException {
        ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> localVarResp = zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(uuid, identifier, accessSchemasIdentityProviders);
        return localVarResp.getData();
    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @return ApiResponse&lt;AccessIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdentityProvidersComponentsSchemasSingleResponse> zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(String uuid, String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, accessSchemasIdentityProviders, null);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access identity provider (asynchronously)
     * Updates a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessSchemasIdentityProviders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access identity provider response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access identity provider response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderAsync(String uuid, String identifier, AccessSchemasIdentityProviders accessSchemasIdentityProviders, final ApiCallback<AccessIdentityProvidersComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, accessSchemasIdentityProviders, _callback);
        Type localVarReturnType = new TypeToken<AccessIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
