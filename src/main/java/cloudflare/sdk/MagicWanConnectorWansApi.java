/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.MagicApiResponseCommonFailure;
import cloudflare.sdk.models.MagicWanDeletedResponse;
import cloudflare.sdk.models.MagicWanModifiedResponse;
import cloudflare.sdk.models.MagicWanSingleResponse;
import cloudflare.sdk.models.MagicWanUpdateRequest;
import cloudflare.sdk.models.MagicWansAddSingleRequest;
import cloudflare.sdk.models.MagicWansCollectionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicWanConnectorWansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicWanConnectorWansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicWanConnectorWansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicWanConnectorsCreateWan
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicWansAddSingleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsCreateWanCall(String accountId, String siteId, MagicWansAddSingleRequest magicWansAddSingleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicWansAddSingleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/wans"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsCreateWanValidateBeforeCall(String accountId, String siteId, MagicWansAddSingleRequest magicWansAddSingleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsCreateWan(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsCreateWan(Async)");
        }

        // verify the required parameter 'magicWansAddSingleRequest' is set
        if (magicWansAddSingleRequest == null) {
            throw new ApiException("Missing the required parameter 'magicWansAddSingleRequest' when calling magicWanConnectorsCreateWan(Async)");
        }

        return magicWanConnectorsCreateWanCall(accountId, siteId, magicWansAddSingleRequest, _callback);

    }

    /**
     * Create a new WAN
     * Creates a new WAN.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicWansAddSingleRequest  (required)
     * @return MagicWansCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicWansCollectionResponse magicWanConnectorsCreateWan(String accountId, String siteId, MagicWansAddSingleRequest magicWansAddSingleRequest) throws ApiException {
        ApiResponse<MagicWansCollectionResponse> localVarResp = magicWanConnectorsCreateWanWithHttpInfo(accountId, siteId, magicWansAddSingleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new WAN
     * Creates a new WAN.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicWansAddSingleRequest  (required)
     * @return ApiResponse&lt;MagicWansCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicWansCollectionResponse> magicWanConnectorsCreateWanWithHttpInfo(String accountId, String siteId, MagicWansAddSingleRequest magicWansAddSingleRequest) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsCreateWanValidateBeforeCall(accountId, siteId, magicWansAddSingleRequest, null);
        Type localVarReturnType = new TypeToken<MagicWansCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new WAN (asynchronously)
     * Creates a new WAN.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicWansAddSingleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsCreateWanAsync(String accountId, String siteId, MagicWansAddSingleRequest magicWansAddSingleRequest, final ApiCallback<MagicWansCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsCreateWanValidateBeforeCall(accountId, siteId, magicWansAddSingleRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicWansCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsDeleteWan
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsDeleteWanCall(String siteId, String accountId, String wanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "wan_id" + "}", localVarApiClient.escapeString(wanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsDeleteWanValidateBeforeCall(String siteId, String accountId, String wanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsDeleteWan(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsDeleteWan(Async)");
        }

        // verify the required parameter 'wanId' is set
        if (wanId == null) {
            throw new ApiException("Missing the required parameter 'wanId' when calling magicWanConnectorsDeleteWan(Async)");
        }

        return magicWanConnectorsDeleteWanCall(siteId, accountId, wanId, _callback);

    }

    /**
     * Delete WAN
     * Remove a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @return MagicWanDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicWanDeletedResponse magicWanConnectorsDeleteWan(String siteId, String accountId, String wanId) throws ApiException {
        ApiResponse<MagicWanDeletedResponse> localVarResp = magicWanConnectorsDeleteWanWithHttpInfo(siteId, accountId, wanId);
        return localVarResp.getData();
    }

    /**
     * Delete WAN
     * Remove a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @return ApiResponse&lt;MagicWanDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicWanDeletedResponse> magicWanConnectorsDeleteWanWithHttpInfo(String siteId, String accountId, String wanId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsDeleteWanValidateBeforeCall(siteId, accountId, wanId, null);
        Type localVarReturnType = new TypeToken<MagicWanDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete WAN (asynchronously)
     * Remove a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsDeleteWanAsync(String siteId, String accountId, String wanId, final ApiCallback<MagicWanDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsDeleteWanValidateBeforeCall(siteId, accountId, wanId, _callback);
        Type localVarReturnType = new TypeToken<MagicWanDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsListWans
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsListWansCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/wans"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsListWansValidateBeforeCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsListWans(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsListWans(Async)");
        }

        return magicWanConnectorsListWansCall(accountId, siteId, _callback);

    }

    /**
     * List WANs
     * Lists WANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return MagicWansCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicWansCollectionResponse magicWanConnectorsListWans(String accountId, String siteId) throws ApiException {
        ApiResponse<MagicWansCollectionResponse> localVarResp = magicWanConnectorsListWansWithHttpInfo(accountId, siteId);
        return localVarResp.getData();
    }

    /**
     * List WANs
     * Lists WANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;MagicWansCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicWansCollectionResponse> magicWanConnectorsListWansWithHttpInfo(String accountId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsListWansValidateBeforeCall(accountId, siteId, null);
        Type localVarReturnType = new TypeToken<MagicWansCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List WANs (asynchronously)
     * Lists WANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsListWansAsync(String accountId, String siteId, final ApiCallback<MagicWansCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsListWansValidateBeforeCall(accountId, siteId, _callback);
        Type localVarReturnType = new TypeToken<MagicWansCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsUpdateWan
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param magicWanUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsUpdateWanCall(String siteId, String accountId, String wanId, MagicWanUpdateRequest magicWanUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicWanUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "wan_id" + "}", localVarApiClient.escapeString(wanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsUpdateWanValidateBeforeCall(String siteId, String accountId, String wanId, MagicWanUpdateRequest magicWanUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsUpdateWan(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsUpdateWan(Async)");
        }

        // verify the required parameter 'wanId' is set
        if (wanId == null) {
            throw new ApiException("Missing the required parameter 'wanId' when calling magicWanConnectorsUpdateWan(Async)");
        }

        // verify the required parameter 'magicWanUpdateRequest' is set
        if (magicWanUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicWanUpdateRequest' when calling magicWanConnectorsUpdateWan(Async)");
        }

        return magicWanConnectorsUpdateWanCall(siteId, accountId, wanId, magicWanUpdateRequest, _callback);

    }

    /**
     * Update WAN
     * Update a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param magicWanUpdateRequest  (required)
     * @return MagicWanModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicWanModifiedResponse magicWanConnectorsUpdateWan(String siteId, String accountId, String wanId, MagicWanUpdateRequest magicWanUpdateRequest) throws ApiException {
        ApiResponse<MagicWanModifiedResponse> localVarResp = magicWanConnectorsUpdateWanWithHttpInfo(siteId, accountId, wanId, magicWanUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update WAN
     * Update a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param magicWanUpdateRequest  (required)
     * @return ApiResponse&lt;MagicWanModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicWanModifiedResponse> magicWanConnectorsUpdateWanWithHttpInfo(String siteId, String accountId, String wanId, MagicWanUpdateRequest magicWanUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsUpdateWanValidateBeforeCall(siteId, accountId, wanId, magicWanUpdateRequest, null);
        Type localVarReturnType = new TypeToken<MagicWanModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update WAN (asynchronously)
     * Update a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param magicWanUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsUpdateWanAsync(String siteId, String accountId, String wanId, MagicWanUpdateRequest magicWanUpdateRequest, final ApiCallback<MagicWanModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsUpdateWanValidateBeforeCall(siteId, accountId, wanId, magicWanUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicWanModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsWanDetails
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> WAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsWanDetailsCall(String siteId, String accountId, String wanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "wan_id" + "}", localVarApiClient.escapeString(wanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsWanDetailsValidateBeforeCall(String siteId, String accountId, String wanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsWanDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsWanDetails(Async)");
        }

        // verify the required parameter 'wanId' is set
        if (wanId == null) {
            throw new ApiException("Missing the required parameter 'wanId' when calling magicWanConnectorsWanDetails(Async)");
        }

        return magicWanConnectorsWanDetailsCall(siteId, accountId, wanId, _callback);

    }

    /**
     * WAN Details
     * Get a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @return MagicWanSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> WAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicWanSingleResponse magicWanConnectorsWanDetails(String siteId, String accountId, String wanId) throws ApiException {
        ApiResponse<MagicWanSingleResponse> localVarResp = magicWanConnectorsWanDetailsWithHttpInfo(siteId, accountId, wanId);
        return localVarResp.getData();
    }

    /**
     * WAN Details
     * Get a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @return ApiResponse&lt;MagicWanSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> WAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicWanSingleResponse> magicWanConnectorsWanDetailsWithHttpInfo(String siteId, String accountId, String wanId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsWanDetailsValidateBeforeCall(siteId, accountId, wanId, null);
        Type localVarReturnType = new TypeToken<MagicWanSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * WAN Details (asynchronously)
     * Get a specific WAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param wanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> WAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsWanDetailsAsync(String siteId, String accountId, String wanId, final ApiCallback<MagicWanSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsWanDetailsValidateBeforeCall(siteId, accountId, wanId, _callback);
        Type localVarReturnType = new TypeToken<MagicWanSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
