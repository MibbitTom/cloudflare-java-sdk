/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.DlpApiResponseSingle;
import cloudflare.sdk.models.DlpCreateCustomProfileResponse;
import cloudflare.sdk.models.DlpCreateCustomProfiles;
import cloudflare.sdk.models.DlpCustomProfile;
import cloudflare.sdk.models.DlpCustomProfileResponse;
import cloudflare.sdk.models.DlpEitherProfileResponse;
import cloudflare.sdk.models.DlpPredefinedProfile;
import cloudflare.sdk.models.DlpPredefinedProfileResponse;
import cloudflare.sdk.models.DlpProfileId;
import cloudflare.sdk.models.DlpProfilesCreateCustomProfiles4XXResponse;
import cloudflare.sdk.models.DlpProfilesDeleteCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetDlpProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetPredefinedProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesListAllProfiles4XXResponse;
import cloudflare.sdk.models.DlpProfilesUpdateCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesUpdatePredefinedProfile4XXResponse;
import cloudflare.sdk.models.DlpResponseCollection;
import cloudflare.sdk.models.DlpUpdateCustomProfile;
import cloudflare.sdk.models.DlpUpdatePredefinedProfile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DlpProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DlpProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DlpProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dlpProfilesCreateCustomProfiles
     * @param accountId  (required)
     * @param dlpCreateCustomProfiles  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create custom profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create custom profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesCreateCustomProfilesCall(String accountId, DlpCreateCustomProfiles dlpCreateCustomProfiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpCreateCustomProfiles;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/custom"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesCreateCustomProfilesValidateBeforeCall(String accountId, DlpCreateCustomProfiles dlpCreateCustomProfiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesCreateCustomProfiles(Async)");
        }

        // verify the required parameter 'dlpCreateCustomProfiles' is set
        if (dlpCreateCustomProfiles == null) {
            throw new ApiException("Missing the required parameter 'dlpCreateCustomProfiles' when calling dlpProfilesCreateCustomProfiles(Async)");
        }

        return dlpProfilesCreateCustomProfilesCall(accountId, dlpCreateCustomProfiles, _callback);

    }

    /**
     * Create custom profiles
     * Creates a set of DLP custom profiles.
     * @param accountId  (required)
     * @param dlpCreateCustomProfiles  (required)
     * @return DlpCreateCustomProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create custom profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create custom profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpCreateCustomProfileResponse dlpProfilesCreateCustomProfiles(String accountId, DlpCreateCustomProfiles dlpCreateCustomProfiles) throws ApiException {
        ApiResponse<DlpCreateCustomProfileResponse> localVarResp = dlpProfilesCreateCustomProfilesWithHttpInfo(accountId, dlpCreateCustomProfiles);
        return localVarResp.getData();
    }

    /**
     * Create custom profiles
     * Creates a set of DLP custom profiles.
     * @param accountId  (required)
     * @param dlpCreateCustomProfiles  (required)
     * @return ApiResponse&lt;DlpCreateCustomProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create custom profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create custom profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpCreateCustomProfileResponse> dlpProfilesCreateCustomProfilesWithHttpInfo(String accountId, DlpCreateCustomProfiles dlpCreateCustomProfiles) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesCreateCustomProfilesValidateBeforeCall(accountId, dlpCreateCustomProfiles, null);
        Type localVarReturnType = new TypeToken<DlpCreateCustomProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create custom profiles (asynchronously)
     * Creates a set of DLP custom profiles.
     * @param accountId  (required)
     * @param dlpCreateCustomProfiles  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create custom profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create custom profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesCreateCustomProfilesAsync(String accountId, DlpCreateCustomProfiles dlpCreateCustomProfiles, final ApiCallback<DlpCreateCustomProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesCreateCustomProfilesValidateBeforeCall(accountId, dlpCreateCustomProfiles, _callback);
        Type localVarReturnType = new TypeToken<DlpCreateCustomProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesDeleteCustomProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesDeleteCustomProfileCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/custom/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesDeleteCustomProfileValidateBeforeCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesDeleteCustomProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesDeleteCustomProfile(Async)");
        }

        return dlpProfilesDeleteCustomProfileCall(profileId, accountId, _callback);

    }

    /**
     * Delete custom profile
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return DlpApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpApiResponseSingle dlpProfilesDeleteCustomProfile(DlpProfileId profileId, String accountId) throws ApiException {
        ApiResponse<DlpApiResponseSingle> localVarResp = dlpProfilesDeleteCustomProfileWithHttpInfo(profileId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete custom profile
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpApiResponseSingle> dlpProfilesDeleteCustomProfileWithHttpInfo(DlpProfileId profileId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesDeleteCustomProfileValidateBeforeCall(profileId, accountId, null);
        Type localVarReturnType = new TypeToken<DlpApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete custom profile (asynchronously)
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesDeleteCustomProfileAsync(DlpProfileId profileId, String accountId, final ApiCallback<DlpApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesDeleteCustomProfileValidateBeforeCall(profileId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesGetCustomProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetCustomProfileCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/custom/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesGetCustomProfileValidateBeforeCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetCustomProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesGetCustomProfile(Async)");
        }

        return dlpProfilesGetCustomProfileCall(profileId, accountId, _callback);

    }

    /**
     * Get custom profile
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return DlpCustomProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpCustomProfileResponse dlpProfilesGetCustomProfile(DlpProfileId profileId, String accountId) throws ApiException {
        ApiResponse<DlpCustomProfileResponse> localVarResp = dlpProfilesGetCustomProfileWithHttpInfo(profileId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get custom profile
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpCustomProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpCustomProfileResponse> dlpProfilesGetCustomProfileWithHttpInfo(DlpProfileId profileId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesGetCustomProfileValidateBeforeCall(profileId, accountId, null);
        Type localVarReturnType = new TypeToken<DlpCustomProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom profile (asynchronously)
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetCustomProfileAsync(DlpProfileId profileId, String accountId, final ApiCallback<DlpCustomProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesGetCustomProfileValidateBeforeCall(profileId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpCustomProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesGetDlpProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get DLP Profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get DLP Profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetDlpProfileCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesGetDlpProfileValidateBeforeCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetDlpProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesGetDlpProfile(Async)");
        }

        return dlpProfilesGetDlpProfileCall(profileId, accountId, _callback);

    }

    /**
     * Get DLP Profile
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountId  (required)
     * @return DlpEitherProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get DLP Profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get DLP Profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpEitherProfileResponse dlpProfilesGetDlpProfile(DlpProfileId profileId, String accountId) throws ApiException {
        ApiResponse<DlpEitherProfileResponse> localVarResp = dlpProfilesGetDlpProfileWithHttpInfo(profileId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get DLP Profile
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpEitherProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get DLP Profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get DLP Profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpEitherProfileResponse> dlpProfilesGetDlpProfileWithHttpInfo(DlpProfileId profileId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesGetDlpProfileValidateBeforeCall(profileId, accountId, null);
        Type localVarReturnType = new TypeToken<DlpEitherProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DLP Profile (asynchronously)
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get DLP Profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get DLP Profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetDlpProfileAsync(DlpProfileId profileId, String accountId, final ApiCallback<DlpEitherProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesGetDlpProfileValidateBeforeCall(profileId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpEitherProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesGetPredefinedProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetPredefinedProfileCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/predefined/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesGetPredefinedProfileValidateBeforeCall(DlpProfileId profileId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetPredefinedProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesGetPredefinedProfile(Async)");
        }

        return dlpProfilesGetPredefinedProfileCall(profileId, accountId, _callback);

    }

    /**
     * Get predefined profile
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return DlpPredefinedProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpPredefinedProfileResponse dlpProfilesGetPredefinedProfile(DlpProfileId profileId, String accountId) throws ApiException {
        ApiResponse<DlpPredefinedProfileResponse> localVarResp = dlpProfilesGetPredefinedProfileWithHttpInfo(profileId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get predefined profile
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpPredefinedProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpPredefinedProfileResponse> dlpProfilesGetPredefinedProfileWithHttpInfo(DlpProfileId profileId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesGetPredefinedProfileValidateBeforeCall(profileId, accountId, null);
        Type localVarReturnType = new TypeToken<DlpPredefinedProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get predefined profile (asynchronously)
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesGetPredefinedProfileAsync(DlpProfileId profileId, String accountId, final ApiCallback<DlpPredefinedProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesGetPredefinedProfileValidateBeforeCall(profileId, accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpPredefinedProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesListAllProfiles
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesListAllProfilesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesListAllProfilesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesListAllProfiles(Async)");
        }

        return dlpProfilesListAllProfilesCall(accountId, _callback);

    }

    /**
     * List all profiles
     * Lists all DLP profiles in an account.
     * @param accountId  (required)
     * @return DlpResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpResponseCollection dlpProfilesListAllProfiles(String accountId) throws ApiException {
        ApiResponse<DlpResponseCollection> localVarResp = dlpProfilesListAllProfilesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List all profiles
     * Lists all DLP profiles in an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpResponseCollection> dlpProfilesListAllProfilesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesListAllProfilesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DlpResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all profiles (asynchronously)
     * Lists all DLP profiles in an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all profiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all profiles response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesListAllProfilesAsync(String accountId, final ApiCallback<DlpResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesListAllProfilesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesUpdateCustomProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdateCustomProfile  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesUpdateCustomProfileCall(DlpProfileId profileId, String accountId, DlpUpdateCustomProfile dlpUpdateCustomProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpUpdateCustomProfile;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/custom/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesUpdateCustomProfileValidateBeforeCall(DlpProfileId profileId, String accountId, DlpUpdateCustomProfile dlpUpdateCustomProfile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesUpdateCustomProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesUpdateCustomProfile(Async)");
        }

        // verify the required parameter 'dlpUpdateCustomProfile' is set
        if (dlpUpdateCustomProfile == null) {
            throw new ApiException("Missing the required parameter 'dlpUpdateCustomProfile' when calling dlpProfilesUpdateCustomProfile(Async)");
        }

        return dlpProfilesUpdateCustomProfileCall(profileId, accountId, dlpUpdateCustomProfile, _callback);

    }

    /**
     * Update custom profile
     * Updates a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdateCustomProfile  (required)
     * @return DlpCustomProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpCustomProfile dlpProfilesUpdateCustomProfile(DlpProfileId profileId, String accountId, DlpUpdateCustomProfile dlpUpdateCustomProfile) throws ApiException {
        ApiResponse<DlpCustomProfile> localVarResp = dlpProfilesUpdateCustomProfileWithHttpInfo(profileId, accountId, dlpUpdateCustomProfile);
        return localVarResp.getData();
    }

    /**
     * Update custom profile
     * Updates a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdateCustomProfile  (required)
     * @return ApiResponse&lt;DlpCustomProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpCustomProfile> dlpProfilesUpdateCustomProfileWithHttpInfo(DlpProfileId profileId, String accountId, DlpUpdateCustomProfile dlpUpdateCustomProfile) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesUpdateCustomProfileValidateBeforeCall(profileId, accountId, dlpUpdateCustomProfile, null);
        Type localVarReturnType = new TypeToken<DlpCustomProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update custom profile (asynchronously)
     * Updates a DLP custom profile.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdateCustomProfile  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update custom profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update custom profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesUpdateCustomProfileAsync(DlpProfileId profileId, String accountId, DlpUpdateCustomProfile dlpUpdateCustomProfile, final ApiCallback<DlpCustomProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesUpdateCustomProfileValidateBeforeCall(profileId, accountId, dlpUpdateCustomProfile, _callback);
        Type localVarReturnType = new TypeToken<DlpCustomProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpProfilesUpdatePredefinedProfile
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdatePredefinedProfile  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesUpdatePredefinedProfileCall(DlpProfileId profileId, String accountId, DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpUpdatePredefinedProfile;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/profiles/predefined/{profile_id}"
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpProfilesUpdatePredefinedProfileValidateBeforeCall(DlpProfileId profileId, String accountId, DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }

        // verify the required parameter 'dlpUpdatePredefinedProfile' is set
        if (dlpUpdatePredefinedProfile == null) {
            throw new ApiException("Missing the required parameter 'dlpUpdatePredefinedProfile' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }

        return dlpProfilesUpdatePredefinedProfileCall(profileId, accountId, dlpUpdatePredefinedProfile, _callback);

    }

    /**
     * Update predefined profile
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdatePredefinedProfile  (required)
     * @return DlpPredefinedProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpPredefinedProfile dlpProfilesUpdatePredefinedProfile(DlpProfileId profileId, String accountId, DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile) throws ApiException {
        ApiResponse<DlpPredefinedProfile> localVarResp = dlpProfilesUpdatePredefinedProfileWithHttpInfo(profileId, accountId, dlpUpdatePredefinedProfile);
        return localVarResp.getData();
    }

    /**
     * Update predefined profile
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdatePredefinedProfile  (required)
     * @return ApiResponse&lt;DlpPredefinedProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpPredefinedProfile> dlpProfilesUpdatePredefinedProfileWithHttpInfo(DlpProfileId profileId, String accountId, DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile) throws ApiException {
        okhttp3.Call localVarCall = dlpProfilesUpdatePredefinedProfileValidateBeforeCall(profileId, accountId, dlpUpdatePredefinedProfile, null);
        Type localVarReturnType = new TypeToken<DlpPredefinedProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update predefined profile (asynchronously)
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param profileId  (required)
     * @param accountId  (required)
     * @param dlpUpdatePredefinedProfile  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update predefined profile response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update predefined profile response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpProfilesUpdatePredefinedProfileAsync(DlpProfileId profileId, String accountId, DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile, final ApiCallback<DlpPredefinedProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpProfilesUpdatePredefinedProfileValidateBeforeCall(profileId, accountId, dlpUpdatePredefinedProfile, _callback);
        Type localVarReturnType = new TypeToken<DlpPredefinedProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
