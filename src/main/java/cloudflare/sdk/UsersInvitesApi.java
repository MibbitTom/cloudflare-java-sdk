/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.IamSchemasCollectionInviteResponse;
import cloudflare.sdk.models.IamSingleInviteResponse;
import cloudflare.sdk.models.UserSInvitesInvitationDetails4XXResponse;
import cloudflare.sdk.models.UserSInvitesListInvitations4XXResponse;
import cloudflare.sdk.models.UserSInvitesRespondToInvitationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersInvitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersInvitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersInvitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userSInvitesInvitationDetails
     * @param inviteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Invitation Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesInvitationDetailsCall(String inviteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/invites/{invite_id}"
            .replace("{" + "invite_id" + "}", localVarApiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSInvitesInvitationDetailsValidateBeforeCall(String inviteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling userSInvitesInvitationDetails(Async)");
        }

        return userSInvitesInvitationDetailsCall(inviteId, _callback);

    }

    /**
     * Invitation Details
     * Gets the details of an invitation.
     * @param inviteId  (required)
     * @return IamSingleInviteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Invitation Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamSingleInviteResponse userSInvitesInvitationDetails(String inviteId) throws ApiException {
        ApiResponse<IamSingleInviteResponse> localVarResp = userSInvitesInvitationDetailsWithHttpInfo(inviteId);
        return localVarResp.getData();
    }

    /**
     * Invitation Details
     * Gets the details of an invitation.
     * @param inviteId  (required)
     * @return ApiResponse&lt;IamSingleInviteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Invitation Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamSingleInviteResponse> userSInvitesInvitationDetailsWithHttpInfo(String inviteId) throws ApiException {
        okhttp3.Call localVarCall = userSInvitesInvitationDetailsValidateBeforeCall(inviteId, null);
        Type localVarReturnType = new TypeToken<IamSingleInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invitation Details (asynchronously)
     * Gets the details of an invitation.
     * @param inviteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Invitation Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesInvitationDetailsAsync(String inviteId, final ApiCallback<IamSingleInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSInvitesInvitationDetailsValidateBeforeCall(inviteId, _callback);
        Type localVarReturnType = new TypeToken<IamSingleInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSInvitesListInvitations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Invitations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Invitations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesListInvitationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSInvitesListInvitationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userSInvitesListInvitationsCall(_callback);

    }

    /**
     * List Invitations
     * Lists all invitations associated with my user.
     * @return IamSchemasCollectionInviteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Invitations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Invitations response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamSchemasCollectionInviteResponse userSInvitesListInvitations() throws ApiException {
        ApiResponse<IamSchemasCollectionInviteResponse> localVarResp = userSInvitesListInvitationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Invitations
     * Lists all invitations associated with my user.
     * @return ApiResponse&lt;IamSchemasCollectionInviteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Invitations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Invitations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamSchemasCollectionInviteResponse> userSInvitesListInvitationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userSInvitesListInvitationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IamSchemasCollectionInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Invitations (asynchronously)
     * Lists all invitations associated with my user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Invitations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Invitations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesListInvitationsAsync(final ApiCallback<IamSchemasCollectionInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSInvitesListInvitationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IamSchemasCollectionInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSInvitesRespondToInvitation
     * @param inviteId  (required)
     * @param userSInvitesRespondToInvitationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Respond to Invitation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Respond to Invitation response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesRespondToInvitationCall(String inviteId, UserSInvitesRespondToInvitationRequest userSInvitesRespondToInvitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userSInvitesRespondToInvitationRequest;

        // create path and map variables
        String localVarPath = "/user/invites/{invite_id}"
            .replace("{" + "invite_id" + "}", localVarApiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSInvitesRespondToInvitationValidateBeforeCall(String inviteId, UserSInvitesRespondToInvitationRequest userSInvitesRespondToInvitationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling userSInvitesRespondToInvitation(Async)");
        }

        // verify the required parameter 'userSInvitesRespondToInvitationRequest' is set
        if (userSInvitesRespondToInvitationRequest == null) {
            throw new ApiException("Missing the required parameter 'userSInvitesRespondToInvitationRequest' when calling userSInvitesRespondToInvitation(Async)");
        }

        return userSInvitesRespondToInvitationCall(inviteId, userSInvitesRespondToInvitationRequest, _callback);

    }

    /**
     * Respond to Invitation
     * Responds to an invitation.
     * @param inviteId  (required)
     * @param userSInvitesRespondToInvitationRequest  (required)
     * @return IamSingleInviteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Respond to Invitation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Respond to Invitation response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamSingleInviteResponse userSInvitesRespondToInvitation(String inviteId, UserSInvitesRespondToInvitationRequest userSInvitesRespondToInvitationRequest) throws ApiException {
        ApiResponse<IamSingleInviteResponse> localVarResp = userSInvitesRespondToInvitationWithHttpInfo(inviteId, userSInvitesRespondToInvitationRequest);
        return localVarResp.getData();
    }

    /**
     * Respond to Invitation
     * Responds to an invitation.
     * @param inviteId  (required)
     * @param userSInvitesRespondToInvitationRequest  (required)
     * @return ApiResponse&lt;IamSingleInviteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Respond to Invitation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Respond to Invitation response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamSingleInviteResponse> userSInvitesRespondToInvitationWithHttpInfo(String inviteId, UserSInvitesRespondToInvitationRequest userSInvitesRespondToInvitationRequest) throws ApiException {
        okhttp3.Call localVarCall = userSInvitesRespondToInvitationValidateBeforeCall(inviteId, userSInvitesRespondToInvitationRequest, null);
        Type localVarReturnType = new TypeToken<IamSingleInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respond to Invitation (asynchronously)
     * Responds to an invitation.
     * @param inviteId  (required)
     * @param userSInvitesRespondToInvitationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Respond to Invitation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Respond to Invitation response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSInvitesRespondToInvitationAsync(String inviteId, UserSInvitesRespondToInvitationRequest userSInvitesRespondToInvitationRequest, final ApiCallback<IamSingleInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSInvitesRespondToInvitationValidateBeforeCall(inviteId, userSInvitesRespondToInvitationRequest, _callback);
        Type localVarReturnType = new TypeToken<IamSingleInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
