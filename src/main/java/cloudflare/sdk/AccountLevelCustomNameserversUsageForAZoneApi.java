/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata4XXResponse;
import cloudflare.sdk.models.AccountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata4XXResponse;
import cloudflare.sdk.models.DnsCustomNameserversGetResponse;
import cloudflare.sdk.models.DnsCustomNameserversSchemasEmptyResponse;
import cloudflare.sdk.models.DnsCustomNameserversZoneMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountLevelCustomNameserversUsageForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountLevelCustomNameserversUsageForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountLevelCustomNameserversUsageForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_ns"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(Async)");
        }

        return accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataCall(zoneId, _callback);

    }

    /**
     * Get Account Custom Nameserver Related Zone Metadata
     * Get metadata for account-level custom nameservers on a zone. 
     * @param zoneId  (required)
     * @return DnsCustomNameserversGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversGetResponse accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(String zoneId) throws ApiException {
        ApiResponse<DnsCustomNameserversGetResponse> localVarResp = accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Account Custom Nameserver Related Zone Metadata
     * Get metadata for account-level custom nameservers on a zone. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;DnsCustomNameserversGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversGetResponse> accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Custom Nameserver Related Zone Metadata (asynchronously)
     * Get metadata for account-level custom nameservers on a zone. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataAsync(String zoneId, final ApiCallback<DnsCustomNameserversGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata
     * @param zoneId  (required)
     * @param dnsCustomNameserversZoneMetadata  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataCall(String zoneId, DnsCustomNameserversZoneMetadata dnsCustomNameserversZoneMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnsCustomNameserversZoneMetadata;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_ns"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(String zoneId, DnsCustomNameserversZoneMetadata dnsCustomNameserversZoneMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(Async)");
        }

        // verify the required parameter 'dnsCustomNameserversZoneMetadata' is set
        if (dnsCustomNameserversZoneMetadata == null) {
            throw new ApiException("Missing the required parameter 'dnsCustomNameserversZoneMetadata' when calling accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(Async)");
        }

        return accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataCall(zoneId, dnsCustomNameserversZoneMetadata, _callback);

    }

    /**
     * Set Account Custom Nameserver Related Zone Metadata
     * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
     * @param zoneId  (required)
     * @param dnsCustomNameserversZoneMetadata  (required)
     * @return DnsCustomNameserversSchemasEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public DnsCustomNameserversSchemasEmptyResponse accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(String zoneId, DnsCustomNameserversZoneMetadata dnsCustomNameserversZoneMetadata) throws ApiException {
        ApiResponse<DnsCustomNameserversSchemasEmptyResponse> localVarResp = accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataWithHttpInfo(zoneId, dnsCustomNameserversZoneMetadata);
        return localVarResp.getData();
    }

    /**
     * Set Account Custom Nameserver Related Zone Metadata
     * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
     * @param zoneId  (required)
     * @param dnsCustomNameserversZoneMetadata  (required)
     * @return ApiResponse&lt;DnsCustomNameserversSchemasEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsCustomNameserversSchemasEmptyResponse> accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataWithHttpInfo(String zoneId, DnsCustomNameserversZoneMetadata dnsCustomNameserversZoneMetadata) throws ApiException {
        okhttp3.Call localVarCall = accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(zoneId, dnsCustomNameserversZoneMetadata, null);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversSchemasEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Account Custom Nameserver Related Zone Metadata (asynchronously)
     * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
     * @param zoneId  (required)
     * @param dnsCustomNameserversZoneMetadata  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Account Custom Nameserver Related Zone Metadata response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Account Custom Nameserver Related Zone Metadata response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataAsync(String zoneId, DnsCustomNameserversZoneMetadata dnsCustomNameserversZoneMetadata, final ApiCallback<DnsCustomNameserversSchemasEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadataValidateBeforeCall(zoneId, dnsCustomNameserversZoneMetadata, _callback);
        Type localVarReturnType = new TypeToken<DnsCustomNameserversSchemasEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
