/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.ArgoTunnelCreateAnArgoTunnel4XXResponse;
import cloudflare.sdk.models.ArgoTunnelCreateAnArgoTunnelRequest;
import cloudflare.sdk.models.CloudflareTunnelCleanUpCloudflareTunnelConnections4XXResponse;
import cloudflare.sdk.models.TunnelEmptyResponse;
import cloudflare.sdk.models.TunnelLegacyTunnelResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArgoTunnelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArgoTunnelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArgoTunnelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for argoTunnelCleanUpArgoTunnelConnections
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clean up Argo Tunnel connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Clean up Argo Tunnel connections response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelCleanUpArgoTunnelConnectionsCall(String tunnelId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/tunnels/{tunnel_id}/connections"
            .replace("{" + "tunnel_id" + "}", localVarApiClient.escapeString(tunnelId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call argoTunnelCleanUpArgoTunnelConnectionsValidateBeforeCall(String tunnelId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling argoTunnelCleanUpArgoTunnelConnections(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling argoTunnelCleanUpArgoTunnelConnections(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling argoTunnelCleanUpArgoTunnelConnections(Async)");
        }

        return argoTunnelCleanUpArgoTunnelConnectionsCall(tunnelId, accountId, body, _callback);

    }

    /**
     * Clean up Argo Tunnel connections
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return TunnelEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clean up Argo Tunnel connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Clean up Argo Tunnel connections response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelEmptyResponse argoTunnelCleanUpArgoTunnelConnections(String tunnelId, String accountId, Object body) throws ApiException {
        ApiResponse<TunnelEmptyResponse> localVarResp = argoTunnelCleanUpArgoTunnelConnectionsWithHttpInfo(tunnelId, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Clean up Argo Tunnel connections
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TunnelEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clean up Argo Tunnel connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Clean up Argo Tunnel connections response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelEmptyResponse> argoTunnelCleanUpArgoTunnelConnectionsWithHttpInfo(String tunnelId, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = argoTunnelCleanUpArgoTunnelConnectionsValidateBeforeCall(tunnelId, accountId, body, null);
        Type localVarReturnType = new TypeToken<TunnelEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clean up Argo Tunnel connections (asynchronously)
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clean up Argo Tunnel connections response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Clean up Argo Tunnel connections response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelCleanUpArgoTunnelConnectionsAsync(String tunnelId, String accountId, Object body, final ApiCallback<TunnelEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = argoTunnelCleanUpArgoTunnelConnectionsValidateBeforeCall(tunnelId, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<TunnelEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for argoTunnelCreateAnArgoTunnel
     * @param accountId  (required)
     * @param argoTunnelCreateAnArgoTunnelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelCreateAnArgoTunnelCall(String accountId, ArgoTunnelCreateAnArgoTunnelRequest argoTunnelCreateAnArgoTunnelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = argoTunnelCreateAnArgoTunnelRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/tunnels"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call argoTunnelCreateAnArgoTunnelValidateBeforeCall(String accountId, ArgoTunnelCreateAnArgoTunnelRequest argoTunnelCreateAnArgoTunnelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling argoTunnelCreateAnArgoTunnel(Async)");
        }

        // verify the required parameter 'argoTunnelCreateAnArgoTunnelRequest' is set
        if (argoTunnelCreateAnArgoTunnelRequest == null) {
            throw new ApiException("Missing the required parameter 'argoTunnelCreateAnArgoTunnelRequest' when calling argoTunnelCreateAnArgoTunnel(Async)");
        }

        return argoTunnelCreateAnArgoTunnelCall(accountId, argoTunnelCreateAnArgoTunnelRequest, _callback);

    }

    /**
     * Create an Argo Tunnel
     * Creates a new Argo Tunnel in an account.
     * @param accountId  (required)
     * @param argoTunnelCreateAnArgoTunnelRequest  (required)
     * @return TunnelLegacyTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelLegacyTunnelResponseSingle argoTunnelCreateAnArgoTunnel(String accountId, ArgoTunnelCreateAnArgoTunnelRequest argoTunnelCreateAnArgoTunnelRequest) throws ApiException {
        ApiResponse<TunnelLegacyTunnelResponseSingle> localVarResp = argoTunnelCreateAnArgoTunnelWithHttpInfo(accountId, argoTunnelCreateAnArgoTunnelRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Argo Tunnel
     * Creates a new Argo Tunnel in an account.
     * @param accountId  (required)
     * @param argoTunnelCreateAnArgoTunnelRequest  (required)
     * @return ApiResponse&lt;TunnelLegacyTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelLegacyTunnelResponseSingle> argoTunnelCreateAnArgoTunnelWithHttpInfo(String accountId, ArgoTunnelCreateAnArgoTunnelRequest argoTunnelCreateAnArgoTunnelRequest) throws ApiException {
        okhttp3.Call localVarCall = argoTunnelCreateAnArgoTunnelValidateBeforeCall(accountId, argoTunnelCreateAnArgoTunnelRequest, null);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Argo Tunnel (asynchronously)
     * Creates a new Argo Tunnel in an account.
     * @param accountId  (required)
     * @param argoTunnelCreateAnArgoTunnelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelCreateAnArgoTunnelAsync(String accountId, ArgoTunnelCreateAnArgoTunnelRequest argoTunnelCreateAnArgoTunnelRequest, final ApiCallback<TunnelLegacyTunnelResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = argoTunnelCreateAnArgoTunnelValidateBeforeCall(accountId, argoTunnelCreateAnArgoTunnelRequest, _callback);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for argoTunnelDeleteAnArgoTunnel
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelDeleteAnArgoTunnelCall(String tunnelId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/tunnels/{tunnel_id}"
            .replace("{" + "tunnel_id" + "}", localVarApiClient.escapeString(tunnelId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call argoTunnelDeleteAnArgoTunnelValidateBeforeCall(String tunnelId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling argoTunnelDeleteAnArgoTunnel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling argoTunnelDeleteAnArgoTunnel(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling argoTunnelDeleteAnArgoTunnel(Async)");
        }

        return argoTunnelDeleteAnArgoTunnelCall(tunnelId, accountId, body, _callback);

    }

    /**
     * Delete an Argo Tunnel
     * Deletes an Argo Tunnel from an account.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return TunnelLegacyTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelLegacyTunnelResponseSingle argoTunnelDeleteAnArgoTunnel(String tunnelId, String accountId, Object body) throws ApiException {
        ApiResponse<TunnelLegacyTunnelResponseSingle> localVarResp = argoTunnelDeleteAnArgoTunnelWithHttpInfo(tunnelId, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Delete an Argo Tunnel
     * Deletes an Argo Tunnel from an account.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TunnelLegacyTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelLegacyTunnelResponseSingle> argoTunnelDeleteAnArgoTunnelWithHttpInfo(String tunnelId, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = argoTunnelDeleteAnArgoTunnelValidateBeforeCall(tunnelId, accountId, body, null);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Argo Tunnel (asynchronously)
     * Deletes an Argo Tunnel from an account.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelDeleteAnArgoTunnelAsync(String tunnelId, String accountId, Object body, final ApiCallback<TunnelLegacyTunnelResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = argoTunnelDeleteAnArgoTunnelValidateBeforeCall(tunnelId, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for argoTunnelGetAnArgoTunnel
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelGetAnArgoTunnelCall(String tunnelId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/tunnels/{tunnel_id}"
            .replace("{" + "tunnel_id" + "}", localVarApiClient.escapeString(tunnelId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call argoTunnelGetAnArgoTunnelValidateBeforeCall(String tunnelId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling argoTunnelGetAnArgoTunnel(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling argoTunnelGetAnArgoTunnel(Async)");
        }

        return argoTunnelGetAnArgoTunnelCall(tunnelId, accountId, _callback);

    }

    /**
     * Get an Argo Tunnel
     * Fetches a single Argo Tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @return TunnelLegacyTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelLegacyTunnelResponseSingle argoTunnelGetAnArgoTunnel(String tunnelId, String accountId) throws ApiException {
        ApiResponse<TunnelLegacyTunnelResponseSingle> localVarResp = argoTunnelGetAnArgoTunnelWithHttpInfo(tunnelId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get an Argo Tunnel
     * Fetches a single Argo Tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TunnelLegacyTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelLegacyTunnelResponseSingle> argoTunnelGetAnArgoTunnelWithHttpInfo(String tunnelId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = argoTunnelGetAnArgoTunnelValidateBeforeCall(tunnelId, accountId, null);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Argo Tunnel (asynchronously)
     * Fetches a single Argo Tunnel.
     * @param tunnelId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Argo Tunnel response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Argo Tunnel response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call argoTunnelGetAnArgoTunnelAsync(String tunnelId, String accountId, final ApiCallback<TunnelLegacyTunnelResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = argoTunnelGetAnArgoTunnelValidateBeforeCall(tunnelId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TunnelLegacyTunnelResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
