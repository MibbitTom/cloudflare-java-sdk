/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.CloudforceOneApiResponseCommon;
import cloudflare.sdk.models.CloudforceOneApiResponseCommonFailure;
import cloudflare.sdk.models.CloudforceOnePriorityEdit;
import cloudflare.sdk.models.CloudforceOnePriorityList;
import cloudflare.sdk.models.CloudforceOnePriorityList200Response;
import cloudflare.sdk.models.CloudforceOnePriorityNew200Response;
import cloudflare.sdk.models.CloudforceOnePriorityQuota200Response;
import cloudflare.sdk.models.CloudforceOneRequestNew200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PriorityIntelligenceRequirementsPirApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PriorityIntelligenceRequirementsPirApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PriorityIntelligenceRequirementsPirApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudforceOnePriorityDelete
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityDeleteCall(String accountIdentifier, String priorityIdentifer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority/{priority_identifer}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "priority_identifer" + "}", localVarApiClient.escapeString(priorityIdentifer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityDeleteValidateBeforeCall(String accountIdentifier, String priorityIdentifer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityDelete(Async)");
        }

        // verify the required parameter 'priorityIdentifer' is set
        if (priorityIdentifer == null) {
            throw new ApiException("Missing the required parameter 'priorityIdentifer' when calling cloudforceOnePriorityDelete(Async)");
        }

        return cloudforceOnePriorityDeleteCall(accountIdentifier, priorityIdentifer, _callback);

    }

    /**
     * Delete a Priority Intelligence Report
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @return CloudforceOneApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneApiResponseCommon cloudforceOnePriorityDelete(String accountIdentifier, String priorityIdentifer) throws ApiException {
        ApiResponse<CloudforceOneApiResponseCommon> localVarResp = cloudforceOnePriorityDeleteWithHttpInfo(accountIdentifier, priorityIdentifer);
        return localVarResp.getData();
    }

    /**
     * Delete a Priority Intelligence Report
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @return ApiResponse&lt;CloudforceOneApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneApiResponseCommon> cloudforceOnePriorityDeleteWithHttpInfo(String accountIdentifier, String priorityIdentifer) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityDeleteValidateBeforeCall(accountIdentifier, priorityIdentifer, null);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Priority Intelligence Report (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityDeleteAsync(String accountIdentifier, String priorityIdentifer, final ApiCallback<CloudforceOneApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityDeleteValidateBeforeCall(accountIdentifier, priorityIdentifer, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOnePriorityGet
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityGetCall(String accountIdentifier, String priorityIdentifer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority/{priority_identifer}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "priority_identifer" + "}", localVarApiClient.escapeString(priorityIdentifer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityGetValidateBeforeCall(String accountIdentifier, String priorityIdentifer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityGet(Async)");
        }

        // verify the required parameter 'priorityIdentifer' is set
        if (priorityIdentifer == null) {
            throw new ApiException("Missing the required parameter 'priorityIdentifer' when calling cloudforceOnePriorityGet(Async)");
        }

        return cloudforceOnePriorityGetCall(accountIdentifier, priorityIdentifer, _callback);

    }

    /**
     * Get a Priority Intelligence Requirement
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @return CloudforceOneRequestNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestNew200Response cloudforceOnePriorityGet(String accountIdentifier, String priorityIdentifer) throws ApiException {
        ApiResponse<CloudforceOneRequestNew200Response> localVarResp = cloudforceOnePriorityGetWithHttpInfo(accountIdentifier, priorityIdentifer);
        return localVarResp.getData();
    }

    /**
     * Get a Priority Intelligence Requirement
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @return ApiResponse&lt;CloudforceOneRequestNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestNew200Response> cloudforceOnePriorityGetWithHttpInfo(String accountIdentifier, String priorityIdentifer) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityGetValidateBeforeCall(accountIdentifier, priorityIdentifer, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Priority Intelligence Requirement (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityGetAsync(String accountIdentifier, String priorityIdentifer, final ApiCallback<CloudforceOneRequestNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityGetValidateBeforeCall(accountIdentifier, priorityIdentifer, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOnePriorityList
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List priorities response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List priorities response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityListCall(String accountIdentifier, CloudforceOnePriorityList cloudforceOnePriorityList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOnePriorityList;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityListValidateBeforeCall(String accountIdentifier, CloudforceOnePriorityList cloudforceOnePriorityList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityList(Async)");
        }

        // verify the required parameter 'cloudforceOnePriorityList' is set
        if (cloudforceOnePriorityList == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOnePriorityList' when calling cloudforceOnePriorityList(Async)");
        }

        return cloudforceOnePriorityListCall(accountIdentifier, cloudforceOnePriorityList, _callback);

    }

    /**
     * List Priority Intelligence Requirements
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityList  (required)
     * @return CloudforceOnePriorityList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List priorities response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List priorities response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOnePriorityList200Response cloudforceOnePriorityList(String accountIdentifier, CloudforceOnePriorityList cloudforceOnePriorityList) throws ApiException {
        ApiResponse<CloudforceOnePriorityList200Response> localVarResp = cloudforceOnePriorityListWithHttpInfo(accountIdentifier, cloudforceOnePriorityList);
        return localVarResp.getData();
    }

    /**
     * List Priority Intelligence Requirements
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityList  (required)
     * @return ApiResponse&lt;CloudforceOnePriorityList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List priorities response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List priorities response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOnePriorityList200Response> cloudforceOnePriorityListWithHttpInfo(String accountIdentifier, CloudforceOnePriorityList cloudforceOnePriorityList) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityListValidateBeforeCall(accountIdentifier, cloudforceOnePriorityList, null);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Priority Intelligence Requirements (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List priorities response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List priorities response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityListAsync(String accountIdentifier, CloudforceOnePriorityList cloudforceOnePriorityList, final ApiCallback<CloudforceOnePriorityList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityListValidateBeforeCall(accountIdentifier, cloudforceOnePriorityList, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOnePriorityNew
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create priority response  failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityNewCall(String accountIdentifier, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOnePriorityEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority/new"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityNewValidateBeforeCall(String accountIdentifier, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityNew(Async)");
        }

        // verify the required parameter 'cloudforceOnePriorityEdit' is set
        if (cloudforceOnePriorityEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOnePriorityEdit' when calling cloudforceOnePriorityNew(Async)");
        }

        return cloudforceOnePriorityNewCall(accountIdentifier, cloudforceOnePriorityEdit, _callback);

    }

    /**
     * Create a New Priority Requirement
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @return CloudforceOnePriorityNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create priority response  failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOnePriorityNew200Response cloudforceOnePriorityNew(String accountIdentifier, CloudforceOnePriorityEdit cloudforceOnePriorityEdit) throws ApiException {
        ApiResponse<CloudforceOnePriorityNew200Response> localVarResp = cloudforceOnePriorityNewWithHttpInfo(accountIdentifier, cloudforceOnePriorityEdit);
        return localVarResp.getData();
    }

    /**
     * Create a New Priority Requirement
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @return ApiResponse&lt;CloudforceOnePriorityNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create priority response  failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOnePriorityNew200Response> cloudforceOnePriorityNewWithHttpInfo(String accountIdentifier, CloudforceOnePriorityEdit cloudforceOnePriorityEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityNewValidateBeforeCall(accountIdentifier, cloudforceOnePriorityEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Priority Requirement (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create priority response  failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityNewAsync(String accountIdentifier, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback<CloudforceOnePriorityNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityNewValidateBeforeCall(accountIdentifier, cloudforceOnePriorityEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOnePriorityQuota
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get priority quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get priority quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityQuotaCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority/quota"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityQuotaValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityQuota(Async)");
        }

        return cloudforceOnePriorityQuotaCall(accountIdentifier, _callback);

    }

    /**
     * Get Priority Intelligence Requirement Quota
     * 
     * @param accountIdentifier  (required)
     * @return CloudforceOnePriorityQuota200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get priority quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get priority quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOnePriorityQuota200Response cloudforceOnePriorityQuota(String accountIdentifier) throws ApiException {
        ApiResponse<CloudforceOnePriorityQuota200Response> localVarResp = cloudforceOnePriorityQuotaWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Priority Intelligence Requirement Quota
     * 
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOnePriorityQuota200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get priority quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get priority quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOnePriorityQuota200Response> cloudforceOnePriorityQuotaWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityQuotaValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityQuota200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Priority Intelligence Requirement Quota (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get priority quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get priority quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityQuotaAsync(String accountIdentifier, final ApiCallback<CloudforceOnePriorityQuota200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityQuotaValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityQuota200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOnePriorityUpdate
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityUpdateCall(String accountIdentifier, String priorityIdentifer, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOnePriorityEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/priority/{priority_identifer}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "priority_identifer" + "}", localVarApiClient.escapeString(priorityIdentifer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOnePriorityUpdateValidateBeforeCall(String accountIdentifier, String priorityIdentifer, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOnePriorityUpdate(Async)");
        }

        // verify the required parameter 'priorityIdentifer' is set
        if (priorityIdentifer == null) {
            throw new ApiException("Missing the required parameter 'priorityIdentifer' when calling cloudforceOnePriorityUpdate(Async)");
        }

        // verify the required parameter 'cloudforceOnePriorityEdit' is set
        if (cloudforceOnePriorityEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOnePriorityEdit' when calling cloudforceOnePriorityUpdate(Async)");
        }

        return cloudforceOnePriorityUpdateCall(accountIdentifier, priorityIdentifer, cloudforceOnePriorityEdit, _callback);

    }

    /**
     * Update a Priority Intelligence Requirement
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @return CloudforceOneRequestNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestNew200Response cloudforceOnePriorityUpdate(String accountIdentifier, String priorityIdentifer, CloudforceOnePriorityEdit cloudforceOnePriorityEdit) throws ApiException {
        ApiResponse<CloudforceOneRequestNew200Response> localVarResp = cloudforceOnePriorityUpdateWithHttpInfo(accountIdentifier, priorityIdentifer, cloudforceOnePriorityEdit);
        return localVarResp.getData();
    }

    /**
     * Update a Priority Intelligence Requirement
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @return ApiResponse&lt;CloudforceOneRequestNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestNew200Response> cloudforceOnePriorityUpdateWithHttpInfo(String accountIdentifier, String priorityIdentifer, CloudforceOnePriorityEdit cloudforceOnePriorityEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOnePriorityUpdateValidateBeforeCall(accountIdentifier, priorityIdentifer, cloudforceOnePriorityEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Priority Intelligence Requirement (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param priorityIdentifer  (required)
     * @param cloudforceOnePriorityEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a priority response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a priority response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOnePriorityUpdateAsync(String accountIdentifier, String priorityIdentifer, CloudforceOnePriorityEdit cloudforceOnePriorityEdit, final ApiCallback<CloudforceOneRequestNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOnePriorityUpdateValidateBeforeCall(accountIdentifier, priorityIdentifer, cloudforceOnePriorityEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
