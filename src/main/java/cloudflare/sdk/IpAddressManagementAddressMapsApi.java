/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AddressingApiResponseCollection;
import cloudflare.sdk.models.AddressingComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AddressingComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AddressingFullResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsCreateAddressMap4XXResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsCreateAddressMapRequest;
import cloudflare.sdk.models.IpAddressManagementAddressMapsDeleteAddressMap4XXResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsListAddressMaps4XXResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsUpdateAddressMap4XXResponse;
import cloudflare.sdk.models.IpAddressManagementAddressMapsUpdateAddressMapRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementAddressMapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAddressManagementAddressMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementAddressMapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a zone membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a zone membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapCall(String zoneId, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/zones/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(String zoneId, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapCall(zoneId, addressMapId, accountId, _callback);

    }

    /**
     * Add a zone membership to an Address Map
     * Add a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a zone membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a zone membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(String zoneId, String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapWithHttpInfo(zoneId, addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Add a zone membership to an Address Map
     * Add a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a zone membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a zone membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapWithHttpInfo(String zoneId, String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(zoneId, addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a zone membership to an Address Map (asynchronously)
     * Add a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add a zone membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add a zone membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapAsync(String zoneId, String addressMapId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(zoneId, addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an account membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an account membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapCall(String accountId, String addressMapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(String accountId, String addressMapId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapCall(accountId, addressMapId, _callback);

    }

    /**
     * Add an account membership to an Address Map
     * Add an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an account membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an account membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(String accountId, String addressMapId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapWithHttpInfo(accountId, addressMapId);
        return localVarResp.getData();
    }

    /**
     * Add an account membership to an Address Map
     * Add an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an account membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an account membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapWithHttpInfo(String accountId, String addressMapId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(accountId, addressMapId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an account membership to an Address Map (asynchronously)
     * Add an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an account membership to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an account membership to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapAsync(String accountId, String addressMapId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(accountId, addressMapId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddAnIpToAnAddressMap
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an IP to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an IP to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapCall(String ipAddress, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/ips/{ip_address}"
            .replace("{" + "ip_address" + "}", localVarApiClient.escapeString(ipAddress.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(String ipAddress, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsAddAnIpToAnAddressMapCall(ipAddress, addressMapId, accountId, _callback);

    }

    /**
     * Add an IP to an Address Map
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an IP to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an IP to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsAddAnIpToAnAddressMap(String ipAddress, String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsAddAnIpToAnAddressMapWithHttpInfo(ipAddress, addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Add an IP to an Address Map
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an IP to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an IP to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsAddAnIpToAnAddressMapWithHttpInfo(String ipAddress, String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(ipAddress, addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an IP to an Address Map (asynchronously)
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add an IP to an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an IP to an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapAsync(String ipAddress, String addressMapId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(ipAddress, addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddressMapDetails
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address Map Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Address Map Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddressMapDetailsCall(String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}"
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsAddressMapDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsAddressMapDetails(Async)");
        }

        return ipAddressManagementAddressMapsAddressMapDetailsCall(addressMapId, accountId, _callback);

    }

    /**
     * Address Map Details
     * Show a particular address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingFullResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address Map Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Address Map Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingFullResponse ipAddressManagementAddressMapsAddressMapDetails(String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingFullResponse> localVarResp = ipAddressManagementAddressMapsAddressMapDetailsWithHttpInfo(addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Address Map Details
     * Show a particular address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingFullResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address Map Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Address Map Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingFullResponse> ipAddressManagementAddressMapsAddressMapDetailsWithHttpInfo(String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingFullResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Address Map Details (asynchronously)
     * Show a particular address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Address Map Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Address Map Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsAddressMapDetailsAsync(String addressMapId, String accountId, final ApiCallback<AddressingFullResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingFullResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsCreateAddressMap
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsCreateAddressMapRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsCreateAddressMapCall(String accountId, IpAddressManagementAddressMapsCreateAddressMapRequest ipAddressManagementAddressMapsCreateAddressMapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressManagementAddressMapsCreateAddressMapRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(String accountId, IpAddressManagementAddressMapsCreateAddressMapRequest ipAddressManagementAddressMapsCreateAddressMapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsCreateAddressMap(Async)");
        }

        // verify the required parameter 'ipAddressManagementAddressMapsCreateAddressMapRequest' is set
        if (ipAddressManagementAddressMapsCreateAddressMapRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAddressManagementAddressMapsCreateAddressMapRequest' when calling ipAddressManagementAddressMapsCreateAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsCreateAddressMapCall(accountId, ipAddressManagementAddressMapsCreateAddressMapRequest, _callback);

    }

    /**
     * Create Address Map
     * Create a new address map under the account.
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsCreateAddressMapRequest  (required)
     * @return AddressingFullResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingFullResponse ipAddressManagementAddressMapsCreateAddressMap(String accountId, IpAddressManagementAddressMapsCreateAddressMapRequest ipAddressManagementAddressMapsCreateAddressMapRequest) throws ApiException {
        ApiResponse<AddressingFullResponse> localVarResp = ipAddressManagementAddressMapsCreateAddressMapWithHttpInfo(accountId, ipAddressManagementAddressMapsCreateAddressMapRequest);
        return localVarResp.getData();
    }

    /**
     * Create Address Map
     * Create a new address map under the account.
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsCreateAddressMapRequest  (required)
     * @return ApiResponse&lt;AddressingFullResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingFullResponse> ipAddressManagementAddressMapsCreateAddressMapWithHttpInfo(String accountId, IpAddressManagementAddressMapsCreateAddressMapRequest ipAddressManagementAddressMapsCreateAddressMapRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(accountId, ipAddressManagementAddressMapsCreateAddressMapRequest, null);
        Type localVarReturnType = new TypeToken<AddressingFullResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Address Map (asynchronously)
     * Create a new address map under the account.
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsCreateAddressMapRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsCreateAddressMapAsync(String accountId, IpAddressManagementAddressMapsCreateAddressMapRequest ipAddressManagementAddressMapsCreateAddressMapRequest, final ApiCallback<AddressingFullResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(accountId, ipAddressManagementAddressMapsCreateAddressMapRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressingFullResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsDeleteAddressMap
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsDeleteAddressMapCall(String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}"
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsDeleteAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsDeleteAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsDeleteAddressMapCall(addressMapId, accountId, _callback);

    }

    /**
     * Delete Address Map
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsDeleteAddressMap(String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsDeleteAddressMapWithHttpInfo(addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Address Map
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsDeleteAddressMapWithHttpInfo(String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Address Map (asynchronously)
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsDeleteAddressMapAsync(String addressMapId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsListAddressMaps
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Address Maps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Address Maps response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsListAddressMapsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsListAddressMaps(Async)");
        }

        return ipAddressManagementAddressMapsListAddressMapsCall(accountId, _callback);

    }

    /**
     * List Address Maps
     * List all address maps owned by the account.
     * @param accountId  (required)
     * @return AddressingComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Address Maps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Address Maps response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingComponentsSchemasResponseCollection ipAddressManagementAddressMapsListAddressMaps(String accountId) throws ApiException {
        ApiResponse<AddressingComponentsSchemasResponseCollection> localVarResp = ipAddressManagementAddressMapsListAddressMapsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Address Maps
     * List all address maps owned by the account.
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Address Maps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Address Maps response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingComponentsSchemasResponseCollection> ipAddressManagementAddressMapsListAddressMapsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AddressingComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Address Maps (asynchronously)
     * List all address maps owned by the account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Address Maps response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Address Maps response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsListAddressMapsAsync(String accountId, final ApiCallback<AddressingComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a zone membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a zone membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapCall(String zoneId, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/zones/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(String zoneId, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapCall(zoneId, addressMapId, accountId, _callback);

    }

    /**
     * Remove a zone membership from an Address Map
     * Remove a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a zone membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a zone membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(String zoneId, String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapWithHttpInfo(zoneId, addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Remove a zone membership from an Address Map
     * Remove a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a zone membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a zone membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapWithHttpInfo(String zoneId, String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(zoneId, addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a zone membership from an Address Map (asynchronously)
     * Remove a zone as a member of a particular address map.
     * @param zoneId  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a zone membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove a zone membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapAsync(String zoneId, String addressMapId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(zoneId, addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an account membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an account membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapCall(String accountId, String addressMapId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(String accountId, String addressMapId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapCall(accountId, addressMapId, _callback);

    }

    /**
     * Remove an account membership from an Address Map
     * Remove an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an account membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an account membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(String accountId, String addressMapId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapWithHttpInfo(accountId, addressMapId);
        return localVarResp.getData();
    }

    /**
     * Remove an account membership from an Address Map
     * Remove an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an account membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an account membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapWithHttpInfo(String accountId, String addressMapId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(accountId, addressMapId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an account membership from an Address Map (asynchronously)
     * Remove an account as a member of a particular address map.
     * @param accountId  (required)
     * @param addressMapId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an account membership from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an account membership from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapAsync(String accountId, String addressMapId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(accountId, addressMapId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an IP from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an IP from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapCall(String ipAddress, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}/ips/{ip_address}"
            .replace("{" + "ip_address" + "}", localVarApiClient.escapeString(ipAddress.toString()))
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(String ipAddress, String addressMapId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }

        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapCall(ipAddress, addressMapId, accountId, _callback);

    }

    /**
     * Remove an IP from an Address Map
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return AddressingApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an IP from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an IP from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingApiResponseCollection ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(String ipAddress, String addressMapId, String accountId) throws ApiException {
        ApiResponse<AddressingApiResponseCollection> localVarResp = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapWithHttpInfo(ipAddress, addressMapId, accountId);
        return localVarResp.getData();
    }

    /**
     * Remove an IP from an Address Map
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;AddressingApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an IP from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an IP from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingApiResponseCollection> ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapWithHttpInfo(String ipAddress, String addressMapId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(ipAddress, addressMapId, accountId, null);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an IP from an Address Map (asynchronously)
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove an IP from an Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Remove an IP from an Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapAsync(String ipAddress, String addressMapId, String accountId, final ApiCallback<AddressingApiResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(ipAddress, addressMapId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AddressingApiResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAddressManagementAddressMapsUpdateAddressMap
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsUpdateAddressMapRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsUpdateAddressMapCall(String addressMapId, String accountId, IpAddressManagementAddressMapsUpdateAddressMapRequest ipAddressManagementAddressMapsUpdateAddressMapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressManagementAddressMapsUpdateAddressMapRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/addressing/address_maps/{address_map_id}"
            .replace("{" + "address_map_id" + "}", localVarApiClient.escapeString(addressMapId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(String addressMapId, String accountId, IpAddressManagementAddressMapsUpdateAddressMapRequest ipAddressManagementAddressMapsUpdateAddressMapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressMapId' is set
        if (addressMapId == null) {
            throw new ApiException("Missing the required parameter 'addressMapId' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }

        // verify the required parameter 'ipAddressManagementAddressMapsUpdateAddressMapRequest' is set
        if (ipAddressManagementAddressMapsUpdateAddressMapRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAddressManagementAddressMapsUpdateAddressMapRequest' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }

        return ipAddressManagementAddressMapsUpdateAddressMapCall(addressMapId, accountId, ipAddressManagementAddressMapsUpdateAddressMapRequest, _callback);

    }

    /**
     * Update Address Map
     * Modify properties of an address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsUpdateAddressMapRequest  (required)
     * @return AddressingComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public AddressingComponentsSchemasSingleResponse ipAddressManagementAddressMapsUpdateAddressMap(String addressMapId, String accountId, IpAddressManagementAddressMapsUpdateAddressMapRequest ipAddressManagementAddressMapsUpdateAddressMapRequest) throws ApiException {
        ApiResponse<AddressingComponentsSchemasSingleResponse> localVarResp = ipAddressManagementAddressMapsUpdateAddressMapWithHttpInfo(addressMapId, accountId, ipAddressManagementAddressMapsUpdateAddressMapRequest);
        return localVarResp.getData();
    }

    /**
     * Update Address Map
     * Modify properties of an address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsUpdateAddressMapRequest  (required)
     * @return ApiResponse&lt;AddressingComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressingComponentsSchemasSingleResponse> ipAddressManagementAddressMapsUpdateAddressMapWithHttpInfo(String addressMapId, String accountId, IpAddressManagementAddressMapsUpdateAddressMapRequest ipAddressManagementAddressMapsUpdateAddressMapRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(addressMapId, accountId, ipAddressManagementAddressMapsUpdateAddressMapRequest, null);
        Type localVarReturnType = new TypeToken<AddressingComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Address Map (asynchronously)
     * Modify properties of an address map owned by the account.
     * @param addressMapId  (required)
     * @param accountId  (required)
     * @param ipAddressManagementAddressMapsUpdateAddressMapRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Address Map response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Address Map response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAddressManagementAddressMapsUpdateAddressMapAsync(String addressMapId, String accountId, IpAddressManagementAddressMapsUpdateAddressMapRequest ipAddressManagementAddressMapsUpdateAddressMapRequest, final ApiCallback<AddressingComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(addressMapId, accountId, ipAddressManagementAddressMapsUpdateAddressMapRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressingComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
