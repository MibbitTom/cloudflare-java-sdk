/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.TunnelRouteCreateATunnelRoute4XXResponse;
import cloudflare.sdk.models.TunnelRouteCreateATunnelRouteRequest;
import cloudflare.sdk.models.TunnelRouteCreateATunnelRouteWithCidrRequest;
import cloudflare.sdk.models.TunnelRouteGetTunnelRouteByIp4XXResponse;
import cloudflare.sdk.models.TunnelRouteListTunnelRoutes4XXResponse;
import cloudflare.sdk.models.TunnelRouteResponseSingle;
import cloudflare.sdk.models.TunnelRouteUpdateATunnelRouteRequest;
import cloudflare.sdk.models.TunnelTeamnetResponseCollection;
import cloudflare.sdk.models.TunnelTeamnetResponseSingle;
import cloudflare.sdk.models.TunnelTunnelType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TunnelRouteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TunnelRouteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TunnelRouteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tunnelRouteCreateATunnelRoute
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteCreateATunnelRouteCall(String accountId, TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tunnelRouteCreateATunnelRouteRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteCreateATunnelRouteValidateBeforeCall(String accountId, TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteCreateATunnelRoute(Async)");
        }

        // verify the required parameter 'tunnelRouteCreateATunnelRouteRequest' is set
        if (tunnelRouteCreateATunnelRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'tunnelRouteCreateATunnelRouteRequest' when calling tunnelRouteCreateATunnelRoute(Async)");
        }

        return tunnelRouteCreateATunnelRouteCall(accountId, tunnelRouteCreateATunnelRouteRequest, _callback);

    }

    /**
     * Create a tunnel route
     * Routes a private network through a Cloudflare Tunnel.
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteRequest  (required)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelRouteResponseSingle tunnelRouteCreateATunnelRoute(String accountId, TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteCreateATunnelRouteWithHttpInfo(accountId, tunnelRouteCreateATunnelRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a tunnel route
     * Routes a private network through a Cloudflare Tunnel.
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteRequest  (required)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteCreateATunnelRouteWithHttpInfo(String accountId, TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteCreateATunnelRouteValidateBeforeCall(accountId, tunnelRouteCreateATunnelRouteRequest, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tunnel route (asynchronously)
     * Routes a private network through a Cloudflare Tunnel.
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteCreateATunnelRouteAsync(String accountId, TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteCreateATunnelRouteValidateBeforeCall(accountId, tunnelRouteCreateATunnelRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteCreateATunnelRouteWithCidr
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteWithCidrRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteCreateATunnelRouteWithCidrCall(String ipNetworkEncoded, String accountId, TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tunnelRouteCreateATunnelRouteWithCidrRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}"
            .replace("{" + "ip_network_encoded" + "}", localVarApiClient.escapeString(ipNetworkEncoded.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteCreateATunnelRouteWithCidrValidateBeforeCall(String ipNetworkEncoded, String accountId, TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipNetworkEncoded' is set
        if (ipNetworkEncoded == null) {
            throw new ApiException("Missing the required parameter 'ipNetworkEncoded' when calling tunnelRouteCreateATunnelRouteWithCidr(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteCreateATunnelRouteWithCidr(Async)");
        }

        // verify the required parameter 'tunnelRouteCreateATunnelRouteWithCidrRequest' is set
        if (tunnelRouteCreateATunnelRouteWithCidrRequest == null) {
            throw new ApiException("Missing the required parameter 'tunnelRouteCreateATunnelRouteWithCidrRequest' when calling tunnelRouteCreateATunnelRouteWithCidr(Async)");
        }

        return tunnelRouteCreateATunnelRouteWithCidrCall(ipNetworkEncoded, accountId, tunnelRouteCreateATunnelRouteWithCidrRequest, _callback);

    }

    /**
     * Create a tunnel route (CIDR Endpoint)
     * Routes a private network through a Cloudflare Tunnel. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteWithCidrRequest  (required)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelRouteResponseSingle tunnelRouteCreateATunnelRouteWithCidr(String ipNetworkEncoded, String accountId, TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteCreateATunnelRouteWithCidrWithHttpInfo(ipNetworkEncoded, accountId, tunnelRouteCreateATunnelRouteWithCidrRequest);
        return localVarResp.getData();
    }

    /**
     * Create a tunnel route (CIDR Endpoint)
     * Routes a private network through a Cloudflare Tunnel. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteWithCidrRequest  (required)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteCreateATunnelRouteWithCidrWithHttpInfo(String ipNetworkEncoded, String accountId, TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteCreateATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, tunnelRouteCreateATunnelRouteWithCidrRequest, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tunnel route (CIDR Endpoint) (asynchronously)
     * Routes a private network through a Cloudflare Tunnel. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param tunnelRouteCreateATunnelRouteWithCidrRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteCreateATunnelRouteWithCidrAsync(String ipNetworkEncoded, String accountId, TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteCreateATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, tunnelRouteCreateATunnelRouteWithCidrRequest, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteDeleteATunnelRoute
     * @param routeId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteDeleteATunnelRouteCall(String routeId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/{route_id}"
            .replace("{" + "route_id" + "}", localVarApiClient.escapeString(routeId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteDeleteATunnelRouteValidateBeforeCall(String routeId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling tunnelRouteDeleteATunnelRoute(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteDeleteATunnelRoute(Async)");
        }

        return tunnelRouteDeleteATunnelRouteCall(routeId, accountId, _callback);

    }

    /**
     * Delete a tunnel route
     * Deletes a private network route from an account. 
     * @param routeId  (required)
     * @param accountId  (required)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelRouteResponseSingle tunnelRouteDeleteATunnelRoute(String routeId, String accountId) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteDeleteATunnelRouteWithHttpInfo(routeId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete a tunnel route
     * Deletes a private network route from an account. 
     * @param routeId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteDeleteATunnelRouteWithHttpInfo(String routeId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteDeleteATunnelRouteValidateBeforeCall(routeId, accountId, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a tunnel route (asynchronously)
     * Deletes a private network route from an account. 
     * @param routeId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteDeleteATunnelRouteAsync(String routeId, String accountId, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteDeleteATunnelRouteValidateBeforeCall(routeId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteDeleteATunnelRouteWithCidr
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param tunType  (optional)
     * @param tunnelId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteDeleteATunnelRouteWithCidrCall(String ipNetworkEncoded, String accountId, String virtualNetworkId, TunnelTunnelType tunType, String tunnelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}"
            .replace("{" + "ip_network_encoded" + "}", localVarApiClient.escapeString(ipNetworkEncoded.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (virtualNetworkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_network_id", virtualNetworkId));
        }

        if (tunType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tun_type", tunType));
        }

        if (tunnelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tunnel_id", tunnelId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteDeleteATunnelRouteWithCidrValidateBeforeCall(String ipNetworkEncoded, String accountId, String virtualNetworkId, TunnelTunnelType tunType, String tunnelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipNetworkEncoded' is set
        if (ipNetworkEncoded == null) {
            throw new ApiException("Missing the required parameter 'ipNetworkEncoded' when calling tunnelRouteDeleteATunnelRouteWithCidr(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteDeleteATunnelRouteWithCidr(Async)");
        }

        return tunnelRouteDeleteATunnelRouteWithCidrCall(ipNetworkEncoded, accountId, virtualNetworkId, tunType, tunnelId, _callback);

    }

    /**
     * Delete a tunnel route (CIDR Endpoint)
     * Deletes a private network route from an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format. If no virtual_network_id is provided it will delete the route from the default vnet. If no tun_type is provided it will fetch the type from the tunnel_id or if that is missing it will assume Cloudflare Tunnel as default. If tunnel_id is provided it will delete the route from that tunnel, otherwise it will delete the route based on the vnet and tun_type. 
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param tunType  (optional)
     * @param tunnelId  (optional)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelRouteResponseSingle tunnelRouteDeleteATunnelRouteWithCidr(String ipNetworkEncoded, String accountId, String virtualNetworkId, TunnelTunnelType tunType, String tunnelId) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteDeleteATunnelRouteWithCidrWithHttpInfo(ipNetworkEncoded, accountId, virtualNetworkId, tunType, tunnelId);
        return localVarResp.getData();
    }

    /**
     * Delete a tunnel route (CIDR Endpoint)
     * Deletes a private network route from an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format. If no virtual_network_id is provided it will delete the route from the default vnet. If no tun_type is provided it will fetch the type from the tunnel_id or if that is missing it will assume Cloudflare Tunnel as default. If tunnel_id is provided it will delete the route from that tunnel, otherwise it will delete the route based on the vnet and tun_type. 
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param tunType  (optional)
     * @param tunnelId  (optional)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteDeleteATunnelRouteWithCidrWithHttpInfo(String ipNetworkEncoded, String accountId, String virtualNetworkId, TunnelTunnelType tunType, String tunnelId) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteDeleteATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, virtualNetworkId, tunType, tunnelId, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a tunnel route (CIDR Endpoint) (asynchronously)
     * Deletes a private network route from an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format. If no virtual_network_id is provided it will delete the route from the default vnet. If no tun_type is provided it will fetch the type from the tunnel_id or if that is missing it will assume Cloudflare Tunnel as default. If tunnel_id is provided it will delete the route from that tunnel, otherwise it will delete the route based on the vnet and tun_type. 
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param tunType  (optional)
     * @param tunnelId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteDeleteATunnelRouteWithCidrAsync(String ipNetworkEncoded, String accountId, String virtualNetworkId, TunnelTunnelType tunType, String tunnelId, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteDeleteATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, virtualNetworkId, tunType, tunnelId, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteGetTunnelRouteByIp
     * @param ip  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get tunnel route by IP response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get tunnel route by IP response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteGetTunnelRouteByIpCall(String ip, String accountId, Object virtualNetworkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/ip/{ip}"
            .replace("{" + "ip" + "}", localVarApiClient.escapeString(ip.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (virtualNetworkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_network_id", virtualNetworkId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteGetTunnelRouteByIpValidateBeforeCall(String ip, String accountId, Object virtualNetworkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling tunnelRouteGetTunnelRouteByIp(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteGetTunnelRouteByIp(Async)");
        }

        return tunnelRouteGetTunnelRouteByIpCall(ip, accountId, virtualNetworkId, _callback);

    }

    /**
     * Get tunnel route by IP
     * Fetches routes that contain the given IP address.
     * @param ip  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @return TunnelTeamnetResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get tunnel route by IP response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get tunnel route by IP response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelTeamnetResponseSingle tunnelRouteGetTunnelRouteByIp(String ip, String accountId, Object virtualNetworkId) throws ApiException {
        ApiResponse<TunnelTeamnetResponseSingle> localVarResp = tunnelRouteGetTunnelRouteByIpWithHttpInfo(ip, accountId, virtualNetworkId);
        return localVarResp.getData();
    }

    /**
     * Get tunnel route by IP
     * Fetches routes that contain the given IP address.
     * @param ip  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @return ApiResponse&lt;TunnelTeamnetResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get tunnel route by IP response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get tunnel route by IP response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelTeamnetResponseSingle> tunnelRouteGetTunnelRouteByIpWithHttpInfo(String ip, String accountId, Object virtualNetworkId) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteGetTunnelRouteByIpValidateBeforeCall(ip, accountId, virtualNetworkId, null);
        Type localVarReturnType = new TypeToken<TunnelTeamnetResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tunnel route by IP (asynchronously)
     * Fetches routes that contain the given IP address.
     * @param ip  (required)
     * @param accountId  (required)
     * @param virtualNetworkId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get tunnel route by IP response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get tunnel route by IP response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteGetTunnelRouteByIpAsync(String ip, String accountId, Object virtualNetworkId, final ApiCallback<TunnelTeamnetResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteGetTunnelRouteByIpValidateBeforeCall(ip, accountId, virtualNetworkId, _callback);
        Type localVarReturnType = new TypeToken<TunnelTeamnetResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteListTunnelRoutes
     * @param accountId  (required)
     * @param comment  (optional)
     * @param isDeleted  (optional)
     * @param networkSubset  (optional)
     * @param networkSuperset  (optional)
     * @param existedAt  (optional)
     * @param tunnelId  (optional)
     * @param routeId  (optional)
     * @param tunTypes  (optional)
     * @param virtualNetworkId  (optional)
     * @param perPage  (optional)
     * @param page  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tunnel routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tunnel routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteListTunnelRoutesCall(String accountId, String comment, Object isDeleted, Object networkSubset, Object networkSuperset, Object existedAt, Object tunnelId, String routeId, String tunTypes, Object virtualNetworkId, BigDecimal perPage, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (isDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_deleted", isDeleted));
        }

        if (networkSubset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_subset", networkSubset));
        }

        if (networkSuperset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_superset", networkSuperset));
        }

        if (existedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("existed_at", existedAt));
        }

        if (tunnelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tunnel_id", tunnelId));
        }

        if (routeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route_id", routeId));
        }

        if (tunTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tun_types", tunTypes));
        }

        if (virtualNetworkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_network_id", virtualNetworkId));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteListTunnelRoutesValidateBeforeCall(String accountId, String comment, Object isDeleted, Object networkSubset, Object networkSuperset, Object existedAt, Object tunnelId, String routeId, String tunTypes, Object virtualNetworkId, BigDecimal perPage, BigDecimal page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteListTunnelRoutes(Async)");
        }

        return tunnelRouteListTunnelRoutesCall(accountId, comment, isDeleted, networkSubset, networkSuperset, existedAt, tunnelId, routeId, tunTypes, virtualNetworkId, perPage, page, _callback);

    }

    /**
     * List tunnel routes
     * Lists and filters private network routes in an account.
     * @param accountId  (required)
     * @param comment  (optional)
     * @param isDeleted  (optional)
     * @param networkSubset  (optional)
     * @param networkSuperset  (optional)
     * @param existedAt  (optional)
     * @param tunnelId  (optional)
     * @param routeId  (optional)
     * @param tunTypes  (optional)
     * @param virtualNetworkId  (optional)
     * @param perPage  (optional)
     * @param page  (optional, default to 1)
     * @return TunnelTeamnetResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tunnel routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tunnel routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelTeamnetResponseCollection tunnelRouteListTunnelRoutes(String accountId, String comment, Object isDeleted, Object networkSubset, Object networkSuperset, Object existedAt, Object tunnelId, String routeId, String tunTypes, Object virtualNetworkId, BigDecimal perPage, BigDecimal page) throws ApiException {
        ApiResponse<TunnelTeamnetResponseCollection> localVarResp = tunnelRouteListTunnelRoutesWithHttpInfo(accountId, comment, isDeleted, networkSubset, networkSuperset, existedAt, tunnelId, routeId, tunTypes, virtualNetworkId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List tunnel routes
     * Lists and filters private network routes in an account.
     * @param accountId  (required)
     * @param comment  (optional)
     * @param isDeleted  (optional)
     * @param networkSubset  (optional)
     * @param networkSuperset  (optional)
     * @param existedAt  (optional)
     * @param tunnelId  (optional)
     * @param routeId  (optional)
     * @param tunTypes  (optional)
     * @param virtualNetworkId  (optional)
     * @param perPage  (optional)
     * @param page  (optional, default to 1)
     * @return ApiResponse&lt;TunnelTeamnetResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tunnel routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tunnel routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelTeamnetResponseCollection> tunnelRouteListTunnelRoutesWithHttpInfo(String accountId, String comment, Object isDeleted, Object networkSubset, Object networkSuperset, Object existedAt, Object tunnelId, String routeId, String tunTypes, Object virtualNetworkId, BigDecimal perPage, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteListTunnelRoutesValidateBeforeCall(accountId, comment, isDeleted, networkSubset, networkSuperset, existedAt, tunnelId, routeId, tunTypes, virtualNetworkId, perPage, page, null);
        Type localVarReturnType = new TypeToken<TunnelTeamnetResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tunnel routes (asynchronously)
     * Lists and filters private network routes in an account.
     * @param accountId  (required)
     * @param comment  (optional)
     * @param isDeleted  (optional)
     * @param networkSubset  (optional)
     * @param networkSuperset  (optional)
     * @param existedAt  (optional)
     * @param tunnelId  (optional)
     * @param routeId  (optional)
     * @param tunTypes  (optional)
     * @param virtualNetworkId  (optional)
     * @param perPage  (optional)
     * @param page  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tunnel routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tunnel routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteListTunnelRoutesAsync(String accountId, String comment, Object isDeleted, Object networkSubset, Object networkSuperset, Object existedAt, Object tunnelId, String routeId, String tunTypes, Object virtualNetworkId, BigDecimal perPage, BigDecimal page, final ApiCallback<TunnelTeamnetResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteListTunnelRoutesValidateBeforeCall(accountId, comment, isDeleted, networkSubset, networkSuperset, existedAt, tunnelId, routeId, tunTypes, virtualNetworkId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<TunnelTeamnetResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteUpdateATunnelRoute
     * @param routeId  (required)
     * @param accountId  (required)
     * @param tunnelRouteUpdateATunnelRouteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteUpdateATunnelRouteCall(String routeId, String accountId, TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tunnelRouteUpdateATunnelRouteRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/{route_id}"
            .replace("{" + "route_id" + "}", localVarApiClient.escapeString(routeId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteUpdateATunnelRouteValidateBeforeCall(String routeId, String accountId, TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling tunnelRouteUpdateATunnelRoute(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteUpdateATunnelRoute(Async)");
        }

        // verify the required parameter 'tunnelRouteUpdateATunnelRouteRequest' is set
        if (tunnelRouteUpdateATunnelRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'tunnelRouteUpdateATunnelRouteRequest' when calling tunnelRouteUpdateATunnelRoute(Async)");
        }

        return tunnelRouteUpdateATunnelRouteCall(routeId, accountId, tunnelRouteUpdateATunnelRouteRequest, _callback);

    }

    /**
     * Update a tunnel route
     * Updates an existing private network route in an account. The fields that are meant to be updated should be provided in the body of the request.
     * @param routeId  (required)
     * @param accountId  (required)
     * @param tunnelRouteUpdateATunnelRouteRequest  (required)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelRouteResponseSingle tunnelRouteUpdateATunnelRoute(String routeId, String accountId, TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteUpdateATunnelRouteWithHttpInfo(routeId, accountId, tunnelRouteUpdateATunnelRouteRequest);
        return localVarResp.getData();
    }

    /**
     * Update a tunnel route
     * Updates an existing private network route in an account. The fields that are meant to be updated should be provided in the body of the request.
     * @param routeId  (required)
     * @param accountId  (required)
     * @param tunnelRouteUpdateATunnelRouteRequest  (required)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteUpdateATunnelRouteWithHttpInfo(String routeId, String accountId, TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteUpdateATunnelRouteValidateBeforeCall(routeId, accountId, tunnelRouteUpdateATunnelRouteRequest, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tunnel route (asynchronously)
     * Updates an existing private network route in an account. The fields that are meant to be updated should be provided in the body of the request.
     * @param routeId  (required)
     * @param accountId  (required)
     * @param tunnelRouteUpdateATunnelRouteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tunnelRouteUpdateATunnelRouteAsync(String routeId, String accountId, TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteUpdateATunnelRouteValidateBeforeCall(routeId, accountId, tunnelRouteUpdateATunnelRouteRequest, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tunnelRouteUpdateATunnelRouteWithCidr
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteUpdateATunnelRouteWithCidrCall(String ipNetworkEncoded, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}"
            .replace("{" + "ip_network_encoded" + "}", localVarApiClient.escapeString(ipNetworkEncoded.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tunnelRouteUpdateATunnelRouteWithCidrValidateBeforeCall(String ipNetworkEncoded, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipNetworkEncoded' is set
        if (ipNetworkEncoded == null) {
            throw new ApiException("Missing the required parameter 'ipNetworkEncoded' when calling tunnelRouteUpdateATunnelRouteWithCidr(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling tunnelRouteUpdateATunnelRouteWithCidr(Async)");
        }

        return tunnelRouteUpdateATunnelRouteWithCidrCall(ipNetworkEncoded, accountId, _callback);

    }

    /**
     * Update a tunnel route (CIDR Endpoint)
     * Updates an existing private network route in an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @return TunnelRouteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TunnelRouteResponseSingle tunnelRouteUpdateATunnelRouteWithCidr(String ipNetworkEncoded, String accountId) throws ApiException {
        ApiResponse<TunnelRouteResponseSingle> localVarResp = tunnelRouteUpdateATunnelRouteWithCidrWithHttpInfo(ipNetworkEncoded, accountId);
        return localVarResp.getData();
    }

    /**
     * Update a tunnel route (CIDR Endpoint)
     * Updates an existing private network route in an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TunnelRouteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TunnelRouteResponseSingle> tunnelRouteUpdateATunnelRouteWithCidrWithHttpInfo(String ipNetworkEncoded, String accountId) throws ApiException {
        okhttp3.Call localVarCall = tunnelRouteUpdateATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, null);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tunnel route (CIDR Endpoint) (asynchronously)
     * Updates an existing private network route in an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     * @param ipNetworkEncoded  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tunnel route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tunnel route response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tunnelRouteUpdateATunnelRouteWithCidrAsync(String ipNetworkEncoded, String accountId, final ApiCallback<TunnelRouteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = tunnelRouteUpdateATunnelRouteWithCidrValidateBeforeCall(ipNetworkEncoded, accountId, _callback);
        Type localVarReturnType = new TypeToken<TunnelRouteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
