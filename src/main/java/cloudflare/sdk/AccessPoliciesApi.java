/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.AccessApiResponseCommonFailure;
import cloudflare.sdk.models.AccessIdResponse;
import cloudflare.sdk.models.AccessPoliciesComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AccessPoliciesComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AccessPoliciesUpdateAnAccessPolicyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessPoliciesCreateAnAccessPolicy
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesCreateAnAccessPolicyCall(String uuid, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessPoliciesUpdateAnAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid}/policies"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesCreateAnAccessPolicyValidateBeforeCall(String uuid, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessPoliciesCreateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessPoliciesCreateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'accessPoliciesUpdateAnAccessPolicyRequest' is set
        if (accessPoliciesUpdateAnAccessPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'accessPoliciesUpdateAnAccessPolicyRequest' when calling accessPoliciesCreateAnAccessPolicy(Async)");
        }

        return accessPoliciesCreateAnAccessPolicyCall(uuid, identifier, accessPoliciesUpdateAnAccessPolicyRequest, _callback);

    }

    /**
     * Create an Access policy
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse accessPoliciesCreateAnAccessPolicy(String uuid, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> localVarResp = accessPoliciesCreateAnAccessPolicyWithHttpInfo(uuid, identifier, accessPoliciesUpdateAnAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Access policy
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> accessPoliciesCreateAnAccessPolicyWithHttpInfo(String uuid, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesCreateAnAccessPolicyValidateBeforeCall(uuid, identifier, accessPoliciesUpdateAnAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Access policy (asynchronously)
     * Create a new Access policy for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesCreateAnAccessPolicyAsync(String uuid, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesCreateAnAccessPolicyValidateBeforeCall(uuid, identifier, accessPoliciesUpdateAnAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesDeleteAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesDeleteAnAccessPolicyCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesDeleteAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessPoliciesDeleteAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling accessPoliciesDeleteAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessPoliciesDeleteAnAccessPolicy(Async)");
        }

        return accessPoliciesDeleteAnAccessPolicyCall(uuid, uuid1, identifier, _callback);

    }

    /**
     * Delete an Access policy
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return AccessIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessIdResponse accessPoliciesDeleteAnAccessPolicy(String uuid, String uuid1, String identifier) throws ApiException {
        ApiResponse<AccessIdResponse> localVarResp = accessPoliciesDeleteAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an Access policy
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessIdResponse> accessPoliciesDeleteAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesDeleteAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, null);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Access policy (asynchronously)
     * Delete an Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesDeleteAnAccessPolicyAsync(String uuid, String uuid1, String identifier, final ApiCallback<AccessIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesDeleteAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesGetAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesGetAnAccessPolicyCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesGetAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessPoliciesGetAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling accessPoliciesGetAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessPoliciesGetAnAccessPolicy(Async)");
        }

        return accessPoliciesGetAnAccessPolicyCall(uuid, uuid1, identifier, _callback);

    }

    /**
     * Get an Access policy
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse accessPoliciesGetAnAccessPolicy(String uuid, String uuid1, String identifier) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> localVarResp = accessPoliciesGetAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an Access policy
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> accessPoliciesGetAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesGetAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Access policy (asynchronously)
     * Fetches a single Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesGetAnAccessPolicyAsync(String uuid, String uuid1, String identifier, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesGetAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesListAccessPolicies
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesListAccessPoliciesCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid}/policies"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesListAccessPoliciesValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessPoliciesListAccessPolicies(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessPoliciesListAccessPolicies(Async)");
        }

        return accessPoliciesListAccessPoliciesCall(uuid, identifier, _callback);

    }

    /**
     * List Access policies
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessPoliciesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasResponseCollection accessPoliciesListAccessPolicies(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasResponseCollection> localVarResp = accessPoliciesListAccessPoliciesWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * List Access policies
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasResponseCollection> accessPoliciesListAccessPoliciesWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesListAccessPoliciesValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Access policies (asynchronously)
     * Lists Access policies configured for an application.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Access policies response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Access policies response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesListAccessPoliciesAsync(String uuid, String identifier, final ApiCallback<AccessPoliciesComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesListAccessPoliciesValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesUpdateAnAccessPolicy
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesUpdateAnAccessPolicyCall(String uuid, String uuid1, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessPoliciesUpdateAnAccessPolicyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "uuid1" + "}", localVarApiClient.escapeString(uuid1.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesUpdateAnAccessPolicyValidateBeforeCall(String uuid, String uuid1, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'uuid1' is set
        if (uuid1 == null) {
            throw new ApiException("Missing the required parameter 'uuid1' when calling accessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessPoliciesUpdateAnAccessPolicy(Async)");
        }

        // verify the required parameter 'accessPoliciesUpdateAnAccessPolicyRequest' is set
        if (accessPoliciesUpdateAnAccessPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'accessPoliciesUpdateAnAccessPolicyRequest' when calling accessPoliciesUpdateAnAccessPolicy(Async)");
        }

        return accessPoliciesUpdateAnAccessPolicyCall(uuid, uuid1, identifier, accessPoliciesUpdateAnAccessPolicyRequest, _callback);

    }

    /**
     * Update an Access policy
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return AccessPoliciesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessPoliciesComponentsSchemasSingleResponse accessPoliciesUpdateAnAccessPolicy(String uuid, String uuid1, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> localVarResp = accessPoliciesUpdateAnAccessPolicyWithHttpInfo(uuid, uuid1, identifier, accessPoliciesUpdateAnAccessPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Access policy
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @return ApiResponse&lt;AccessPoliciesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPoliciesComponentsSchemasSingleResponse> accessPoliciesUpdateAnAccessPolicyWithHttpInfo(String uuid, String uuid1, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesUpdateAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, accessPoliciesUpdateAnAccessPolicyRequest, null);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access policy (asynchronously)
     * Update a configured Access policy.
     * @param uuid  (required)
     * @param uuid1  (required)
     * @param identifier  (required)
     * @param accessPoliciesUpdateAnAccessPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an Access policy response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an Access policy response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesUpdateAnAccessPolicyAsync(String uuid, String uuid1, String identifier, AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest, final ApiCallback<AccessPoliciesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesUpdateAnAccessPolicyValidateBeforeCall(uuid, uuid1, identifier, accessPoliciesUpdateAnAccessPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessPoliciesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
