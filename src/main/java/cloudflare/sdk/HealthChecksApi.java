/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.HealthChecksCreateHealthCheck4XXResponse;
import cloudflare.sdk.models.HealthChecksDeletePreviewHealthCheck4XXResponse;
import cloudflare.sdk.models.HealthChecksListHealthChecks4XXResponse;
import cloudflare.sdk.models.HealthchecksIdResponse;
import cloudflare.sdk.models.HealthchecksQueryHealthcheck;
import cloudflare.sdk.models.HealthchecksResponseCollection;
import cloudflare.sdk.models.HealthchecksSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthChecksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthChecksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthChecksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for healthChecksCreateHealthCheck
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksCreateHealthCheckCall(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthchecksQueryHealthcheck;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksCreateHealthCheckValidateBeforeCall(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksCreateHealthCheck(Async)");
        }

        // verify the required parameter 'healthchecksQueryHealthcheck' is set
        if (healthchecksQueryHealthcheck == null) {
            throw new ApiException("Missing the required parameter 'healthchecksQueryHealthcheck' when calling healthChecksCreateHealthCheck(Async)");
        }

        return healthChecksCreateHealthCheckCall(zoneId, healthchecksQueryHealthcheck, _callback);

    }

    /**
     * Create Health Check
     * Create a new health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksCreateHealthCheck(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksCreateHealthCheckWithHttpInfo(zoneId, healthchecksQueryHealthcheck);
        return localVarResp.getData();
    }

    /**
     * Create Health Check
     * Create a new health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksCreateHealthCheckWithHttpInfo(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        okhttp3.Call localVarCall = healthChecksCreateHealthCheckValidateBeforeCall(zoneId, healthchecksQueryHealthcheck, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Health Check (asynchronously)
     * Create a new health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksCreateHealthCheckAsync(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksCreateHealthCheckValidateBeforeCall(zoneId, healthchecksQueryHealthcheck, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksCreatePreviewHealthCheck
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksCreatePreviewHealthCheckCall(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthchecksQueryHealthcheck;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/preview"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksCreatePreviewHealthCheckValidateBeforeCall(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksCreatePreviewHealthCheck(Async)");
        }

        // verify the required parameter 'healthchecksQueryHealthcheck' is set
        if (healthchecksQueryHealthcheck == null) {
            throw new ApiException("Missing the required parameter 'healthchecksQueryHealthcheck' when calling healthChecksCreatePreviewHealthCheck(Async)");
        }

        return healthChecksCreatePreviewHealthCheckCall(zoneId, healthchecksQueryHealthcheck, _callback);

    }

    /**
     * Create Preview Health Check
     * Create a new preview health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksCreatePreviewHealthCheck(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksCreatePreviewHealthCheckWithHttpInfo(zoneId, healthchecksQueryHealthcheck);
        return localVarResp.getData();
    }

    /**
     * Create Preview Health Check
     * Create a new preview health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksCreatePreviewHealthCheckWithHttpInfo(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        okhttp3.Call localVarCall = healthChecksCreatePreviewHealthCheckValidateBeforeCall(zoneId, healthchecksQueryHealthcheck, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Preview Health Check (asynchronously)
     * Create a new preview health check.
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksCreatePreviewHealthCheckAsync(String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksCreatePreviewHealthCheckValidateBeforeCall(zoneId, healthchecksQueryHealthcheck, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksDeleteHealthCheck
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksDeleteHealthCheckCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksDeleteHealthCheckValidateBeforeCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksDeleteHealthCheck(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksDeleteHealthCheck(Async)");
        }

        return healthChecksDeleteHealthCheckCall(healthcheckId, zoneId, _callback);

    }

    /**
     * Delete Health Check
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return HealthchecksIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksIdResponse healthChecksDeleteHealthCheck(String healthcheckId, String zoneId) throws ApiException {
        ApiResponse<HealthchecksIdResponse> localVarResp = healthChecksDeleteHealthCheckWithHttpInfo(healthcheckId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Health Check
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;HealthchecksIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksIdResponse> healthChecksDeleteHealthCheckWithHttpInfo(String healthcheckId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = healthChecksDeleteHealthCheckValidateBeforeCall(healthcheckId, zoneId, null);
        Type localVarReturnType = new TypeToken<HealthchecksIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Health Check (asynchronously)
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksDeleteHealthCheckAsync(String healthcheckId, String zoneId, final ApiCallback<HealthchecksIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksDeleteHealthCheckValidateBeforeCall(healthcheckId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksDeletePreviewHealthCheck
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksDeletePreviewHealthCheckCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/preview/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksDeletePreviewHealthCheckValidateBeforeCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksDeletePreviewHealthCheck(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksDeletePreviewHealthCheck(Async)");
        }

        return healthChecksDeletePreviewHealthCheckCall(healthcheckId, zoneId, _callback);

    }

    /**
     * Delete Preview Health Check
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return HealthchecksIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksIdResponse healthChecksDeletePreviewHealthCheck(String healthcheckId, String zoneId) throws ApiException {
        ApiResponse<HealthchecksIdResponse> localVarResp = healthChecksDeletePreviewHealthCheckWithHttpInfo(healthcheckId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Preview Health Check
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;HealthchecksIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksIdResponse> healthChecksDeletePreviewHealthCheckWithHttpInfo(String healthcheckId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = healthChecksDeletePreviewHealthCheckValidateBeforeCall(healthcheckId, zoneId, null);
        Type localVarReturnType = new TypeToken<HealthchecksIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Preview Health Check (asynchronously)
     * Delete a health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Preview Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Preview Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksDeletePreviewHealthCheckAsync(String healthcheckId, String zoneId, final ApiCallback<HealthchecksIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksDeletePreviewHealthCheckValidateBeforeCall(healthcheckId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksHealthCheckDetails
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksHealthCheckDetailsCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksHealthCheckDetailsValidateBeforeCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksHealthCheckDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksHealthCheckDetails(Async)");
        }

        return healthChecksHealthCheckDetailsCall(healthcheckId, zoneId, _callback);

    }

    /**
     * Health Check Details
     * Fetch a single configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksHealthCheckDetails(String healthcheckId, String zoneId) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksHealthCheckDetailsWithHttpInfo(healthcheckId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Health Check Details
     * Fetch a single configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksHealthCheckDetailsWithHttpInfo(String healthcheckId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = healthChecksHealthCheckDetailsValidateBeforeCall(healthcheckId, zoneId, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Health Check Details (asynchronously)
     * Fetch a single configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksHealthCheckDetailsAsync(String healthcheckId, String zoneId, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksHealthCheckDetailsValidateBeforeCall(healthcheckId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksHealthCheckPreviewDetails
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Preview Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Preview Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksHealthCheckPreviewDetailsCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/preview/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksHealthCheckPreviewDetailsValidateBeforeCall(String healthcheckId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksHealthCheckPreviewDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksHealthCheckPreviewDetails(Async)");
        }

        return healthChecksHealthCheckPreviewDetailsCall(healthcheckId, zoneId, _callback);

    }

    /**
     * Health Check Preview Details
     * Fetch a single configured health check preview.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Preview Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Preview Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksHealthCheckPreviewDetails(String healthcheckId, String zoneId) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksHealthCheckPreviewDetailsWithHttpInfo(healthcheckId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Health Check Preview Details
     * Fetch a single configured health check preview.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Preview Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Preview Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksHealthCheckPreviewDetailsWithHttpInfo(String healthcheckId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = healthChecksHealthCheckPreviewDetailsValidateBeforeCall(healthcheckId, zoneId, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Health Check Preview Details (asynchronously)
     * Fetch a single configured health check preview.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health Check Preview Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Health Check Preview Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksHealthCheckPreviewDetailsAsync(String healthcheckId, String zoneId, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksHealthCheckPreviewDetailsValidateBeforeCall(healthcheckId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksListHealthChecks
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Health Checks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Health Checks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksListHealthChecksCall(String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksListHealthChecksValidateBeforeCall(String zoneId, Object page, Object perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksListHealthChecks(Async)");
        }

        return healthChecksListHealthChecksCall(zoneId, page, perPage, _callback);

    }

    /**
     * List Health Checks
     * List configured health checks.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return HealthchecksResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Health Checks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Health Checks response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksResponseCollection healthChecksListHealthChecks(String zoneId, Object page, Object perPage) throws ApiException {
        ApiResponse<HealthchecksResponseCollection> localVarResp = healthChecksListHealthChecksWithHttpInfo(zoneId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Health Checks
     * List configured health checks.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @return ApiResponse&lt;HealthchecksResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Health Checks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Health Checks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksResponseCollection> healthChecksListHealthChecksWithHttpInfo(String zoneId, Object page, Object perPage) throws ApiException {
        okhttp3.Call localVarCall = healthChecksListHealthChecksValidateBeforeCall(zoneId, page, perPage, null);
        Type localVarReturnType = new TypeToken<HealthchecksResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Health Checks (asynchronously)
     * List configured health checks.
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. Must be a multiple of 5. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Health Checks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Health Checks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksListHealthChecksAsync(String zoneId, Object page, Object perPage, final ApiCallback<HealthchecksResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksListHealthChecksValidateBeforeCall(zoneId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksPatchHealthCheck
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksPatchHealthCheckCall(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthchecksQueryHealthcheck;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksPatchHealthCheckValidateBeforeCall(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksPatchHealthCheck(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksPatchHealthCheck(Async)");
        }

        // verify the required parameter 'healthchecksQueryHealthcheck' is set
        if (healthchecksQueryHealthcheck == null) {
            throw new ApiException("Missing the required parameter 'healthchecksQueryHealthcheck' when calling healthChecksPatchHealthCheck(Async)");
        }

        return healthChecksPatchHealthCheckCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, _callback);

    }

    /**
     * Patch Health Check
     * Patch a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksPatchHealthCheck(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksPatchHealthCheckWithHttpInfo(healthcheckId, zoneId, healthchecksQueryHealthcheck);
        return localVarResp.getData();
    }

    /**
     * Patch Health Check
     * Patch a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksPatchHealthCheckWithHttpInfo(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        okhttp3.Call localVarCall = healthChecksPatchHealthCheckValidateBeforeCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Health Check (asynchronously)
     * Patch a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksPatchHealthCheckAsync(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksPatchHealthCheckValidateBeforeCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthChecksUpdateHealthCheck
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksUpdateHealthCheckCall(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthchecksQueryHealthcheck;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/healthchecks/{healthcheck_id}"
            .replace("{" + "healthcheck_id" + "}", localVarApiClient.escapeString(healthcheckId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthChecksUpdateHealthCheckValidateBeforeCall(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'healthcheckId' is set
        if (healthcheckId == null) {
            throw new ApiException("Missing the required parameter 'healthcheckId' when calling healthChecksUpdateHealthCheck(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling healthChecksUpdateHealthCheck(Async)");
        }

        // verify the required parameter 'healthchecksQueryHealthcheck' is set
        if (healthchecksQueryHealthcheck == null) {
            throw new ApiException("Missing the required parameter 'healthchecksQueryHealthcheck' when calling healthChecksUpdateHealthCheck(Async)");
        }

        return healthChecksUpdateHealthCheckCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, _callback);

    }

    /**
     * Update Health Check
     * Update a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return HealthchecksSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public HealthchecksSingleResponse healthChecksUpdateHealthCheck(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        ApiResponse<HealthchecksSingleResponse> localVarResp = healthChecksUpdateHealthCheckWithHttpInfo(healthcheckId, zoneId, healthchecksQueryHealthcheck);
        return localVarResp.getData();
    }

    /**
     * Update Health Check
     * Update a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @return ApiResponse&lt;HealthchecksSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthchecksSingleResponse> healthChecksUpdateHealthCheckWithHttpInfo(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck) throws ApiException {
        okhttp3.Call localVarCall = healthChecksUpdateHealthCheckValidateBeforeCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, null);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Health Check (asynchronously)
     * Update a configured health check.
     * @param healthcheckId  (required)
     * @param zoneId  (required)
     * @param healthchecksQueryHealthcheck  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Health Check response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Health Check response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthChecksUpdateHealthCheckAsync(String healthcheckId, String zoneId, HealthchecksQueryHealthcheck healthchecksQueryHealthcheck, final ApiCallback<HealthchecksSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthChecksUpdateHealthCheckValidateBeforeCall(healthcheckId, zoneId, healthchecksQueryHealthcheck, _callback);
        Type localVarReturnType = new TypeToken<HealthchecksSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
