/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloudflare.sdk.models.WorkerDeploymentsCreateDeployment4XXResponse;
import cloudflare.sdk.models.WorkerDeploymentsListDeployments4XXResponse;
import cloudflare.sdk.models.WorkersDeploymentsCreateBody;
import cloudflare.sdk.models.WorkersSchemasDeploymentsListResponse;
import cloudflare.sdk.models.WorkersSchemasDeploymentsSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerDeploymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkerDeploymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerDeploymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workerDeploymentsCreateDeployment
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param workersDeploymentsCreateBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Deployment response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Deployment response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDeploymentsCreateDeploymentCall(String scriptName, String accountId, WorkersDeploymentsCreateBody workersDeploymentsCreateBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersDeploymentsCreateBody;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/deployments"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDeploymentsCreateDeploymentValidateBeforeCall(String scriptName, String accountId, WorkersDeploymentsCreateBody workersDeploymentsCreateBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerDeploymentsCreateDeployment(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDeploymentsCreateDeployment(Async)");
        }

        // verify the required parameter 'workersDeploymentsCreateBody' is set
        if (workersDeploymentsCreateBody == null) {
            throw new ApiException("Missing the required parameter 'workersDeploymentsCreateBody' when calling workerDeploymentsCreateDeployment(Async)");
        }

        return workerDeploymentsCreateDeploymentCall(scriptName, accountId, workersDeploymentsCreateBody, _callback);

    }

    /**
     * Create Deployment
     * Deployments configure how [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions) are deployed to traffic. A deployment can consist of one or two versions of a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param workersDeploymentsCreateBody  (required)
     * @return WorkersSchemasDeploymentsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Deployment response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Deployment response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersSchemasDeploymentsSingleResponse workerDeploymentsCreateDeployment(String scriptName, String accountId, WorkersDeploymentsCreateBody workersDeploymentsCreateBody) throws ApiException {
        ApiResponse<WorkersSchemasDeploymentsSingleResponse> localVarResp = workerDeploymentsCreateDeploymentWithHttpInfo(scriptName, accountId, workersDeploymentsCreateBody);
        return localVarResp.getData();
    }

    /**
     * Create Deployment
     * Deployments configure how [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions) are deployed to traffic. A deployment can consist of one or two versions of a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param workersDeploymentsCreateBody  (required)
     * @return ApiResponse&lt;WorkersSchemasDeploymentsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Deployment response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Deployment response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersSchemasDeploymentsSingleResponse> workerDeploymentsCreateDeploymentWithHttpInfo(String scriptName, String accountId, WorkersDeploymentsCreateBody workersDeploymentsCreateBody) throws ApiException {
        okhttp3.Call localVarCall = workerDeploymentsCreateDeploymentValidateBeforeCall(scriptName, accountId, workersDeploymentsCreateBody, null);
        Type localVarReturnType = new TypeToken<WorkersSchemasDeploymentsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Deployment (asynchronously)
     * Deployments configure how [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions) are deployed to traffic. A deployment can consist of one or two versions of a Worker.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param workersDeploymentsCreateBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Deployment response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Deployment response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDeploymentsCreateDeploymentAsync(String scriptName, String accountId, WorkersDeploymentsCreateBody workersDeploymentsCreateBody, final ApiCallback<WorkersSchemasDeploymentsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDeploymentsCreateDeploymentValidateBeforeCall(scriptName, accountId, workersDeploymentsCreateBody, _callback);
        Type localVarReturnType = new TypeToken<WorkersSchemasDeploymentsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workerDeploymentsListDeployments
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDeploymentsListDeploymentsCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/workers/scripts/{script_name}/deployments"
            .replace("{" + "script_name" + "}", localVarApiClient.escapeString(scriptName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workerDeploymentsListDeploymentsValidateBeforeCall(String scriptName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerDeploymentsListDeployments(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workerDeploymentsListDeployments(Async)");
        }

        return workerDeploymentsListDeploymentsCall(scriptName, accountId, _callback);

    }

    /**
     * List Deployments
     * List of Worker Deployments. The first deployment in the list is the latest deployment actively serving traffic.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return WorkersSchemasDeploymentsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     */
    public WorkersSchemasDeploymentsListResponse workerDeploymentsListDeployments(String scriptName, String accountId) throws ApiException {
        ApiResponse<WorkersSchemasDeploymentsListResponse> localVarResp = workerDeploymentsListDeploymentsWithHttpInfo(scriptName, accountId);
        return localVarResp.getData();
    }

    /**
     * List Deployments
     * List of Worker Deployments. The first deployment in the list is the latest deployment actively serving traffic.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;WorkersSchemasDeploymentsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersSchemasDeploymentsListResponse> workerDeploymentsListDeploymentsWithHttpInfo(String scriptName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = workerDeploymentsListDeploymentsValidateBeforeCall(scriptName, accountId, null);
        Type localVarReturnType = new TypeToken<WorkersSchemasDeploymentsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Deployments (asynchronously)
     * List of Worker Deployments. The first deployment in the list is the latest deployment actively serving traffic.
     * @param scriptName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Deployments response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Deployments response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workerDeploymentsListDeploymentsAsync(String scriptName, String accountId, final ApiCallback<WorkersSchemasDeploymentsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workerDeploymentsListDeploymentsValidateBeforeCall(scriptName, accountId, _callback);
        Type localVarReturnType = new TypeToken<WorkersSchemasDeploymentsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
