/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiCallback;
import cloudflare.ApiClient;
import cloudflare.ApiException;
import cloudflare.ApiResponse;
import cloudflare.Configuration;
import cloudflare.Pair;
import cloudflare.ProgressRequestBody;
import cloudflare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cloudflare.sdk.models.FirewallOverrideResponseCollection;
import cloudflare.sdk.models.FirewallOverrideResponseSingle;
import cloudflare.sdk.models.WafOverridesCreateAWafOverride4XXResponse;
import cloudflare.sdk.models.WafOverridesDeleteAWafOverride200Response;
import cloudflare.sdk.models.WafOverridesDeleteAWafOverride4XXResponse;
import cloudflare.sdk.models.WafOverridesListWafOverrides4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WafOverridesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WafOverridesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WafOverridesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wafOverridesCreateAWafOverride
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesCreateAWafOverrideCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/overrides"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafOverridesCreateAWafOverrideValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafOverridesCreateAWafOverride(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling wafOverridesCreateAWafOverride(Async)");
        }

        return wafOverridesCreateAWafOverrideCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create a WAF override
     * Creates a URI-based WAF override for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallOverrideResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallOverrideResponseSingle wafOverridesCreateAWafOverride(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallOverrideResponseSingle> localVarResp = wafOverridesCreateAWafOverrideWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create a WAF override
     * Creates a URI-based WAF override for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallOverrideResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallOverrideResponseSingle> wafOverridesCreateAWafOverrideWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = wafOverridesCreateAWafOverrideValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a WAF override (asynchronously)
     * Creates a URI-based WAF override for a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesCreateAWafOverrideAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallOverrideResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafOverridesCreateAWafOverrideValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafOverridesDeleteAWafOverride
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesDeleteAWafOverrideCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/overrides/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafOverridesDeleteAWafOverrideValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wafOverridesDeleteAWafOverride(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafOverridesDeleteAWafOverride(Async)");
        }

        return wafOverridesDeleteAWafOverrideCall(id, zoneIdentifier, _callback);

    }

    /**
     * Delete a WAF override
     * Deletes an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return WafOverridesDeleteAWafOverride200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public WafOverridesDeleteAWafOverride200Response wafOverridesDeleteAWafOverride(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<WafOverridesDeleteAWafOverride200Response> localVarResp = wafOverridesDeleteAWafOverrideWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a WAF override
     * Deletes an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WafOverridesDeleteAWafOverride200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<WafOverridesDeleteAWafOverride200Response> wafOverridesDeleteAWafOverrideWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = wafOverridesDeleteAWafOverrideValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<WafOverridesDeleteAWafOverride200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a WAF override (asynchronously)
     * Deletes an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesDeleteAWafOverrideAsync(String id, String zoneIdentifier, final ApiCallback<WafOverridesDeleteAWafOverride200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafOverridesDeleteAWafOverrideValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<WafOverridesDeleteAWafOverride200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafOverridesGetAWafOverride
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesGetAWafOverrideCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/overrides/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafOverridesGetAWafOverrideValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wafOverridesGetAWafOverride(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafOverridesGetAWafOverride(Async)");
        }

        return wafOverridesGetAWafOverrideCall(id, zoneIdentifier, _callback);

    }

    /**
     * Get a WAF override
     * Fetches the details of a URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallOverrideResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallOverrideResponseSingle wafOverridesGetAWafOverride(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallOverrideResponseSingle> localVarResp = wafOverridesGetAWafOverrideWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a WAF override
     * Fetches the details of a URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallOverrideResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallOverrideResponseSingle> wafOverridesGetAWafOverrideWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = wafOverridesGetAWafOverrideValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a WAF override (asynchronously)
     * Fetches the details of a URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesGetAWafOverrideAsync(String id, String zoneIdentifier, final ApiCallback<FirewallOverrideResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafOverridesGetAWafOverrideValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafOverridesListWafOverrides
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF overrides response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF overrides response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesListWafOverridesCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/overrides"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafOverridesListWafOverridesValidateBeforeCall(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafOverridesListWafOverrides(Async)");
        }

        return wafOverridesListWafOverridesCall(zoneIdentifier, page, perPage, _callback);

    }

    /**
     * List WAF overrides
     * Fetches the URI-based WAF overrides in a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @return FirewallOverrideResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF overrides response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF overrides response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallOverrideResponseCollection wafOverridesListWafOverrides(String zoneIdentifier, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<FirewallOverrideResponseCollection> localVarResp = wafOverridesListWafOverridesWithHttpInfo(zoneIdentifier, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List WAF overrides
     * Fetches the URI-based WAF overrides in a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @return ApiResponse&lt;FirewallOverrideResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF overrides response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF overrides response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallOverrideResponseCollection> wafOverridesListWafOverridesWithHttpInfo(String zoneIdentifier, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = wafOverridesListWafOverridesValidateBeforeCall(zoneIdentifier, page, perPage, null);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List WAF overrides (asynchronously)
     * Fetches the URI-based WAF overrides in a zone.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List WAF overrides response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List WAF overrides response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesListWafOverridesAsync(String zoneIdentifier, BigDecimal page, BigDecimal perPage, final ApiCallback<FirewallOverrideResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafOverridesListWafOverridesValidateBeforeCall(zoneIdentifier, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wafOverridesUpdateWafOverride
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesUpdateWafOverrideCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/overrides/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call wafOverridesUpdateWafOverrideValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wafOverridesUpdateWafOverride(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafOverridesUpdateWafOverride(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling wafOverridesUpdateWafOverride(Async)");
        }

        return wafOverridesUpdateWafOverrideCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update WAF override
     * Updates an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallOverrideResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallOverrideResponseSingle wafOverridesUpdateWafOverride(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallOverrideResponseSingle> localVarResp = wafOverridesUpdateWafOverrideWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update WAF override
     * Updates an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallOverrideResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallOverrideResponseSingle> wafOverridesUpdateWafOverrideWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = wafOverridesUpdateWafOverrideValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update WAF override (asynchronously)
     * Updates an existing URI-based WAF override.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update WAF override response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update WAF override response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call wafOverridesUpdateWafOverrideAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallOverrideResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = wafOverridesUpdateWafOverrideValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallOverrideResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
