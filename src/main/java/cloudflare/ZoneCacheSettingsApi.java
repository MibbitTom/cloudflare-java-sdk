/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ZoneCacheSettingsChangeCacheReserveSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeVariantsSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsDeleteVariantsSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsDeleteVariantsSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveClear200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveClear4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetOriginMaxHttpVersionSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetRegionalTieredCacheSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetRegionalTieredCacheSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetVariantsSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetVariantsSetting4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneCacheSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneCacheSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneCacheSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneCacheSettingsChangeCacheReserveSetting
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeCacheReserveSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeCacheReserveSettingCall(String zoneId, ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneCacheSettingsChangeCacheReserveSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/cache_reserve"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsChangeCacheReserveSettingValidateBeforeCall(String zoneId, ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsChangeCacheReserveSetting(Async)");
        }

        // verify the required parameter 'zoneCacheSettingsChangeCacheReserveSettingRequest' is set
        if (zoneCacheSettingsChangeCacheReserveSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneCacheSettingsChangeCacheReserveSettingRequest' when calling zoneCacheSettingsChangeCacheReserveSetting(Async)");
        }

        return zoneCacheSettingsChangeCacheReserveSettingCall(zoneId, zoneCacheSettingsChangeCacheReserveSettingRequest, _callback);

    }

    /**
     * Change Cache Reserve setting
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeCacheReserveSettingRequest  (required)
     * @return ZoneCacheSettingsGetCacheReserveSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetCacheReserveSetting200Response zoneCacheSettingsChangeCacheReserveSetting(String zoneId, ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetCacheReserveSetting200Response> localVarResp = zoneCacheSettingsChangeCacheReserveSettingWithHttpInfo(zoneId, zoneCacheSettingsChangeCacheReserveSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Cache Reserve setting
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeCacheReserveSettingRequest  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetCacheReserveSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetCacheReserveSetting200Response> zoneCacheSettingsChangeCacheReserveSettingWithHttpInfo(String zoneId, ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsChangeCacheReserveSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeCacheReserveSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Cache Reserve setting (asynchronously)
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeCacheReserveSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeCacheReserveSettingAsync(String zoneId, ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest, final ApiCallback<ZoneCacheSettingsGetCacheReserveSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsChangeCacheReserveSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeCacheReserveSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsChangeOriginMaxHttpVersionSetting
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Origin Max HTTP Version Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeOriginMaxHttpVersionSettingCall(String zoneId, ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/origin_max_http_version"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsChangeOriginMaxHttpVersionSettingValidateBeforeCall(String zoneId, ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsChangeOriginMaxHttpVersionSetting(Async)");
        }

        // verify the required parameter 'zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest' is set
        if (zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest' when calling zoneCacheSettingsChangeOriginMaxHttpVersionSetting(Async)");
        }

        return zoneCacheSettingsChangeOriginMaxHttpVersionSettingCall(zoneId, zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, _callback);

    }

    /**
     * Change Origin Max HTTP Version Setting
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest  (required)
     * @return ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Origin Max HTTP Version Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response zoneCacheSettingsChangeOriginMaxHttpVersionSetting(String zoneId, ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> localVarResp = zoneCacheSettingsChangeOriginMaxHttpVersionSettingWithHttpInfo(zoneId, zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Origin Max HTTP Version Setting
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Origin Max HTTP Version Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> zoneCacheSettingsChangeOriginMaxHttpVersionSettingWithHttpInfo(String zoneId, ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsChangeOriginMaxHttpVersionSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Origin Max HTTP Version Setting (asynchronously)
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Origin Max HTTP Version Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeOriginMaxHttpVersionSettingAsync(String zoneId, ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, final ApiCallback<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsChangeOriginMaxHttpVersionSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsChangeRegionalTieredCacheSetting
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeRegionalTieredCacheSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeRegionalTieredCacheSettingCall(String zoneId, ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneCacheSettingsChangeRegionalTieredCacheSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/regional_tiered_cache"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsChangeRegionalTieredCacheSettingValidateBeforeCall(String zoneId, ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsChangeRegionalTieredCacheSetting(Async)");
        }

        // verify the required parameter 'zoneCacheSettingsChangeRegionalTieredCacheSettingRequest' is set
        if (zoneCacheSettingsChangeRegionalTieredCacheSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneCacheSettingsChangeRegionalTieredCacheSettingRequest' when calling zoneCacheSettingsChangeRegionalTieredCacheSetting(Async)");
        }

        return zoneCacheSettingsChangeRegionalTieredCacheSettingCall(zoneId, zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, _callback);

    }

    /**
     * Change Regional Tiered Cache setting
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeRegionalTieredCacheSettingRequest  (required)
     * @return ZoneCacheSettingsGetRegionalTieredCacheSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetRegionalTieredCacheSetting200Response zoneCacheSettingsChangeRegionalTieredCacheSetting(String zoneId, ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> localVarResp = zoneCacheSettingsChangeRegionalTieredCacheSettingWithHttpInfo(zoneId, zoneCacheSettingsChangeRegionalTieredCacheSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Regional Tiered Cache setting
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeRegionalTieredCacheSettingRequest  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetRegionalTieredCacheSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> zoneCacheSettingsChangeRegionalTieredCacheSettingWithHttpInfo(String zoneId, ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsChangeRegionalTieredCacheSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Regional Tiered Cache setting (asynchronously)
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeRegionalTieredCacheSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeRegionalTieredCacheSettingAsync(String zoneId, ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, final ApiCallback<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsChangeRegionalTieredCacheSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeRegionalTieredCacheSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsChangeVariantsSetting
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeVariantsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeVariantsSettingCall(String zoneId, ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneCacheSettingsChangeVariantsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/variants"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsChangeVariantsSettingValidateBeforeCall(String zoneId, ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsChangeVariantsSetting(Async)");
        }

        // verify the required parameter 'zoneCacheSettingsChangeVariantsSettingRequest' is set
        if (zoneCacheSettingsChangeVariantsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneCacheSettingsChangeVariantsSettingRequest' when calling zoneCacheSettingsChangeVariantsSetting(Async)");
        }

        return zoneCacheSettingsChangeVariantsSettingCall(zoneId, zoneCacheSettingsChangeVariantsSettingRequest, _callback);

    }

    /**
     * Change variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeVariantsSettingRequest  (required)
     * @return ZoneCacheSettingsGetVariantsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetVariantsSetting200Response zoneCacheSettingsChangeVariantsSetting(String zoneId, ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetVariantsSetting200Response> localVarResp = zoneCacheSettingsChangeVariantsSettingWithHttpInfo(zoneId, zoneCacheSettingsChangeVariantsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeVariantsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetVariantsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetVariantsSetting200Response> zoneCacheSettingsChangeVariantsSettingWithHttpInfo(String zoneId, ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsChangeVariantsSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeVariantsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetVariantsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change variants setting (asynchronously)
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @param zoneCacheSettingsChangeVariantsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsChangeVariantsSettingAsync(String zoneId, ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest, final ApiCallback<ZoneCacheSettingsGetVariantsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsChangeVariantsSettingValidateBeforeCall(zoneId, zoneCacheSettingsChangeVariantsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetVariantsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsDeleteVariantsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsDeleteVariantsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/variants"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsDeleteVariantsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsDeleteVariantsSetting(Async)");
        }

        return zoneCacheSettingsDeleteVariantsSettingCall(zoneId, _callback);

    }

    /**
     * Delete variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsDeleteVariantsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsDeleteVariantsSetting200Response zoneCacheSettingsDeleteVariantsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsDeleteVariantsSetting200Response> localVarResp = zoneCacheSettingsDeleteVariantsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsDeleteVariantsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsDeleteVariantsSetting200Response> zoneCacheSettingsDeleteVariantsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsDeleteVariantsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsDeleteVariantsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete variants setting (asynchronously)
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsDeleteVariantsSettingAsync(String zoneId, final ApiCallback<ZoneCacheSettingsDeleteVariantsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsDeleteVariantsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsDeleteVariantsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsGetCacheReserveClear
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetCacheReserveClearCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/cache_reserve_clear"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsGetCacheReserveClearValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsGetCacheReserveClear(Async)");
        }

        return zoneCacheSettingsGetCacheReserveClearCall(zoneId, _callback);

    }

    /**
     * Get Cache Reserve Clear
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetCacheReserveClear200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetCacheReserveClear200Response zoneCacheSettingsGetCacheReserveClear(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetCacheReserveClear200Response> localVarResp = zoneCacheSettingsGetCacheReserveClearWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Cache Reserve Clear
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetCacheReserveClear200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetCacheReserveClear200Response> zoneCacheSettingsGetCacheReserveClearWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsGetCacheReserveClearValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveClear200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Cache Reserve Clear (asynchronously)
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetCacheReserveClearAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetCacheReserveClear200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsGetCacheReserveClearValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveClear200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsGetCacheReserveSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetCacheReserveSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/cache_reserve"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsGetCacheReserveSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsGetCacheReserveSetting(Async)");
        }

        return zoneCacheSettingsGetCacheReserveSettingCall(zoneId, _callback);

    }

    /**
     * Get Cache Reserve setting
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetCacheReserveSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetCacheReserveSetting200Response zoneCacheSettingsGetCacheReserveSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetCacheReserveSetting200Response> localVarResp = zoneCacheSettingsGetCacheReserveSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Cache Reserve setting
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetCacheReserveSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetCacheReserveSetting200Response> zoneCacheSettingsGetCacheReserveSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsGetCacheReserveSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Cache Reserve setting (asynchronously)
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Reserve setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Reserve setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetCacheReserveSettingAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetCacheReserveSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsGetCacheReserveSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsGetOriginMaxHttpVersionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Origin Max HTTP Version Setting Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetOriginMaxHttpVersionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/origin_max_http_version"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsGetOriginMaxHttpVersionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsGetOriginMaxHttpVersionSetting(Async)");
        }

        return zoneCacheSettingsGetOriginMaxHttpVersionSettingCall(zoneId, _callback);

    }

    /**
     * Get Origin Max HTTP Version Setting
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Origin Max HTTP Version Setting Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response zoneCacheSettingsGetOriginMaxHttpVersionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> localVarResp = zoneCacheSettingsGetOriginMaxHttpVersionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Origin Max HTTP Version Setting
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Origin Max HTTP Version Setting Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> zoneCacheSettingsGetOriginMaxHttpVersionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsGetOriginMaxHttpVersionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Origin Max HTTP Version Setting (asynchronously)
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Origin Max HTTP Version Setting Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Origin Max HTTP Version Setting Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetOriginMaxHttpVersionSettingAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsGetOriginMaxHttpVersionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsGetRegionalTieredCacheSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetRegionalTieredCacheSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/regional_tiered_cache"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsGetRegionalTieredCacheSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsGetRegionalTieredCacheSetting(Async)");
        }

        return zoneCacheSettingsGetRegionalTieredCacheSettingCall(zoneId, _callback);

    }

    /**
     * Get Regional Tiered Cache setting
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetRegionalTieredCacheSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetRegionalTieredCacheSetting200Response zoneCacheSettingsGetRegionalTieredCacheSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> localVarResp = zoneCacheSettingsGetRegionalTieredCacheSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Regional Tiered Cache setting
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetRegionalTieredCacheSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> zoneCacheSettingsGetRegionalTieredCacheSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsGetRegionalTieredCacheSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Regional Tiered Cache setting (asynchronously)
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Regional Tiered Cache setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Regional Tiered Cache setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetRegionalTieredCacheSettingAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsGetRegionalTieredCacheSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetRegionalTieredCacheSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsGetVariantsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetVariantsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/variants"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsGetVariantsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsGetVariantsSetting(Async)");
        }

        return zoneCacheSettingsGetVariantsSettingCall(zoneId, _callback);

    }

    /**
     * Get variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetVariantsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetVariantsSetting200Response zoneCacheSettingsGetVariantsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetVariantsSetting200Response> localVarResp = zoneCacheSettingsGetVariantsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get variants setting
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetVariantsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetVariantsSetting200Response> zoneCacheSettingsGetVariantsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsGetVariantsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetVariantsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get variants setting (asynchronously)
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get variants setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get variants setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsGetVariantsSettingAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetVariantsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsGetVariantsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetVariantsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneCacheSettingsStartCacheReserveClear
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsStartCacheReserveClearCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/cache/cache_reserve_clear"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneCacheSettingsStartCacheReserveClearValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneCacheSettingsStartCacheReserveClear(Async)");
        }

        return zoneCacheSettingsStartCacheReserveClearCall(zoneId, _callback);

    }

    /**
     * Start Cache Reserve Clear
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @return ZoneCacheSettingsGetCacheReserveClear200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public ZoneCacheSettingsGetCacheReserveClear200Response zoneCacheSettingsStartCacheReserveClear(String zoneId) throws ApiException {
        ApiResponse<ZoneCacheSettingsGetCacheReserveClear200Response> localVarResp = zoneCacheSettingsStartCacheReserveClearWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Start Cache Reserve Clear
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneCacheSettingsGetCacheReserveClear200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneCacheSettingsGetCacheReserveClear200Response> zoneCacheSettingsStartCacheReserveClearWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneCacheSettingsStartCacheReserveClearValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveClear200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Cache Reserve Clear (asynchronously)
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start Cache Reserve Clear response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Start Cache Reserve Clear failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneCacheSettingsStartCacheReserveClearAsync(String zoneId, final ApiCallback<ZoneCacheSettingsGetCacheReserveClear200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneCacheSettingsStartCacheReserveClearValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneCacheSettingsGetCacheReserveClear200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
