/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SpeedApiResponseCommonFailure;
import org.openapitools.client.model.ZoneSettingsChange0RttSessionResumptionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAlwaysOnlineSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAlwaysUseHttpsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrotliSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrowserCacheTtlSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrowserCheckSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeCacheLevelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeChallengeTtlSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeCiphersSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeDevelopmentModeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEarlyHintsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEmailObfuscationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEnableErrorPagesOnSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEnableQueryStringSortSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeFontsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeH2PrioritizationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHTTP2SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHTTP3SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHotlinkProtectionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeIPv6SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeImageResizingSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeIpGeolocationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMinifySettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMinimumTlsVersionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMobileRedirectSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeNelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOpportunisticEncryptionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOpportunisticOnionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOrangeToOrangeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePolishSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePrefetchPreloadSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeProxyReadTimeoutSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePseudoIPv4SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeResponseBufferingSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeRocketLoaderSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSecurityHeaderHstsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSecurityLevelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeServerSideExcludeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSslRecommenderSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSslSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTls13SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTlsClientAuthSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTrueClientIpSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebApplicationFirewallWafSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebMirageSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebPSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebSocketsSettingRequest;
import org.openapitools.client.model.ZoneSettingsEditZoneSettingsInfoRequest;
import org.openapitools.client.model.ZoneSettingsGet0RttSessionResumptionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAdvancedDdosSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAlwaysOnlineSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAlwaysUseHttpsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAutomaticHttpsRewritesSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrotliSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrowserCacheTtlSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrowserCheckSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetCacheLevelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetChallengeTtlSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetCiphersSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetDevelopmentModeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEarlyHintsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEmailObfuscationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEnableErrorPagesOnSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEnableQueryStringSortSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetFontsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetH2PrioritizationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetHTTP2Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetHTTP3Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetHotlinkProtectionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetIPv6Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetImageResizingSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetIpGeolocationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMinifySetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMinimumTlsVersionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMirageSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMobileRedirectSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetNelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOpportunisticEncryptionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOpportunisticOnionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOrangeToOrangeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPolishSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPrefetchPreloadSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetProxyReadTimeoutSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPseudoIPv4Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetResponseBufferingSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetRocketLoaderSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSecurityHeaderHstsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSecurityLevelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetServerSideExcludeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSslRecommenderSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSslSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetTls13SettingEnabledForAZone200Response;
import org.openapitools.client.model.ZoneSettingsGetTlsClientAuthSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetTrueClientIpSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebApplicationFirewallWafSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebPSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebSocketsSetting200Response;
import org.openapitools.client.model.ZonesApiResponseCommonFailure;
import org.openapitools.client.model.ZonesZoneSettingsResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneSettingsChange0RttSessionResumptionSetting
     * @param zoneId  (required)
     * @param zoneSettingsChange0RttSessionResumptionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChange0RttSessionResumptionSettingCall(String zoneId, ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChange0RttSessionResumptionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/0rtt"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChange0RttSessionResumptionSettingValidateBeforeCall(String zoneId, ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChange0RttSessionResumptionSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChange0RttSessionResumptionSettingRequest' is set
        if (zoneSettingsChange0RttSessionResumptionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChange0RttSessionResumptionSettingRequest' when calling zoneSettingsChange0RttSessionResumptionSetting(Async)");
        }

        return zoneSettingsChange0RttSessionResumptionSettingCall(zoneId, zoneSettingsChange0RttSessionResumptionSettingRequest, _callback);

    }

    /**
     * Change 0-RTT session resumption setting
     * Changes the 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChange0RttSessionResumptionSettingRequest  (required)
     * @return ZoneSettingsGet0RttSessionResumptionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGet0RttSessionResumptionSetting200Response zoneSettingsChange0RttSessionResumptionSetting(String zoneId, ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGet0RttSessionResumptionSetting200Response> localVarResp = zoneSettingsChange0RttSessionResumptionSettingWithHttpInfo(zoneId, zoneSettingsChange0RttSessionResumptionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change 0-RTT session resumption setting
     * Changes the 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChange0RttSessionResumptionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGet0RttSessionResumptionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGet0RttSessionResumptionSetting200Response> zoneSettingsChange0RttSessionResumptionSettingWithHttpInfo(String zoneId, ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChange0RttSessionResumptionSettingValidateBeforeCall(zoneId, zoneSettingsChange0RttSessionResumptionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGet0RttSessionResumptionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change 0-RTT session resumption setting (asynchronously)
     * Changes the 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChange0RttSessionResumptionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChange0RttSessionResumptionSettingAsync(String zoneId, ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest, final ApiCallback<ZoneSettingsGet0RttSessionResumptionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChange0RttSessionResumptionSettingValidateBeforeCall(zoneId, zoneSettingsChange0RttSessionResumptionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGet0RttSessionResumptionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeAlwaysOnlineSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysOnlineSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAlwaysOnlineSettingCall(String zoneId, ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeAlwaysOnlineSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/always_online"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeAlwaysOnlineSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeAlwaysOnlineSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeAlwaysOnlineSettingRequest' is set
        if (zoneSettingsChangeAlwaysOnlineSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeAlwaysOnlineSettingRequest' when calling zoneSettingsChangeAlwaysOnlineSetting(Async)");
        }

        return zoneSettingsChangeAlwaysOnlineSettingCall(zoneId, zoneSettingsChangeAlwaysOnlineSettingRequest, _callback);

    }

    /**
     * Change Always Online setting
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysOnlineSettingRequest  (required)
     * @return ZoneSettingsGetAlwaysOnlineSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAlwaysOnlineSetting200Response zoneSettingsChangeAlwaysOnlineSetting(String zoneId, ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetAlwaysOnlineSetting200Response> localVarResp = zoneSettingsChangeAlwaysOnlineSettingWithHttpInfo(zoneId, zoneSettingsChangeAlwaysOnlineSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Always Online setting
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysOnlineSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAlwaysOnlineSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAlwaysOnlineSetting200Response> zoneSettingsChangeAlwaysOnlineSettingWithHttpInfo(String zoneId, ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeAlwaysOnlineSettingValidateBeforeCall(zoneId, zoneSettingsChangeAlwaysOnlineSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysOnlineSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Always Online setting (asynchronously)
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysOnlineSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAlwaysOnlineSettingAsync(String zoneId, ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest, final ApiCallback<ZoneSettingsGetAlwaysOnlineSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeAlwaysOnlineSettingValidateBeforeCall(zoneId, zoneSettingsChangeAlwaysOnlineSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysOnlineSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeAlwaysUseHttpsSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysUseHttpsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAlwaysUseHttpsSettingCall(String zoneId, ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeAlwaysUseHttpsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/always_use_https"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeAlwaysUseHttpsSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeAlwaysUseHttpsSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeAlwaysUseHttpsSettingRequest' is set
        if (zoneSettingsChangeAlwaysUseHttpsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeAlwaysUseHttpsSettingRequest' when calling zoneSettingsChangeAlwaysUseHttpsSetting(Async)");
        }

        return zoneSettingsChangeAlwaysUseHttpsSettingCall(zoneId, zoneSettingsChangeAlwaysUseHttpsSettingRequest, _callback);

    }

    /**
     * Change Always Use HTTPS setting
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysUseHttpsSettingRequest  (required)
     * @return ZoneSettingsGetAlwaysUseHttpsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAlwaysUseHttpsSetting200Response zoneSettingsChangeAlwaysUseHttpsSetting(String zoneId, ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetAlwaysUseHttpsSetting200Response> localVarResp = zoneSettingsChangeAlwaysUseHttpsSettingWithHttpInfo(zoneId, zoneSettingsChangeAlwaysUseHttpsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Always Use HTTPS setting
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysUseHttpsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAlwaysUseHttpsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAlwaysUseHttpsSetting200Response> zoneSettingsChangeAlwaysUseHttpsSettingWithHttpInfo(String zoneId, ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeAlwaysUseHttpsSettingValidateBeforeCall(zoneId, zoneSettingsChangeAlwaysUseHttpsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysUseHttpsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Always Use HTTPS setting (asynchronously)
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAlwaysUseHttpsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAlwaysUseHttpsSettingAsync(String zoneId, ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest, final ApiCallback<ZoneSettingsGetAlwaysUseHttpsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeAlwaysUseHttpsSettingValidateBeforeCall(zoneId, zoneSettingsChangeAlwaysUseHttpsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysUseHttpsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeAutomaticHttpsRewritesSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticHttpsRewritesSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAutomaticHttpsRewritesSettingCall(String zoneId, ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeAutomaticHttpsRewritesSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/automatic_https_rewrites"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeAutomaticHttpsRewritesSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeAutomaticHttpsRewritesSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeAutomaticHttpsRewritesSettingRequest' is set
        if (zoneSettingsChangeAutomaticHttpsRewritesSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeAutomaticHttpsRewritesSettingRequest' when calling zoneSettingsChangeAutomaticHttpsRewritesSetting(Async)");
        }

        return zoneSettingsChangeAutomaticHttpsRewritesSettingCall(zoneId, zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, _callback);

    }

    /**
     * Change Automatic HTTPS Rewrites setting
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticHttpsRewritesSettingRequest  (required)
     * @return ZoneSettingsGetAutomaticHttpsRewritesSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAutomaticHttpsRewritesSetting200Response zoneSettingsChangeAutomaticHttpsRewritesSetting(String zoneId, ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> localVarResp = zoneSettingsChangeAutomaticHttpsRewritesSettingWithHttpInfo(zoneId, zoneSettingsChangeAutomaticHttpsRewritesSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Automatic HTTPS Rewrites setting
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticHttpsRewritesSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAutomaticHttpsRewritesSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> zoneSettingsChangeAutomaticHttpsRewritesSettingWithHttpInfo(String zoneId, ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeAutomaticHttpsRewritesSettingValidateBeforeCall(zoneId, zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Automatic HTTPS Rewrites setting (asynchronously)
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticHttpsRewritesSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAutomaticHttpsRewritesSettingAsync(String zoneId, ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, final ApiCallback<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeAutomaticHttpsRewritesSettingValidateBeforeCall(zoneId, zoneSettingsChangeAutomaticHttpsRewritesSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeAutomaticPlatformOptimizationSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAutomaticPlatformOptimizationSettingCall(String zoneId, ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/automatic_platform_optimization"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeAutomaticPlatformOptimizationSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeAutomaticPlatformOptimizationSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest' is set
        if (zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest' when calling zoneSettingsChangeAutomaticPlatformOptimizationSetting(Async)");
        }

        return zoneSettingsChangeAutomaticPlatformOptimizationSettingCall(zoneId, zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, _callback);

    }

    /**
     * Change Automatic Platform Optimization for WordPress setting
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest  (required)
     * @return ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response zoneSettingsChangeAutomaticPlatformOptimizationSetting(String zoneId, ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> localVarResp = zoneSettingsChangeAutomaticPlatformOptimizationSettingWithHttpInfo(zoneId, zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Automatic Platform Optimization for WordPress setting
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> zoneSettingsChangeAutomaticPlatformOptimizationSettingWithHttpInfo(String zoneId, ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeAutomaticPlatformOptimizationSettingValidateBeforeCall(zoneId, zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Automatic Platform Optimization for WordPress setting (asynchronously)
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeAutomaticPlatformOptimizationSettingAsync(String zoneId, ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, final ApiCallback<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeAutomaticPlatformOptimizationSettingValidateBeforeCall(zoneId, zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeBrotliSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrotliSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrotliSettingCall(String zoneId, ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeBrotliSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/brotli"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeBrotliSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeBrotliSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeBrotliSettingRequest' is set
        if (zoneSettingsChangeBrotliSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeBrotliSettingRequest' when calling zoneSettingsChangeBrotliSetting(Async)");
        }

        return zoneSettingsChangeBrotliSettingCall(zoneId, zoneSettingsChangeBrotliSettingRequest, _callback);

    }

    /**
     * Change Brotli setting
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrotliSettingRequest  (required)
     * @return ZoneSettingsGetBrotliSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrotliSetting200Response zoneSettingsChangeBrotliSetting(String zoneId, ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetBrotliSetting200Response> localVarResp = zoneSettingsChangeBrotliSettingWithHttpInfo(zoneId, zoneSettingsChangeBrotliSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Brotli setting
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrotliSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrotliSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrotliSetting200Response> zoneSettingsChangeBrotliSettingWithHttpInfo(String zoneId, ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeBrotliSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrotliSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrotliSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Brotli setting (asynchronously)
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrotliSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrotliSettingAsync(String zoneId, ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest, final ApiCallback<ZoneSettingsGetBrotliSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeBrotliSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrotliSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrotliSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeBrowserCacheTtlSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCacheTtlSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrowserCacheTtlSettingCall(String zoneId, ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeBrowserCacheTtlSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/browser_cache_ttl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeBrowserCacheTtlSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeBrowserCacheTtlSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeBrowserCacheTtlSettingRequest' is set
        if (zoneSettingsChangeBrowserCacheTtlSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeBrowserCacheTtlSettingRequest' when calling zoneSettingsChangeBrowserCacheTtlSetting(Async)");
        }

        return zoneSettingsChangeBrowserCacheTtlSettingCall(zoneId, zoneSettingsChangeBrowserCacheTtlSettingRequest, _callback);

    }

    /**
     * Change Browser Cache TTL setting
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCacheTtlSettingRequest  (required)
     * @return ZoneSettingsGetBrowserCacheTtlSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrowserCacheTtlSetting200Response zoneSettingsChangeBrowserCacheTtlSetting(String zoneId, ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetBrowserCacheTtlSetting200Response> localVarResp = zoneSettingsChangeBrowserCacheTtlSettingWithHttpInfo(zoneId, zoneSettingsChangeBrowserCacheTtlSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Browser Cache TTL setting
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCacheTtlSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrowserCacheTtlSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrowserCacheTtlSetting200Response> zoneSettingsChangeBrowserCacheTtlSettingWithHttpInfo(String zoneId, ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeBrowserCacheTtlSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrowserCacheTtlSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCacheTtlSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Browser Cache TTL setting (asynchronously)
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCacheTtlSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrowserCacheTtlSettingAsync(String zoneId, ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest, final ApiCallback<ZoneSettingsGetBrowserCacheTtlSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeBrowserCacheTtlSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrowserCacheTtlSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCacheTtlSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeBrowserCheckSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCheckSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrowserCheckSettingCall(String zoneId, ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeBrowserCheckSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/browser_check"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeBrowserCheckSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeBrowserCheckSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeBrowserCheckSettingRequest' is set
        if (zoneSettingsChangeBrowserCheckSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeBrowserCheckSettingRequest' when calling zoneSettingsChangeBrowserCheckSetting(Async)");
        }

        return zoneSettingsChangeBrowserCheckSettingCall(zoneId, zoneSettingsChangeBrowserCheckSettingRequest, _callback);

    }

    /**
     * Change Browser Check setting
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCheckSettingRequest  (required)
     * @return ZoneSettingsGetBrowserCheckSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrowserCheckSetting200Response zoneSettingsChangeBrowserCheckSetting(String zoneId, ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetBrowserCheckSetting200Response> localVarResp = zoneSettingsChangeBrowserCheckSettingWithHttpInfo(zoneId, zoneSettingsChangeBrowserCheckSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Browser Check setting
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCheckSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrowserCheckSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrowserCheckSetting200Response> zoneSettingsChangeBrowserCheckSettingWithHttpInfo(String zoneId, ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeBrowserCheckSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrowserCheckSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCheckSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Browser Check setting (asynchronously)
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @param zoneSettingsChangeBrowserCheckSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeBrowserCheckSettingAsync(String zoneId, ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest, final ApiCallback<ZoneSettingsGetBrowserCheckSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeBrowserCheckSettingValidateBeforeCall(zoneId, zoneSettingsChangeBrowserCheckSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCheckSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeCacheLevelSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeCacheLevelSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeCacheLevelSettingCall(String zoneId, ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeCacheLevelSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/cache_level"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeCacheLevelSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeCacheLevelSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeCacheLevelSettingRequest' is set
        if (zoneSettingsChangeCacheLevelSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeCacheLevelSettingRequest' when calling zoneSettingsChangeCacheLevelSetting(Async)");
        }

        return zoneSettingsChangeCacheLevelSettingCall(zoneId, zoneSettingsChangeCacheLevelSettingRequest, _callback);

    }

    /**
     * Change Cache Level setting
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @param zoneSettingsChangeCacheLevelSettingRequest  (required)
     * @return ZoneSettingsGetCacheLevelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetCacheLevelSetting200Response zoneSettingsChangeCacheLevelSetting(String zoneId, ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetCacheLevelSetting200Response> localVarResp = zoneSettingsChangeCacheLevelSettingWithHttpInfo(zoneId, zoneSettingsChangeCacheLevelSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Cache Level setting
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @param zoneSettingsChangeCacheLevelSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetCacheLevelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetCacheLevelSetting200Response> zoneSettingsChangeCacheLevelSettingWithHttpInfo(String zoneId, ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeCacheLevelSettingValidateBeforeCall(zoneId, zoneSettingsChangeCacheLevelSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCacheLevelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Cache Level setting (asynchronously)
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @param zoneSettingsChangeCacheLevelSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeCacheLevelSettingAsync(String zoneId, ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest, final ApiCallback<ZoneSettingsGetCacheLevelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeCacheLevelSettingValidateBeforeCall(zoneId, zoneSettingsChangeCacheLevelSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCacheLevelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeChallengeTtlSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeChallengeTtlSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeChallengeTtlSettingCall(String zoneId, ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeChallengeTtlSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/challenge_ttl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeChallengeTtlSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeChallengeTtlSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeChallengeTtlSettingRequest' is set
        if (zoneSettingsChangeChallengeTtlSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeChallengeTtlSettingRequest' when calling zoneSettingsChangeChallengeTtlSetting(Async)");
        }

        return zoneSettingsChangeChallengeTtlSettingCall(zoneId, zoneSettingsChangeChallengeTtlSettingRequest, _callback);

    }

    /**
     * Change Challenge TTL setting
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @param zoneSettingsChangeChallengeTtlSettingRequest  (required)
     * @return ZoneSettingsGetChallengeTtlSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetChallengeTtlSetting200Response zoneSettingsChangeChallengeTtlSetting(String zoneId, ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetChallengeTtlSetting200Response> localVarResp = zoneSettingsChangeChallengeTtlSettingWithHttpInfo(zoneId, zoneSettingsChangeChallengeTtlSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Challenge TTL setting
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @param zoneSettingsChangeChallengeTtlSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetChallengeTtlSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetChallengeTtlSetting200Response> zoneSettingsChangeChallengeTtlSettingWithHttpInfo(String zoneId, ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeChallengeTtlSettingValidateBeforeCall(zoneId, zoneSettingsChangeChallengeTtlSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetChallengeTtlSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Challenge TTL setting (asynchronously)
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @param zoneSettingsChangeChallengeTtlSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeChallengeTtlSettingAsync(String zoneId, ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest, final ApiCallback<ZoneSettingsGetChallengeTtlSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeChallengeTtlSettingValidateBeforeCall(zoneId, zoneSettingsChangeChallengeTtlSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetChallengeTtlSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeCiphersSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeCiphersSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeCiphersSettingCall(String zoneId, ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeCiphersSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ciphers"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeCiphersSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeCiphersSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeCiphersSettingRequest' is set
        if (zoneSettingsChangeCiphersSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeCiphersSettingRequest' when calling zoneSettingsChangeCiphersSetting(Async)");
        }

        return zoneSettingsChangeCiphersSettingCall(zoneId, zoneSettingsChangeCiphersSettingRequest, _callback);

    }

    /**
     * Change ciphers setting
     * Changes ciphers setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeCiphersSettingRequest  (required)
     * @return ZoneSettingsGetCiphersSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetCiphersSetting200Response zoneSettingsChangeCiphersSetting(String zoneId, ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetCiphersSetting200Response> localVarResp = zoneSettingsChangeCiphersSettingWithHttpInfo(zoneId, zoneSettingsChangeCiphersSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change ciphers setting
     * Changes ciphers setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeCiphersSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetCiphersSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetCiphersSetting200Response> zoneSettingsChangeCiphersSettingWithHttpInfo(String zoneId, ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeCiphersSettingValidateBeforeCall(zoneId, zoneSettingsChangeCiphersSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCiphersSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change ciphers setting (asynchronously)
     * Changes ciphers setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeCiphersSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeCiphersSettingAsync(String zoneId, ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest, final ApiCallback<ZoneSettingsGetCiphersSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeCiphersSettingValidateBeforeCall(zoneId, zoneSettingsChangeCiphersSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCiphersSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeDevelopmentModeSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeDevelopmentModeSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeDevelopmentModeSettingCall(String zoneId, ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeDevelopmentModeSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/development_mode"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeDevelopmentModeSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeDevelopmentModeSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeDevelopmentModeSettingRequest' is set
        if (zoneSettingsChangeDevelopmentModeSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeDevelopmentModeSettingRequest' when calling zoneSettingsChangeDevelopmentModeSetting(Async)");
        }

        return zoneSettingsChangeDevelopmentModeSettingCall(zoneId, zoneSettingsChangeDevelopmentModeSettingRequest, _callback);

    }

    /**
     * Change Development Mode setting
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @param zoneSettingsChangeDevelopmentModeSettingRequest  (required)
     * @return ZoneSettingsGetDevelopmentModeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetDevelopmentModeSetting200Response zoneSettingsChangeDevelopmentModeSetting(String zoneId, ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetDevelopmentModeSetting200Response> localVarResp = zoneSettingsChangeDevelopmentModeSettingWithHttpInfo(zoneId, zoneSettingsChangeDevelopmentModeSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Development Mode setting
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @param zoneSettingsChangeDevelopmentModeSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetDevelopmentModeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetDevelopmentModeSetting200Response> zoneSettingsChangeDevelopmentModeSettingWithHttpInfo(String zoneId, ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeDevelopmentModeSettingValidateBeforeCall(zoneId, zoneSettingsChangeDevelopmentModeSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetDevelopmentModeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Development Mode setting (asynchronously)
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @param zoneSettingsChangeDevelopmentModeSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeDevelopmentModeSettingAsync(String zoneId, ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest, final ApiCallback<ZoneSettingsGetDevelopmentModeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeDevelopmentModeSettingValidateBeforeCall(zoneId, zoneSettingsChangeDevelopmentModeSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetDevelopmentModeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeEarlyHintsSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeEarlyHintsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEarlyHintsSettingCall(String zoneId, ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeEarlyHintsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/early_hints"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeEarlyHintsSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeEarlyHintsSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeEarlyHintsSettingRequest' is set
        if (zoneSettingsChangeEarlyHintsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeEarlyHintsSettingRequest' when calling zoneSettingsChangeEarlyHintsSetting(Async)");
        }

        return zoneSettingsChangeEarlyHintsSettingCall(zoneId, zoneSettingsChangeEarlyHintsSettingRequest, _callback);

    }

    /**
     * Change Early Hints setting
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEarlyHintsSettingRequest  (required)
     * @return ZoneSettingsGetEarlyHintsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEarlyHintsSetting200Response zoneSettingsChangeEarlyHintsSetting(String zoneId, ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetEarlyHintsSetting200Response> localVarResp = zoneSettingsChangeEarlyHintsSettingWithHttpInfo(zoneId, zoneSettingsChangeEarlyHintsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Early Hints setting
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEarlyHintsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEarlyHintsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEarlyHintsSetting200Response> zoneSettingsChangeEarlyHintsSettingWithHttpInfo(String zoneId, ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeEarlyHintsSettingValidateBeforeCall(zoneId, zoneSettingsChangeEarlyHintsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEarlyHintsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Early Hints setting (asynchronously)
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEarlyHintsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEarlyHintsSettingAsync(String zoneId, ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest, final ApiCallback<ZoneSettingsGetEarlyHintsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeEarlyHintsSettingValidateBeforeCall(zoneId, zoneSettingsChangeEarlyHintsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEarlyHintsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeEmailObfuscationSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeEmailObfuscationSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEmailObfuscationSettingCall(String zoneId, ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeEmailObfuscationSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/email_obfuscation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeEmailObfuscationSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeEmailObfuscationSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeEmailObfuscationSettingRequest' is set
        if (zoneSettingsChangeEmailObfuscationSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeEmailObfuscationSettingRequest' when calling zoneSettingsChangeEmailObfuscationSetting(Async)");
        }

        return zoneSettingsChangeEmailObfuscationSettingCall(zoneId, zoneSettingsChangeEmailObfuscationSettingRequest, _callback);

    }

    /**
     * Change Email Obfuscation setting
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeEmailObfuscationSettingRequest  (required)
     * @return ZoneSettingsGetEmailObfuscationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEmailObfuscationSetting200Response zoneSettingsChangeEmailObfuscationSetting(String zoneId, ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetEmailObfuscationSetting200Response> localVarResp = zoneSettingsChangeEmailObfuscationSettingWithHttpInfo(zoneId, zoneSettingsChangeEmailObfuscationSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Email Obfuscation setting
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeEmailObfuscationSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEmailObfuscationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEmailObfuscationSetting200Response> zoneSettingsChangeEmailObfuscationSettingWithHttpInfo(String zoneId, ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeEmailObfuscationSettingValidateBeforeCall(zoneId, zoneSettingsChangeEmailObfuscationSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEmailObfuscationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Email Obfuscation setting (asynchronously)
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeEmailObfuscationSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEmailObfuscationSettingAsync(String zoneId, ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest, final ApiCallback<ZoneSettingsGetEmailObfuscationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeEmailObfuscationSettingValidateBeforeCall(zoneId, zoneSettingsChangeEmailObfuscationSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEmailObfuscationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeEnableErrorPagesOnSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableErrorPagesOnSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEnableErrorPagesOnSettingCall(String zoneId, ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeEnableErrorPagesOnSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/origin_error_page_pass_thru"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeEnableErrorPagesOnSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeEnableErrorPagesOnSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeEnableErrorPagesOnSettingRequest' is set
        if (zoneSettingsChangeEnableErrorPagesOnSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeEnableErrorPagesOnSettingRequest' when calling zoneSettingsChangeEnableErrorPagesOnSetting(Async)");
        }

        return zoneSettingsChangeEnableErrorPagesOnSettingCall(zoneId, zoneSettingsChangeEnableErrorPagesOnSettingRequest, _callback);

    }

    /**
     * Change Enable Error Pages On setting
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableErrorPagesOnSettingRequest  (required)
     * @return ZoneSettingsGetEnableErrorPagesOnSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEnableErrorPagesOnSetting200Response zoneSettingsChangeEnableErrorPagesOnSetting(String zoneId, ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetEnableErrorPagesOnSetting200Response> localVarResp = zoneSettingsChangeEnableErrorPagesOnSettingWithHttpInfo(zoneId, zoneSettingsChangeEnableErrorPagesOnSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Enable Error Pages On setting
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableErrorPagesOnSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEnableErrorPagesOnSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEnableErrorPagesOnSetting200Response> zoneSettingsChangeEnableErrorPagesOnSettingWithHttpInfo(String zoneId, ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeEnableErrorPagesOnSettingValidateBeforeCall(zoneId, zoneSettingsChangeEnableErrorPagesOnSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableErrorPagesOnSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Enable Error Pages On setting (asynchronously)
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableErrorPagesOnSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEnableErrorPagesOnSettingAsync(String zoneId, ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest, final ApiCallback<ZoneSettingsGetEnableErrorPagesOnSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeEnableErrorPagesOnSettingValidateBeforeCall(zoneId, zoneSettingsChangeEnableErrorPagesOnSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableErrorPagesOnSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeEnableQueryStringSortSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableQueryStringSortSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEnableQueryStringSortSettingCall(String zoneId, ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeEnableQueryStringSortSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/sort_query_string_for_cache"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeEnableQueryStringSortSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeEnableQueryStringSortSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeEnableQueryStringSortSettingRequest' is set
        if (zoneSettingsChangeEnableQueryStringSortSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeEnableQueryStringSortSettingRequest' when calling zoneSettingsChangeEnableQueryStringSortSetting(Async)");
        }

        return zoneSettingsChangeEnableQueryStringSortSettingCall(zoneId, zoneSettingsChangeEnableQueryStringSortSettingRequest, _callback);

    }

    /**
     * Change Enable Query String Sort setting
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableQueryStringSortSettingRequest  (required)
     * @return ZoneSettingsGetEnableQueryStringSortSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEnableQueryStringSortSetting200Response zoneSettingsChangeEnableQueryStringSortSetting(String zoneId, ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetEnableQueryStringSortSetting200Response> localVarResp = zoneSettingsChangeEnableQueryStringSortSettingWithHttpInfo(zoneId, zoneSettingsChangeEnableQueryStringSortSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Enable Query String Sort setting
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableQueryStringSortSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEnableQueryStringSortSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEnableQueryStringSortSetting200Response> zoneSettingsChangeEnableQueryStringSortSettingWithHttpInfo(String zoneId, ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeEnableQueryStringSortSettingValidateBeforeCall(zoneId, zoneSettingsChangeEnableQueryStringSortSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableQueryStringSortSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Enable Query String Sort setting (asynchronously)
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeEnableQueryStringSortSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeEnableQueryStringSortSettingAsync(String zoneId, ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest, final ApiCallback<ZoneSettingsGetEnableQueryStringSortSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeEnableQueryStringSortSettingValidateBeforeCall(zoneId, zoneSettingsChangeEnableQueryStringSortSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableQueryStringSortSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeFontsSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeFontsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeFontsSettingCall(String zoneId, ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeFontsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/fonts"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeFontsSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeFontsSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeFontsSettingRequest' is set
        if (zoneSettingsChangeFontsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeFontsSettingRequest' when calling zoneSettingsChangeFontsSetting(Async)");
        }

        return zoneSettingsChangeFontsSettingCall(zoneId, zoneSettingsChangeFontsSettingRequest, _callback);

    }

    /**
     * Change Cloudflare Fonts setting
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeFontsSettingRequest  (required)
     * @return ZoneSettingsGetFontsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetFontsSetting200Response zoneSettingsChangeFontsSetting(String zoneId, ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetFontsSetting200Response> localVarResp = zoneSettingsChangeFontsSettingWithHttpInfo(zoneId, zoneSettingsChangeFontsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Cloudflare Fonts setting
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeFontsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetFontsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetFontsSetting200Response> zoneSettingsChangeFontsSettingWithHttpInfo(String zoneId, ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeFontsSettingValidateBeforeCall(zoneId, zoneSettingsChangeFontsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetFontsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Cloudflare Fonts setting (asynchronously)
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeFontsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeFontsSettingAsync(String zoneId, ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest, final ApiCallback<ZoneSettingsGetFontsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeFontsSettingValidateBeforeCall(zoneId, zoneSettingsChangeFontsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetFontsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeH2PrioritizationSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeH2PrioritizationSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeH2PrioritizationSettingCall(String zoneId, ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeH2PrioritizationSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/h2_prioritization"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeH2PrioritizationSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeH2PrioritizationSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeH2PrioritizationSettingRequest' is set
        if (zoneSettingsChangeH2PrioritizationSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeH2PrioritizationSettingRequest' when calling zoneSettingsChangeH2PrioritizationSetting(Async)");
        }

        return zoneSettingsChangeH2PrioritizationSettingCall(zoneId, zoneSettingsChangeH2PrioritizationSettingRequest, _callback);

    }

    /**
     * Change HTTP/2 Edge Prioritization setting
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeH2PrioritizationSettingRequest  (required)
     * @return ZoneSettingsGetH2PrioritizationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetH2PrioritizationSetting200Response zoneSettingsChangeH2PrioritizationSetting(String zoneId, ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetH2PrioritizationSetting200Response> localVarResp = zoneSettingsChangeH2PrioritizationSettingWithHttpInfo(zoneId, zoneSettingsChangeH2PrioritizationSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change HTTP/2 Edge Prioritization setting
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeH2PrioritizationSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetH2PrioritizationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetH2PrioritizationSetting200Response> zoneSettingsChangeH2PrioritizationSettingWithHttpInfo(String zoneId, ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeH2PrioritizationSettingValidateBeforeCall(zoneId, zoneSettingsChangeH2PrioritizationSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetH2PrioritizationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change HTTP/2 Edge Prioritization setting (asynchronously)
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeH2PrioritizationSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeH2PrioritizationSettingAsync(String zoneId, ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest, final ApiCallback<ZoneSettingsGetH2PrioritizationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeH2PrioritizationSettingValidateBeforeCall(zoneId, zoneSettingsChangeH2PrioritizationSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetH2PrioritizationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeHTTP2Setting
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP2SettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHTTP2SettingCall(String zoneId, ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeHTTP2SettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/http2"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeHTTP2SettingValidateBeforeCall(String zoneId, ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeHTTP2Setting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeHTTP2SettingRequest' is set
        if (zoneSettingsChangeHTTP2SettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeHTTP2SettingRequest' when calling zoneSettingsChangeHTTP2Setting(Async)");
        }

        return zoneSettingsChangeHTTP2SettingCall(zoneId, zoneSettingsChangeHTTP2SettingRequest, _callback);

    }

    /**
     * Change HTTP2 setting
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP2SettingRequest  (required)
     * @return ZoneSettingsGetHTTP2Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHTTP2Setting200Response zoneSettingsChangeHTTP2Setting(String zoneId, ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetHTTP2Setting200Response> localVarResp = zoneSettingsChangeHTTP2SettingWithHttpInfo(zoneId, zoneSettingsChangeHTTP2SettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change HTTP2 setting
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP2SettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHTTP2Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHTTP2Setting200Response> zoneSettingsChangeHTTP2SettingWithHttpInfo(String zoneId, ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeHTTP2SettingValidateBeforeCall(zoneId, zoneSettingsChangeHTTP2SettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP2Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change HTTP2 setting (asynchronously)
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP2SettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHTTP2SettingAsync(String zoneId, ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest, final ApiCallback<ZoneSettingsGetHTTP2Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeHTTP2SettingValidateBeforeCall(zoneId, zoneSettingsChangeHTTP2SettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP2Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeHTTP3Setting
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP3SettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHTTP3SettingCall(String zoneId, ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeHTTP3SettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/http3"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeHTTP3SettingValidateBeforeCall(String zoneId, ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeHTTP3Setting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeHTTP3SettingRequest' is set
        if (zoneSettingsChangeHTTP3SettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeHTTP3SettingRequest' when calling zoneSettingsChangeHTTP3Setting(Async)");
        }

        return zoneSettingsChangeHTTP3SettingCall(zoneId, zoneSettingsChangeHTTP3SettingRequest, _callback);

    }

    /**
     * Change HTTP3 setting
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP3SettingRequest  (required)
     * @return ZoneSettingsGetHTTP3Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHTTP3Setting200Response zoneSettingsChangeHTTP3Setting(String zoneId, ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetHTTP3Setting200Response> localVarResp = zoneSettingsChangeHTTP3SettingWithHttpInfo(zoneId, zoneSettingsChangeHTTP3SettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change HTTP3 setting
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP3SettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHTTP3Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHTTP3Setting200Response> zoneSettingsChangeHTTP3SettingWithHttpInfo(String zoneId, ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeHTTP3SettingValidateBeforeCall(zoneId, zoneSettingsChangeHTTP3SettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP3Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change HTTP3 setting (asynchronously)
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeHTTP3SettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHTTP3SettingAsync(String zoneId, ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest, final ApiCallback<ZoneSettingsGetHTTP3Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeHTTP3SettingValidateBeforeCall(zoneId, zoneSettingsChangeHTTP3SettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP3Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeHotlinkProtectionSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeHotlinkProtectionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHotlinkProtectionSettingCall(String zoneId, ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeHotlinkProtectionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/hotlink_protection"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeHotlinkProtectionSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeHotlinkProtectionSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeHotlinkProtectionSettingRequest' is set
        if (zoneSettingsChangeHotlinkProtectionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeHotlinkProtectionSettingRequest' when calling zoneSettingsChangeHotlinkProtectionSetting(Async)");
        }

        return zoneSettingsChangeHotlinkProtectionSettingCall(zoneId, zoneSettingsChangeHotlinkProtectionSettingRequest, _callback);

    }

    /**
     * Change Hotlink Protection setting
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @param zoneSettingsChangeHotlinkProtectionSettingRequest  (required)
     * @return ZoneSettingsGetHotlinkProtectionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHotlinkProtectionSetting200Response zoneSettingsChangeHotlinkProtectionSetting(String zoneId, ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetHotlinkProtectionSetting200Response> localVarResp = zoneSettingsChangeHotlinkProtectionSettingWithHttpInfo(zoneId, zoneSettingsChangeHotlinkProtectionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Hotlink Protection setting
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @param zoneSettingsChangeHotlinkProtectionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHotlinkProtectionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHotlinkProtectionSetting200Response> zoneSettingsChangeHotlinkProtectionSettingWithHttpInfo(String zoneId, ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeHotlinkProtectionSettingValidateBeforeCall(zoneId, zoneSettingsChangeHotlinkProtectionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHotlinkProtectionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Hotlink Protection setting (asynchronously)
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @param zoneSettingsChangeHotlinkProtectionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeHotlinkProtectionSettingAsync(String zoneId, ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest, final ApiCallback<ZoneSettingsGetHotlinkProtectionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeHotlinkProtectionSettingValidateBeforeCall(zoneId, zoneSettingsChangeHotlinkProtectionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHotlinkProtectionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeIPv6Setting
     * @param zoneId  (required)
     * @param zoneSettingsChangeIPv6SettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeIPv6SettingCall(String zoneId, ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeIPv6SettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ipv6"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeIPv6SettingValidateBeforeCall(String zoneId, ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeIPv6Setting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeIPv6SettingRequest' is set
        if (zoneSettingsChangeIPv6SettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeIPv6SettingRequest' when calling zoneSettingsChangeIPv6Setting(Async)");
        }

        return zoneSettingsChangeIPv6SettingCall(zoneId, zoneSettingsChangeIPv6SettingRequest, _callback);

    }

    /**
     * Change IPv6 setting
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIPv6SettingRequest  (required)
     * @return ZoneSettingsGetIPv6Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetIPv6Setting200Response zoneSettingsChangeIPv6Setting(String zoneId, ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetIPv6Setting200Response> localVarResp = zoneSettingsChangeIPv6SettingWithHttpInfo(zoneId, zoneSettingsChangeIPv6SettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change IPv6 setting
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIPv6SettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetIPv6Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetIPv6Setting200Response> zoneSettingsChangeIPv6SettingWithHttpInfo(String zoneId, ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeIPv6SettingValidateBeforeCall(zoneId, zoneSettingsChangeIPv6SettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIPv6Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change IPv6 setting (asynchronously)
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIPv6SettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeIPv6SettingAsync(String zoneId, ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest, final ApiCallback<ZoneSettingsGetIPv6Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeIPv6SettingValidateBeforeCall(zoneId, zoneSettingsChangeIPv6SettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIPv6Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeImageResizingSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeImageResizingSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeImageResizingSettingCall(String zoneId, ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeImageResizingSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/image_resizing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeImageResizingSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeImageResizingSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeImageResizingSettingRequest' is set
        if (zoneSettingsChangeImageResizingSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeImageResizingSettingRequest' when calling zoneSettingsChangeImageResizingSetting(Async)");
        }

        return zoneSettingsChangeImageResizingSettingCall(zoneId, zoneSettingsChangeImageResizingSettingRequest, _callback);

    }

    /**
     * Change Image Resizing setting
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeImageResizingSettingRequest  (required)
     * @return ZoneSettingsGetImageResizingSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetImageResizingSetting200Response zoneSettingsChangeImageResizingSetting(String zoneId, ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetImageResizingSetting200Response> localVarResp = zoneSettingsChangeImageResizingSettingWithHttpInfo(zoneId, zoneSettingsChangeImageResizingSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Image Resizing setting
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeImageResizingSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetImageResizingSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetImageResizingSetting200Response> zoneSettingsChangeImageResizingSettingWithHttpInfo(String zoneId, ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeImageResizingSettingValidateBeforeCall(zoneId, zoneSettingsChangeImageResizingSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetImageResizingSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Image Resizing setting (asynchronously)
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeImageResizingSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeImageResizingSettingAsync(String zoneId, ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest, final ApiCallback<ZoneSettingsGetImageResizingSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeImageResizingSettingValidateBeforeCall(zoneId, zoneSettingsChangeImageResizingSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetImageResizingSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeIpGeolocationSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeIpGeolocationSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeIpGeolocationSettingCall(String zoneId, ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeIpGeolocationSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ip_geolocation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeIpGeolocationSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeIpGeolocationSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeIpGeolocationSettingRequest' is set
        if (zoneSettingsChangeIpGeolocationSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeIpGeolocationSettingRequest' when calling zoneSettingsChangeIpGeolocationSetting(Async)");
        }

        return zoneSettingsChangeIpGeolocationSettingCall(zoneId, zoneSettingsChangeIpGeolocationSettingRequest, _callback);

    }

    /**
     * Change IP Geolocation setting
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIpGeolocationSettingRequest  (required)
     * @return ZoneSettingsGetIpGeolocationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetIpGeolocationSetting200Response zoneSettingsChangeIpGeolocationSetting(String zoneId, ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetIpGeolocationSetting200Response> localVarResp = zoneSettingsChangeIpGeolocationSettingWithHttpInfo(zoneId, zoneSettingsChangeIpGeolocationSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change IP Geolocation setting
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIpGeolocationSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetIpGeolocationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetIpGeolocationSetting200Response> zoneSettingsChangeIpGeolocationSettingWithHttpInfo(String zoneId, ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeIpGeolocationSettingValidateBeforeCall(zoneId, zoneSettingsChangeIpGeolocationSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIpGeolocationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change IP Geolocation setting (asynchronously)
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @param zoneSettingsChangeIpGeolocationSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeIpGeolocationSettingAsync(String zoneId, ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest, final ApiCallback<ZoneSettingsGetIpGeolocationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeIpGeolocationSettingValidateBeforeCall(zoneId, zoneSettingsChangeIpGeolocationSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIpGeolocationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeMinifySetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinifySettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMinifySettingCall(String zoneId, ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeMinifySettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/minify"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeMinifySettingValidateBeforeCall(String zoneId, ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeMinifySetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeMinifySettingRequest' is set
        if (zoneSettingsChangeMinifySettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeMinifySettingRequest' when calling zoneSettingsChangeMinifySetting(Async)");
        }

        return zoneSettingsChangeMinifySettingCall(zoneId, zoneSettingsChangeMinifySettingRequest, _callback);

    }

    /**
     * Change Minify setting
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinifySettingRequest  (required)
     * @return ZoneSettingsGetMinifySetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMinifySetting200Response zoneSettingsChangeMinifySetting(String zoneId, ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetMinifySetting200Response> localVarResp = zoneSettingsChangeMinifySettingWithHttpInfo(zoneId, zoneSettingsChangeMinifySettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Minify setting
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinifySettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMinifySetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMinifySetting200Response> zoneSettingsChangeMinifySettingWithHttpInfo(String zoneId, ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeMinifySettingValidateBeforeCall(zoneId, zoneSettingsChangeMinifySettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinifySetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Minify setting (asynchronously)
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinifySettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMinifySettingAsync(String zoneId, ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest, final ApiCallback<ZoneSettingsGetMinifySetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeMinifySettingValidateBeforeCall(zoneId, zoneSettingsChangeMinifySettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinifySetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeMinimumTlsVersionSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinimumTlsVersionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMinimumTlsVersionSettingCall(String zoneId, ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeMinimumTlsVersionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/min_tls_version"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeMinimumTlsVersionSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeMinimumTlsVersionSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeMinimumTlsVersionSettingRequest' is set
        if (zoneSettingsChangeMinimumTlsVersionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeMinimumTlsVersionSettingRequest' when calling zoneSettingsChangeMinimumTlsVersionSetting(Async)");
        }

        return zoneSettingsChangeMinimumTlsVersionSettingCall(zoneId, zoneSettingsChangeMinimumTlsVersionSettingRequest, _callback);

    }

    /**
     * Change Minimum TLS Version setting
     * Changes Minimum TLS Version setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinimumTlsVersionSettingRequest  (required)
     * @return ZoneSettingsGetMinimumTlsVersionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMinimumTlsVersionSetting200Response zoneSettingsChangeMinimumTlsVersionSetting(String zoneId, ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetMinimumTlsVersionSetting200Response> localVarResp = zoneSettingsChangeMinimumTlsVersionSettingWithHttpInfo(zoneId, zoneSettingsChangeMinimumTlsVersionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Minimum TLS Version setting
     * Changes Minimum TLS Version setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinimumTlsVersionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMinimumTlsVersionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMinimumTlsVersionSetting200Response> zoneSettingsChangeMinimumTlsVersionSettingWithHttpInfo(String zoneId, ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeMinimumTlsVersionSettingValidateBeforeCall(zoneId, zoneSettingsChangeMinimumTlsVersionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinimumTlsVersionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Minimum TLS Version setting (asynchronously)
     * Changes Minimum TLS Version setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMinimumTlsVersionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMinimumTlsVersionSettingAsync(String zoneId, ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest, final ApiCallback<ZoneSettingsGetMinimumTlsVersionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeMinimumTlsVersionSettingValidateBeforeCall(zoneId, zoneSettingsChangeMinimumTlsVersionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinimumTlsVersionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeMobileRedirectSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeMobileRedirectSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMobileRedirectSettingCall(String zoneId, ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeMobileRedirectSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/mobile_redirect"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeMobileRedirectSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeMobileRedirectSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeMobileRedirectSettingRequest' is set
        if (zoneSettingsChangeMobileRedirectSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeMobileRedirectSettingRequest' when calling zoneSettingsChangeMobileRedirectSetting(Async)");
        }

        return zoneSettingsChangeMobileRedirectSettingCall(zoneId, zoneSettingsChangeMobileRedirectSettingRequest, _callback);

    }

    /**
     * Change Mobile Redirect setting
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMobileRedirectSettingRequest  (required)
     * @return ZoneSettingsGetMobileRedirectSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMobileRedirectSetting200Response zoneSettingsChangeMobileRedirectSetting(String zoneId, ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetMobileRedirectSetting200Response> localVarResp = zoneSettingsChangeMobileRedirectSettingWithHttpInfo(zoneId, zoneSettingsChangeMobileRedirectSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Mobile Redirect setting
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMobileRedirectSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMobileRedirectSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMobileRedirectSetting200Response> zoneSettingsChangeMobileRedirectSettingWithHttpInfo(String zoneId, ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeMobileRedirectSettingValidateBeforeCall(zoneId, zoneSettingsChangeMobileRedirectSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMobileRedirectSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Mobile Redirect setting (asynchronously)
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeMobileRedirectSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeMobileRedirectSettingAsync(String zoneId, ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest, final ApiCallback<ZoneSettingsGetMobileRedirectSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeMobileRedirectSettingValidateBeforeCall(zoneId, zoneSettingsChangeMobileRedirectSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMobileRedirectSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeNelSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeNelSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeNelSettingCall(String zoneId, ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeNelSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/nel"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeNelSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeNelSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeNelSettingRequest' is set
        if (zoneSettingsChangeNelSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeNelSettingRequest' when calling zoneSettingsChangeNelSetting(Async)");
        }

        return zoneSettingsChangeNelSettingCall(zoneId, zoneSettingsChangeNelSettingRequest, _callback);

    }

    /**
     * Change Network Error Logging setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/nel-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeNelSettingRequest  (required)
     * @return ZoneSettingsGetNelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetNelSetting200Response zoneSettingsChangeNelSetting(String zoneId, ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetNelSetting200Response> localVarResp = zoneSettingsChangeNelSettingWithHttpInfo(zoneId, zoneSettingsChangeNelSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Network Error Logging setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/nel-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeNelSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetNelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetNelSetting200Response> zoneSettingsChangeNelSettingWithHttpInfo(String zoneId, ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeNelSettingValidateBeforeCall(zoneId, zoneSettingsChangeNelSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetNelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Network Error Logging setting (asynchronously)
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/nel-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeNelSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeNelSettingAsync(String zoneId, ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest, final ApiCallback<ZoneSettingsGetNelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeNelSettingValidateBeforeCall(zoneId, zoneSettingsChangeNelSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetNelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeOpportunisticEncryptionSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticEncryptionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOpportunisticEncryptionSettingCall(String zoneId, ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeOpportunisticEncryptionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/opportunistic_encryption"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeOpportunisticEncryptionSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeOpportunisticEncryptionSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeOpportunisticEncryptionSettingRequest' is set
        if (zoneSettingsChangeOpportunisticEncryptionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeOpportunisticEncryptionSettingRequest' when calling zoneSettingsChangeOpportunisticEncryptionSetting(Async)");
        }

        return zoneSettingsChangeOpportunisticEncryptionSettingCall(zoneId, zoneSettingsChangeOpportunisticEncryptionSettingRequest, _callback);

    }

    /**
     * Change Opportunistic Encryption setting
     * Changes Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticEncryptionSettingRequest  (required)
     * @return ZoneSettingsGetOpportunisticEncryptionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOpportunisticEncryptionSetting200Response zoneSettingsChangeOpportunisticEncryptionSetting(String zoneId, ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetOpportunisticEncryptionSetting200Response> localVarResp = zoneSettingsChangeOpportunisticEncryptionSettingWithHttpInfo(zoneId, zoneSettingsChangeOpportunisticEncryptionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Opportunistic Encryption setting
     * Changes Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticEncryptionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOpportunisticEncryptionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOpportunisticEncryptionSetting200Response> zoneSettingsChangeOpportunisticEncryptionSettingWithHttpInfo(String zoneId, ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeOpportunisticEncryptionSettingValidateBeforeCall(zoneId, zoneSettingsChangeOpportunisticEncryptionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticEncryptionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Opportunistic Encryption setting (asynchronously)
     * Changes Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticEncryptionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOpportunisticEncryptionSettingAsync(String zoneId, ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest, final ApiCallback<ZoneSettingsGetOpportunisticEncryptionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeOpportunisticEncryptionSettingValidateBeforeCall(zoneId, zoneSettingsChangeOpportunisticEncryptionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticEncryptionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeOpportunisticOnionSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticOnionSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOpportunisticOnionSettingCall(String zoneId, ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeOpportunisticOnionSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/opportunistic_onion"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeOpportunisticOnionSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeOpportunisticOnionSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeOpportunisticOnionSettingRequest' is set
        if (zoneSettingsChangeOpportunisticOnionSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeOpportunisticOnionSettingRequest' when calling zoneSettingsChangeOpportunisticOnionSetting(Async)");
        }

        return zoneSettingsChangeOpportunisticOnionSettingCall(zoneId, zoneSettingsChangeOpportunisticOnionSettingRequest, _callback);

    }

    /**
     * Change Opportunistic Onion setting
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticOnionSettingRequest  (required)
     * @return ZoneSettingsGetOpportunisticOnionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOpportunisticOnionSetting200Response zoneSettingsChangeOpportunisticOnionSetting(String zoneId, ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetOpportunisticOnionSetting200Response> localVarResp = zoneSettingsChangeOpportunisticOnionSettingWithHttpInfo(zoneId, zoneSettingsChangeOpportunisticOnionSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Opportunistic Onion setting
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticOnionSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOpportunisticOnionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOpportunisticOnionSetting200Response> zoneSettingsChangeOpportunisticOnionSettingWithHttpInfo(String zoneId, ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeOpportunisticOnionSettingValidateBeforeCall(zoneId, zoneSettingsChangeOpportunisticOnionSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticOnionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Opportunistic Onion setting (asynchronously)
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @param zoneSettingsChangeOpportunisticOnionSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOpportunisticOnionSettingAsync(String zoneId, ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest, final ApiCallback<ZoneSettingsGetOpportunisticOnionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeOpportunisticOnionSettingValidateBeforeCall(zoneId, zoneSettingsChangeOpportunisticOnionSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticOnionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeOrangeToOrangeSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeOrangeToOrangeSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOrangeToOrangeSettingCall(String zoneId, ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeOrangeToOrangeSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/orange_to_orange"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeOrangeToOrangeSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeOrangeToOrangeSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeOrangeToOrangeSettingRequest' is set
        if (zoneSettingsChangeOrangeToOrangeSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeOrangeToOrangeSettingRequest' when calling zoneSettingsChangeOrangeToOrangeSetting(Async)");
        }

        return zoneSettingsChangeOrangeToOrangeSettingCall(zoneId, zoneSettingsChangeOrangeToOrangeSettingRequest, _callback);

    }

    /**
     * Change Orange to Orange (O2O) setting
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeOrangeToOrangeSettingRequest  (required)
     * @return ZoneSettingsGetOrangeToOrangeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOrangeToOrangeSetting200Response zoneSettingsChangeOrangeToOrangeSetting(String zoneId, ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetOrangeToOrangeSetting200Response> localVarResp = zoneSettingsChangeOrangeToOrangeSettingWithHttpInfo(zoneId, zoneSettingsChangeOrangeToOrangeSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Orange to Orange (O2O) setting
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeOrangeToOrangeSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOrangeToOrangeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOrangeToOrangeSetting200Response> zoneSettingsChangeOrangeToOrangeSettingWithHttpInfo(String zoneId, ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeOrangeToOrangeSettingValidateBeforeCall(zoneId, zoneSettingsChangeOrangeToOrangeSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOrangeToOrangeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Orange to Orange (O2O) setting (asynchronously)
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeOrangeToOrangeSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeOrangeToOrangeSettingAsync(String zoneId, ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest, final ApiCallback<ZoneSettingsGetOrangeToOrangeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeOrangeToOrangeSettingValidateBeforeCall(zoneId, zoneSettingsChangeOrangeToOrangeSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOrangeToOrangeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangePolishSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangePolishSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePolishSettingCall(String zoneId, ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangePolishSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/polish"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangePolishSettingValidateBeforeCall(String zoneId, ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangePolishSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangePolishSettingRequest' is set
        if (zoneSettingsChangePolishSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangePolishSettingRequest' when calling zoneSettingsChangePolishSetting(Async)");
        }

        return zoneSettingsChangePolishSettingCall(zoneId, zoneSettingsChangePolishSettingRequest, _callback);

    }

    /**
     * Change Polish setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangePolishSettingRequest  (required)
     * @return ZoneSettingsGetPolishSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPolishSetting200Response zoneSettingsChangePolishSetting(String zoneId, ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetPolishSetting200Response> localVarResp = zoneSettingsChangePolishSettingWithHttpInfo(zoneId, zoneSettingsChangePolishSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Polish setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangePolishSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPolishSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPolishSetting200Response> zoneSettingsChangePolishSettingWithHttpInfo(String zoneId, ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangePolishSettingValidateBeforeCall(zoneId, zoneSettingsChangePolishSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPolishSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Polish setting (asynchronously)
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangePolishSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePolishSettingAsync(String zoneId, ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest, final ApiCallback<ZoneSettingsGetPolishSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangePolishSettingValidateBeforeCall(zoneId, zoneSettingsChangePolishSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPolishSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangePrefetchPreloadSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangePrefetchPreloadSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePrefetchPreloadSettingCall(String zoneId, ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangePrefetchPreloadSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/prefetch_preload"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangePrefetchPreloadSettingValidateBeforeCall(String zoneId, ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangePrefetchPreloadSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangePrefetchPreloadSettingRequest' is set
        if (zoneSettingsChangePrefetchPreloadSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangePrefetchPreloadSettingRequest' when calling zoneSettingsChangePrefetchPreloadSetting(Async)");
        }

        return zoneSettingsChangePrefetchPreloadSettingCall(zoneId, zoneSettingsChangePrefetchPreloadSettingRequest, _callback);

    }

    /**
     * Change prefetch preload setting
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangePrefetchPreloadSettingRequest  (required)
     * @return ZoneSettingsGetPrefetchPreloadSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPrefetchPreloadSetting200Response zoneSettingsChangePrefetchPreloadSetting(String zoneId, ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetPrefetchPreloadSetting200Response> localVarResp = zoneSettingsChangePrefetchPreloadSettingWithHttpInfo(zoneId, zoneSettingsChangePrefetchPreloadSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change prefetch preload setting
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangePrefetchPreloadSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPrefetchPreloadSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPrefetchPreloadSetting200Response> zoneSettingsChangePrefetchPreloadSettingWithHttpInfo(String zoneId, ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangePrefetchPreloadSettingValidateBeforeCall(zoneId, zoneSettingsChangePrefetchPreloadSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPrefetchPreloadSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change prefetch preload setting (asynchronously)
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangePrefetchPreloadSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePrefetchPreloadSettingAsync(String zoneId, ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest, final ApiCallback<ZoneSettingsGetPrefetchPreloadSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangePrefetchPreloadSettingValidateBeforeCall(zoneId, zoneSettingsChangePrefetchPreloadSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPrefetchPreloadSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeProxyReadTimeoutSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeProxyReadTimeoutSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeProxyReadTimeoutSettingCall(String zoneId, ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeProxyReadTimeoutSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/proxy_read_timeout"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeProxyReadTimeoutSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeProxyReadTimeoutSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeProxyReadTimeoutSettingRequest' is set
        if (zoneSettingsChangeProxyReadTimeoutSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeProxyReadTimeoutSettingRequest' when calling zoneSettingsChangeProxyReadTimeoutSetting(Async)");
        }

        return zoneSettingsChangeProxyReadTimeoutSettingCall(zoneId, zoneSettingsChangeProxyReadTimeoutSettingRequest, _callback);

    }

    /**
     * Change Proxy Read Timeout setting
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeProxyReadTimeoutSettingRequest  (required)
     * @return ZoneSettingsGetProxyReadTimeoutSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetProxyReadTimeoutSetting200Response zoneSettingsChangeProxyReadTimeoutSetting(String zoneId, ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetProxyReadTimeoutSetting200Response> localVarResp = zoneSettingsChangeProxyReadTimeoutSettingWithHttpInfo(zoneId, zoneSettingsChangeProxyReadTimeoutSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Proxy Read Timeout setting
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeProxyReadTimeoutSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetProxyReadTimeoutSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetProxyReadTimeoutSetting200Response> zoneSettingsChangeProxyReadTimeoutSettingWithHttpInfo(String zoneId, ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeProxyReadTimeoutSettingValidateBeforeCall(zoneId, zoneSettingsChangeProxyReadTimeoutSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetProxyReadTimeoutSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Proxy Read Timeout setting (asynchronously)
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeProxyReadTimeoutSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeProxyReadTimeoutSettingAsync(String zoneId, ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest, final ApiCallback<ZoneSettingsGetProxyReadTimeoutSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeProxyReadTimeoutSettingValidateBeforeCall(zoneId, zoneSettingsChangeProxyReadTimeoutSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetProxyReadTimeoutSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangePseudoIPv4Setting
     * @param zoneId  (required)
     * @param zoneSettingsChangePseudoIPv4SettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePseudoIPv4SettingCall(String zoneId, ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangePseudoIPv4SettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/pseudo_ipv4"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangePseudoIPv4SettingValidateBeforeCall(String zoneId, ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangePseudoIPv4Setting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangePseudoIPv4SettingRequest' is set
        if (zoneSettingsChangePseudoIPv4SettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangePseudoIPv4SettingRequest' when calling zoneSettingsChangePseudoIPv4Setting(Async)");
        }

        return zoneSettingsChangePseudoIPv4SettingCall(zoneId, zoneSettingsChangePseudoIPv4SettingRequest, _callback);

    }

    /**
     * Change Pseudo IPv4 setting
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangePseudoIPv4SettingRequest  (required)
     * @return ZoneSettingsGetPseudoIPv4Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPseudoIPv4Setting200Response zoneSettingsChangePseudoIPv4Setting(String zoneId, ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetPseudoIPv4Setting200Response> localVarResp = zoneSettingsChangePseudoIPv4SettingWithHttpInfo(zoneId, zoneSettingsChangePseudoIPv4SettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Pseudo IPv4 setting
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangePseudoIPv4SettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPseudoIPv4Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPseudoIPv4Setting200Response> zoneSettingsChangePseudoIPv4SettingWithHttpInfo(String zoneId, ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangePseudoIPv4SettingValidateBeforeCall(zoneId, zoneSettingsChangePseudoIPv4SettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPseudoIPv4Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Pseudo IPv4 setting (asynchronously)
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangePseudoIPv4SettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangePseudoIPv4SettingAsync(String zoneId, ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest, final ApiCallback<ZoneSettingsGetPseudoIPv4Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangePseudoIPv4SettingValidateBeforeCall(zoneId, zoneSettingsChangePseudoIPv4SettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPseudoIPv4Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeResponseBufferingSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeResponseBufferingSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeResponseBufferingSettingCall(String zoneId, ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeResponseBufferingSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/response_buffering"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeResponseBufferingSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeResponseBufferingSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeResponseBufferingSettingRequest' is set
        if (zoneSettingsChangeResponseBufferingSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeResponseBufferingSettingRequest' when calling zoneSettingsChangeResponseBufferingSetting(Async)");
        }

        return zoneSettingsChangeResponseBufferingSettingCall(zoneId, zoneSettingsChangeResponseBufferingSettingRequest, _callback);

    }

    /**
     * Change Response Buffering setting
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeResponseBufferingSettingRequest  (required)
     * @return ZoneSettingsGetResponseBufferingSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetResponseBufferingSetting200Response zoneSettingsChangeResponseBufferingSetting(String zoneId, ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetResponseBufferingSetting200Response> localVarResp = zoneSettingsChangeResponseBufferingSettingWithHttpInfo(zoneId, zoneSettingsChangeResponseBufferingSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Response Buffering setting
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeResponseBufferingSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetResponseBufferingSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetResponseBufferingSetting200Response> zoneSettingsChangeResponseBufferingSettingWithHttpInfo(String zoneId, ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeResponseBufferingSettingValidateBeforeCall(zoneId, zoneSettingsChangeResponseBufferingSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetResponseBufferingSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Response Buffering setting (asynchronously)
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeResponseBufferingSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeResponseBufferingSettingAsync(String zoneId, ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest, final ApiCallback<ZoneSettingsGetResponseBufferingSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeResponseBufferingSettingValidateBeforeCall(zoneId, zoneSettingsChangeResponseBufferingSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetResponseBufferingSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeRocketLoaderSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeRocketLoaderSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeRocketLoaderSettingCall(String zoneId, ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeRocketLoaderSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/rocket_loader"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeRocketLoaderSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeRocketLoaderSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeRocketLoaderSettingRequest' is set
        if (zoneSettingsChangeRocketLoaderSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeRocketLoaderSettingRequest' when calling zoneSettingsChangeRocketLoaderSetting(Async)");
        }

        return zoneSettingsChangeRocketLoaderSettingCall(zoneId, zoneSettingsChangeRocketLoaderSettingRequest, _callback);

    }

    /**
     * Change Rocket Loader setting
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeRocketLoaderSettingRequest  (required)
     * @return ZoneSettingsGetRocketLoaderSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetRocketLoaderSetting200Response zoneSettingsChangeRocketLoaderSetting(String zoneId, ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetRocketLoaderSetting200Response> localVarResp = zoneSettingsChangeRocketLoaderSettingWithHttpInfo(zoneId, zoneSettingsChangeRocketLoaderSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Rocket Loader setting
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeRocketLoaderSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetRocketLoaderSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetRocketLoaderSetting200Response> zoneSettingsChangeRocketLoaderSettingWithHttpInfo(String zoneId, ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeRocketLoaderSettingValidateBeforeCall(zoneId, zoneSettingsChangeRocketLoaderSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetRocketLoaderSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Rocket Loader setting (asynchronously)
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeRocketLoaderSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeRocketLoaderSettingAsync(String zoneId, ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest, final ApiCallback<ZoneSettingsGetRocketLoaderSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeRocketLoaderSettingValidateBeforeCall(zoneId, zoneSettingsChangeRocketLoaderSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetRocketLoaderSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeSecurityHeaderHstsSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityHeaderHstsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSecurityHeaderHstsSettingCall(String zoneId, ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeSecurityHeaderHstsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/security_header"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeSecurityHeaderHstsSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeSecurityHeaderHstsSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeSecurityHeaderHstsSettingRequest' is set
        if (zoneSettingsChangeSecurityHeaderHstsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeSecurityHeaderHstsSettingRequest' when calling zoneSettingsChangeSecurityHeaderHstsSetting(Async)");
        }

        return zoneSettingsChangeSecurityHeaderHstsSettingCall(zoneId, zoneSettingsChangeSecurityHeaderHstsSettingRequest, _callback);

    }

    /**
     * Change Security Header (HSTS) setting
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityHeaderHstsSettingRequest  (required)
     * @return ZoneSettingsGetSecurityHeaderHstsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSecurityHeaderHstsSetting200Response zoneSettingsChangeSecurityHeaderHstsSetting(String zoneId, ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetSecurityHeaderHstsSetting200Response> localVarResp = zoneSettingsChangeSecurityHeaderHstsSettingWithHttpInfo(zoneId, zoneSettingsChangeSecurityHeaderHstsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Security Header (HSTS) setting
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityHeaderHstsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSecurityHeaderHstsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSecurityHeaderHstsSetting200Response> zoneSettingsChangeSecurityHeaderHstsSettingWithHttpInfo(String zoneId, ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeSecurityHeaderHstsSettingValidateBeforeCall(zoneId, zoneSettingsChangeSecurityHeaderHstsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityHeaderHstsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Security Header (HSTS) setting (asynchronously)
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityHeaderHstsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSecurityHeaderHstsSettingAsync(String zoneId, ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest, final ApiCallback<ZoneSettingsGetSecurityHeaderHstsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeSecurityHeaderHstsSettingValidateBeforeCall(zoneId, zoneSettingsChangeSecurityHeaderHstsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityHeaderHstsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeSecurityLevelSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityLevelSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSecurityLevelSettingCall(String zoneId, ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeSecurityLevelSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/security_level"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeSecurityLevelSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeSecurityLevelSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeSecurityLevelSettingRequest' is set
        if (zoneSettingsChangeSecurityLevelSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeSecurityLevelSettingRequest' when calling zoneSettingsChangeSecurityLevelSetting(Async)");
        }

        return zoneSettingsChangeSecurityLevelSettingCall(zoneId, zoneSettingsChangeSecurityLevelSettingRequest, _callback);

    }

    /**
     * Change Security Level setting
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityLevelSettingRequest  (required)
     * @return ZoneSettingsGetSecurityLevelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSecurityLevelSetting200Response zoneSettingsChangeSecurityLevelSetting(String zoneId, ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetSecurityLevelSetting200Response> localVarResp = zoneSettingsChangeSecurityLevelSettingWithHttpInfo(zoneId, zoneSettingsChangeSecurityLevelSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Security Level setting
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityLevelSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSecurityLevelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSecurityLevelSetting200Response> zoneSettingsChangeSecurityLevelSettingWithHttpInfo(String zoneId, ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeSecurityLevelSettingValidateBeforeCall(zoneId, zoneSettingsChangeSecurityLevelSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityLevelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Security Level setting (asynchronously)
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSecurityLevelSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSecurityLevelSettingAsync(String zoneId, ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest, final ApiCallback<ZoneSettingsGetSecurityLevelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeSecurityLevelSettingValidateBeforeCall(zoneId, zoneSettingsChangeSecurityLevelSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityLevelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeServerSideExcludeSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeServerSideExcludeSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeServerSideExcludeSettingCall(String zoneId, ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeServerSideExcludeSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/server_side_exclude"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeServerSideExcludeSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeServerSideExcludeSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeServerSideExcludeSettingRequest' is set
        if (zoneSettingsChangeServerSideExcludeSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeServerSideExcludeSettingRequest' when calling zoneSettingsChangeServerSideExcludeSetting(Async)");
        }

        return zoneSettingsChangeServerSideExcludeSettingCall(zoneId, zoneSettingsChangeServerSideExcludeSettingRequest, _callback);

    }

    /**
     * Change Server Side Exclude setting
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @param zoneSettingsChangeServerSideExcludeSettingRequest  (required)
     * @return ZoneSettingsGetServerSideExcludeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetServerSideExcludeSetting200Response zoneSettingsChangeServerSideExcludeSetting(String zoneId, ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetServerSideExcludeSetting200Response> localVarResp = zoneSettingsChangeServerSideExcludeSettingWithHttpInfo(zoneId, zoneSettingsChangeServerSideExcludeSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Server Side Exclude setting
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @param zoneSettingsChangeServerSideExcludeSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetServerSideExcludeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetServerSideExcludeSetting200Response> zoneSettingsChangeServerSideExcludeSettingWithHttpInfo(String zoneId, ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeServerSideExcludeSettingValidateBeforeCall(zoneId, zoneSettingsChangeServerSideExcludeSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetServerSideExcludeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Server Side Exclude setting (asynchronously)
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @param zoneSettingsChangeServerSideExcludeSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeServerSideExcludeSettingAsync(String zoneId, ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest, final ApiCallback<ZoneSettingsGetServerSideExcludeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeServerSideExcludeSettingValidateBeforeCall(zoneId, zoneSettingsChangeServerSideExcludeSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetServerSideExcludeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeSslRecommenderSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslRecommenderSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSslRecommenderSettingCall(String zoneId, ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeSslRecommenderSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ssl_recommender"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeSslRecommenderSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeSslRecommenderSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeSslRecommenderSettingRequest' is set
        if (zoneSettingsChangeSslRecommenderSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeSslRecommenderSettingRequest' when calling zoneSettingsChangeSslRecommenderSetting(Async)");
        }

        return zoneSettingsChangeSslRecommenderSettingCall(zoneId, zoneSettingsChangeSslRecommenderSettingRequest, _callback);

    }

    /**
     * Change SSL/TLS Recommender enrollment setting
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslRecommenderSettingRequest  (required)
     * @return ZoneSettingsGetSslRecommenderSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSslRecommenderSetting200Response zoneSettingsChangeSslRecommenderSetting(String zoneId, ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetSslRecommenderSetting200Response> localVarResp = zoneSettingsChangeSslRecommenderSettingWithHttpInfo(zoneId, zoneSettingsChangeSslRecommenderSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change SSL/TLS Recommender enrollment setting
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslRecommenderSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSslRecommenderSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSslRecommenderSetting200Response> zoneSettingsChangeSslRecommenderSettingWithHttpInfo(String zoneId, ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeSslRecommenderSettingValidateBeforeCall(zoneId, zoneSettingsChangeSslRecommenderSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslRecommenderSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change SSL/TLS Recommender enrollment setting (asynchronously)
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslRecommenderSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSslRecommenderSettingAsync(String zoneId, ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest, final ApiCallback<ZoneSettingsGetSslRecommenderSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeSslRecommenderSettingValidateBeforeCall(zoneId, zoneSettingsChangeSslRecommenderSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslRecommenderSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeSslSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSslSettingCall(String zoneId, ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeSslSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ssl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeSslSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeSslSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeSslSettingRequest' is set
        if (zoneSettingsChangeSslSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeSslSettingRequest' when calling zoneSettingsChangeSslSetting(Async)");
        }

        return zoneSettingsChangeSslSettingCall(zoneId, zoneSettingsChangeSslSettingRequest, _callback);

    }

    /**
     * Change SSL setting
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslSettingRequest  (required)
     * @return ZoneSettingsGetSslSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSslSetting200Response zoneSettingsChangeSslSetting(String zoneId, ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetSslSetting200Response> localVarResp = zoneSettingsChangeSslSettingWithHttpInfo(zoneId, zoneSettingsChangeSslSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change SSL setting
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSslSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSslSetting200Response> zoneSettingsChangeSslSettingWithHttpInfo(String zoneId, ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeSslSettingValidateBeforeCall(zoneId, zoneSettingsChangeSslSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change SSL setting (asynchronously)
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @param zoneSettingsChangeSslSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeSslSettingAsync(String zoneId, ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest, final ApiCallback<ZoneSettingsGetSslSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeSslSettingValidateBeforeCall(zoneId, zoneSettingsChangeSslSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeTls13Setting
     * @param zoneId  (required)
     * @param zoneSettingsChangeTls13SettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS 1.3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS 1.3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTls13SettingCall(String zoneId, ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeTls13SettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/tls_1_3"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeTls13SettingValidateBeforeCall(String zoneId, ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeTls13Setting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeTls13SettingRequest' is set
        if (zoneSettingsChangeTls13SettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeTls13SettingRequest' when calling zoneSettingsChangeTls13Setting(Async)");
        }

        return zoneSettingsChangeTls13SettingCall(zoneId, zoneSettingsChangeTls13SettingRequest, _callback);

    }

    /**
     * Change TLS 1.3 setting
     * Changes TLS 1.3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTls13SettingRequest  (required)
     * @return ZoneSettingsGetTls13SettingEnabledForAZone200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS 1.3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS 1.3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTls13SettingEnabledForAZone200Response zoneSettingsChangeTls13Setting(String zoneId, ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetTls13SettingEnabledForAZone200Response> localVarResp = zoneSettingsChangeTls13SettingWithHttpInfo(zoneId, zoneSettingsChangeTls13SettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change TLS 1.3 setting
     * Changes TLS 1.3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTls13SettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTls13SettingEnabledForAZone200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS 1.3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS 1.3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTls13SettingEnabledForAZone200Response> zoneSettingsChangeTls13SettingWithHttpInfo(String zoneId, ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeTls13SettingValidateBeforeCall(zoneId, zoneSettingsChangeTls13SettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTls13SettingEnabledForAZone200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change TLS 1.3 setting (asynchronously)
     * Changes TLS 1.3 setting.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTls13SettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS 1.3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS 1.3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTls13SettingAsync(String zoneId, ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest, final ApiCallback<ZoneSettingsGetTls13SettingEnabledForAZone200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeTls13SettingValidateBeforeCall(zoneId, zoneSettingsChangeTls13SettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTls13SettingEnabledForAZone200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeTlsClientAuthSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeTlsClientAuthSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTlsClientAuthSettingCall(String zoneId, ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeTlsClientAuthSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/tls_client_auth"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeTlsClientAuthSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeTlsClientAuthSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeTlsClientAuthSettingRequest' is set
        if (zoneSettingsChangeTlsClientAuthSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeTlsClientAuthSettingRequest' when calling zoneSettingsChangeTlsClientAuthSetting(Async)");
        }

        return zoneSettingsChangeTlsClientAuthSettingCall(zoneId, zoneSettingsChangeTlsClientAuthSettingRequest, _callback);

    }

    /**
     * Change TLS Client Auth setting
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @param zoneSettingsChangeTlsClientAuthSettingRequest  (required)
     * @return ZoneSettingsGetTlsClientAuthSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTlsClientAuthSetting200Response zoneSettingsChangeTlsClientAuthSetting(String zoneId, ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetTlsClientAuthSetting200Response> localVarResp = zoneSettingsChangeTlsClientAuthSettingWithHttpInfo(zoneId, zoneSettingsChangeTlsClientAuthSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change TLS Client Auth setting
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @param zoneSettingsChangeTlsClientAuthSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTlsClientAuthSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTlsClientAuthSetting200Response> zoneSettingsChangeTlsClientAuthSettingWithHttpInfo(String zoneId, ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeTlsClientAuthSettingValidateBeforeCall(zoneId, zoneSettingsChangeTlsClientAuthSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTlsClientAuthSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change TLS Client Auth setting (asynchronously)
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @param zoneSettingsChangeTlsClientAuthSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTlsClientAuthSettingAsync(String zoneId, ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest, final ApiCallback<ZoneSettingsGetTlsClientAuthSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeTlsClientAuthSettingValidateBeforeCall(zoneId, zoneSettingsChangeTlsClientAuthSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTlsClientAuthSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeTrueClientIpSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeTrueClientIpSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTrueClientIpSettingCall(String zoneId, ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeTrueClientIpSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/true_client_ip_header"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeTrueClientIpSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeTrueClientIpSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeTrueClientIpSettingRequest' is set
        if (zoneSettingsChangeTrueClientIpSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeTrueClientIpSettingRequest' when calling zoneSettingsChangeTrueClientIpSetting(Async)");
        }

        return zoneSettingsChangeTrueClientIpSettingCall(zoneId, zoneSettingsChangeTrueClientIpSettingRequest, _callback);

    }

    /**
     * Change True Client IP setting
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTrueClientIpSettingRequest  (required)
     * @return ZoneSettingsGetTrueClientIpSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTrueClientIpSetting200Response zoneSettingsChangeTrueClientIpSetting(String zoneId, ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetTrueClientIpSetting200Response> localVarResp = zoneSettingsChangeTrueClientIpSettingWithHttpInfo(zoneId, zoneSettingsChangeTrueClientIpSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change True Client IP setting
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTrueClientIpSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTrueClientIpSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTrueClientIpSetting200Response> zoneSettingsChangeTrueClientIpSettingWithHttpInfo(String zoneId, ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeTrueClientIpSettingValidateBeforeCall(zoneId, zoneSettingsChangeTrueClientIpSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTrueClientIpSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change True Client IP setting (asynchronously)
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param zoneSettingsChangeTrueClientIpSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeTrueClientIpSettingAsync(String zoneId, ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest, final ApiCallback<ZoneSettingsGetTrueClientIpSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeTrueClientIpSettingValidateBeforeCall(zoneId, zoneSettingsChangeTrueClientIpSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTrueClientIpSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeWebApplicationFirewallWafSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebApplicationFirewallWafSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebApplicationFirewallWafSettingCall(String zoneId, ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeWebApplicationFirewallWafSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/waf"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeWebApplicationFirewallWafSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeWebApplicationFirewallWafSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeWebApplicationFirewallWafSettingRequest' is set
        if (zoneSettingsChangeWebApplicationFirewallWafSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeWebApplicationFirewallWafSettingRequest' when calling zoneSettingsChangeWebApplicationFirewallWafSetting(Async)");
        }

        return zoneSettingsChangeWebApplicationFirewallWafSettingCall(zoneId, zoneSettingsChangeWebApplicationFirewallWafSettingRequest, _callback);

    }

    /**
     * Change Web Application Firewall (WAF) setting
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebApplicationFirewallWafSettingRequest  (required)
     * @return ZoneSettingsGetWebApplicationFirewallWafSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebApplicationFirewallWafSetting200Response zoneSettingsChangeWebApplicationFirewallWafSetting(String zoneId, ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> localVarResp = zoneSettingsChangeWebApplicationFirewallWafSettingWithHttpInfo(zoneId, zoneSettingsChangeWebApplicationFirewallWafSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Web Application Firewall (WAF) setting
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebApplicationFirewallWafSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebApplicationFirewallWafSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> zoneSettingsChangeWebApplicationFirewallWafSettingWithHttpInfo(String zoneId, ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeWebApplicationFirewallWafSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebApplicationFirewallWafSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebApplicationFirewallWafSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Web Application Firewall (WAF) setting (asynchronously)
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebApplicationFirewallWafSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebApplicationFirewallWafSettingAsync(String zoneId, ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest, final ApiCallback<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeWebApplicationFirewallWafSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebApplicationFirewallWafSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebApplicationFirewallWafSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeWebMirageSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebMirageSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebMirageSettingCall(String zoneId, ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeWebMirageSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/mirage"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeWebMirageSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeWebMirageSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeWebMirageSettingRequest' is set
        if (zoneSettingsChangeWebMirageSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeWebMirageSettingRequest' when calling zoneSettingsChangeWebMirageSetting(Async)");
        }

        return zoneSettingsChangeWebMirageSettingCall(zoneId, zoneSettingsChangeWebMirageSettingRequest, _callback);

    }

    /**
     * Change Mirage setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebMirageSettingRequest  (required)
     * @return ZoneSettingsGetMirageSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMirageSetting200Response zoneSettingsChangeWebMirageSetting(String zoneId, ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetMirageSetting200Response> localVarResp = zoneSettingsChangeWebMirageSettingWithHttpInfo(zoneId, zoneSettingsChangeWebMirageSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change Mirage setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebMirageSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMirageSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMirageSetting200Response> zoneSettingsChangeWebMirageSettingWithHttpInfo(String zoneId, ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeWebMirageSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebMirageSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMirageSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Mirage setting (asynchronously)
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebMirageSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebMirageSettingAsync(String zoneId, ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest, final ApiCallback<ZoneSettingsGetMirageSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeWebMirageSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebMirageSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMirageSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeWebPSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebPSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebPSettingCall(String zoneId, ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeWebPSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/webp"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeWebPSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeWebPSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeWebPSettingRequest' is set
        if (zoneSettingsChangeWebPSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeWebPSettingRequest' when calling zoneSettingsChangeWebPSetting(Async)");
        }

        return zoneSettingsChangeWebPSettingCall(zoneId, zoneSettingsChangeWebPSettingRequest, _callback);

    }

    /**
     * Change WebP setting
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebPSettingRequest  (required)
     * @return ZoneSettingsGetWebPSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebPSetting200Response zoneSettingsChangeWebPSetting(String zoneId, ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetWebPSetting200Response> localVarResp = zoneSettingsChangeWebPSettingWithHttpInfo(zoneId, zoneSettingsChangeWebPSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change WebP setting
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebPSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebPSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebPSetting200Response> zoneSettingsChangeWebPSettingWithHttpInfo(String zoneId, ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeWebPSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebPSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebPSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change WebP setting (asynchronously)
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebPSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebPSettingAsync(String zoneId, ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest, final ApiCallback<ZoneSettingsGetWebPSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeWebPSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebPSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebPSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsChangeWebSocketsSetting
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebSocketsSettingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebSocketsSettingCall(String zoneId, ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsChangeWebSocketsSettingRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/websockets"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsChangeWebSocketsSettingValidateBeforeCall(String zoneId, ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsChangeWebSocketsSetting(Async)");
        }

        // verify the required parameter 'zoneSettingsChangeWebSocketsSettingRequest' is set
        if (zoneSettingsChangeWebSocketsSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsChangeWebSocketsSettingRequest' when calling zoneSettingsChangeWebSocketsSetting(Async)");
        }

        return zoneSettingsChangeWebSocketsSettingCall(zoneId, zoneSettingsChangeWebSocketsSettingRequest, _callback);

    }

    /**
     * Change WebSockets setting
     * Changes Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebSocketsSettingRequest  (required)
     * @return ZoneSettingsGetWebSocketsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebSocketsSetting200Response zoneSettingsChangeWebSocketsSetting(String zoneId, ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest) throws ApiException {
        ApiResponse<ZoneSettingsGetWebSocketsSetting200Response> localVarResp = zoneSettingsChangeWebSocketsSettingWithHttpInfo(zoneId, zoneSettingsChangeWebSocketsSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Change WebSockets setting
     * Changes Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebSocketsSettingRequest  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebSocketsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebSocketsSetting200Response> zoneSettingsChangeWebSocketsSettingWithHttpInfo(String zoneId, ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsChangeWebSocketsSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebSocketsSettingRequest, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebSocketsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change WebSockets setting (asynchronously)
     * Changes Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @param zoneSettingsChangeWebSocketsSettingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Change WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsChangeWebSocketsSettingAsync(String zoneId, ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest, final ApiCallback<ZoneSettingsGetWebSocketsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsChangeWebSocketsSettingValidateBeforeCall(zoneId, zoneSettingsChangeWebSocketsSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebSocketsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsEditZoneSettingsInfo
     * @param zoneId  (required)
     * @param zoneSettingsEditZoneSettingsInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit zone settings info response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit zone settings info response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsEditZoneSettingsInfoCall(String zoneId, ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneSettingsEditZoneSettingsInfoRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsEditZoneSettingsInfoValidateBeforeCall(String zoneId, ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsEditZoneSettingsInfo(Async)");
        }

        // verify the required parameter 'zoneSettingsEditZoneSettingsInfoRequest' is set
        if (zoneSettingsEditZoneSettingsInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneSettingsEditZoneSettingsInfoRequest' when calling zoneSettingsEditZoneSettingsInfo(Async)");
        }

        return zoneSettingsEditZoneSettingsInfoCall(zoneId, zoneSettingsEditZoneSettingsInfoRequest, _callback);

    }

    /**
     * Edit zone settings info
     * Edit settings for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsEditZoneSettingsInfoRequest  (required)
     * @return ZonesZoneSettingsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit zone settings info response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit zone settings info response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesZoneSettingsResponseCollection zoneSettingsEditZoneSettingsInfo(String zoneId, ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest) throws ApiException {
        ApiResponse<ZonesZoneSettingsResponseCollection> localVarResp = zoneSettingsEditZoneSettingsInfoWithHttpInfo(zoneId, zoneSettingsEditZoneSettingsInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Edit zone settings info
     * Edit settings for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsEditZoneSettingsInfoRequest  (required)
     * @return ApiResponse&lt;ZonesZoneSettingsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit zone settings info response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit zone settings info response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesZoneSettingsResponseCollection> zoneSettingsEditZoneSettingsInfoWithHttpInfo(String zoneId, ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsEditZoneSettingsInfoValidateBeforeCall(zoneId, zoneSettingsEditZoneSettingsInfoRequest, null);
        Type localVarReturnType = new TypeToken<ZonesZoneSettingsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit zone settings info (asynchronously)
     * Edit settings for a zone.
     * @param zoneId  (required)
     * @param zoneSettingsEditZoneSettingsInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit zone settings info response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit zone settings info response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsEditZoneSettingsInfoAsync(String zoneId, ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest, final ApiCallback<ZonesZoneSettingsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsEditZoneSettingsInfoValidateBeforeCall(zoneId, zoneSettingsEditZoneSettingsInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesZoneSettingsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGet0RttSessionResumptionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGet0RttSessionResumptionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/0rtt"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGet0RttSessionResumptionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGet0RttSessionResumptionSetting(Async)");
        }

        return zoneSettingsGet0RttSessionResumptionSettingCall(zoneId, _callback);

    }

    /**
     * Get 0-RTT session resumption setting
     * Gets 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGet0RttSessionResumptionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGet0RttSessionResumptionSetting200Response zoneSettingsGet0RttSessionResumptionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGet0RttSessionResumptionSetting200Response> localVarResp = zoneSettingsGet0RttSessionResumptionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get 0-RTT session resumption setting
     * Gets 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGet0RttSessionResumptionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGet0RttSessionResumptionSetting200Response> zoneSettingsGet0RttSessionResumptionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGet0RttSessionResumptionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGet0RttSessionResumptionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get 0-RTT session resumption setting (asynchronously)
     * Gets 0-RTT session resumption setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get 0-RTT session resumption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get 0-RTT session resumption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGet0RttSessionResumptionSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGet0RttSessionResumptionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGet0RttSessionResumptionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGet0RttSessionResumptionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAdvancedDdosSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced DDOS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Advanced DDOS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAdvancedDdosSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/advanced_ddos"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAdvancedDdosSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAdvancedDdosSetting(Async)");
        }

        return zoneSettingsGetAdvancedDdosSettingCall(zoneId, _callback);

    }

    /**
     * Get Advanced DDOS setting
     * Advanced protection from Distributed Denial of Service (DDoS) attacks on your website. This is an uneditable value that is &#39;on&#39; in the case of Business and Enterprise zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetAdvancedDdosSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced DDOS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Advanced DDOS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAdvancedDdosSetting200Response zoneSettingsGetAdvancedDdosSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetAdvancedDdosSetting200Response> localVarResp = zoneSettingsGetAdvancedDdosSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Advanced DDOS setting
     * Advanced protection from Distributed Denial of Service (DDoS) attacks on your website. This is an uneditable value that is &#39;on&#39; in the case of Business and Enterprise zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAdvancedDdosSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced DDOS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Advanced DDOS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAdvancedDdosSetting200Response> zoneSettingsGetAdvancedDdosSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAdvancedDdosSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAdvancedDdosSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Advanced DDOS setting (asynchronously)
     * Advanced protection from Distributed Denial of Service (DDoS) attacks on your website. This is an uneditable value that is &#39;on&#39; in the case of Business and Enterprise zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced DDOS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Advanced DDOS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAdvancedDdosSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetAdvancedDdosSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAdvancedDdosSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAdvancedDdosSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAllZoneSettings
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Zone settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get all Zone settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAllZoneSettingsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAllZoneSettingsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAllZoneSettings(Async)");
        }

        return zoneSettingsGetAllZoneSettingsCall(zoneId, _callback);

    }

    /**
     * Get all Zone settings
     * Available settings for your user in relation to a zone.
     * @param zoneId  (required)
     * @return ZonesZoneSettingsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Zone settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get all Zone settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesZoneSettingsResponseCollection zoneSettingsGetAllZoneSettings(String zoneId) throws ApiException {
        ApiResponse<ZonesZoneSettingsResponseCollection> localVarResp = zoneSettingsGetAllZoneSettingsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get all Zone settings
     * Available settings for your user in relation to a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZonesZoneSettingsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Zone settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get all Zone settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesZoneSettingsResponseCollection> zoneSettingsGetAllZoneSettingsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAllZoneSettingsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZonesZoneSettingsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Zone settings (asynchronously)
     * Available settings for your user in relation to a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Zone settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get all Zone settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAllZoneSettingsAsync(String zoneId, final ApiCallback<ZonesZoneSettingsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAllZoneSettingsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZonesZoneSettingsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAlwaysOnlineSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAlwaysOnlineSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/always_online"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAlwaysOnlineSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAlwaysOnlineSetting(Async)");
        }

        return zoneSettingsGetAlwaysOnlineSettingCall(zoneId, _callback);

    }

    /**
     * Get Always Online setting
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @return ZoneSettingsGetAlwaysOnlineSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAlwaysOnlineSetting200Response zoneSettingsGetAlwaysOnlineSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetAlwaysOnlineSetting200Response> localVarResp = zoneSettingsGetAlwaysOnlineSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Always Online setting
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAlwaysOnlineSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAlwaysOnlineSetting200Response> zoneSettingsGetAlwaysOnlineSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAlwaysOnlineSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysOnlineSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Always Online setting (asynchronously)
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Online setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Online setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAlwaysOnlineSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetAlwaysOnlineSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAlwaysOnlineSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysOnlineSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAlwaysUseHttpsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAlwaysUseHttpsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/always_use_https"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAlwaysUseHttpsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAlwaysUseHttpsSetting(Async)");
        }

        return zoneSettingsGetAlwaysUseHttpsSettingCall(zoneId, _callback);

    }

    /**
     * Get Always Use HTTPS setting
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @return ZoneSettingsGetAlwaysUseHttpsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAlwaysUseHttpsSetting200Response zoneSettingsGetAlwaysUseHttpsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetAlwaysUseHttpsSetting200Response> localVarResp = zoneSettingsGetAlwaysUseHttpsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Always Use HTTPS setting
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAlwaysUseHttpsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAlwaysUseHttpsSetting200Response> zoneSettingsGetAlwaysUseHttpsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAlwaysUseHttpsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysUseHttpsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Always Use HTTPS setting (asynchronously)
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Always Use HTTPS setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Always Use HTTPS setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAlwaysUseHttpsSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetAlwaysUseHttpsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAlwaysUseHttpsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAlwaysUseHttpsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAutomaticHttpsRewritesSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAutomaticHttpsRewritesSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/automatic_https_rewrites"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAutomaticHttpsRewritesSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAutomaticHttpsRewritesSetting(Async)");
        }

        return zoneSettingsGetAutomaticHttpsRewritesSettingCall(zoneId, _callback);

    }

    /**
     * Get Automatic HTTPS Rewrites setting
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @return ZoneSettingsGetAutomaticHttpsRewritesSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAutomaticHttpsRewritesSetting200Response zoneSettingsGetAutomaticHttpsRewritesSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> localVarResp = zoneSettingsGetAutomaticHttpsRewritesSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Automatic HTTPS Rewrites setting
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAutomaticHttpsRewritesSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> zoneSettingsGetAutomaticHttpsRewritesSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAutomaticHttpsRewritesSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Automatic HTTPS Rewrites setting (asynchronously)
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic HTTPS Rewrites setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic HTTPS Rewrites setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAutomaticHttpsRewritesSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAutomaticHttpsRewritesSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticHttpsRewritesSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetAutomaticPlatformOptimizationSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAutomaticPlatformOptimizationSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/automatic_platform_optimization"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetAutomaticPlatformOptimizationSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetAutomaticPlatformOptimizationSetting(Async)");
        }

        return zoneSettingsGetAutomaticPlatformOptimizationSettingCall(zoneId, _callback);

    }

    /**
     * Get Automatic Platform Optimization for WordPress setting
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response zoneSettingsGetAutomaticPlatformOptimizationSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> localVarResp = zoneSettingsGetAutomaticPlatformOptimizationSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Automatic Platform Optimization for WordPress setting
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> zoneSettingsGetAutomaticPlatformOptimizationSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetAutomaticPlatformOptimizationSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Automatic Platform Optimization for WordPress setting (asynchronously)
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Automatic Platform Optimization for WordPress setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Automatic Platform Optimization for WordPress setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetAutomaticPlatformOptimizationSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetAutomaticPlatformOptimizationSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetBrotliSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrotliSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/brotli"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetBrotliSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetBrotliSetting(Async)");
        }

        return zoneSettingsGetBrotliSettingCall(zoneId, _callback);

    }

    /**
     * Get Brotli setting
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @return ZoneSettingsGetBrotliSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrotliSetting200Response zoneSettingsGetBrotliSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetBrotliSetting200Response> localVarResp = zoneSettingsGetBrotliSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Brotli setting
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrotliSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrotliSetting200Response> zoneSettingsGetBrotliSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetBrotliSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrotliSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Brotli setting (asynchronously)
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Brotli setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Brotli setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrotliSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetBrotliSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetBrotliSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrotliSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetBrowserCacheTtlSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrowserCacheTtlSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/browser_cache_ttl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetBrowserCacheTtlSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetBrowserCacheTtlSetting(Async)");
        }

        return zoneSettingsGetBrowserCacheTtlSettingCall(zoneId, _callback);

    }

    /**
     * Get Browser Cache TTL setting
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @return ZoneSettingsGetBrowserCacheTtlSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrowserCacheTtlSetting200Response zoneSettingsGetBrowserCacheTtlSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetBrowserCacheTtlSetting200Response> localVarResp = zoneSettingsGetBrowserCacheTtlSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Browser Cache TTL setting
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrowserCacheTtlSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrowserCacheTtlSetting200Response> zoneSettingsGetBrowserCacheTtlSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetBrowserCacheTtlSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCacheTtlSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Browser Cache TTL setting (asynchronously)
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Cache TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Cache TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrowserCacheTtlSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetBrowserCacheTtlSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetBrowserCacheTtlSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCacheTtlSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetBrowserCheckSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrowserCheckSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/browser_check"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetBrowserCheckSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetBrowserCheckSetting(Async)");
        }

        return zoneSettingsGetBrowserCheckSettingCall(zoneId, _callback);

    }

    /**
     * Get Browser Check setting
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @return ZoneSettingsGetBrowserCheckSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetBrowserCheckSetting200Response zoneSettingsGetBrowserCheckSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetBrowserCheckSetting200Response> localVarResp = zoneSettingsGetBrowserCheckSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Browser Check setting
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetBrowserCheckSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetBrowserCheckSetting200Response> zoneSettingsGetBrowserCheckSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetBrowserCheckSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCheckSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Browser Check setting (asynchronously)
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Browser Check setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Browser Check setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetBrowserCheckSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetBrowserCheckSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetBrowserCheckSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetBrowserCheckSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetCacheLevelSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetCacheLevelSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/cache_level"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetCacheLevelSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetCacheLevelSetting(Async)");
        }

        return zoneSettingsGetCacheLevelSettingCall(zoneId, _callback);

    }

    /**
     * Get Cache Level setting
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @return ZoneSettingsGetCacheLevelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetCacheLevelSetting200Response zoneSettingsGetCacheLevelSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetCacheLevelSetting200Response> localVarResp = zoneSettingsGetCacheLevelSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Cache Level setting
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetCacheLevelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetCacheLevelSetting200Response> zoneSettingsGetCacheLevelSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetCacheLevelSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCacheLevelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Cache Level setting (asynchronously)
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cache Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cache Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetCacheLevelSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetCacheLevelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetCacheLevelSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCacheLevelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetChallengeTtlSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetChallengeTtlSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/challenge_ttl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetChallengeTtlSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetChallengeTtlSetting(Async)");
        }

        return zoneSettingsGetChallengeTtlSettingCall(zoneId, _callback);

    }

    /**
     * Get Challenge TTL setting
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @return ZoneSettingsGetChallengeTtlSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetChallengeTtlSetting200Response zoneSettingsGetChallengeTtlSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetChallengeTtlSetting200Response> localVarResp = zoneSettingsGetChallengeTtlSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Challenge TTL setting
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetChallengeTtlSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetChallengeTtlSetting200Response> zoneSettingsGetChallengeTtlSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetChallengeTtlSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetChallengeTtlSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Challenge TTL setting (asynchronously)
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Challenge TTL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Challenge TTL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetChallengeTtlSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetChallengeTtlSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetChallengeTtlSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetChallengeTtlSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetCiphersSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetCiphersSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ciphers"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetCiphersSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetCiphersSetting(Async)");
        }

        return zoneSettingsGetCiphersSettingCall(zoneId, _callback);

    }

    /**
     * Get ciphers setting
     * Gets ciphers setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetCiphersSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetCiphersSetting200Response zoneSettingsGetCiphersSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetCiphersSetting200Response> localVarResp = zoneSettingsGetCiphersSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get ciphers setting
     * Gets ciphers setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetCiphersSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetCiphersSetting200Response> zoneSettingsGetCiphersSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetCiphersSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCiphersSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ciphers setting (asynchronously)
     * Gets ciphers setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ciphers setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ciphers setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetCiphersSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetCiphersSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetCiphersSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetCiphersSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetDevelopmentModeSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetDevelopmentModeSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/development_mode"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetDevelopmentModeSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetDevelopmentModeSetting(Async)");
        }

        return zoneSettingsGetDevelopmentModeSettingCall(zoneId, _callback);

    }

    /**
     * Get Development Mode setting
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @return ZoneSettingsGetDevelopmentModeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetDevelopmentModeSetting200Response zoneSettingsGetDevelopmentModeSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetDevelopmentModeSetting200Response> localVarResp = zoneSettingsGetDevelopmentModeSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Development Mode setting
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetDevelopmentModeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetDevelopmentModeSetting200Response> zoneSettingsGetDevelopmentModeSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetDevelopmentModeSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetDevelopmentModeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Development Mode setting (asynchronously)
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Development Mode setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Development Mode setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetDevelopmentModeSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetDevelopmentModeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetDevelopmentModeSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetDevelopmentModeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetEarlyHintsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEarlyHintsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/early_hints"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetEarlyHintsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetEarlyHintsSetting(Async)");
        }

        return zoneSettingsGetEarlyHintsSettingCall(zoneId, _callback);

    }

    /**
     * Get Early Hints setting
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @return ZoneSettingsGetEarlyHintsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEarlyHintsSetting200Response zoneSettingsGetEarlyHintsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetEarlyHintsSetting200Response> localVarResp = zoneSettingsGetEarlyHintsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Early Hints setting
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEarlyHintsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEarlyHintsSetting200Response> zoneSettingsGetEarlyHintsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetEarlyHintsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEarlyHintsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Early Hints setting (asynchronously)
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Early Hints setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Early Hints setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEarlyHintsSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetEarlyHintsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetEarlyHintsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEarlyHintsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetEmailObfuscationSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEmailObfuscationSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/email_obfuscation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetEmailObfuscationSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetEmailObfuscationSetting(Async)");
        }

        return zoneSettingsGetEmailObfuscationSettingCall(zoneId, _callback);

    }

    /**
     * Get Email Obfuscation setting
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @return ZoneSettingsGetEmailObfuscationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEmailObfuscationSetting200Response zoneSettingsGetEmailObfuscationSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetEmailObfuscationSetting200Response> localVarResp = zoneSettingsGetEmailObfuscationSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Email Obfuscation setting
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEmailObfuscationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEmailObfuscationSetting200Response> zoneSettingsGetEmailObfuscationSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetEmailObfuscationSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEmailObfuscationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Email Obfuscation setting (asynchronously)
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Email Obfuscation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Email Obfuscation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEmailObfuscationSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetEmailObfuscationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetEmailObfuscationSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEmailObfuscationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetEnableErrorPagesOnSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEnableErrorPagesOnSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/origin_error_page_pass_thru"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetEnableErrorPagesOnSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetEnableErrorPagesOnSetting(Async)");
        }

        return zoneSettingsGetEnableErrorPagesOnSettingCall(zoneId, _callback);

    }

    /**
     * Get Enable Error Pages On setting
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetEnableErrorPagesOnSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEnableErrorPagesOnSetting200Response zoneSettingsGetEnableErrorPagesOnSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetEnableErrorPagesOnSetting200Response> localVarResp = zoneSettingsGetEnableErrorPagesOnSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Enable Error Pages On setting
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEnableErrorPagesOnSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEnableErrorPagesOnSetting200Response> zoneSettingsGetEnableErrorPagesOnSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetEnableErrorPagesOnSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableErrorPagesOnSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Enable Error Pages On setting (asynchronously)
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Error Pages On setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Error Pages On setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEnableErrorPagesOnSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetEnableErrorPagesOnSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetEnableErrorPagesOnSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableErrorPagesOnSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetEnableQueryStringSortSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEnableQueryStringSortSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/sort_query_string_for_cache"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetEnableQueryStringSortSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetEnableQueryStringSortSetting(Async)");
        }

        return zoneSettingsGetEnableQueryStringSortSettingCall(zoneId, _callback);

    }

    /**
     * Get Enable Query String Sort setting
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetEnableQueryStringSortSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetEnableQueryStringSortSetting200Response zoneSettingsGetEnableQueryStringSortSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetEnableQueryStringSortSetting200Response> localVarResp = zoneSettingsGetEnableQueryStringSortSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Enable Query String Sort setting
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetEnableQueryStringSortSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetEnableQueryStringSortSetting200Response> zoneSettingsGetEnableQueryStringSortSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetEnableQueryStringSortSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableQueryStringSortSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Enable Query String Sort setting (asynchronously)
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enable Query String Sort setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enable Query String Sort setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetEnableQueryStringSortSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetEnableQueryStringSortSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetEnableQueryStringSortSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetEnableQueryStringSortSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetFontsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetFontsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/fonts"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetFontsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetFontsSetting(Async)");
        }

        return zoneSettingsGetFontsSettingCall(zoneId, _callback);

    }

    /**
     * Get Cloudflare Fonts setting
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetFontsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetFontsSetting200Response zoneSettingsGetFontsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetFontsSetting200Response> localVarResp = zoneSettingsGetFontsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Cloudflare Fonts setting
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetFontsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetFontsSetting200Response> zoneSettingsGetFontsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetFontsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetFontsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Cloudflare Fonts setting (asynchronously)
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Cloudflare Fonts setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Cloudflare Fonts setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetFontsSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetFontsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetFontsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetFontsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetH2PrioritizationSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetH2PrioritizationSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/h2_prioritization"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetH2PrioritizationSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetH2PrioritizationSetting(Async)");
        }

        return zoneSettingsGetH2PrioritizationSettingCall(zoneId, _callback);

    }

    /**
     * Get HTTP/2 Edge Prioritization setting
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetH2PrioritizationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetH2PrioritizationSetting200Response zoneSettingsGetH2PrioritizationSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetH2PrioritizationSetting200Response> localVarResp = zoneSettingsGetH2PrioritizationSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get HTTP/2 Edge Prioritization setting
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetH2PrioritizationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetH2PrioritizationSetting200Response> zoneSettingsGetH2PrioritizationSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetH2PrioritizationSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetH2PrioritizationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP/2 Edge Prioritization setting (asynchronously)
     * Gets HTTP/2 Edge Prioritization setting. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP/2 Edge Prioritization setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP/2 Edge Prioritization setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetH2PrioritizationSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetH2PrioritizationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetH2PrioritizationSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetH2PrioritizationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetHTTP2Setting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHTTP2SettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/http2"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetHTTP2SettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetHTTP2Setting(Async)");
        }

        return zoneSettingsGetHTTP2SettingCall(zoneId, _callback);

    }

    /**
     * Get HTTP2 setting
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetHTTP2Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHTTP2Setting200Response zoneSettingsGetHTTP2Setting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetHTTP2Setting200Response> localVarResp = zoneSettingsGetHTTP2SettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get HTTP2 setting
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHTTP2Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHTTP2Setting200Response> zoneSettingsGetHTTP2SettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetHTTP2SettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP2Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP2 setting (asynchronously)
     * Value of the HTTP2 setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP2 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP2 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHTTP2SettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetHTTP2Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetHTTP2SettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP2Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetHTTP3Setting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHTTP3SettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/http3"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetHTTP3SettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetHTTP3Setting(Async)");
        }

        return zoneSettingsGetHTTP3SettingCall(zoneId, _callback);

    }

    /**
     * Get HTTP3 setting
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetHTTP3Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHTTP3Setting200Response zoneSettingsGetHTTP3Setting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetHTTP3Setting200Response> localVarResp = zoneSettingsGetHTTP3SettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get HTTP3 setting
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHTTP3Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHTTP3Setting200Response> zoneSettingsGetHTTP3SettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetHTTP3SettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP3Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP3 setting (asynchronously)
     * Value of the HTTP3 setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get HTTP3 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get HTTP3 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHTTP3SettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetHTTP3Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetHTTP3SettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHTTP3Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetHotlinkProtectionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHotlinkProtectionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/hotlink_protection"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetHotlinkProtectionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetHotlinkProtectionSetting(Async)");
        }

        return zoneSettingsGetHotlinkProtectionSettingCall(zoneId, _callback);

    }

    /**
     * Get Hotlink Protection setting
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @return ZoneSettingsGetHotlinkProtectionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetHotlinkProtectionSetting200Response zoneSettingsGetHotlinkProtectionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetHotlinkProtectionSetting200Response> localVarResp = zoneSettingsGetHotlinkProtectionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Hotlink Protection setting
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetHotlinkProtectionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetHotlinkProtectionSetting200Response> zoneSettingsGetHotlinkProtectionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetHotlinkProtectionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHotlinkProtectionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Hotlink Protection setting (asynchronously)
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hotlink Protection setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hotlink Protection setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetHotlinkProtectionSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetHotlinkProtectionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetHotlinkProtectionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetHotlinkProtectionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetIPv6Setting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetIPv6SettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ipv6"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetIPv6SettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetIPv6Setting(Async)");
        }

        return zoneSettingsGetIPv6SettingCall(zoneId, _callback);

    }

    /**
     * Get IPv6 setting
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @return ZoneSettingsGetIPv6Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetIPv6Setting200Response zoneSettingsGetIPv6Setting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetIPv6Setting200Response> localVarResp = zoneSettingsGetIPv6SettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get IPv6 setting
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetIPv6Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetIPv6Setting200Response> zoneSettingsGetIPv6SettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetIPv6SettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIPv6Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IPv6 setting (asynchronously)
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IPv6 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IPv6 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetIPv6SettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetIPv6Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetIPv6SettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIPv6Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetImageResizingSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetImageResizingSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/image_resizing"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetImageResizingSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetImageResizingSetting(Async)");
        }

        return zoneSettingsGetImageResizingSettingCall(zoneId, _callback);

    }

    /**
     * Get Image Resizing setting
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetImageResizingSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetImageResizingSetting200Response zoneSettingsGetImageResizingSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetImageResizingSetting200Response> localVarResp = zoneSettingsGetImageResizingSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Image Resizing setting
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetImageResizingSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetImageResizingSetting200Response> zoneSettingsGetImageResizingSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetImageResizingSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetImageResizingSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Image Resizing setting (asynchronously)
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Image Resizing setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Image Resizing setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetImageResizingSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetImageResizingSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetImageResizingSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetImageResizingSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetIpGeolocationSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetIpGeolocationSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ip_geolocation"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetIpGeolocationSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetIpGeolocationSetting(Async)");
        }

        return zoneSettingsGetIpGeolocationSettingCall(zoneId, _callback);

    }

    /**
     * Get IP Geolocation setting
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @return ZoneSettingsGetIpGeolocationSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetIpGeolocationSetting200Response zoneSettingsGetIpGeolocationSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetIpGeolocationSetting200Response> localVarResp = zoneSettingsGetIpGeolocationSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get IP Geolocation setting
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetIpGeolocationSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetIpGeolocationSetting200Response> zoneSettingsGetIpGeolocationSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetIpGeolocationSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIpGeolocationSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP Geolocation setting (asynchronously)
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get IP Geolocation setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get IP Geolocation setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetIpGeolocationSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetIpGeolocationSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetIpGeolocationSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetIpGeolocationSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetMinifySetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMinifySettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/minify"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetMinifySettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetMinifySetting(Async)");
        }

        return zoneSettingsGetMinifySettingCall(zoneId, _callback);

    }

    /**
     * Get Minify setting
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @return ZoneSettingsGetMinifySetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMinifySetting200Response zoneSettingsGetMinifySetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetMinifySetting200Response> localVarResp = zoneSettingsGetMinifySettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Minify setting
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMinifySetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMinifySetting200Response> zoneSettingsGetMinifySettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetMinifySettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinifySetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Minify setting (asynchronously)
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minify setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minify setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMinifySettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetMinifySetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetMinifySettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinifySetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetMinimumTlsVersionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMinimumTlsVersionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/min_tls_version"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetMinimumTlsVersionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetMinimumTlsVersionSetting(Async)");
        }

        return zoneSettingsGetMinimumTlsVersionSettingCall(zoneId, _callback);

    }

    /**
     * Get Minimum TLS Version setting
     * Gets Minimum TLS Version setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetMinimumTlsVersionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMinimumTlsVersionSetting200Response zoneSettingsGetMinimumTlsVersionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetMinimumTlsVersionSetting200Response> localVarResp = zoneSettingsGetMinimumTlsVersionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Minimum TLS Version setting
     * Gets Minimum TLS Version setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMinimumTlsVersionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMinimumTlsVersionSetting200Response> zoneSettingsGetMinimumTlsVersionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetMinimumTlsVersionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinimumTlsVersionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Minimum TLS Version setting (asynchronously)
     * Gets Minimum TLS Version setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Minimum TLS Version setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Minimum TLS Version setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMinimumTlsVersionSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetMinimumTlsVersionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetMinimumTlsVersionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMinimumTlsVersionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetMirageSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMirageSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/mirage"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetMirageSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetMirageSetting(Async)");
        }

        return zoneSettingsGetMirageSettingCall(zoneId, _callback);

    }

    /**
     * Get Mirage setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetMirageSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMirageSetting200Response zoneSettingsGetMirageSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetMirageSetting200Response> localVarResp = zoneSettingsGetMirageSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Mirage setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMirageSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMirageSetting200Response> zoneSettingsGetMirageSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetMirageSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMirageSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Mirage setting (asynchronously)
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mirage setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mirage setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMirageSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetMirageSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetMirageSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMirageSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetMobileRedirectSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMobileRedirectSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/mobile_redirect"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetMobileRedirectSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetMobileRedirectSetting(Async)");
        }

        return zoneSettingsGetMobileRedirectSettingCall(zoneId, _callback);

    }

    /**
     * Get Mobile Redirect setting
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @return ZoneSettingsGetMobileRedirectSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetMobileRedirectSetting200Response zoneSettingsGetMobileRedirectSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetMobileRedirectSetting200Response> localVarResp = zoneSettingsGetMobileRedirectSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Mobile Redirect setting
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetMobileRedirectSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetMobileRedirectSetting200Response> zoneSettingsGetMobileRedirectSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetMobileRedirectSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMobileRedirectSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Mobile Redirect setting (asynchronously)
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Mobile Redirect setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Mobile Redirect setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetMobileRedirectSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetMobileRedirectSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetMobileRedirectSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetMobileRedirectSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetNelSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetNelSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/nel"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetNelSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetNelSetting(Async)");
        }

        return zoneSettingsGetNelSettingCall(zoneId, _callback);

    }

    /**
     * Get Network Error Logging setting
     * Enable Network Error Logging reporting on your zone. (Beta) 
     * @param zoneId  (required)
     * @return ZoneSettingsGetNelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetNelSetting200Response zoneSettingsGetNelSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetNelSetting200Response> localVarResp = zoneSettingsGetNelSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Network Error Logging setting
     * Enable Network Error Logging reporting on your zone. (Beta) 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetNelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetNelSetting200Response> zoneSettingsGetNelSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetNelSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetNelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Error Logging setting (asynchronously)
     * Enable Network Error Logging reporting on your zone. (Beta) 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Network Error Logging setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Network Error Logging setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetNelSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetNelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetNelSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetNelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetOpportunisticEncryptionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOpportunisticEncryptionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/opportunistic_encryption"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetOpportunisticEncryptionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetOpportunisticEncryptionSetting(Async)");
        }

        return zoneSettingsGetOpportunisticEncryptionSettingCall(zoneId, _callback);

    }

    /**
     * Get Opportunistic Encryption setting
     * Gets Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetOpportunisticEncryptionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOpportunisticEncryptionSetting200Response zoneSettingsGetOpportunisticEncryptionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetOpportunisticEncryptionSetting200Response> localVarResp = zoneSettingsGetOpportunisticEncryptionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Opportunistic Encryption setting
     * Gets Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOpportunisticEncryptionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOpportunisticEncryptionSetting200Response> zoneSettingsGetOpportunisticEncryptionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetOpportunisticEncryptionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticEncryptionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Opportunistic Encryption setting (asynchronously)
     * Gets Opportunistic Encryption setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Encryption setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Encryption setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOpportunisticEncryptionSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetOpportunisticEncryptionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetOpportunisticEncryptionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticEncryptionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetOpportunisticOnionSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOpportunisticOnionSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/opportunistic_onion"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetOpportunisticOnionSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetOpportunisticOnionSetting(Async)");
        }

        return zoneSettingsGetOpportunisticOnionSettingCall(zoneId, _callback);

    }

    /**
     * Get Opportunistic Onion setting
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @return ZoneSettingsGetOpportunisticOnionSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOpportunisticOnionSetting200Response zoneSettingsGetOpportunisticOnionSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetOpportunisticOnionSetting200Response> localVarResp = zoneSettingsGetOpportunisticOnionSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Opportunistic Onion setting
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOpportunisticOnionSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOpportunisticOnionSetting200Response> zoneSettingsGetOpportunisticOnionSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetOpportunisticOnionSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticOnionSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Opportunistic Onion setting (asynchronously)
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Opportunistic Onion setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Opportunistic Onion setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOpportunisticOnionSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetOpportunisticOnionSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetOpportunisticOnionSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOpportunisticOnionSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetOrangeToOrangeSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOrangeToOrangeSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/orange_to_orange"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetOrangeToOrangeSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetOrangeToOrangeSetting(Async)");
        }

        return zoneSettingsGetOrangeToOrangeSettingCall(zoneId, _callback);

    }

    /**
     * Get Orange to Orange (O2O) setting
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetOrangeToOrangeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetOrangeToOrangeSetting200Response zoneSettingsGetOrangeToOrangeSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetOrangeToOrangeSetting200Response> localVarResp = zoneSettingsGetOrangeToOrangeSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Orange to Orange (O2O) setting
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetOrangeToOrangeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetOrangeToOrangeSetting200Response> zoneSettingsGetOrangeToOrangeSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetOrangeToOrangeSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOrangeToOrangeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Orange to Orange (O2O) setting (asynchronously)
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Orange to Orange (O2O) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Orange to Orange (O2O) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetOrangeToOrangeSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetOrangeToOrangeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetOrangeToOrangeSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetOrangeToOrangeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetPolishSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPolishSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/polish"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetPolishSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetPolishSetting(Async)");
        }

        return zoneSettingsGetPolishSettingCall(zoneId, _callback);

    }

    /**
     * Get Polish setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetPolishSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPolishSetting200Response zoneSettingsGetPolishSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetPolishSetting200Response> localVarResp = zoneSettingsGetPolishSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Polish setting
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPolishSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPolishSetting200Response> zoneSettingsGetPolishSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetPolishSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPolishSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Polish setting (asynchronously)
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Polish setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Polish setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPolishSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetPolishSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetPolishSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPolishSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetPrefetchPreloadSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPrefetchPreloadSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/prefetch_preload"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetPrefetchPreloadSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetPrefetchPreloadSetting(Async)");
        }

        return zoneSettingsGetPrefetchPreloadSettingCall(zoneId, _callback);

    }

    /**
     * Get prefetch preload setting
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetPrefetchPreloadSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPrefetchPreloadSetting200Response zoneSettingsGetPrefetchPreloadSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetPrefetchPreloadSetting200Response> localVarResp = zoneSettingsGetPrefetchPreloadSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get prefetch preload setting
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPrefetchPreloadSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPrefetchPreloadSetting200Response> zoneSettingsGetPrefetchPreloadSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetPrefetchPreloadSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPrefetchPreloadSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get prefetch preload setting (asynchronously)
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get prefetch preload setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get prefetch preload setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPrefetchPreloadSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetPrefetchPreloadSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetPrefetchPreloadSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPrefetchPreloadSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetProxyReadTimeoutSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetProxyReadTimeoutSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/proxy_read_timeout"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetProxyReadTimeoutSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetProxyReadTimeoutSetting(Async)");
        }

        return zoneSettingsGetProxyReadTimeoutSettingCall(zoneId, _callback);

    }

    /**
     * Get Proxy Read Timeout setting
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetProxyReadTimeoutSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetProxyReadTimeoutSetting200Response zoneSettingsGetProxyReadTimeoutSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetProxyReadTimeoutSetting200Response> localVarResp = zoneSettingsGetProxyReadTimeoutSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Proxy Read Timeout setting
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetProxyReadTimeoutSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetProxyReadTimeoutSetting200Response> zoneSettingsGetProxyReadTimeoutSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetProxyReadTimeoutSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetProxyReadTimeoutSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Proxy Read Timeout setting (asynchronously)
     * Maximum time between two read operations from origin. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Proxy Read Timeout setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Proxy Read Timeout setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetProxyReadTimeoutSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetProxyReadTimeoutSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetProxyReadTimeoutSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetProxyReadTimeoutSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetPseudoIPv4Setting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPseudoIPv4SettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/pseudo_ipv4"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetPseudoIPv4SettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetPseudoIPv4Setting(Async)");
        }

        return zoneSettingsGetPseudoIPv4SettingCall(zoneId, _callback);

    }

    /**
     * Get Pseudo IPv4 setting
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @return ZoneSettingsGetPseudoIPv4Setting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetPseudoIPv4Setting200Response zoneSettingsGetPseudoIPv4Setting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetPseudoIPv4Setting200Response> localVarResp = zoneSettingsGetPseudoIPv4SettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Pseudo IPv4 setting
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetPseudoIPv4Setting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetPseudoIPv4Setting200Response> zoneSettingsGetPseudoIPv4SettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetPseudoIPv4SettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPseudoIPv4Setting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Pseudo IPv4 setting (asynchronously)
     * Value of the Pseudo IPv4 setting.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Pseudo IPv4 setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Pseudo IPv4 setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetPseudoIPv4SettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetPseudoIPv4Setting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetPseudoIPv4SettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetPseudoIPv4Setting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetResponseBufferingSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetResponseBufferingSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/response_buffering"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetResponseBufferingSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetResponseBufferingSetting(Async)");
        }

        return zoneSettingsGetResponseBufferingSettingCall(zoneId, _callback);

    }

    /**
     * Get Response Buffering setting
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetResponseBufferingSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetResponseBufferingSetting200Response zoneSettingsGetResponseBufferingSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetResponseBufferingSetting200Response> localVarResp = zoneSettingsGetResponseBufferingSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Response Buffering setting
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetResponseBufferingSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetResponseBufferingSetting200Response> zoneSettingsGetResponseBufferingSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetResponseBufferingSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetResponseBufferingSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Response Buffering setting (asynchronously)
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Response Buffering setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Response Buffering setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetResponseBufferingSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetResponseBufferingSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetResponseBufferingSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetResponseBufferingSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetRocketLoaderSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetRocketLoaderSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/rocket_loader"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetRocketLoaderSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetRocketLoaderSetting(Async)");
        }

        return zoneSettingsGetRocketLoaderSettingCall(zoneId, _callback);

    }

    /**
     * Get Rocket Loader setting
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetRocketLoaderSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetRocketLoaderSetting200Response zoneSettingsGetRocketLoaderSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetRocketLoaderSetting200Response> localVarResp = zoneSettingsGetRocketLoaderSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Rocket Loader setting
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetRocketLoaderSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetRocketLoaderSetting200Response> zoneSettingsGetRocketLoaderSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetRocketLoaderSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetRocketLoaderSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Rocket Loader setting (asynchronously)
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rocket Loader setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Rocket Loader setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetRocketLoaderSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetRocketLoaderSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetRocketLoaderSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetRocketLoaderSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetSecurityHeaderHstsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSecurityHeaderHstsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/security_header"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetSecurityHeaderHstsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetSecurityHeaderHstsSetting(Async)");
        }

        return zoneSettingsGetSecurityHeaderHstsSettingCall(zoneId, _callback);

    }

    /**
     * Get Security Header (HSTS) setting
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @return ZoneSettingsGetSecurityHeaderHstsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSecurityHeaderHstsSetting200Response zoneSettingsGetSecurityHeaderHstsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetSecurityHeaderHstsSetting200Response> localVarResp = zoneSettingsGetSecurityHeaderHstsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Security Header (HSTS) setting
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSecurityHeaderHstsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSecurityHeaderHstsSetting200Response> zoneSettingsGetSecurityHeaderHstsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetSecurityHeaderHstsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityHeaderHstsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Header (HSTS) setting (asynchronously)
     * Cloudflare security header for a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Header (HSTS) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Header (HSTS) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSecurityHeaderHstsSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetSecurityHeaderHstsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetSecurityHeaderHstsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityHeaderHstsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetSecurityLevelSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSecurityLevelSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/security_level"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetSecurityLevelSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetSecurityLevelSetting(Async)");
        }

        return zoneSettingsGetSecurityLevelSettingCall(zoneId, _callback);

    }

    /**
     * Get Security Level setting
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @return ZoneSettingsGetSecurityLevelSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSecurityLevelSetting200Response zoneSettingsGetSecurityLevelSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetSecurityLevelSetting200Response> localVarResp = zoneSettingsGetSecurityLevelSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Security Level setting
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSecurityLevelSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSecurityLevelSetting200Response> zoneSettingsGetSecurityLevelSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetSecurityLevelSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityLevelSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Level setting (asynchronously)
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Security Level setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Security Level setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSecurityLevelSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetSecurityLevelSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetSecurityLevelSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSecurityLevelSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetServerSideExcludeSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetServerSideExcludeSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/server_side_exclude"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetServerSideExcludeSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetServerSideExcludeSetting(Async)");
        }

        return zoneSettingsGetServerSideExcludeSettingCall(zoneId, _callback);

    }

    /**
     * Get Server Side Exclude setting
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @return ZoneSettingsGetServerSideExcludeSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetServerSideExcludeSetting200Response zoneSettingsGetServerSideExcludeSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetServerSideExcludeSetting200Response> localVarResp = zoneSettingsGetServerSideExcludeSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Server Side Exclude setting
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetServerSideExcludeSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetServerSideExcludeSetting200Response> zoneSettingsGetServerSideExcludeSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetServerSideExcludeSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetServerSideExcludeSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Server Side Exclude setting (asynchronously)
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Server Side Exclude setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Server Side Exclude setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetServerSideExcludeSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetServerSideExcludeSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetServerSideExcludeSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetServerSideExcludeSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetSslRecommenderSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSslRecommenderSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ssl_recommender"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetSslRecommenderSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetSslRecommenderSetting(Async)");
        }

        return zoneSettingsGetSslRecommenderSettingCall(zoneId, _callback);

    }

    /**
     * Get SSL/TLS Recommender enrollment setting
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @return ZoneSettingsGetSslRecommenderSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSslRecommenderSetting200Response zoneSettingsGetSslRecommenderSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetSslRecommenderSetting200Response> localVarResp = zoneSettingsGetSslRecommenderSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get SSL/TLS Recommender enrollment setting
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSslRecommenderSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSslRecommenderSetting200Response> zoneSettingsGetSslRecommenderSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetSslRecommenderSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslRecommenderSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SSL/TLS Recommender enrollment setting (asynchronously)
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL/TLS Recommender enrollment setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL/TLS Recommender enrollment setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSslRecommenderSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetSslRecommenderSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetSslRecommenderSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslRecommenderSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetSslSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSslSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/ssl"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetSslSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetSslSetting(Async)");
        }

        return zoneSettingsGetSslSettingCall(zoneId, _callback);

    }

    /**
     * Get SSL setting
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @return ZoneSettingsGetSslSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetSslSetting200Response zoneSettingsGetSslSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetSslSetting200Response> localVarResp = zoneSettingsGetSslSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get SSL setting
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetSslSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetSslSetting200Response> zoneSettingsGetSslSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetSslSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SSL setting (asynchronously)
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get SSL setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get SSL setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetSslSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetSslSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetSslSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetSslSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetTls13SettingEnabledForAZone
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS 1.3 setting enabled for a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS 1.3 setting enabled for a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTls13SettingEnabledForAZoneCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/tls_1_3"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetTls13SettingEnabledForAZoneValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetTls13SettingEnabledForAZone(Async)");
        }

        return zoneSettingsGetTls13SettingEnabledForAZoneCall(zoneId, _callback);

    }

    /**
     * Get TLS 1.3 setting enabled for a zone
     * Gets TLS 1.3 setting enabled for a zone.
     * @param zoneId  (required)
     * @return ZoneSettingsGetTls13SettingEnabledForAZone200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS 1.3 setting enabled for a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS 1.3 setting enabled for a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTls13SettingEnabledForAZone200Response zoneSettingsGetTls13SettingEnabledForAZone(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetTls13SettingEnabledForAZone200Response> localVarResp = zoneSettingsGetTls13SettingEnabledForAZoneWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get TLS 1.3 setting enabled for a zone
     * Gets TLS 1.3 setting enabled for a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTls13SettingEnabledForAZone200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS 1.3 setting enabled for a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS 1.3 setting enabled for a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTls13SettingEnabledForAZone200Response> zoneSettingsGetTls13SettingEnabledForAZoneWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetTls13SettingEnabledForAZoneValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTls13SettingEnabledForAZone200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS 1.3 setting enabled for a zone (asynchronously)
     * Gets TLS 1.3 setting enabled for a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS 1.3 setting enabled for a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS 1.3 setting enabled for a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTls13SettingEnabledForAZoneAsync(String zoneId, final ApiCallback<ZoneSettingsGetTls13SettingEnabledForAZone200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetTls13SettingEnabledForAZoneValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTls13SettingEnabledForAZone200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetTlsClientAuthSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTlsClientAuthSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/tls_client_auth"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetTlsClientAuthSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetTlsClientAuthSetting(Async)");
        }

        return zoneSettingsGetTlsClientAuthSettingCall(zoneId, _callback);

    }

    /**
     * Get TLS Client Auth setting
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @return ZoneSettingsGetTlsClientAuthSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTlsClientAuthSetting200Response zoneSettingsGetTlsClientAuthSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetTlsClientAuthSetting200Response> localVarResp = zoneSettingsGetTlsClientAuthSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get TLS Client Auth setting
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTlsClientAuthSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTlsClientAuthSetting200Response> zoneSettingsGetTlsClientAuthSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetTlsClientAuthSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTlsClientAuthSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS Client Auth setting (asynchronously)
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get TLS Client Auth setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get TLS Client Auth setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTlsClientAuthSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetTlsClientAuthSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetTlsClientAuthSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTlsClientAuthSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetTrueClientIpSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTrueClientIpSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/true_client_ip_header"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetTrueClientIpSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetTrueClientIpSetting(Async)");
        }

        return zoneSettingsGetTrueClientIpSettingCall(zoneId, _callback);

    }

    /**
     * Get True Client IP setting
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ZoneSettingsGetTrueClientIpSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetTrueClientIpSetting200Response zoneSettingsGetTrueClientIpSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetTrueClientIpSetting200Response> localVarResp = zoneSettingsGetTrueClientIpSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get True Client IP setting
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetTrueClientIpSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetTrueClientIpSetting200Response> zoneSettingsGetTrueClientIpSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetTrueClientIpSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTrueClientIpSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get True Client IP setting (asynchronously)
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get True Client IP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get True Client IP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetTrueClientIpSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetTrueClientIpSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetTrueClientIpSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetTrueClientIpSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetWebApplicationFirewallWafSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebApplicationFirewallWafSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/waf"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetWebApplicationFirewallWafSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetWebApplicationFirewallWafSetting(Async)");
        }

        return zoneSettingsGetWebApplicationFirewallWafSettingCall(zoneId, _callback);

    }

    /**
     * Get Web Application Firewall (WAF) setting
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @return ZoneSettingsGetWebApplicationFirewallWafSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebApplicationFirewallWafSetting200Response zoneSettingsGetWebApplicationFirewallWafSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> localVarResp = zoneSettingsGetWebApplicationFirewallWafSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Web Application Firewall (WAF) setting
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebApplicationFirewallWafSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> zoneSettingsGetWebApplicationFirewallWafSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetWebApplicationFirewallWafSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebApplicationFirewallWafSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Web Application Firewall (WAF) setting (asynchronously)
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Web Application Firewall (WAF) setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Web Application Firewall (WAF) setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebApplicationFirewallWafSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetWebApplicationFirewallWafSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetWebApplicationFirewallWafSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebApplicationFirewallWafSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetWebPSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebPSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/webp"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetWebPSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetWebPSetting(Async)");
        }

        return zoneSettingsGetWebPSettingCall(zoneId, _callback);

    }

    /**
     * Get WebP setting
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @return ZoneSettingsGetWebPSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebPSetting200Response zoneSettingsGetWebPSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetWebPSetting200Response> localVarResp = zoneSettingsGetWebPSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get WebP setting
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebPSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebPSetting200Response> zoneSettingsGetWebPSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetWebPSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebPSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WebP setting (asynchronously)
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebP setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebP setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebPSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetWebPSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetWebPSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebPSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneSettingsGetWebSocketsSetting
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebSocketsSettingCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/settings/websockets"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneSettingsGetWebSocketsSettingValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneSettingsGetWebSocketsSetting(Async)");
        }

        return zoneSettingsGetWebSocketsSettingCall(zoneId, _callback);

    }

    /**
     * Get WebSockets setting
     * Gets Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @return ZoneSettingsGetWebSocketsSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneSettingsGetWebSocketsSetting200Response zoneSettingsGetWebSocketsSetting(String zoneId) throws ApiException {
        ApiResponse<ZoneSettingsGetWebSocketsSetting200Response> localVarResp = zoneSettingsGetWebSocketsSettingWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get WebSockets setting
     * Gets Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZoneSettingsGetWebSocketsSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneSettingsGetWebSocketsSetting200Response> zoneSettingsGetWebSocketsSettingWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneSettingsGetWebSocketsSettingValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebSocketsSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WebSockets setting (asynchronously)
     * Gets Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get WebSockets setting response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get WebSockets setting response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneSettingsGetWebSocketsSettingAsync(String zoneId, final ApiCallback<ZoneSettingsGetWebSocketsSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneSettingsGetWebSocketsSettingValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZoneSettingsGetWebSocketsSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
