/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EmailCreateDestinationAddressProperties;
import org.openapitools.client.model.EmailDestinationAddressResponseSingle;
import org.openapitools.client.model.EmailDestinationAddressesResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailRoutingDestinationAddressesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailRoutingDestinationAddressesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailRoutingDestinationAddressesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for emailRoutingDestinationAddressesCreateADestinationAddress
     * @param accountIdentifier  (required)
     * @param emailCreateDestinationAddressProperties  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesCreateADestinationAddressCall(String accountIdentifier, EmailCreateDestinationAddressProperties emailCreateDestinationAddressProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailCreateDestinationAddressProperties;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/email/routing/addresses"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingDestinationAddressesCreateADestinationAddressValidateBeforeCall(String accountIdentifier, EmailCreateDestinationAddressProperties emailCreateDestinationAddressProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling emailRoutingDestinationAddressesCreateADestinationAddress(Async)");
        }

        // verify the required parameter 'emailCreateDestinationAddressProperties' is set
        if (emailCreateDestinationAddressProperties == null) {
            throw new ApiException("Missing the required parameter 'emailCreateDestinationAddressProperties' when calling emailRoutingDestinationAddressesCreateADestinationAddress(Async)");
        }

        return emailRoutingDestinationAddressesCreateADestinationAddressCall(accountIdentifier, emailCreateDestinationAddressProperties, _callback);

    }

    /**
     * Create a destination address
     * Create a destination address to forward your emails to. Destination addresses need to be verified before they can be used.
     * @param accountIdentifier  (required)
     * @param emailCreateDestinationAddressProperties  (required)
     * @return EmailDestinationAddressResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public EmailDestinationAddressResponseSingle emailRoutingDestinationAddressesCreateADestinationAddress(String accountIdentifier, EmailCreateDestinationAddressProperties emailCreateDestinationAddressProperties) throws ApiException {
        ApiResponse<EmailDestinationAddressResponseSingle> localVarResp = emailRoutingDestinationAddressesCreateADestinationAddressWithHttpInfo(accountIdentifier, emailCreateDestinationAddressProperties);
        return localVarResp.getData();
    }

    /**
     * Create a destination address
     * Create a destination address to forward your emails to. Destination addresses need to be verified before they can be used.
     * @param accountIdentifier  (required)
     * @param emailCreateDestinationAddressProperties  (required)
     * @return ApiResponse&lt;EmailDestinationAddressResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailDestinationAddressResponseSingle> emailRoutingDestinationAddressesCreateADestinationAddressWithHttpInfo(String accountIdentifier, EmailCreateDestinationAddressProperties emailCreateDestinationAddressProperties) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingDestinationAddressesCreateADestinationAddressValidateBeforeCall(accountIdentifier, emailCreateDestinationAddressProperties, null);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a destination address (asynchronously)
     * Create a destination address to forward your emails to. Destination addresses need to be verified before they can be used.
     * @param accountIdentifier  (required)
     * @param emailCreateDestinationAddressProperties  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesCreateADestinationAddressAsync(String accountIdentifier, EmailCreateDestinationAddressProperties emailCreateDestinationAddressProperties, final ApiCallback<EmailDestinationAddressResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingDestinationAddressesCreateADestinationAddressValidateBeforeCall(accountIdentifier, emailCreateDestinationAddressProperties, _callback);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingDestinationAddressesDeleteDestinationAddress
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesDeleteDestinationAddressCall(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/email/routing/addresses/{destination_address_identifier}"
            .replace("{" + "destination_address_identifier" + "}", localVarApiClient.escapeString(destinationAddressIdentifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingDestinationAddressesDeleteDestinationAddressValidateBeforeCall(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationAddressIdentifier' is set
        if (destinationAddressIdentifier == null) {
            throw new ApiException("Missing the required parameter 'destinationAddressIdentifier' when calling emailRoutingDestinationAddressesDeleteDestinationAddress(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling emailRoutingDestinationAddressesDeleteDestinationAddress(Async)");
        }

        return emailRoutingDestinationAddressesDeleteDestinationAddressCall(destinationAddressIdentifier, accountIdentifier, _callback);

    }

    /**
     * Delete destination address
     * Deletes a specific destination address.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return EmailDestinationAddressResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete destination address response </td><td>  -  </td></tr>
     </table>
     */
    public EmailDestinationAddressResponseSingle emailRoutingDestinationAddressesDeleteDestinationAddress(String destinationAddressIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<EmailDestinationAddressResponseSingle> localVarResp = emailRoutingDestinationAddressesDeleteDestinationAddressWithHttpInfo(destinationAddressIdentifier, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete destination address
     * Deletes a specific destination address.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;EmailDestinationAddressResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete destination address response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailDestinationAddressResponseSingle> emailRoutingDestinationAddressesDeleteDestinationAddressWithHttpInfo(String destinationAddressIdentifier, String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingDestinationAddressesDeleteDestinationAddressValidateBeforeCall(destinationAddressIdentifier, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete destination address (asynchronously)
     * Deletes a specific destination address.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesDeleteDestinationAddressAsync(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback<EmailDestinationAddressResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingDestinationAddressesDeleteDestinationAddressValidateBeforeCall(destinationAddressIdentifier, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingDestinationAddressesGetADestinationAddress
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesGetADestinationAddressCall(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/email/routing/addresses/{destination_address_identifier}"
            .replace("{" + "destination_address_identifier" + "}", localVarApiClient.escapeString(destinationAddressIdentifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingDestinationAddressesGetADestinationAddressValidateBeforeCall(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationAddressIdentifier' is set
        if (destinationAddressIdentifier == null) {
            throw new ApiException("Missing the required parameter 'destinationAddressIdentifier' when calling emailRoutingDestinationAddressesGetADestinationAddress(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling emailRoutingDestinationAddressesGetADestinationAddress(Async)");
        }

        return emailRoutingDestinationAddressesGetADestinationAddressCall(destinationAddressIdentifier, accountIdentifier, _callback);

    }

    /**
     * Get a destination address
     * Gets information for a specific destination email already created.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return EmailDestinationAddressResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public EmailDestinationAddressResponseSingle emailRoutingDestinationAddressesGetADestinationAddress(String destinationAddressIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<EmailDestinationAddressResponseSingle> localVarResp = emailRoutingDestinationAddressesGetADestinationAddressWithHttpInfo(destinationAddressIdentifier, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a destination address
     * Gets information for a specific destination email already created.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;EmailDestinationAddressResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailDestinationAddressResponseSingle> emailRoutingDestinationAddressesGetADestinationAddressWithHttpInfo(String destinationAddressIdentifier, String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingDestinationAddressesGetADestinationAddressValidateBeforeCall(destinationAddressIdentifier, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a destination address (asynchronously)
     * Gets information for a specific destination email already created.
     * @param destinationAddressIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a destination address response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesGetADestinationAddressAsync(String destinationAddressIdentifier, String accountIdentifier, final ApiCallback<EmailDestinationAddressResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingDestinationAddressesGetADestinationAddressValidateBeforeCall(destinationAddressIdentifier, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailRoutingDestinationAddressesListDestinationAddresses
     * @param accountIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param verified  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List destination addresses response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesListDestinationAddressesCall(String accountIdentifier, BigDecimal page, BigDecimal perPage, String direction, Boolean verified, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/email/routing/addresses"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (verified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verified", verified));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailRoutingDestinationAddressesListDestinationAddressesValidateBeforeCall(String accountIdentifier, BigDecimal page, BigDecimal perPage, String direction, Boolean verified, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling emailRoutingDestinationAddressesListDestinationAddresses(Async)");
        }

        return emailRoutingDestinationAddressesListDestinationAddressesCall(accountIdentifier, page, perPage, direction, verified, _callback);

    }

    /**
     * List destination addresses
     * Lists existing destination addresses.
     * @param accountIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param verified  (optional, default to true)
     * @return EmailDestinationAddressesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List destination addresses response </td><td>  -  </td></tr>
     </table>
     */
    public EmailDestinationAddressesResponseCollection emailRoutingDestinationAddressesListDestinationAddresses(String accountIdentifier, BigDecimal page, BigDecimal perPage, String direction, Boolean verified) throws ApiException {
        ApiResponse<EmailDestinationAddressesResponseCollection> localVarResp = emailRoutingDestinationAddressesListDestinationAddressesWithHttpInfo(accountIdentifier, page, perPage, direction, verified);
        return localVarResp.getData();
    }

    /**
     * List destination addresses
     * Lists existing destination addresses.
     * @param accountIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param verified  (optional, default to true)
     * @return ApiResponse&lt;EmailDestinationAddressesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List destination addresses response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailDestinationAddressesResponseCollection> emailRoutingDestinationAddressesListDestinationAddressesWithHttpInfo(String accountIdentifier, BigDecimal page, BigDecimal perPage, String direction, Boolean verified) throws ApiException {
        okhttp3.Call localVarCall = emailRoutingDestinationAddressesListDestinationAddressesValidateBeforeCall(accountIdentifier, page, perPage, direction, verified, null);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressesResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List destination addresses (asynchronously)
     * Lists existing destination addresses.
     * @param accountIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param verified  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List destination addresses response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailRoutingDestinationAddressesListDestinationAddressesAsync(String accountIdentifier, BigDecimal page, BigDecimal perPage, String direction, Boolean verified, final ApiCallback<EmailDestinationAddressesResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailRoutingDestinationAddressesListDestinationAddressesValidateBeforeCall(accountIdentifier, page, perPage, direction, verified, _callback);
        Type localVarReturnType = new TypeToken<EmailDestinationAddressesResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
