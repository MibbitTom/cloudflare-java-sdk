/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CustomHostnameForAZoneCreateCustomHostname4XXResponse;
import org.openapitools.client.model.CustomHostnameForAZoneCreateCustomHostnameRequest;
import org.openapitools.client.model.CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response;
import org.openapitools.client.model.CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates4XXResponse;
import org.openapitools.client.model.CustomHostnameForAZoneEditCustomHostnameRequest;
import org.openapitools.client.model.CustomHostnameForAZoneListCustomHostnames4XXResponse;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCustomHostnameResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCustomHostnameResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomHostnameForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomHostnameForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomHostnameForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customHostnameForAZoneCreateCustomHostname
     * @param zoneId  (required)
     * @param customHostnameForAZoneCreateCustomHostnameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneCreateCustomHostnameCall(String zoneId, CustomHostnameForAZoneCreateCustomHostnameRequest customHostnameForAZoneCreateCustomHostnameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customHostnameForAZoneCreateCustomHostnameRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_hostnames"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customHostnameForAZoneCreateCustomHostnameValidateBeforeCall(String zoneId, CustomHostnameForAZoneCreateCustomHostnameRequest customHostnameForAZoneCreateCustomHostnameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customHostnameForAZoneCreateCustomHostname(Async)");
        }

        // verify the required parameter 'customHostnameForAZoneCreateCustomHostnameRequest' is set
        if (customHostnameForAZoneCreateCustomHostnameRequest == null) {
            throw new ApiException("Missing the required parameter 'customHostnameForAZoneCreateCustomHostnameRequest' when calling customHostnameForAZoneCreateCustomHostname(Async)");
        }

        return customHostnameForAZoneCreateCustomHostnameCall(zoneId, customHostnameForAZoneCreateCustomHostnameRequest, _callback);

    }

    /**
     * Create Custom Hostname
     * Add a new custom hostname and request that an SSL certificate be issued for it. One of three validation methods—http, txt, email—should be used, with &#39;http&#39; recommended if the CNAME is already in place (or will be soon). Specifying &#39;email&#39; will send an email to the WHOIS contacts on file for the base domain plus hostmaster, postmaster, webmaster, admin, administrator. If http is used and the domain is not already pointing to the Managed CNAME host, the PATCH method must be used once it is (to complete validation).
     * @param zoneId  (required)
     * @param customHostnameForAZoneCreateCustomHostnameRequest  (required)
     * @return TlsCertificatesAndHostnamesCustomHostnameResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCustomHostnameResponseSingle customHostnameForAZoneCreateCustomHostname(String zoneId, CustomHostnameForAZoneCreateCustomHostnameRequest customHostnameForAZoneCreateCustomHostnameRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> localVarResp = customHostnameForAZoneCreateCustomHostnameWithHttpInfo(zoneId, customHostnameForAZoneCreateCustomHostnameRequest);
        return localVarResp.getData();
    }

    /**
     * Create Custom Hostname
     * Add a new custom hostname and request that an SSL certificate be issued for it. One of three validation methods—http, txt, email—should be used, with &#39;http&#39; recommended if the CNAME is already in place (or will be soon). Specifying &#39;email&#39; will send an email to the WHOIS contacts on file for the base domain plus hostmaster, postmaster, webmaster, admin, administrator. If http is used and the domain is not already pointing to the Managed CNAME host, the PATCH method must be used once it is (to complete validation).
     * @param zoneId  (required)
     * @param customHostnameForAZoneCreateCustomHostnameRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCustomHostnameResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> customHostnameForAZoneCreateCustomHostnameWithHttpInfo(String zoneId, CustomHostnameForAZoneCreateCustomHostnameRequest customHostnameForAZoneCreateCustomHostnameRequest) throws ApiException {
        okhttp3.Call localVarCall = customHostnameForAZoneCreateCustomHostnameValidateBeforeCall(zoneId, customHostnameForAZoneCreateCustomHostnameRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Custom Hostname (asynchronously)
     * Add a new custom hostname and request that an SSL certificate be issued for it. One of three validation methods—http, txt, email—should be used, with &#39;http&#39; recommended if the CNAME is already in place (or will be soon). Specifying &#39;email&#39; will send an email to the WHOIS contacts on file for the base domain plus hostmaster, postmaster, webmaster, admin, administrator. If http is used and the domain is not already pointing to the Managed CNAME host, the PATCH method must be used once it is (to complete validation).
     * @param zoneId  (required)
     * @param customHostnameForAZoneCreateCustomHostnameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneCreateCustomHostnameAsync(String zoneId, CustomHostnameForAZoneCreateCustomHostnameRequest customHostnameForAZoneCreateCustomHostnameRequest, final ApiCallback<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customHostnameForAZoneCreateCustomHostnameValidateBeforeCall(zoneId, customHostnameForAZoneCreateCustomHostnameRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customHostnameForAZoneCustomHostnameDetails
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Custom Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneCustomHostnameDetailsCall(String customHostnameId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_hostnames/{custom_hostname_id}"
            .replace("{" + "custom_hostname_id" + "}", localVarApiClient.escapeString(customHostnameId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customHostnameForAZoneCustomHostnameDetailsValidateBeforeCall(String customHostnameId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customHostnameId' is set
        if (customHostnameId == null) {
            throw new ApiException("Missing the required parameter 'customHostnameId' when calling customHostnameForAZoneCustomHostnameDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customHostnameForAZoneCustomHostnameDetails(Async)");
        }

        return customHostnameForAZoneCustomHostnameDetailsCall(customHostnameId, zoneId, _callback);

    }

    /**
     * Custom Hostname Details
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCustomHostnameResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Custom Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCustomHostnameResponseSingle customHostnameForAZoneCustomHostnameDetails(String customHostnameId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> localVarResp = customHostnameForAZoneCustomHostnameDetailsWithHttpInfo(customHostnameId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Custom Hostname Details
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCustomHostnameResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Custom Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> customHostnameForAZoneCustomHostnameDetailsWithHttpInfo(String customHostnameId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = customHostnameForAZoneCustomHostnameDetailsValidateBeforeCall(customHostnameId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Custom Hostname Details (asynchronously)
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom Hostname Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Custom Hostname Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneCustomHostnameDetailsAsync(String customHostnameId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customHostnameForAZoneCustomHostnameDetailsValidateBeforeCall(customHostnameId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Custom Hostname (and any issued SSL certificates) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Custom Hostname (and any issued SSL certificates) response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesCall(String customHostnameId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_hostnames/{custom_hostname_id}"
            .replace("{" + "custom_hostname_id" + "}", localVarApiClient.escapeString(customHostnameId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesValidateBeforeCall(String customHostnameId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customHostnameId' is set
        if (customHostnameId == null) {
            throw new ApiException("Missing the required parameter 'customHostnameId' when calling customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates(Async)");
        }

        return customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesCall(customHostnameId, zoneId, _callback);

    }

    /**
     * Delete Custom Hostname (and any issued SSL certificates)
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @return CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Custom Hostname (and any issued SSL certificates) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Custom Hostname (and any issued SSL certificates) response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates(String customHostnameId, String zoneId) throws ApiException {
        ApiResponse<CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response> localVarResp = customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesWithHttpInfo(customHostnameId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Custom Hostname (and any issued SSL certificates)
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Custom Hostname (and any issued SSL certificates) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Custom Hostname (and any issued SSL certificates) response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response> customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesWithHttpInfo(String customHostnameId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesValidateBeforeCall(customHostnameId, zoneId, null);
        Type localVarReturnType = new TypeToken<CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Custom Hostname (and any issued SSL certificates) (asynchronously)
     * 
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Custom Hostname (and any issued SSL certificates) response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Custom Hostname (and any issued SSL certificates) response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesAsync(String customHostnameId, String zoneId, final ApiCallback<CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificatesValidateBeforeCall(customHostnameId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<CustomHostnameForAZoneDeleteCustomHostnameAndAnyIssuedSslCertificates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customHostnameForAZoneEditCustomHostname
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param customHostnameForAZoneEditCustomHostnameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneEditCustomHostnameCall(String customHostnameId, String zoneId, CustomHostnameForAZoneEditCustomHostnameRequest customHostnameForAZoneEditCustomHostnameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customHostnameForAZoneEditCustomHostnameRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_hostnames/{custom_hostname_id}"
            .replace("{" + "custom_hostname_id" + "}", localVarApiClient.escapeString(customHostnameId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customHostnameForAZoneEditCustomHostnameValidateBeforeCall(String customHostnameId, String zoneId, CustomHostnameForAZoneEditCustomHostnameRequest customHostnameForAZoneEditCustomHostnameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customHostnameId' is set
        if (customHostnameId == null) {
            throw new ApiException("Missing the required parameter 'customHostnameId' when calling customHostnameForAZoneEditCustomHostname(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customHostnameForAZoneEditCustomHostname(Async)");
        }

        // verify the required parameter 'customHostnameForAZoneEditCustomHostnameRequest' is set
        if (customHostnameForAZoneEditCustomHostnameRequest == null) {
            throw new ApiException("Missing the required parameter 'customHostnameForAZoneEditCustomHostnameRequest' when calling customHostnameForAZoneEditCustomHostname(Async)");
        }

        return customHostnameForAZoneEditCustomHostnameCall(customHostnameId, zoneId, customHostnameForAZoneEditCustomHostnameRequest, _callback);

    }

    /**
     * Edit Custom Hostname
     * Modify SSL configuration for a custom hostname. When sent with SSL config that matches existing config, used to indicate that hostname should pass domain control validation (DCV). Can also be used to change validation type, e.g., from &#39;http&#39; to &#39;email&#39;.
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param customHostnameForAZoneEditCustomHostnameRequest  (required)
     * @return TlsCertificatesAndHostnamesCustomHostnameResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCustomHostnameResponseSingle customHostnameForAZoneEditCustomHostname(String customHostnameId, String zoneId, CustomHostnameForAZoneEditCustomHostnameRequest customHostnameForAZoneEditCustomHostnameRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> localVarResp = customHostnameForAZoneEditCustomHostnameWithHttpInfo(customHostnameId, zoneId, customHostnameForAZoneEditCustomHostnameRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Custom Hostname
     * Modify SSL configuration for a custom hostname. When sent with SSL config that matches existing config, used to indicate that hostname should pass domain control validation (DCV). Can also be used to change validation type, e.g., from &#39;http&#39; to &#39;email&#39;.
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param customHostnameForAZoneEditCustomHostnameRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCustomHostnameResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> customHostnameForAZoneEditCustomHostnameWithHttpInfo(String customHostnameId, String zoneId, CustomHostnameForAZoneEditCustomHostnameRequest customHostnameForAZoneEditCustomHostnameRequest) throws ApiException {
        okhttp3.Call localVarCall = customHostnameForAZoneEditCustomHostnameValidateBeforeCall(customHostnameId, zoneId, customHostnameForAZoneEditCustomHostnameRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Custom Hostname (asynchronously)
     * Modify SSL configuration for a custom hostname. When sent with SSL config that matches existing config, used to indicate that hostname should pass domain control validation (DCV). Can also be used to change validation type, e.g., from &#39;http&#39; to &#39;email&#39;.
     * @param customHostnameId  (required)
     * @param zoneId  (required)
     * @param customHostnameForAZoneEditCustomHostnameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Custom Hostname response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Custom Hostname response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneEditCustomHostnameAsync(String customHostnameId, String zoneId, CustomHostnameForAZoneEditCustomHostnameRequest customHostnameForAZoneEditCustomHostnameRequest, final ApiCallback<TlsCertificatesAndHostnamesCustomHostnameResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = customHostnameForAZoneEditCustomHostnameValidateBeforeCall(customHostnameId, zoneId, customHostnameForAZoneEditCustomHostnameRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customHostnameForAZoneListCustomHostnames
     * @param zoneId  (required)
     * @param hostname  (optional)
     * @param id  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional, default to ssl)
     * @param direction  (optional)
     * @param ssl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Custom Hostnames response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Custom Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneListCustomHostnamesCall(String zoneId, String hostname, String id, BigDecimal page, BigDecimal perPage, String order, String direction, BigDecimal ssl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/custom_hostnames"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostname", hostname));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (ssl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssl", ssl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customHostnameForAZoneListCustomHostnamesValidateBeforeCall(String zoneId, String hostname, String id, BigDecimal page, BigDecimal perPage, String order, String direction, BigDecimal ssl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling customHostnameForAZoneListCustomHostnames(Async)");
        }

        return customHostnameForAZoneListCustomHostnamesCall(zoneId, hostname, id, page, perPage, order, direction, ssl, _callback);

    }

    /**
     * List Custom Hostnames
     * List, search, sort, and filter all of your custom hostnames.
     * @param zoneId  (required)
     * @param hostname  (optional)
     * @param id  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional, default to ssl)
     * @param direction  (optional)
     * @param ssl  (optional)
     * @return TlsCertificatesAndHostnamesCustomHostnameResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Custom Hostnames response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Custom Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCustomHostnameResponseCollection customHostnameForAZoneListCustomHostnames(String zoneId, String hostname, String id, BigDecimal page, BigDecimal perPage, String order, String direction, BigDecimal ssl) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseCollection> localVarResp = customHostnameForAZoneListCustomHostnamesWithHttpInfo(zoneId, hostname, id, page, perPage, order, direction, ssl);
        return localVarResp.getData();
    }

    /**
     * List Custom Hostnames
     * List, search, sort, and filter all of your custom hostnames.
     * @param zoneId  (required)
     * @param hostname  (optional)
     * @param id  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional, default to ssl)
     * @param direction  (optional)
     * @param ssl  (optional)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCustomHostnameResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Custom Hostnames response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Custom Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCustomHostnameResponseCollection> customHostnameForAZoneListCustomHostnamesWithHttpInfo(String zoneId, String hostname, String id, BigDecimal page, BigDecimal perPage, String order, String direction, BigDecimal ssl) throws ApiException {
        okhttp3.Call localVarCall = customHostnameForAZoneListCustomHostnamesValidateBeforeCall(zoneId, hostname, id, page, perPage, order, direction, ssl, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Custom Hostnames (asynchronously)
     * List, search, sort, and filter all of your custom hostnames.
     * @param zoneId  (required)
     * @param hostname  (optional)
     * @param id  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional, default to ssl)
     * @param direction  (optional)
     * @param ssl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Custom Hostnames response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Custom Hostnames response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customHostnameForAZoneListCustomHostnamesAsync(String zoneId, String hostname, String id, BigDecimal page, BigDecimal perPage, String order, String direction, BigDecimal ssl, final ApiCallback<TlsCertificatesAndHostnamesCustomHostnameResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customHostnameForAZoneListCustomHostnamesValidateBeforeCall(zoneId, hostname, id, page, perPage, order, direction, ssl, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCustomHostnameResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
