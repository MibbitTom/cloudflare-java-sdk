/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkersAiPostRunCfBaaiBgeBaseEnV15400Response;
import org.openapitools.client.model.WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response;
import org.openapitools.client.model.WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersAiTextClassificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersAiTextClassificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersAiTextClassificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workersAiPostRunCfHuggingfaceDistilbertSst2Int8
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfHuggingfaceDistilbertSst2Int8Call(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/huggingface/distilbert-sst-2-int8"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfHuggingfaceDistilbertSst2Int8ValidateBeforeCall(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfHuggingfaceDistilbertSst2Int8(Async)");
        }

        return workersAiPostRunCfHuggingfaceDistilbertSst2Int8Call(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);

    }

    /**
     * Execute @cf/huggingface/distilbert-sst-2-int8 model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response workersAiPostRunCfHuggingfaceDistilbertSst2Int8(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> localVarResp = workersAiPostRunCfHuggingfaceDistilbertSst2Int8WithHttpInfo(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/huggingface/distilbert-sst-2-int8 model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> workersAiPostRunCfHuggingfaceDistilbertSst2Int8WithHttpInfo(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfHuggingfaceDistilbertSst2Int8ValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/huggingface/distilbert-sst-2-int8 model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfHuggingfaceDistilbertSst2Int8Async(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfHuggingfaceDistilbertSst2Int8ValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfInmlInmlRobertaDga
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfInmlInmlRobertaDgaCall(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/inml/inml-roberta-dga"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfInmlInmlRobertaDgaValidateBeforeCall(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfInmlInmlRobertaDga(Async)");
        }

        return workersAiPostRunCfInmlInmlRobertaDgaCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);

    }

    /**
     * Execute @cf/inml/inml-roberta-dga model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response workersAiPostRunCfInmlInmlRobertaDga(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> localVarResp = workersAiPostRunCfInmlInmlRobertaDgaWithHttpInfo(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/inml/inml-roberta-dga model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> workersAiPostRunCfInmlInmlRobertaDgaWithHttpInfo(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfInmlInmlRobertaDgaValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/inml/inml-roberta-dga model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfInmlInmlRobertaDgaAsync(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfInmlInmlRobertaDgaValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workersAiPostRunCfJpmorganchaseRobertaSpam
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfJpmorganchaseRobertaSpamCall(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/ai/run/@cf/jpmorganchase/roberta-spam"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workersAiPostRunCfJpmorganchaseRobertaSpamValidateBeforeCall(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling workersAiPostRunCfJpmorganchaseRobertaSpam(Async)");
        }

        return workersAiPostRunCfJpmorganchaseRobertaSpamCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);

    }

    /**
     * Execute @cf/jpmorganchase/roberta-spam model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response workersAiPostRunCfJpmorganchaseRobertaSpam(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> localVarResp = workersAiPostRunCfJpmorganchaseRobertaSpamWithHttpInfo(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request);
        return localVarResp.getData();
    }

    /**
     * Execute @cf/jpmorganchase/roberta-spam model.
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @return ApiResponse&lt;WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> workersAiPostRunCfJpmorganchaseRobertaSpamWithHttpInfo(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request) throws ApiException {
        okhttp3.Call localVarCall = workersAiPostRunCfJpmorganchaseRobertaSpamValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, null);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute @cf/jpmorganchase/roberta-spam model. (asynchronously)
     * 
     * @param accountId  (required)
     * @param workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workersAiPostRunCfJpmorganchaseRobertaSpamAsync(String accountId, WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8Request workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, final ApiCallback<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = workersAiPostRunCfJpmorganchaseRobertaSpamValidateBeforeCall(accountId, workersAiPostRunCfHuggingfaceDistilbertSst2Int8Request, _callback);
        Type localVarReturnType = new TypeToken<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
