/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicMultipleRouteDeleteResponse;
import org.openapitools.client.model.MagicMultipleRouteModifiedResponse;
import org.openapitools.client.model.MagicRouteDeleteManyRequest;
import org.openapitools.client.model.MagicRouteDeletedResponse;
import org.openapitools.client.model.MagicRouteModifiedResponse;
import org.openapitools.client.model.MagicRouteSingleResponse;
import org.openapitools.client.model.MagicRouteUpdateManyRequest;
import org.openapitools.client.model.MagicRouteUpdateRequest;
import org.openapitools.client.model.MagicRoutesCollectionResponse;
import org.openapitools.client.model.MagicStaticRoutesDeleteManyRoutes4XXResponse;
import org.openapitools.client.model.MagicStaticRoutesDeleteRoute4XXResponse;
import org.openapitools.client.model.MagicStaticRoutesListRoutes4XXResponse;
import org.openapitools.client.model.MagicStaticRoutesRouteDetails4XXResponse;
import org.openapitools.client.model.MagicStaticRoutesUpdateManyRoutes4XXResponse;
import org.openapitools.client.model.MagicStaticRoutesUpdateRoute4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicStaticRoutesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicStaticRoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicStaticRoutesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicStaticRoutesCreateRoutes
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesCreateRoutesCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesCreateRoutesValidateBeforeCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesCreateRoutes(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicStaticRoutesCreateRoutes(Async)");
        }

        return magicStaticRoutesCreateRoutesCall(accountId, body, _callback);

    }

    /**
     * Create Routes
     * Creates a new Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return MagicRoutesCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicRoutesCollectionResponse magicStaticRoutesCreateRoutes(String accountId, Object body) throws ApiException {
        ApiResponse<MagicRoutesCollectionResponse> localVarResp = magicStaticRoutesCreateRoutesWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create Routes
     * Creates a new Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;MagicRoutesCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicRoutesCollectionResponse> magicStaticRoutesCreateRoutesWithHttpInfo(String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesCreateRoutesValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<MagicRoutesCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Routes (asynchronously)
     * Creates a new Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesCreateRoutesAsync(String accountId, Object body, final ApiCallback<MagicRoutesCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesCreateRoutesValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<MagicRoutesCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesDeleteManyRoutes
     * @param accountId  (required)
     * @param magicRouteDeleteManyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesDeleteManyRoutesCall(String accountId, MagicRouteDeleteManyRequest magicRouteDeleteManyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicRouteDeleteManyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesDeleteManyRoutesValidateBeforeCall(String accountId, MagicRouteDeleteManyRequest magicRouteDeleteManyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesDeleteManyRoutes(Async)");
        }

        // verify the required parameter 'magicRouteDeleteManyRequest' is set
        if (magicRouteDeleteManyRequest == null) {
            throw new ApiException("Missing the required parameter 'magicRouteDeleteManyRequest' when calling magicStaticRoutesDeleteManyRoutes(Async)");
        }

        return magicStaticRoutesDeleteManyRoutesCall(accountId, magicRouteDeleteManyRequest, _callback);

    }

    /**
     * Delete Many Routes
     * Delete multiple Magic static routes.
     * @param accountId  (required)
     * @param magicRouteDeleteManyRequest  (required)
     * @return MagicMultipleRouteDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicMultipleRouteDeleteResponse magicStaticRoutesDeleteManyRoutes(String accountId, MagicRouteDeleteManyRequest magicRouteDeleteManyRequest) throws ApiException {
        ApiResponse<MagicMultipleRouteDeleteResponse> localVarResp = magicStaticRoutesDeleteManyRoutesWithHttpInfo(accountId, magicRouteDeleteManyRequest);
        return localVarResp.getData();
    }

    /**
     * Delete Many Routes
     * Delete multiple Magic static routes.
     * @param accountId  (required)
     * @param magicRouteDeleteManyRequest  (required)
     * @return ApiResponse&lt;MagicMultipleRouteDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicMultipleRouteDeleteResponse> magicStaticRoutesDeleteManyRoutesWithHttpInfo(String accountId, MagicRouteDeleteManyRequest magicRouteDeleteManyRequest) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesDeleteManyRoutesValidateBeforeCall(accountId, magicRouteDeleteManyRequest, null);
        Type localVarReturnType = new TypeToken<MagicMultipleRouteDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Many Routes (asynchronously)
     * Delete multiple Magic static routes.
     * @param accountId  (required)
     * @param magicRouteDeleteManyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesDeleteManyRoutesAsync(String accountId, MagicRouteDeleteManyRequest magicRouteDeleteManyRequest, final ApiCallback<MagicMultipleRouteDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesDeleteManyRoutesValidateBeforeCall(accountId, magicRouteDeleteManyRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicMultipleRouteDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesDeleteRoute
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesDeleteRouteCall(String routeIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes/{route_identifier}"
            .replace("{" + "route_identifier" + "}", localVarApiClient.escapeString(routeIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesDeleteRouteValidateBeforeCall(String routeIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeIdentifier' is set
        if (routeIdentifier == null) {
            throw new ApiException("Missing the required parameter 'routeIdentifier' when calling magicStaticRoutesDeleteRoute(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesDeleteRoute(Async)");
        }

        return magicStaticRoutesDeleteRouteCall(routeIdentifier, accountId, _callback);

    }

    /**
     * Delete Route
     * Disable and remove a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @return MagicRouteDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicRouteDeletedResponse magicStaticRoutesDeleteRoute(String routeIdentifier, String accountId) throws ApiException {
        ApiResponse<MagicRouteDeletedResponse> localVarResp = magicStaticRoutesDeleteRouteWithHttpInfo(routeIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Route
     * Disable and remove a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicRouteDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicRouteDeletedResponse> magicStaticRoutesDeleteRouteWithHttpInfo(String routeIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesDeleteRouteValidateBeforeCall(routeIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<MagicRouteDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Route (asynchronously)
     * Disable and remove a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesDeleteRouteAsync(String routeIdentifier, String accountId, final ApiCallback<MagicRouteDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesDeleteRouteValidateBeforeCall(routeIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicRouteDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesListRoutes
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesListRoutesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesListRoutesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesListRoutes(Async)");
        }

        return magicStaticRoutesListRoutesCall(accountId, _callback);

    }

    /**
     * List Routes
     * List all Magic static routes.
     * @param accountId  (required)
     * @return MagicRoutesCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicRoutesCollectionResponse magicStaticRoutesListRoutes(String accountId) throws ApiException {
        ApiResponse<MagicRoutesCollectionResponse> localVarResp = magicStaticRoutesListRoutesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Routes
     * List all Magic static routes.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicRoutesCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicRoutesCollectionResponse> magicStaticRoutesListRoutesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesListRoutesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicRoutesCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Routes (asynchronously)
     * List all Magic static routes.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesListRoutesAsync(String accountId, final ApiCallback<MagicRoutesCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesListRoutesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicRoutesCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesRouteDetails
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Route Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Route Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesRouteDetailsCall(String routeIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes/{route_identifier}"
            .replace("{" + "route_identifier" + "}", localVarApiClient.escapeString(routeIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesRouteDetailsValidateBeforeCall(String routeIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeIdentifier' is set
        if (routeIdentifier == null) {
            throw new ApiException("Missing the required parameter 'routeIdentifier' when calling magicStaticRoutesRouteDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesRouteDetails(Async)");
        }

        return magicStaticRoutesRouteDetailsCall(routeIdentifier, accountId, _callback);

    }

    /**
     * Route Details
     * Get a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @return MagicRouteSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Route Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Route Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicRouteSingleResponse magicStaticRoutesRouteDetails(String routeIdentifier, String accountId) throws ApiException {
        ApiResponse<MagicRouteSingleResponse> localVarResp = magicStaticRoutesRouteDetailsWithHttpInfo(routeIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Route Details
     * Get a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicRouteSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Route Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Route Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicRouteSingleResponse> magicStaticRoutesRouteDetailsWithHttpInfo(String routeIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesRouteDetailsValidateBeforeCall(routeIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<MagicRouteSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Route Details (asynchronously)
     * Get a specific Magic static route.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Route Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Route Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesRouteDetailsAsync(String routeIdentifier, String accountId, final ApiCallback<MagicRouteSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesRouteDetailsValidateBeforeCall(routeIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicRouteSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesUpdateManyRoutes
     * @param accountId  (required)
     * @param magicRouteUpdateManyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesUpdateManyRoutesCall(String accountId, MagicRouteUpdateManyRequest magicRouteUpdateManyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicRouteUpdateManyRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesUpdateManyRoutesValidateBeforeCall(String accountId, MagicRouteUpdateManyRequest magicRouteUpdateManyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesUpdateManyRoutes(Async)");
        }

        // verify the required parameter 'magicRouteUpdateManyRequest' is set
        if (magicRouteUpdateManyRequest == null) {
            throw new ApiException("Missing the required parameter 'magicRouteUpdateManyRequest' when calling magicStaticRoutesUpdateManyRoutes(Async)");
        }

        return magicStaticRoutesUpdateManyRoutesCall(accountId, magicRouteUpdateManyRequest, _callback);

    }

    /**
     * Update Many Routes
     * Update multiple Magic static routes. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
     * @param accountId  (required)
     * @param magicRouteUpdateManyRequest  (required)
     * @return MagicMultipleRouteModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicMultipleRouteModifiedResponse magicStaticRoutesUpdateManyRoutes(String accountId, MagicRouteUpdateManyRequest magicRouteUpdateManyRequest) throws ApiException {
        ApiResponse<MagicMultipleRouteModifiedResponse> localVarResp = magicStaticRoutesUpdateManyRoutesWithHttpInfo(accountId, magicRouteUpdateManyRequest);
        return localVarResp.getData();
    }

    /**
     * Update Many Routes
     * Update multiple Magic static routes. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
     * @param accountId  (required)
     * @param magicRouteUpdateManyRequest  (required)
     * @return ApiResponse&lt;MagicMultipleRouteModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicMultipleRouteModifiedResponse> magicStaticRoutesUpdateManyRoutesWithHttpInfo(String accountId, MagicRouteUpdateManyRequest magicRouteUpdateManyRequest) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesUpdateManyRoutesValidateBeforeCall(accountId, magicRouteUpdateManyRequest, null);
        Type localVarReturnType = new TypeToken<MagicMultipleRouteModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Many Routes (asynchronously)
     * Update multiple Magic static routes. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
     * @param accountId  (required)
     * @param magicRouteUpdateManyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Many Routes response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Many Routes response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesUpdateManyRoutesAsync(String accountId, MagicRouteUpdateManyRequest magicRouteUpdateManyRequest, final ApiCallback<MagicMultipleRouteModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesUpdateManyRoutesValidateBeforeCall(accountId, magicRouteUpdateManyRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicMultipleRouteModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicStaticRoutesUpdateRoute
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param magicRouteUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesUpdateRouteCall(String routeIdentifier, String accountId, MagicRouteUpdateRequest magicRouteUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicRouteUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/routes/{route_identifier}"
            .replace("{" + "route_identifier" + "}", localVarApiClient.escapeString(routeIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicStaticRoutesUpdateRouteValidateBeforeCall(String routeIdentifier, String accountId, MagicRouteUpdateRequest magicRouteUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeIdentifier' is set
        if (routeIdentifier == null) {
            throw new ApiException("Missing the required parameter 'routeIdentifier' when calling magicStaticRoutesUpdateRoute(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicStaticRoutesUpdateRoute(Async)");
        }

        // verify the required parameter 'magicRouteUpdateRequest' is set
        if (magicRouteUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicRouteUpdateRequest' when calling magicStaticRoutesUpdateRoute(Async)");
        }

        return magicStaticRoutesUpdateRouteCall(routeIdentifier, accountId, magicRouteUpdateRequest, _callback);

    }

    /**
     * Update Route
     * Update a specific Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param magicRouteUpdateRequest  (required)
     * @return MagicRouteModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicRouteModifiedResponse magicStaticRoutesUpdateRoute(String routeIdentifier, String accountId, MagicRouteUpdateRequest magicRouteUpdateRequest) throws ApiException {
        ApiResponse<MagicRouteModifiedResponse> localVarResp = magicStaticRoutesUpdateRouteWithHttpInfo(routeIdentifier, accountId, magicRouteUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Route
     * Update a specific Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param magicRouteUpdateRequest  (required)
     * @return ApiResponse&lt;MagicRouteModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicRouteModifiedResponse> magicStaticRoutesUpdateRouteWithHttpInfo(String routeIdentifier, String accountId, MagicRouteUpdateRequest magicRouteUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicStaticRoutesUpdateRouteValidateBeforeCall(routeIdentifier, accountId, magicRouteUpdateRequest, null);
        Type localVarReturnType = new TypeToken<MagicRouteModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Route (asynchronously)
     * Update a specific Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     * @param routeIdentifier  (required)
     * @param accountId  (required)
     * @param magicRouteUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Route response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Route response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicStaticRoutesUpdateRouteAsync(String routeIdentifier, String accountId, MagicRouteUpdateRequest magicRouteUpdateRequest, final ApiCallback<MagicRouteModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicStaticRoutesUpdateRouteValidateBeforeCall(routeIdentifier, accountId, magicRouteUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicRouteModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
