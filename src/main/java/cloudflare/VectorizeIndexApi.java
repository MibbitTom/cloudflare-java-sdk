/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.VectorizeCreateIndexRequest;
import org.openapitools.client.model.VectorizeCreateVectorizeIndex200Response;
import org.openapitools.client.model.VectorizeDeleteVectorizeIndex200Response;
import org.openapitools.client.model.VectorizeDeleteVectorsById200Response;
import org.openapitools.client.model.VectorizeGetVectorsById200Response;
import org.openapitools.client.model.VectorizeIndexDeleteVectorsByIdRequest;
import org.openapitools.client.model.VectorizeIndexGetVectorsByIdRequest;
import org.openapitools.client.model.VectorizeIndexQueryRequest;
import org.openapitools.client.model.VectorizeInsertVector200Response;
import org.openapitools.client.model.VectorizeListVectorizeIndexes200Response;
import org.openapitools.client.model.VectorizeListVectorizeIndexes4XXResponse;
import org.openapitools.client.model.VectorizeQueryVector200Response;
import org.openapitools.client.model.VectorizeUpdateIndexRequest;
import org.openapitools.client.model.VectorizeUpsertVector200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VectorizeIndexApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VectorizeIndexApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VectorizeIndexApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vectorizeCreateVectorizeIndex
     * @param accountId  (required)
     * @param vectorizeCreateIndexRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeCreateVectorizeIndexCall(String accountId, VectorizeCreateIndexRequest vectorizeCreateIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vectorizeCreateIndexRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeCreateVectorizeIndexValidateBeforeCall(String accountId, VectorizeCreateIndexRequest vectorizeCreateIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeCreateVectorizeIndex(Async)");
        }

        // verify the required parameter 'vectorizeCreateIndexRequest' is set
        if (vectorizeCreateIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'vectorizeCreateIndexRequest' when calling vectorizeCreateVectorizeIndex(Async)");
        }

        return vectorizeCreateVectorizeIndexCall(accountId, vectorizeCreateIndexRequest, _callback);

    }

    /**
     * Create Vectorize Index
     * Creates and returns a new Vectorize Index.
     * @param accountId  (required)
     * @param vectorizeCreateIndexRequest  (required)
     * @return VectorizeCreateVectorizeIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeCreateVectorizeIndex200Response vectorizeCreateVectorizeIndex(String accountId, VectorizeCreateIndexRequest vectorizeCreateIndexRequest) throws ApiException {
        ApiResponse<VectorizeCreateVectorizeIndex200Response> localVarResp = vectorizeCreateVectorizeIndexWithHttpInfo(accountId, vectorizeCreateIndexRequest);
        return localVarResp.getData();
    }

    /**
     * Create Vectorize Index
     * Creates and returns a new Vectorize Index.
     * @param accountId  (required)
     * @param vectorizeCreateIndexRequest  (required)
     * @return ApiResponse&lt;VectorizeCreateVectorizeIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeCreateVectorizeIndex200Response> vectorizeCreateVectorizeIndexWithHttpInfo(String accountId, VectorizeCreateIndexRequest vectorizeCreateIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = vectorizeCreateVectorizeIndexValidateBeforeCall(accountId, vectorizeCreateIndexRequest, null);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Vectorize Index (asynchronously)
     * Creates and returns a new Vectorize Index.
     * @param accountId  (required)
     * @param vectorizeCreateIndexRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeCreateVectorizeIndexAsync(String accountId, VectorizeCreateIndexRequest vectorizeCreateIndexRequest, final ApiCallback<VectorizeCreateVectorizeIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeCreateVectorizeIndexValidateBeforeCall(accountId, vectorizeCreateIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeDeleteVectorizeIndex
     * @param accountId  (required)
     * @param indexName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeDeleteVectorizeIndexCall(String accountId, String indexName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeDeleteVectorizeIndexValidateBeforeCall(String accountId, String indexName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeDeleteVectorizeIndex(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeDeleteVectorizeIndex(Async)");
        }

        return vectorizeDeleteVectorizeIndexCall(accountId, indexName, _callback);

    }

    /**
     * Delete Vectorize Index
     * Deletes the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @return VectorizeDeleteVectorizeIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeDeleteVectorizeIndex200Response vectorizeDeleteVectorizeIndex(String accountId, String indexName) throws ApiException {
        ApiResponse<VectorizeDeleteVectorizeIndex200Response> localVarResp = vectorizeDeleteVectorizeIndexWithHttpInfo(accountId, indexName);
        return localVarResp.getData();
    }

    /**
     * Delete Vectorize Index
     * Deletes the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @return ApiResponse&lt;VectorizeDeleteVectorizeIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeDeleteVectorizeIndex200Response> vectorizeDeleteVectorizeIndexWithHttpInfo(String accountId, String indexName) throws ApiException {
        okhttp3.Call localVarCall = vectorizeDeleteVectorizeIndexValidateBeforeCall(accountId, indexName, null);
        Type localVarReturnType = new TypeToken<VectorizeDeleteVectorizeIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Vectorize Index (asynchronously)
     * Deletes the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeDeleteVectorizeIndexAsync(String accountId, String indexName, final ApiCallback<VectorizeDeleteVectorizeIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeDeleteVectorizeIndexValidateBeforeCall(accountId, indexName, _callback);
        Type localVarReturnType = new TypeToken<VectorizeDeleteVectorizeIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeDeleteVectorsById
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexDeleteVectorsByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vector Identifiers Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vector Identifiers Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeDeleteVectorsByIdCall(String accountId, String indexName, VectorizeIndexDeleteVectorsByIdRequest vectorizeIndexDeleteVectorsByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vectorizeIndexDeleteVectorsByIdRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}/delete-by-ids"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeDeleteVectorsByIdValidateBeforeCall(String accountId, String indexName, VectorizeIndexDeleteVectorsByIdRequest vectorizeIndexDeleteVectorsByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeDeleteVectorsById(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeDeleteVectorsById(Async)");
        }

        // verify the required parameter 'vectorizeIndexDeleteVectorsByIdRequest' is set
        if (vectorizeIndexDeleteVectorsByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'vectorizeIndexDeleteVectorsByIdRequest' when calling vectorizeDeleteVectorsById(Async)");
        }

        return vectorizeDeleteVectorsByIdCall(accountId, indexName, vectorizeIndexDeleteVectorsByIdRequest, _callback);

    }

    /**
     * Delete Vectors By Identifier
     * Delete a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexDeleteVectorsByIdRequest  (required)
     * @return VectorizeDeleteVectorsById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vector Identifiers Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vector Identifiers Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeDeleteVectorsById200Response vectorizeDeleteVectorsById(String accountId, String indexName, VectorizeIndexDeleteVectorsByIdRequest vectorizeIndexDeleteVectorsByIdRequest) throws ApiException {
        ApiResponse<VectorizeDeleteVectorsById200Response> localVarResp = vectorizeDeleteVectorsByIdWithHttpInfo(accountId, indexName, vectorizeIndexDeleteVectorsByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Delete Vectors By Identifier
     * Delete a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexDeleteVectorsByIdRequest  (required)
     * @return ApiResponse&lt;VectorizeDeleteVectorsById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vector Identifiers Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vector Identifiers Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeDeleteVectorsById200Response> vectorizeDeleteVectorsByIdWithHttpInfo(String accountId, String indexName, VectorizeIndexDeleteVectorsByIdRequest vectorizeIndexDeleteVectorsByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = vectorizeDeleteVectorsByIdValidateBeforeCall(accountId, indexName, vectorizeIndexDeleteVectorsByIdRequest, null);
        Type localVarReturnType = new TypeToken<VectorizeDeleteVectorsById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Vectors By Identifier (asynchronously)
     * Delete a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexDeleteVectorsByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Vector Identifiers Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Vector Identifiers Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeDeleteVectorsByIdAsync(String accountId, String indexName, VectorizeIndexDeleteVectorsByIdRequest vectorizeIndexDeleteVectorsByIdRequest, final ApiCallback<VectorizeDeleteVectorsById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeDeleteVectorsByIdValidateBeforeCall(accountId, indexName, vectorizeIndexDeleteVectorsByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorizeDeleteVectorsById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeGetVectorizeIndex
     * @param accountId  (required)
     * @param indexName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeGetVectorizeIndexCall(String accountId, String indexName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeGetVectorizeIndexValidateBeforeCall(String accountId, String indexName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeGetVectorizeIndex(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeGetVectorizeIndex(Async)");
        }

        return vectorizeGetVectorizeIndexCall(accountId, indexName, _callback);

    }

    /**
     * Get Vectorize Index
     * Returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @return VectorizeCreateVectorizeIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeCreateVectorizeIndex200Response vectorizeGetVectorizeIndex(String accountId, String indexName) throws ApiException {
        ApiResponse<VectorizeCreateVectorizeIndex200Response> localVarResp = vectorizeGetVectorizeIndexWithHttpInfo(accountId, indexName);
        return localVarResp.getData();
    }

    /**
     * Get Vectorize Index
     * Returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @return ApiResponse&lt;VectorizeCreateVectorizeIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeCreateVectorizeIndex200Response> vectorizeGetVectorizeIndexWithHttpInfo(String accountId, String indexName) throws ApiException {
        okhttp3.Call localVarCall = vectorizeGetVectorizeIndexValidateBeforeCall(accountId, indexName, null);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Vectorize Index (asynchronously)
     * Returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectorize Index Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeGetVectorizeIndexAsync(String accountId, String indexName, final ApiCallback<VectorizeCreateVectorizeIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeGetVectorizeIndexValidateBeforeCall(accountId, indexName, _callback);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeGetVectorsById
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexGetVectorsByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectors By Identifier Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectors By Identifier Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeGetVectorsByIdCall(String accountId, String indexName, VectorizeIndexGetVectorsByIdRequest vectorizeIndexGetVectorsByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vectorizeIndexGetVectorsByIdRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}/get-by-ids"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeGetVectorsByIdValidateBeforeCall(String accountId, String indexName, VectorizeIndexGetVectorsByIdRequest vectorizeIndexGetVectorsByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeGetVectorsById(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeGetVectorsById(Async)");
        }

        // verify the required parameter 'vectorizeIndexGetVectorsByIdRequest' is set
        if (vectorizeIndexGetVectorsByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'vectorizeIndexGetVectorsByIdRequest' when calling vectorizeGetVectorsById(Async)");
        }

        return vectorizeGetVectorsByIdCall(accountId, indexName, vectorizeIndexGetVectorsByIdRequest, _callback);

    }

    /**
     * Get Vectors By Identifier
     * Get a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexGetVectorsByIdRequest  (required)
     * @return VectorizeGetVectorsById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectors By Identifier Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectors By Identifier Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeGetVectorsById200Response vectorizeGetVectorsById(String accountId, String indexName, VectorizeIndexGetVectorsByIdRequest vectorizeIndexGetVectorsByIdRequest) throws ApiException {
        ApiResponse<VectorizeGetVectorsById200Response> localVarResp = vectorizeGetVectorsByIdWithHttpInfo(accountId, indexName, vectorizeIndexGetVectorsByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get Vectors By Identifier
     * Get a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexGetVectorsByIdRequest  (required)
     * @return ApiResponse&lt;VectorizeGetVectorsById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectors By Identifier Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectors By Identifier Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeGetVectorsById200Response> vectorizeGetVectorsByIdWithHttpInfo(String accountId, String indexName, VectorizeIndexGetVectorsByIdRequest vectorizeIndexGetVectorsByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = vectorizeGetVectorsByIdValidateBeforeCall(accountId, indexName, vectorizeIndexGetVectorsByIdRequest, null);
        Type localVarReturnType = new TypeToken<VectorizeGetVectorsById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Vectors By Identifier (asynchronously)
     * Get a set of vectors from an index by their vector identifiers.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexGetVectorsByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Vectors By Identifier Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Vectors By Identifier Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeGetVectorsByIdAsync(String accountId, String indexName, VectorizeIndexGetVectorsByIdRequest vectorizeIndexGetVectorsByIdRequest, final ApiCallback<VectorizeGetVectorsById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeGetVectorsByIdValidateBeforeCall(accountId, indexName, vectorizeIndexGetVectorsByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorizeGetVectorsById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeInsertVector
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeInsertVectorCall(String accountId, String indexName, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}/insert"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-ndjson"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeInsertVectorValidateBeforeCall(String accountId, String indexName, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeInsertVector(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeInsertVector(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling vectorizeInsertVector(Async)");
        }

        return vectorizeInsertVectorCall(accountId, indexName, body, _callback);

    }

    /**
     * Insert Vectors
     * Inserts vectors into the specified index and returns the count of the vectors successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @return VectorizeInsertVector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeInsertVector200Response vectorizeInsertVector(String accountId, String indexName, File body) throws ApiException {
        ApiResponse<VectorizeInsertVector200Response> localVarResp = vectorizeInsertVectorWithHttpInfo(accountId, indexName, body);
        return localVarResp.getData();
    }

    /**
     * Insert Vectors
     * Inserts vectors into the specified index and returns the count of the vectors successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @return ApiResponse&lt;VectorizeInsertVector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeInsertVector200Response> vectorizeInsertVectorWithHttpInfo(String accountId, String indexName, File body) throws ApiException {
        okhttp3.Call localVarCall = vectorizeInsertVectorValidateBeforeCall(accountId, indexName, body, null);
        Type localVarReturnType = new TypeToken<VectorizeInsertVector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert Vectors (asynchronously)
     * Inserts vectors into the specified index and returns the count of the vectors successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeInsertVectorAsync(String accountId, String indexName, File body, final ApiCallback<VectorizeInsertVector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeInsertVectorValidateBeforeCall(accountId, indexName, body, _callback);
        Type localVarReturnType = new TypeToken<VectorizeInsertVector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeListVectorizeIndexes
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeListVectorizeIndexesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeListVectorizeIndexesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeListVectorizeIndexes(Async)");
        }

        return vectorizeListVectorizeIndexesCall(accountId, _callback);

    }

    /**
     * List Vectorize Indexes
     * Returns a list of Vectorize Indexes
     * @param accountId  (required)
     * @return VectorizeListVectorizeIndexes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeListVectorizeIndexes200Response vectorizeListVectorizeIndexes(String accountId) throws ApiException {
        ApiResponse<VectorizeListVectorizeIndexes200Response> localVarResp = vectorizeListVectorizeIndexesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Vectorize Indexes
     * Returns a list of Vectorize Indexes
     * @param accountId  (required)
     * @return ApiResponse&lt;VectorizeListVectorizeIndexes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeListVectorizeIndexes200Response> vectorizeListVectorizeIndexesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = vectorizeListVectorizeIndexesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<VectorizeListVectorizeIndexes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Vectorize Indexes (asynchronously)
     * Returns a list of Vectorize Indexes
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeListVectorizeIndexesAsync(String accountId, final ApiCallback<VectorizeListVectorizeIndexes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeListVectorizeIndexesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<VectorizeListVectorizeIndexes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeQueryVector
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexQueryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeQueryVectorCall(String accountId, String indexName, VectorizeIndexQueryRequest vectorizeIndexQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vectorizeIndexQueryRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}/query"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeQueryVectorValidateBeforeCall(String accountId, String indexName, VectorizeIndexQueryRequest vectorizeIndexQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeQueryVector(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeQueryVector(Async)");
        }

        // verify the required parameter 'vectorizeIndexQueryRequest' is set
        if (vectorizeIndexQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'vectorizeIndexQueryRequest' when calling vectorizeQueryVector(Async)");
        }

        return vectorizeQueryVectorCall(accountId, indexName, vectorizeIndexQueryRequest, _callback);

    }

    /**
     * Query Vectors
     * Finds vectors closest to a given vector in an index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexQueryRequest  (required)
     * @return VectorizeQueryVector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeQueryVector200Response vectorizeQueryVector(String accountId, String indexName, VectorizeIndexQueryRequest vectorizeIndexQueryRequest) throws ApiException {
        ApiResponse<VectorizeQueryVector200Response> localVarResp = vectorizeQueryVectorWithHttpInfo(accountId, indexName, vectorizeIndexQueryRequest);
        return localVarResp.getData();
    }

    /**
     * Query Vectors
     * Finds vectors closest to a given vector in an index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexQueryRequest  (required)
     * @return ApiResponse&lt;VectorizeQueryVector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeQueryVector200Response> vectorizeQueryVectorWithHttpInfo(String accountId, String indexName, VectorizeIndexQueryRequest vectorizeIndexQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = vectorizeQueryVectorValidateBeforeCall(accountId, indexName, vectorizeIndexQueryRequest, null);
        Type localVarReturnType = new TypeToken<VectorizeQueryVector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query Vectors (asynchronously)
     * Finds vectors closest to a given vector in an index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeIndexQueryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeQueryVectorAsync(String accountId, String indexName, VectorizeIndexQueryRequest vectorizeIndexQueryRequest, final ApiCallback<VectorizeQueryVector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeQueryVectorValidateBeforeCall(accountId, indexName, vectorizeIndexQueryRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorizeQueryVector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeUpdateVectorizeIndex
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeUpdateIndexRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeUpdateVectorizeIndexCall(String accountId, String indexName, VectorizeUpdateIndexRequest vectorizeUpdateIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vectorizeUpdateIndexRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeUpdateVectorizeIndexValidateBeforeCall(String accountId, String indexName, VectorizeUpdateIndexRequest vectorizeUpdateIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeUpdateVectorizeIndex(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeUpdateVectorizeIndex(Async)");
        }

        // verify the required parameter 'vectorizeUpdateIndexRequest' is set
        if (vectorizeUpdateIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'vectorizeUpdateIndexRequest' when calling vectorizeUpdateVectorizeIndex(Async)");
        }

        return vectorizeUpdateVectorizeIndexCall(accountId, indexName, vectorizeUpdateIndexRequest, _callback);

    }

    /**
     * Update Vectorize Index
     * Updates and returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeUpdateIndexRequest  (required)
     * @return VectorizeCreateVectorizeIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeCreateVectorizeIndex200Response vectorizeUpdateVectorizeIndex(String accountId, String indexName, VectorizeUpdateIndexRequest vectorizeUpdateIndexRequest) throws ApiException {
        ApiResponse<VectorizeCreateVectorizeIndex200Response> localVarResp = vectorizeUpdateVectorizeIndexWithHttpInfo(accountId, indexName, vectorizeUpdateIndexRequest);
        return localVarResp.getData();
    }

    /**
     * Update Vectorize Index
     * Updates and returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeUpdateIndexRequest  (required)
     * @return ApiResponse&lt;VectorizeCreateVectorizeIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeCreateVectorizeIndex200Response> vectorizeUpdateVectorizeIndexWithHttpInfo(String accountId, String indexName, VectorizeUpdateIndexRequest vectorizeUpdateIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = vectorizeUpdateVectorizeIndexValidateBeforeCall(accountId, indexName, vectorizeUpdateIndexRequest, null);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Vectorize Index (asynchronously)
     * Updates and returns the specified Vectorize Index.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param vectorizeUpdateIndexRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Vectorize Index Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Vectorize Index Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeUpdateVectorizeIndexAsync(String accountId, String indexName, VectorizeUpdateIndexRequest vectorizeUpdateIndexRequest, final ApiCallback<VectorizeCreateVectorizeIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeUpdateVectorizeIndexValidateBeforeCall(accountId, indexName, vectorizeUpdateIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorizeCreateVectorizeIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vectorizeUpsertVector
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeUpsertVectorCall(String accountId, String indexName, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/vectorize/indexes/{index_name}/upsert"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "index_name" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-ndjson"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectorizeUpsertVectorValidateBeforeCall(String accountId, String indexName, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling vectorizeUpsertVector(Async)");
        }

        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling vectorizeUpsertVector(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling vectorizeUpsertVector(Async)");
        }

        return vectorizeUpsertVectorCall(accountId, indexName, body, _callback);

    }

    /**
     * Upsert Vectors
     * Upserts vectors into the specified index, creating them if they do not exist and returns the count of values and ids successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @return VectorizeUpsertVector200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public VectorizeUpsertVector200Response vectorizeUpsertVector(String accountId, String indexName, File body) throws ApiException {
        ApiResponse<VectorizeUpsertVector200Response> localVarResp = vectorizeUpsertVectorWithHttpInfo(accountId, indexName, body);
        return localVarResp.getData();
    }

    /**
     * Upsert Vectors
     * Upserts vectors into the specified index, creating them if they do not exist and returns the count of values and ids successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @return ApiResponse&lt;VectorizeUpsertVector200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorizeUpsertVector200Response> vectorizeUpsertVectorWithHttpInfo(String accountId, String indexName, File body) throws ApiException {
        okhttp3.Call localVarCall = vectorizeUpsertVectorValidateBeforeCall(accountId, indexName, body, null);
        Type localVarReturnType = new TypeToken<VectorizeUpsertVector200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Vectors (asynchronously)
     * Upserts vectors into the specified index, creating them if they do not exist and returns the count of values and ids successfully inserted.
     * @param accountId  (required)
     * @param indexName  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Insert Vectors Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Insert Vectors Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectorizeUpsertVectorAsync(String accountId, String indexName, File body, final ApiCallback<VectorizeUpsertVector200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectorizeUpsertVectorValidateBeforeCall(accountId, indexName, body, _callback);
        Type localVarReturnType = new TypeToken<VectorizeUpsertVector200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
