/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamCreateInputRequest;
import org.openapitools.client.model.StreamCreateOutputRequest;
import org.openapitools.client.model.StreamLiveInputResponseCollection;
import org.openapitools.client.model.StreamLiveInputResponseSingle;
import org.openapitools.client.model.StreamOutputResponseCollection;
import org.openapitools.client.model.StreamOutputResponseSingle;
import org.openapitools.client.model.StreamUpdateInputRequest;
import org.openapitools.client.model.StreamUpdateOutputRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamLiveInputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamLiveInputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamLiveInputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamLiveInputsCreateALiveInput
     * @param accountId  (required)
     * @param streamCreateInputRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsCreateALiveInputCall(String accountId, StreamCreateInputRequest streamCreateInputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamCreateInputRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsCreateALiveInputValidateBeforeCall(String accountId, StreamCreateInputRequest streamCreateInputRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsCreateALiveInput(Async)");
        }

        // verify the required parameter 'streamCreateInputRequest' is set
        if (streamCreateInputRequest == null) {
            throw new ApiException("Missing the required parameter 'streamCreateInputRequest' when calling streamLiveInputsCreateALiveInput(Async)");
        }

        return streamLiveInputsCreateALiveInputCall(accountId, streamCreateInputRequest, _callback);

    }

    /**
     * Create a live input
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param accountId  (required)
     * @param streamCreateInputRequest  (required)
     * @return StreamLiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLiveInputResponseSingle streamLiveInputsCreateALiveInput(String accountId, StreamCreateInputRequest streamCreateInputRequest) throws ApiException {
        ApiResponse<StreamLiveInputResponseSingle> localVarResp = streamLiveInputsCreateALiveInputWithHttpInfo(accountId, streamCreateInputRequest);
        return localVarResp.getData();
    }

    /**
     * Create a live input
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param accountId  (required)
     * @param streamCreateInputRequest  (required)
     * @return ApiResponse&lt;StreamLiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLiveInputResponseSingle> streamLiveInputsCreateALiveInputWithHttpInfo(String accountId, StreamCreateInputRequest streamCreateInputRequest) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsCreateALiveInputValidateBeforeCall(accountId, streamCreateInputRequest, null);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a live input (asynchronously)
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param accountId  (required)
     * @param streamCreateInputRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsCreateALiveInputAsync(String accountId, StreamCreateInputRequest streamCreateInputRequest, final ApiCallback<StreamLiveInputResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsCreateALiveInputValidateBeforeCall(accountId, streamCreateInputRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsCreateANewOutputConnectedToALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamCreateOutputRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a new output, connected to a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a new output, connected to a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsCreateANewOutputConnectedToALiveInputCall(String liveInputIdentifier, String accountId, StreamCreateOutputRequest streamCreateOutputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamCreateOutputRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs"
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(String liveInputIdentifier, String accountId, StreamCreateOutputRequest streamCreateOutputRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }

        // verify the required parameter 'streamCreateOutputRequest' is set
        if (streamCreateOutputRequest == null) {
            throw new ApiException("Missing the required parameter 'streamCreateOutputRequest' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }

        return streamLiveInputsCreateANewOutputConnectedToALiveInputCall(liveInputIdentifier, accountId, streamCreateOutputRequest, _callback);

    }

    /**
     * Create a new output, connected to a live input
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamCreateOutputRequest  (required)
     * @return StreamOutputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a new output, connected to a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a new output, connected to a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamOutputResponseSingle streamLiveInputsCreateANewOutputConnectedToALiveInput(String liveInputIdentifier, String accountId, StreamCreateOutputRequest streamCreateOutputRequest) throws ApiException {
        ApiResponse<StreamOutputResponseSingle> localVarResp = streamLiveInputsCreateANewOutputConnectedToALiveInputWithHttpInfo(liveInputIdentifier, accountId, streamCreateOutputRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new output, connected to a live input
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamCreateOutputRequest  (required)
     * @return ApiResponse&lt;StreamOutputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a new output, connected to a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a new output, connected to a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamOutputResponseSingle> streamLiveInputsCreateANewOutputConnectedToALiveInputWithHttpInfo(String liveInputIdentifier, String accountId, StreamCreateOutputRequest streamCreateOutputRequest) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(liveInputIdentifier, accountId, streamCreateOutputRequest, null);
        Type localVarReturnType = new TypeToken<StreamOutputResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new output, connected to a live input (asynchronously)
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamCreateOutputRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a new output, connected to a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a new output, connected to a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsCreateANewOutputConnectedToALiveInputAsync(String liveInputIdentifier, String accountId, StreamCreateOutputRequest streamCreateOutputRequest, final ApiCallback<StreamOutputResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(liveInputIdentifier, accountId, streamCreateOutputRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamOutputResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsDeleteALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsDeleteALiveInputCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}"
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsDeleteALiveInputValidateBeforeCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsDeleteALiveInput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsDeleteALiveInput(Async)");
        }

        return streamLiveInputsDeleteALiveInputCall(liveInputIdentifier, accountId, _callback);

    }

    /**
     * Delete a live input
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public void streamLiveInputsDeleteALiveInput(String liveInputIdentifier, String accountId) throws ApiException {
        streamLiveInputsDeleteALiveInputWithHttpInfo(liveInputIdentifier, accountId);
    }

    /**
     * Delete a live input
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamLiveInputsDeleteALiveInputWithHttpInfo(String liveInputIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsDeleteALiveInputValidateBeforeCall(liveInputIdentifier, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a live input (asynchronously)
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsDeleteALiveInputAsync(String liveInputIdentifier, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsDeleteALiveInputValidateBeforeCall(liveInputIdentifier, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsDeleteAnOutput
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsDeleteAnOutputCall(String outputIdentifier, String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}"
            .replace("{" + "output_identifier" + "}", localVarApiClient.escapeString(outputIdentifier.toString()))
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsDeleteAnOutputValidateBeforeCall(String outputIdentifier, String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputIdentifier' is set
        if (outputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'outputIdentifier' when calling streamLiveInputsDeleteAnOutput(Async)");
        }

        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsDeleteAnOutput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsDeleteAnOutput(Async)");
        }

        return streamLiveInputsDeleteAnOutputCall(outputIdentifier, liveInputIdentifier, accountId, _callback);

    }

    /**
     * Delete an output
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public void streamLiveInputsDeleteAnOutput(String outputIdentifier, String liveInputIdentifier, String accountId) throws ApiException {
        streamLiveInputsDeleteAnOutputWithHttpInfo(outputIdentifier, liveInputIdentifier, accountId);
    }

    /**
     * Delete an output
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamLiveInputsDeleteAnOutputWithHttpInfo(String outputIdentifier, String liveInputIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsDeleteAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an output (asynchronously)
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsDeleteAnOutputAsync(String outputIdentifier, String liveInputIdentifier, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsDeleteAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all outputs associated with a specified live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all outputs associated with a specified live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs"
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(Async)");
        }

        return streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputCall(liveInputIdentifier, accountId, _callback);

    }

    /**
     * List all outputs associated with a specified live input
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return StreamOutputResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all outputs associated with a specified live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all outputs associated with a specified live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamOutputResponseCollection streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(String liveInputIdentifier, String accountId) throws ApiException {
        ApiResponse<StreamOutputResponseCollection> localVarResp = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputWithHttpInfo(liveInputIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * List all outputs associated with a specified live input
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamOutputResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all outputs associated with a specified live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all outputs associated with a specified live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamOutputResponseCollection> streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputWithHttpInfo(String liveInputIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(liveInputIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamOutputResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all outputs associated with a specified live input (asynchronously)
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all outputs associated with a specified live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List all outputs associated with a specified live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputAsync(String liveInputIdentifier, String accountId, final ApiCallback<StreamOutputResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(liveInputIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamOutputResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsListLiveInputs
     * @param accountId  (required)
     * @param includeCounts  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List live inputs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List live inputs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsListLiveInputsCall(String accountId, Boolean includeCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_counts", includeCounts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsListLiveInputsValidateBeforeCall(String accountId, Boolean includeCounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsListLiveInputs(Async)");
        }

        return streamLiveInputsListLiveInputsCall(accountId, includeCounts, _callback);

    }

    /**
     * List live inputs
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountId  (required)
     * @param includeCounts  (optional, default to false)
     * @return StreamLiveInputResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List live inputs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List live inputs response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLiveInputResponseCollection streamLiveInputsListLiveInputs(String accountId, Boolean includeCounts) throws ApiException {
        ApiResponse<StreamLiveInputResponseCollection> localVarResp = streamLiveInputsListLiveInputsWithHttpInfo(accountId, includeCounts);
        return localVarResp.getData();
    }

    /**
     * List live inputs
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountId  (required)
     * @param includeCounts  (optional, default to false)
     * @return ApiResponse&lt;StreamLiveInputResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List live inputs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List live inputs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLiveInputResponseCollection> streamLiveInputsListLiveInputsWithHttpInfo(String accountId, Boolean includeCounts) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsListLiveInputsValidateBeforeCall(accountId, includeCounts, null);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List live inputs (asynchronously)
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountId  (required)
     * @param includeCounts  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List live inputs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List live inputs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsListLiveInputsAsync(String accountId, Boolean includeCounts, final ApiCallback<StreamLiveInputResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsListLiveInputsValidateBeforeCall(accountId, includeCounts, _callback);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsRetrieveALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsRetrieveALiveInputCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}"
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsRetrieveALiveInputValidateBeforeCall(String liveInputIdentifier, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsRetrieveALiveInput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsRetrieveALiveInput(Async)");
        }

        return streamLiveInputsRetrieveALiveInputCall(liveInputIdentifier, accountId, _callback);

    }

    /**
     * Retrieve a live input
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return StreamLiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLiveInputResponseSingle streamLiveInputsRetrieveALiveInput(String liveInputIdentifier, String accountId) throws ApiException {
        ApiResponse<StreamLiveInputResponseSingle> localVarResp = streamLiveInputsRetrieveALiveInputWithHttpInfo(liveInputIdentifier, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a live input
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;StreamLiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLiveInputResponseSingle> streamLiveInputsRetrieveALiveInputWithHttpInfo(String liveInputIdentifier, String accountId) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsRetrieveALiveInputValidateBeforeCall(liveInputIdentifier, accountId, null);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a live input (asynchronously)
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsRetrieveALiveInputAsync(String liveInputIdentifier, String accountId, final ApiCallback<StreamLiveInputResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsRetrieveALiveInputValidateBeforeCall(liveInputIdentifier, accountId, _callback);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsUpdateALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateInputRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsUpdateALiveInputCall(String liveInputIdentifier, String accountId, StreamUpdateInputRequest streamUpdateInputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamUpdateInputRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}"
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsUpdateALiveInputValidateBeforeCall(String liveInputIdentifier, String accountId, StreamUpdateInputRequest streamUpdateInputRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsUpdateALiveInput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsUpdateALiveInput(Async)");
        }

        // verify the required parameter 'streamUpdateInputRequest' is set
        if (streamUpdateInputRequest == null) {
            throw new ApiException("Missing the required parameter 'streamUpdateInputRequest' when calling streamLiveInputsUpdateALiveInput(Async)");
        }

        return streamLiveInputsUpdateALiveInputCall(liveInputIdentifier, accountId, streamUpdateInputRequest, _callback);

    }

    /**
     * Update a live input
     * Updates a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateInputRequest  (required)
     * @return StreamLiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamLiveInputResponseSingle streamLiveInputsUpdateALiveInput(String liveInputIdentifier, String accountId, StreamUpdateInputRequest streamUpdateInputRequest) throws ApiException {
        ApiResponse<StreamLiveInputResponseSingle> localVarResp = streamLiveInputsUpdateALiveInputWithHttpInfo(liveInputIdentifier, accountId, streamUpdateInputRequest);
        return localVarResp.getData();
    }

    /**
     * Update a live input
     * Updates a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateInputRequest  (required)
     * @return ApiResponse&lt;StreamLiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamLiveInputResponseSingle> streamLiveInputsUpdateALiveInputWithHttpInfo(String liveInputIdentifier, String accountId, StreamUpdateInputRequest streamUpdateInputRequest) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsUpdateALiveInputValidateBeforeCall(liveInputIdentifier, accountId, streamUpdateInputRequest, null);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a live input (asynchronously)
     * Updates a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateInputRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a live input response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a live input response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsUpdateALiveInputAsync(String liveInputIdentifier, String accountId, StreamUpdateInputRequest streamUpdateInputRequest, final ApiCallback<StreamLiveInputResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsUpdateALiveInputValidateBeforeCall(liveInputIdentifier, accountId, streamUpdateInputRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamLiveInputResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamLiveInputsUpdateAnOutput
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateOutputRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsUpdateAnOutputCall(String outputIdentifier, String liveInputIdentifier, String accountId, StreamUpdateOutputRequest streamUpdateOutputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = streamUpdateOutputRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}"
            .replace("{" + "output_identifier" + "}", localVarApiClient.escapeString(outputIdentifier.toString()))
            .replace("{" + "live_input_identifier" + "}", localVarApiClient.escapeString(liveInputIdentifier.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamLiveInputsUpdateAnOutputValidateBeforeCall(String outputIdentifier, String liveInputIdentifier, String accountId, StreamUpdateOutputRequest streamUpdateOutputRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputIdentifier' is set
        if (outputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'outputIdentifier' when calling streamLiveInputsUpdateAnOutput(Async)");
        }

        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsUpdateAnOutput(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling streamLiveInputsUpdateAnOutput(Async)");
        }

        // verify the required parameter 'streamUpdateOutputRequest' is set
        if (streamUpdateOutputRequest == null) {
            throw new ApiException("Missing the required parameter 'streamUpdateOutputRequest' when calling streamLiveInputsUpdateAnOutput(Async)");
        }

        return streamLiveInputsUpdateAnOutputCall(outputIdentifier, liveInputIdentifier, accountId, streamUpdateOutputRequest, _callback);

    }

    /**
     * Update an output
     * Updates the state of an output.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateOutputRequest  (required)
     * @return StreamOutputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public StreamOutputResponseSingle streamLiveInputsUpdateAnOutput(String outputIdentifier, String liveInputIdentifier, String accountId, StreamUpdateOutputRequest streamUpdateOutputRequest) throws ApiException {
        ApiResponse<StreamOutputResponseSingle> localVarResp = streamLiveInputsUpdateAnOutputWithHttpInfo(outputIdentifier, liveInputIdentifier, accountId, streamUpdateOutputRequest);
        return localVarResp.getData();
    }

    /**
     * Update an output
     * Updates the state of an output.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateOutputRequest  (required)
     * @return ApiResponse&lt;StreamOutputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamOutputResponseSingle> streamLiveInputsUpdateAnOutputWithHttpInfo(String outputIdentifier, String liveInputIdentifier, String accountId, StreamUpdateOutputRequest streamUpdateOutputRequest) throws ApiException {
        okhttp3.Call localVarCall = streamLiveInputsUpdateAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountId, streamUpdateOutputRequest, null);
        Type localVarReturnType = new TypeToken<StreamOutputResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an output (asynchronously)
     * Updates the state of an output.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountId  (required)
     * @param streamUpdateOutputRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an output response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an output response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamLiveInputsUpdateAnOutputAsync(String outputIdentifier, String liveInputIdentifier, String accountId, StreamUpdateOutputRequest streamUpdateOutputRequest, final ApiCallback<StreamOutputResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamLiveInputsUpdateAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountId, streamUpdateOutputRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamOutputResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
