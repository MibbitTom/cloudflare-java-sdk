/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FirewallZonelockdownResponseCollection;
import org.openapitools.client.model.FirewallZonelockdownResponseSingle;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ZoneLockdownCreateAZoneLockdownRule4XXResponse;
import org.openapitools.client.model.ZoneLockdownDeleteAZoneLockdownRule200Response;
import org.openapitools.client.model.ZoneLockdownDeleteAZoneLockdownRule4XXResponse;
import org.openapitools.client.model.ZoneLockdownListZoneLockdownRules4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLockdownApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLockdownApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLockdownApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLockdownCreateAZoneLockdownRule
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownCreateAZoneLockdownRuleCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownCreateAZoneLockdownRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLockdownCreateAZoneLockdownRule(Async)");
        }

        return zoneLockdownCreateAZoneLockdownRuleCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create a Zone Lockdown rule
     * Creates a new Zone Lockdown rule.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallZonelockdownResponseSingle zoneLockdownCreateAZoneLockdownRule(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallZonelockdownResponseSingle> localVarResp = zoneLockdownCreateAZoneLockdownRuleWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create a Zone Lockdown rule
     * Creates a new Zone Lockdown rule.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallZonelockdownResponseSingle> zoneLockdownCreateAZoneLockdownRuleWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Zone Lockdown rule (asynchronously)
     * Creates a new Zone Lockdown rule.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownCreateAZoneLockdownRuleAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallZonelockdownResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLockdownDeleteAZoneLockdownRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownDeleteAZoneLockdownRuleCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownDeleteAZoneLockdownRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownDeleteAZoneLockdownRule(Async)");
        }

        return zoneLockdownDeleteAZoneLockdownRuleCall(id, zoneIdentifier, _callback);

    }

    /**
     * Delete a Zone Lockdown rule
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ZoneLockdownDeleteAZoneLockdownRule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneLockdownDeleteAZoneLockdownRule200Response zoneLockdownDeleteAZoneLockdownRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<ZoneLockdownDeleteAZoneLockdownRule200Response> localVarResp = zoneLockdownDeleteAZoneLockdownRuleWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a Zone Lockdown rule
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZoneLockdownDeleteAZoneLockdownRule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneLockdownDeleteAZoneLockdownRule200Response> zoneLockdownDeleteAZoneLockdownRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<ZoneLockdownDeleteAZoneLockdownRule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Zone Lockdown rule (asynchronously)
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownDeleteAZoneLockdownRuleAsync(String id, String zoneIdentifier, final ApiCallback<ZoneLockdownDeleteAZoneLockdownRule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ZoneLockdownDeleteAZoneLockdownRule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLockdownGetAZoneLockdownRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownGetAZoneLockdownRuleCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownGetAZoneLockdownRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownGetAZoneLockdownRule(Async)");
        }

        return zoneLockdownGetAZoneLockdownRuleCall(id, zoneIdentifier, _callback);

    }

    /**
     * Get a Zone Lockdown rule
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallZonelockdownResponseSingle zoneLockdownGetAZoneLockdownRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallZonelockdownResponseSingle> localVarResp = zoneLockdownGetAZoneLockdownRuleWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a Zone Lockdown rule
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallZonelockdownResponseSingle> zoneLockdownGetAZoneLockdownRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Zone Lockdown rule (asynchronously)
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownGetAZoneLockdownRuleAsync(String id, String zoneIdentifier, final ApiCallback<FirewallZonelockdownResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLockdownListZoneLockdownRules
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param modifiedOn  (optional)
     * @param ip  (optional)
     * @param priority  (optional)
     * @param uriSearch  (optional)
     * @param ipRangeSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param createdOn  (optional)
     * @param descriptionSearch  (optional)
     * @param ipSearch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zone Lockdown rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zone Lockdown rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownListZoneLockdownRulesCall(String zoneIdentifier, BigDecimal page, String description, OffsetDateTime modifiedOn, String ip, BigDecimal priority, String uriSearch, String ipRangeSearch, BigDecimal perPage, OffsetDateTime createdOn, String descriptionSearch, String ipSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (modifiedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on", modifiedOn));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (uriSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uri_search", uriSearch));
        }

        if (ipRangeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip_range_search", ipRangeSearch));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (createdOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on", createdOn));
        }

        if (descriptionSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description_search", descriptionSearch));
        }

        if (ipSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip_search", ipSearch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLockdownListZoneLockdownRulesValidateBeforeCall(String zoneIdentifier, BigDecimal page, String description, OffsetDateTime modifiedOn, String ip, BigDecimal priority, String uriSearch, String ipRangeSearch, BigDecimal perPage, OffsetDateTime createdOn, String descriptionSearch, String ipSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownListZoneLockdownRules(Async)");
        }

        return zoneLockdownListZoneLockdownRulesCall(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, _callback);

    }

    /**
     * List Zone Lockdown rules
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param modifiedOn  (optional)
     * @param ip  (optional)
     * @param priority  (optional)
     * @param uriSearch  (optional)
     * @param ipRangeSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param createdOn  (optional)
     * @param descriptionSearch  (optional)
     * @param ipSearch  (optional)
     * @return FirewallZonelockdownResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zone Lockdown rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zone Lockdown rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallZonelockdownResponseCollection zoneLockdownListZoneLockdownRules(String zoneIdentifier, BigDecimal page, String description, OffsetDateTime modifiedOn, String ip, BigDecimal priority, String uriSearch, String ipRangeSearch, BigDecimal perPage, OffsetDateTime createdOn, String descriptionSearch, String ipSearch) throws ApiException {
        ApiResponse<FirewallZonelockdownResponseCollection> localVarResp = zoneLockdownListZoneLockdownRulesWithHttpInfo(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch);
        return localVarResp.getData();
    }

    /**
     * List Zone Lockdown rules
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param modifiedOn  (optional)
     * @param ip  (optional)
     * @param priority  (optional)
     * @param uriSearch  (optional)
     * @param ipRangeSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param createdOn  (optional)
     * @param descriptionSearch  (optional)
     * @param ipSearch  (optional)
     * @return ApiResponse&lt;FirewallZonelockdownResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zone Lockdown rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zone Lockdown rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallZonelockdownResponseCollection> zoneLockdownListZoneLockdownRulesWithHttpInfo(String zoneIdentifier, BigDecimal page, String description, OffsetDateTime modifiedOn, String ip, BigDecimal priority, String uriSearch, String ipRangeSearch, BigDecimal perPage, OffsetDateTime createdOn, String descriptionSearch, String ipSearch) throws ApiException {
        okhttp3.Call localVarCall = zoneLockdownListZoneLockdownRulesValidateBeforeCall(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, null);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Zone Lockdown rules (asynchronously)
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param page  (optional, default to 1)
     * @param description  (optional)
     * @param modifiedOn  (optional)
     * @param ip  (optional)
     * @param priority  (optional)
     * @param uriSearch  (optional)
     * @param ipRangeSearch  (optional)
     * @param perPage  (optional, default to 20)
     * @param createdOn  (optional)
     * @param descriptionSearch  (optional)
     * @param ipSearch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zone Lockdown rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zone Lockdown rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownListZoneLockdownRulesAsync(String zoneIdentifier, BigDecimal page, String description, OffsetDateTime modifiedOn, String ip, BigDecimal priority, String uriSearch, String ipRangeSearch, BigDecimal perPage, OffsetDateTime createdOn, String descriptionSearch, String ipSearch, final ApiCallback<FirewallZonelockdownResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLockdownListZoneLockdownRulesValidateBeforeCall(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, _callback);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLockdownUpdateAZoneLockdownRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownUpdateAZoneLockdownRuleCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }

        return zoneLockdownUpdateAZoneLockdownRuleCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update a Zone Lockdown rule
     * Updates an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallZonelockdownResponseSingle zoneLockdownUpdateAZoneLockdownRule(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallZonelockdownResponseSingle> localVarResp = zoneLockdownUpdateAZoneLockdownRuleWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update a Zone Lockdown rule
     * Updates an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallZonelockdownResponseSingle> zoneLockdownUpdateAZoneLockdownRuleWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Zone Lockdown rule (asynchronously)
     * Updates an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a Zone Lockdown rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a Zone Lockdown rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLockdownUpdateAZoneLockdownRuleAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallZonelockdownResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallZonelockdownResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
