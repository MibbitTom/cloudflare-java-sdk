/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response;
import org.openapitools.client.model.DeleteAccountsAccountIdentifierLogsControlCmbConfig4XXResponse;
import org.openapitools.client.model.LogcontrolApiResponseCommonFailure;
import org.openapitools.client.model.LogcontrolCmbConfig;
import org.openapitools.client.model.LogcontrolCmbConfigResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogcontrolCmbConfigForAnAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogcontrolCmbConfigForAnAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogcontrolCmbConfigForAnAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccountsAccountIdentifierLogsControlCmbConfig
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogsControlCmbConfigCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logs/control/cmb/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountsAccountIdentifierLogsControlCmbConfig(Async)");
        }

        return deleteAccountsAccountIdentifierLogsControlCmbConfigCall(accountId, _callback);

    }

    /**
     * Delete CMB config
     * Deletes CMB config.
     * @param accountId  (required)
     * @return DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response deleteAccountsAccountIdentifierLogsControlCmbConfig(String accountId) throws ApiException {
        ApiResponse<DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response> localVarResp = deleteAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Delete CMB config
     * Deletes CMB config.
     * @param accountId  (required)
     * @return ApiResponse&lt;DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response> deleteAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete CMB config (asynchronously)
     * Deletes CMB config.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountsAccountIdentifierLogsControlCmbConfigAsync(String accountId, final ApiCallback<DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogsControlCmbConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogsControlCmbConfig
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogsControlCmbConfigCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logs/control/cmb/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountsAccountIdentifierLogsControlCmbConfig(Async)");
        }

        return getAccountsAccountIdentifierLogsControlCmbConfigCall(accountId, _callback);

    }

    /**
     * Get CMB config
     * Gets CMB config.
     * @param accountId  (required)
     * @return LogcontrolCmbConfigResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogcontrolCmbConfigResponseSingle getAccountsAccountIdentifierLogsControlCmbConfig(String accountId) throws ApiException {
        ApiResponse<LogcontrolCmbConfigResponseSingle> localVarResp = getAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get CMB config
     * Gets CMB config.
     * @param accountId  (required)
     * @return ApiResponse&lt;LogcontrolCmbConfigResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogcontrolCmbConfigResponseSingle> getAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<LogcontrolCmbConfigResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get CMB config (asynchronously)
     * Gets CMB config.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAccountIdentifierLogsControlCmbConfigAsync(String accountId, final ApiCallback<LogcontrolCmbConfigResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<LogcontrolCmbConfigResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAccountsAccountIdentifierLogsControlCmbConfig
     * @param accountId  (required)
     * @param logcontrolCmbConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountsAccountIdentifierLogsControlCmbConfigCall(String accountId, LogcontrolCmbConfig logcontrolCmbConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logcontrolCmbConfig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/logs/control/cmb/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(String accountId, LogcontrolCmbConfig logcontrolCmbConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putAccountsAccountIdentifierLogsControlCmbConfig(Async)");
        }

        // verify the required parameter 'logcontrolCmbConfig' is set
        if (logcontrolCmbConfig == null) {
            throw new ApiException("Missing the required parameter 'logcontrolCmbConfig' when calling putAccountsAccountIdentifierLogsControlCmbConfig(Async)");
        }

        return putAccountsAccountIdentifierLogsControlCmbConfigCall(accountId, logcontrolCmbConfig, _callback);

    }

    /**
     * Update CMB config
     * Updates CMB config.
     * @param accountId  (required)
     * @param logcontrolCmbConfig  (required)
     * @return LogcontrolCmbConfigResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogcontrolCmbConfigResponseSingle putAccountsAccountIdentifierLogsControlCmbConfig(String accountId, LogcontrolCmbConfig logcontrolCmbConfig) throws ApiException {
        ApiResponse<LogcontrolCmbConfigResponseSingle> localVarResp = putAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(accountId, logcontrolCmbConfig);
        return localVarResp.getData();
    }

    /**
     * Update CMB config
     * Updates CMB config.
     * @param accountId  (required)
     * @param logcontrolCmbConfig  (required)
     * @return ApiResponse&lt;LogcontrolCmbConfigResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogcontrolCmbConfigResponseSingle> putAccountsAccountIdentifierLogsControlCmbConfigWithHttpInfo(String accountId, LogcontrolCmbConfig logcontrolCmbConfig) throws ApiException {
        okhttp3.Call localVarCall = putAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, logcontrolCmbConfig, null);
        Type localVarReturnType = new TypeToken<LogcontrolCmbConfigResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update CMB config (asynchronously)
     * Updates CMB config.
     * @param accountId  (required)
     * @param logcontrolCmbConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update CMB config response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update CMB config response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAccountsAccountIdentifierLogsControlCmbConfigAsync(String accountId, LogcontrolCmbConfig logcontrolCmbConfig, final ApiCallback<LogcontrolCmbConfigResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAccountsAccountIdentifierLogsControlCmbConfigValidateBeforeCall(accountId, logcontrolCmbConfig, _callback);
        Type localVarReturnType = new TypeToken<LogcontrolCmbConfigResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
