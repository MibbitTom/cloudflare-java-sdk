/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DlpAccountRiskSummaryResponse;
import org.openapitools.client.model.DlpApiResponseCommonFailure;
import org.openapitools.client.model.DlpGetBehaviorsResponse;
import org.openapitools.client.model.DlpResetUserResponse;
import org.openapitools.client.model.DlpUpdateBehaviorsRequest;
import org.openapitools.client.model.DlpUserId;
import org.openapitools.client.model.DlpUserRiskSummaryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZeroTrustRiskScoringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZeroTrustRiskScoringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZeroTrustRiskScoringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dlpZtRiskScoreAccountSummary
     * @param accountIdentifier  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Risky user summary response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Risky user summary response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreAccountSummaryCall(String accountIdentifier, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/zt_risk_scoring/summary"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpZtRiskScoreAccountSummaryValidateBeforeCall(String accountIdentifier, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpZtRiskScoreAccountSummary(Async)");
        }

        return dlpZtRiskScoreAccountSummaryCall(accountIdentifier, page, perPage, orderBy, direction, _callback);

    }

    /**
     * Risky user summary
     * Get risk score info for all users in the account
     * @param accountIdentifier  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @return DlpAccountRiskSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Risky user summary response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Risky user summary response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpAccountRiskSummaryResponse dlpZtRiskScoreAccountSummary(String accountIdentifier, Integer page, Integer perPage, String orderBy, String direction) throws ApiException {
        ApiResponse<DlpAccountRiskSummaryResponse> localVarResp = dlpZtRiskScoreAccountSummaryWithHttpInfo(accountIdentifier, page, perPage, orderBy, direction);
        return localVarResp.getData();
    }

    /**
     * Risky user summary
     * Get risk score info for all users in the account
     * @param accountIdentifier  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;DlpAccountRiskSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Risky user summary response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Risky user summary response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpAccountRiskSummaryResponse> dlpZtRiskScoreAccountSummaryWithHttpInfo(String accountIdentifier, Integer page, Integer perPage, String orderBy, String direction) throws ApiException {
        okhttp3.Call localVarCall = dlpZtRiskScoreAccountSummaryValidateBeforeCall(accountIdentifier, page, perPage, orderBy, direction, null);
        Type localVarReturnType = new TypeToken<DlpAccountRiskSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Risky user summary (asynchronously)
     * Get risk score info for all users in the account
     * @param accountIdentifier  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Risky user summary response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Risky user summary response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreAccountSummaryAsync(String accountIdentifier, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback<DlpAccountRiskSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpZtRiskScoreAccountSummaryValidateBeforeCall(accountIdentifier, page, perPage, orderBy, direction, _callback);
        Type localVarReturnType = new TypeToken<DlpAccountRiskSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpZtRiskScoreGetBehaviors
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreGetBehaviorsCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/zt_risk_scoring/behaviors"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpZtRiskScoreGetBehaviorsValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpZtRiskScoreGetBehaviors(Async)");
        }

        return dlpZtRiskScoreGetBehaviorsCall(accountIdentifier, _callback);

    }

    /**
     * Get behaviors
     * Get all behaviors and associated configuration
     * @param accountIdentifier  (required)
     * @return DlpGetBehaviorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpGetBehaviorsResponse dlpZtRiskScoreGetBehaviors(String accountIdentifier) throws ApiException {
        ApiResponse<DlpGetBehaviorsResponse> localVarResp = dlpZtRiskScoreGetBehaviorsWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get behaviors
     * Get all behaviors and associated configuration
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DlpGetBehaviorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpGetBehaviorsResponse> dlpZtRiskScoreGetBehaviorsWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = dlpZtRiskScoreGetBehaviorsValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<DlpGetBehaviorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get behaviors (asynchronously)
     * Get all behaviors and associated configuration
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreGetBehaviorsAsync(String accountIdentifier, final ApiCallback<DlpGetBehaviorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpZtRiskScoreGetBehaviorsValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DlpGetBehaviorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpZtRiskScorePutBehaviors
     * @param accountIdentifier  (required)
     * @param dlpUpdateBehaviorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScorePutBehaviorsCall(String accountIdentifier, DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpUpdateBehaviorsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/zt_risk_scoring/behaviors"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpZtRiskScorePutBehaviorsValidateBeforeCall(String accountIdentifier, DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpZtRiskScorePutBehaviors(Async)");
        }

        // verify the required parameter 'dlpUpdateBehaviorsRequest' is set
        if (dlpUpdateBehaviorsRequest == null) {
            throw new ApiException("Missing the required parameter 'dlpUpdateBehaviorsRequest' when calling dlpZtRiskScorePutBehaviors(Async)");
        }

        return dlpZtRiskScorePutBehaviorsCall(accountIdentifier, dlpUpdateBehaviorsRequest, _callback);

    }

    /**
     * Update behaviors
     * Update configuration for risk behaviors
     * @param accountIdentifier  (required)
     * @param dlpUpdateBehaviorsRequest  (required)
     * @return DlpGetBehaviorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpGetBehaviorsResponse dlpZtRiskScorePutBehaviors(String accountIdentifier, DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest) throws ApiException {
        ApiResponse<DlpGetBehaviorsResponse> localVarResp = dlpZtRiskScorePutBehaviorsWithHttpInfo(accountIdentifier, dlpUpdateBehaviorsRequest);
        return localVarResp.getData();
    }

    /**
     * Update behaviors
     * Update configuration for risk behaviors
     * @param accountIdentifier  (required)
     * @param dlpUpdateBehaviorsRequest  (required)
     * @return ApiResponse&lt;DlpGetBehaviorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpGetBehaviorsResponse> dlpZtRiskScorePutBehaviorsWithHttpInfo(String accountIdentifier, DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest) throws ApiException {
        okhttp3.Call localVarCall = dlpZtRiskScorePutBehaviorsValidateBeforeCall(accountIdentifier, dlpUpdateBehaviorsRequest, null);
        Type localVarReturnType = new TypeToken<DlpGetBehaviorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update behaviors (asynchronously)
     * Update configuration for risk behaviors
     * @param accountIdentifier  (required)
     * @param dlpUpdateBehaviorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Put behaviors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Put behaviors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScorePutBehaviorsAsync(String accountIdentifier, DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest, final ApiCallback<DlpGetBehaviorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpZtRiskScorePutBehaviorsValidateBeforeCall(accountIdentifier, dlpUpdateBehaviorsRequest, _callback);
        Type localVarReturnType = new TypeToken<DlpGetBehaviorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpZtRiskScoreResetUser
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset user response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reset user response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreResetUserCall(String accountIdentifier, DlpUserId userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/zt_risk_scoring/{user_id}/reset"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpZtRiskScoreResetUserValidateBeforeCall(String accountIdentifier, DlpUserId userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpZtRiskScoreResetUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling dlpZtRiskScoreResetUser(Async)");
        }

        return dlpZtRiskScoreResetUserCall(accountIdentifier, userId, _callback);

    }

    /**
     * Reset user risk score
     * Clear the risk score for a particular user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @return DlpResetUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset user response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reset user response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpResetUserResponse dlpZtRiskScoreResetUser(String accountIdentifier, DlpUserId userId) throws ApiException {
        ApiResponse<DlpResetUserResponse> localVarResp = dlpZtRiskScoreResetUserWithHttpInfo(accountIdentifier, userId);
        return localVarResp.getData();
    }

    /**
     * Reset user risk score
     * Clear the risk score for a particular user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;DlpResetUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset user response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reset user response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpResetUserResponse> dlpZtRiskScoreResetUserWithHttpInfo(String accountIdentifier, DlpUserId userId) throws ApiException {
        okhttp3.Call localVarCall = dlpZtRiskScoreResetUserValidateBeforeCall(accountIdentifier, userId, null);
        Type localVarReturnType = new TypeToken<DlpResetUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset user risk score (asynchronously)
     * Clear the risk score for a particular user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset user response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reset user response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreResetUserAsync(String accountIdentifier, DlpUserId userId, final ApiCallback<DlpResetUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpZtRiskScoreResetUserValidateBeforeCall(accountIdentifier, userId, _callback);
        Type localVarReturnType = new TypeToken<DlpResetUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpZtRiskScoreUserDetails
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User risk details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> User risk details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreUserDetailsCall(String accountIdentifier, DlpUserId userId, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/zt_risk_scoring/{user_id}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpZtRiskScoreUserDetailsValidateBeforeCall(String accountIdentifier, DlpUserId userId, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpZtRiskScoreUserDetails(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling dlpZtRiskScoreUserDetails(Async)");
        }

        return dlpZtRiskScoreUserDetailsCall(accountIdentifier, userId, page, perPage, orderBy, direction, _callback);

    }

    /**
     * User risk details
     * Get risk event/score information for a specific user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @return DlpUserRiskSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User risk details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> User risk details response failure </td><td>  -  </td></tr>
     </table>
     */
    public DlpUserRiskSummaryResponse dlpZtRiskScoreUserDetails(String accountIdentifier, DlpUserId userId, Integer page, Integer perPage, String orderBy, String direction) throws ApiException {
        ApiResponse<DlpUserRiskSummaryResponse> localVarResp = dlpZtRiskScoreUserDetailsWithHttpInfo(accountIdentifier, userId, page, perPage, orderBy, direction);
        return localVarResp.getData();
    }

    /**
     * User risk details
     * Get risk event/score information for a specific user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;DlpUserRiskSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User risk details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> User risk details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpUserRiskSummaryResponse> dlpZtRiskScoreUserDetailsWithHttpInfo(String accountIdentifier, DlpUserId userId, Integer page, Integer perPage, String orderBy, String direction) throws ApiException {
        okhttp3.Call localVarCall = dlpZtRiskScoreUserDetailsValidateBeforeCall(accountIdentifier, userId, page, perPage, orderBy, direction, null);
        Type localVarReturnType = new TypeToken<DlpUserRiskSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User risk details (asynchronously)
     * Get risk event/score information for a specific user
     * @param accountIdentifier  (required)
     * @param userId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param orderBy  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User risk details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> User risk details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpZtRiskScoreUserDetailsAsync(String accountIdentifier, DlpUserId userId, Integer page, Integer perPage, String orderBy, String direction, final ApiCallback<DlpUserRiskSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpZtRiskScoreUserDetailsValidateBeforeCall(accountIdentifier, userId, page, perPage, orderBy, direction, _callback);
        Type localVarReturnType = new TypeToken<DlpUserRiskSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
