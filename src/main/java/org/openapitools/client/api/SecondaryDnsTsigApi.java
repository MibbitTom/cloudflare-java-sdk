/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SecondaryDnsResponseCollection;
import org.openapitools.client.model.SecondaryDnsSchemasIdResponse;
import org.openapitools.client.model.SecondaryDnsSingleResponse;
import org.openapitools.client.model.SecondaryDnsTsig;
import org.openapitools.client.model.SecondaryDnsTsigCreateTsig4XXResponse;
import org.openapitools.client.model.SecondaryDnsTsigDeleteTsig4XXResponse;
import org.openapitools.client.model.SecondaryDnsTsigListTsiGs4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecondaryDnsTsigApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecondaryDnsTsigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecondaryDnsTsigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for secondaryDnsTsigCreateTsig
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigCreateTsigCall(Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secondaryDnsTsig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/tsigs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsTsigCreateTsigValidateBeforeCall(Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsTsigCreateTsig(Async)");
        }

        // verify the required parameter 'secondaryDnsTsig' is set
        if (secondaryDnsTsig == null) {
            throw new ApiException("Missing the required parameter 'secondaryDnsTsig' when calling secondaryDnsTsigCreateTsig(Async)");
        }

        return secondaryDnsTsigCreateTsigCall(accountId, secondaryDnsTsig, _callback);

    }

    /**
     * Create TSIG
     * Create TSIG.
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @return SecondaryDnsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponse secondaryDnsTsigCreateTsig(Object accountId, SecondaryDnsTsig secondaryDnsTsig) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponse> localVarResp = secondaryDnsTsigCreateTsigWithHttpInfo(accountId, secondaryDnsTsig);
        return localVarResp.getData();
    }

    /**
     * Create TSIG
     * Create TSIG.
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponse> secondaryDnsTsigCreateTsigWithHttpInfo(Object accountId, SecondaryDnsTsig secondaryDnsTsig) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsTsigCreateTsigValidateBeforeCall(accountId, secondaryDnsTsig, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create TSIG (asynchronously)
     * Create TSIG.
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigCreateTsigAsync(Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback<SecondaryDnsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsTsigCreateTsigValidateBeforeCall(accountId, secondaryDnsTsig, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsTsigDeleteTsig
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigDeleteTsigCall(Object tsigId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/tsigs/{tsig_id}"
            .replace("{" + "tsig_id" + "}", localVarApiClient.escapeString(tsigId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsTsigDeleteTsigValidateBeforeCall(Object tsigId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tsigId' is set
        if (tsigId == null) {
            throw new ApiException("Missing the required parameter 'tsigId' when calling secondaryDnsTsigDeleteTsig(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsTsigDeleteTsig(Async)");
        }

        return secondaryDnsTsigDeleteTsigCall(tsigId, accountId, _callback);

    }

    /**
     * Delete TSIG
     * Delete TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @return SecondaryDnsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSchemasIdResponse secondaryDnsTsigDeleteTsig(Object tsigId, Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsSchemasIdResponse> localVarResp = secondaryDnsTsigDeleteTsigWithHttpInfo(tsigId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete TSIG
     * Delete TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSchemasIdResponse> secondaryDnsTsigDeleteTsigWithHttpInfo(Object tsigId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsTsigDeleteTsigValidateBeforeCall(tsigId, accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete TSIG (asynchronously)
     * Delete TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigDeleteTsigAsync(Object tsigId, Object accountId, final ApiCallback<SecondaryDnsSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsTsigDeleteTsigValidateBeforeCall(tsigId, accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsTsigListTsiGs
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List TSIGs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List TSIGs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigListTsiGsCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/tsigs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsTsigListTsiGsValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsTsigListTsiGs(Async)");
        }

        return secondaryDnsTsigListTsiGsCall(accountId, _callback);

    }

    /**
     * List TSIGs
     * List TSIGs.
     * @param accountId  (required)
     * @return SecondaryDnsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List TSIGs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List TSIGs response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsResponseCollection secondaryDnsTsigListTsiGs(Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsResponseCollection> localVarResp = secondaryDnsTsigListTsiGsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List TSIGs
     * List TSIGs.
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List TSIGs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List TSIGs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsResponseCollection> secondaryDnsTsigListTsiGsWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsTsigListTsiGsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List TSIGs (asynchronously)
     * List TSIGs.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List TSIGs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List TSIGs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigListTsiGsAsync(Object accountId, final ApiCallback<SecondaryDnsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsTsigListTsiGsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsTsigTsigDetails
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TSIG Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> TSIG Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigTsigDetailsCall(Object tsigId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/tsigs/{tsig_id}"
            .replace("{" + "tsig_id" + "}", localVarApiClient.escapeString(tsigId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsTsigTsigDetailsValidateBeforeCall(Object tsigId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tsigId' is set
        if (tsigId == null) {
            throw new ApiException("Missing the required parameter 'tsigId' when calling secondaryDnsTsigTsigDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsTsigTsigDetails(Async)");
        }

        return secondaryDnsTsigTsigDetailsCall(tsigId, accountId, _callback);

    }

    /**
     * TSIG Details
     * Get TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @return SecondaryDnsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TSIG Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> TSIG Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponse secondaryDnsTsigTsigDetails(Object tsigId, Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponse> localVarResp = secondaryDnsTsigTsigDetailsWithHttpInfo(tsigId, accountId);
        return localVarResp.getData();
    }

    /**
     * TSIG Details
     * Get TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TSIG Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> TSIG Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponse> secondaryDnsTsigTsigDetailsWithHttpInfo(Object tsigId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsTsigTsigDetailsValidateBeforeCall(tsigId, accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TSIG Details (asynchronously)
     * Get TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TSIG Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> TSIG Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigTsigDetailsAsync(Object tsigId, Object accountId, final ApiCallback<SecondaryDnsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsTsigTsigDetailsValidateBeforeCall(tsigId, accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsTsigUpdateTsig
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigUpdateTsigCall(Object tsigId, Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secondaryDnsTsig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/tsigs/{tsig_id}"
            .replace("{" + "tsig_id" + "}", localVarApiClient.escapeString(tsigId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsTsigUpdateTsigValidateBeforeCall(Object tsigId, Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tsigId' is set
        if (tsigId == null) {
            throw new ApiException("Missing the required parameter 'tsigId' when calling secondaryDnsTsigUpdateTsig(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsTsigUpdateTsig(Async)");
        }

        // verify the required parameter 'secondaryDnsTsig' is set
        if (secondaryDnsTsig == null) {
            throw new ApiException("Missing the required parameter 'secondaryDnsTsig' when calling secondaryDnsTsigUpdateTsig(Async)");
        }

        return secondaryDnsTsigUpdateTsigCall(tsigId, accountId, secondaryDnsTsig, _callback);

    }

    /**
     * Update TSIG
     * Modify TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @return SecondaryDnsSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsSingleResponse secondaryDnsTsigUpdateTsig(Object tsigId, Object accountId, SecondaryDnsTsig secondaryDnsTsig) throws ApiException {
        ApiResponse<SecondaryDnsSingleResponse> localVarResp = secondaryDnsTsigUpdateTsigWithHttpInfo(tsigId, accountId, secondaryDnsTsig);
        return localVarResp.getData();
    }

    /**
     * Update TSIG
     * Modify TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @return ApiResponse&lt;SecondaryDnsSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsSingleResponse> secondaryDnsTsigUpdateTsigWithHttpInfo(Object tsigId, Object accountId, SecondaryDnsTsig secondaryDnsTsig) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsTsigUpdateTsigValidateBeforeCall(tsigId, accountId, secondaryDnsTsig, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update TSIG (asynchronously)
     * Modify TSIG.
     * @param tsigId  (required)
     * @param accountId  (required)
     * @param secondaryDnsTsig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update TSIG response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update TSIG response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsTsigUpdateTsigAsync(Object tsigId, Object accountId, SecondaryDnsTsig secondaryDnsTsig, final ApiCallback<SecondaryDnsSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsTsigUpdateTsigValidateBeforeCall(tsigId, accountId, secondaryDnsTsig, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
