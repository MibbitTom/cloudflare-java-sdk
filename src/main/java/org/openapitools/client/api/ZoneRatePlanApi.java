/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillSubsApiPlanResponseCollection;
import org.openapitools.client.model.ZoneRatePlanAvailablePlanDetails200Response;
import org.openapitools.client.model.ZoneRatePlanAvailablePlanDetails4XXResponse;
import org.openapitools.client.model.ZoneRatePlanListAvailablePlans200Response;
import org.openapitools.client.model.ZoneRatePlanListAvailablePlans4XXResponse;
import org.openapitools.client.model.ZoneRatePlanListAvailableRatePlans4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneRatePlanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneRatePlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneRatePlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneRatePlanAvailablePlanDetails
     * @param planIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available Plan Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Available Plan Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanAvailablePlanDetailsCall(String planIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/available_plans/{plan_identifier}"
            .replace("{" + "plan_identifier" + "}", localVarApiClient.escapeString(planIdentifier.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneRatePlanAvailablePlanDetailsValidateBeforeCall(String planIdentifier, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planIdentifier' is set
        if (planIdentifier == null) {
            throw new ApiException("Missing the required parameter 'planIdentifier' when calling zoneRatePlanAvailablePlanDetails(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneRatePlanAvailablePlanDetails(Async)");
        }

        return zoneRatePlanAvailablePlanDetailsCall(planIdentifier, zoneIdentifier, _callback);

    }

    /**
     * Available Plan Details
     * Details of the available plan that the zone can subscribe to.
     * @param planIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ZoneRatePlanAvailablePlanDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available Plan Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Available Plan Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneRatePlanAvailablePlanDetails200Response zoneRatePlanAvailablePlanDetails(String planIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ZoneRatePlanAvailablePlanDetails200Response> localVarResp = zoneRatePlanAvailablePlanDetailsWithHttpInfo(planIdentifier, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Available Plan Details
     * Details of the available plan that the zone can subscribe to.
     * @param planIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZoneRatePlanAvailablePlanDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available Plan Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Available Plan Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneRatePlanAvailablePlanDetails200Response> zoneRatePlanAvailablePlanDetailsWithHttpInfo(String planIdentifier, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneRatePlanAvailablePlanDetailsValidateBeforeCall(planIdentifier, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<ZoneRatePlanAvailablePlanDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available Plan Details (asynchronously)
     * Details of the available plan that the zone can subscribe to.
     * @param planIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available Plan Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Available Plan Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanAvailablePlanDetailsAsync(String planIdentifier, String zoneIdentifier, final ApiCallback<ZoneRatePlanAvailablePlanDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneRatePlanAvailablePlanDetailsValidateBeforeCall(planIdentifier, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ZoneRatePlanAvailablePlanDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneRatePlanListAvailablePlans
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanListAvailablePlansCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/available_plans"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneRatePlanListAvailablePlansValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneRatePlanListAvailablePlans(Async)");
        }

        return zoneRatePlanListAvailablePlansCall(zoneIdentifier, _callback);

    }

    /**
     * List Available Plans
     * Lists available plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @return ZoneRatePlanListAvailablePlans200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZoneRatePlanListAvailablePlans200Response zoneRatePlanListAvailablePlans(String zoneIdentifier) throws ApiException {
        ApiResponse<ZoneRatePlanListAvailablePlans200Response> localVarResp = zoneRatePlanListAvailablePlansWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * List Available Plans
     * Lists available plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZoneRatePlanListAvailablePlans200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneRatePlanListAvailablePlans200Response> zoneRatePlanListAvailablePlansWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneRatePlanListAvailablePlansValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<ZoneRatePlanListAvailablePlans200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Available Plans (asynchronously)
     * Lists available plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanListAvailablePlansAsync(String zoneIdentifier, final ApiCallback<ZoneRatePlanListAvailablePlans200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneRatePlanListAvailablePlansValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<ZoneRatePlanListAvailablePlans200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneRatePlanListAvailableRatePlans
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Rate Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Rate Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanListAvailableRatePlansCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/available_rate_plans"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneRatePlanListAvailableRatePlansValidateBeforeCall(String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneRatePlanListAvailableRatePlans(Async)");
        }

        return zoneRatePlanListAvailableRatePlansCall(zoneIdentifier, _callback);

    }

    /**
     * List Available Rate Plans
     * Lists all rate plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @return BillSubsApiPlanResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Rate Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Rate Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public BillSubsApiPlanResponseCollection zoneRatePlanListAvailableRatePlans(String zoneIdentifier) throws ApiException {
        ApiResponse<BillSubsApiPlanResponseCollection> localVarResp = zoneRatePlanListAvailableRatePlansWithHttpInfo(zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * List Available Rate Plans
     * Lists all rate plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;BillSubsApiPlanResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Rate Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Rate Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillSubsApiPlanResponseCollection> zoneRatePlanListAvailableRatePlansWithHttpInfo(String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = zoneRatePlanListAvailableRatePlansValidateBeforeCall(zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<BillSubsApiPlanResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Available Rate Plans (asynchronously)
     * Lists all rate plans the zone can subscribe to.
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Available Rate Plans response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Available Rate Plans response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneRatePlanListAvailableRatePlansAsync(String zoneIdentifier, final ApiCallback<BillSubsApiPlanResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneRatePlanListAvailableRatePlansValidateBeforeCall(zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<BillSubsApiPlanResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
