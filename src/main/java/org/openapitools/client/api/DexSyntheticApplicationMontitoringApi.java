/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DexEndpointsHttpTestDetails200Response;
import org.openapitools.client.model.DexEndpointsHttpTestPercentiles200Response;
import org.openapitools.client.model.DexEndpointsListColos200Response;
import org.openapitools.client.model.DexEndpointsListTests200Response;
import org.openapitools.client.model.DexEndpointsTestsUniqueDevices200Response;
import org.openapitools.client.model.DexEndpointsTracerouteTestDetails200Response;
import org.openapitools.client.model.DexEndpointsTracerouteTestNetworkPath200Response;
import org.openapitools.client.model.DexEndpointsTracerouteTestPercentiles200Response;
import org.openapitools.client.model.DexEndpointsTracerouteTestResultNetworkPath200Response;
import org.openapitools.client.model.DexFleetStatusDevices4xxResponse;
import org.openapitools.client.model.DigitalExperienceMonitoringApiResponseCommonFailure;
import org.openapitools.client.model.DigitalExperienceMonitoringFleetStatusDevicesResponse;
import org.openapitools.client.model.DigitalExperienceMonitoringFleetStatusLiveResponse;
import org.openapitools.client.model.DigitalExperienceMonitoringSortBy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DexSyntheticApplicationMontitoringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DexSyntheticApplicationMontitoringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DexSyntheticApplicationMontitoringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dexEndpointsHttpTestDetails
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsHttpTestDetailsCall(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/http-tests/{test_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsHttpTestDetailsValidateBeforeCall(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsHttpTestDetails(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling dexEndpointsHttpTestDetails(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsHttpTestDetails(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsHttpTestDetails(Async)");
        }

        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling dexEndpointsHttpTestDetails(Async)");
        }

        return dexEndpointsHttpTestDetailsCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, _callback);

    }

    /**
     * Get details and aggregate metrics for an http test
     * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return DexEndpointsHttpTestDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsHttpTestDetails200Response dexEndpointsHttpTestDetails(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo) throws ApiException {
        ApiResponse<DexEndpointsHttpTestDetails200Response> localVarResp = dexEndpointsHttpTestDetailsWithHttpInfo(accountId, testId, timeStart, timeEnd, interval, deviceId, colo);
        return localVarResp.getData();
    }

    /**
     * Get details and aggregate metrics for an http test
     * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return ApiResponse&lt;DexEndpointsHttpTestDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsHttpTestDetails200Response> dexEndpointsHttpTestDetailsWithHttpInfo(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsHttpTestDetailsValidateBeforeCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, null);
        Type localVarReturnType = new TypeToken<DexEndpointsHttpTestDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details and aggregate metrics for an http test (asynchronously)
     * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsHttpTestDetailsAsync(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback<DexEndpointsHttpTestDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsHttpTestDetailsValidateBeforeCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsHttpTestDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsHttpTestPercentiles
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsHttpTestPercentilesCall(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/http-tests/{test_id}/percentiles"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsHttpTestPercentilesValidateBeforeCall(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsHttpTestPercentiles(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling dexEndpointsHttpTestPercentiles(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsHttpTestPercentiles(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsHttpTestPercentiles(Async)");
        }

        return dexEndpointsHttpTestPercentilesCall(accountId, testId, timeStart, timeEnd, deviceId, colo, _callback);

    }

    /**
     * Get percentiles for an http test
     * Get percentiles for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return DexEndpointsHttpTestPercentiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsHttpTestPercentiles200Response dexEndpointsHttpTestPercentiles(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo) throws ApiException {
        ApiResponse<DexEndpointsHttpTestPercentiles200Response> localVarResp = dexEndpointsHttpTestPercentilesWithHttpInfo(accountId, testId, timeStart, timeEnd, deviceId, colo);
        return localVarResp.getData();
    }

    /**
     * Get percentiles for an http test
     * Get percentiles for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return ApiResponse&lt;DexEndpointsHttpTestPercentiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsHttpTestPercentiles200Response> dexEndpointsHttpTestPercentilesWithHttpInfo(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsHttpTestPercentilesValidateBeforeCall(accountId, testId, timeStart, timeEnd, deviceId, colo, null);
        Type localVarReturnType = new TypeToken<DexEndpointsHttpTestPercentiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get percentiles for an http test (asynchronously)
     * Get percentiles for an http test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX HTTP test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX HTTP test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsHttpTestPercentilesAsync(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback<DexEndpointsHttpTestPercentiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsHttpTestPercentilesValidateBeforeCall(accountId, testId, timeStart, timeEnd, deviceId, colo, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsHttpTestPercentiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsListColos
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param timeStart Start time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param timeEnd End time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param sortBy Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List colos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List colos failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsListColosCall(String accountId, String timeStart, String timeEnd, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/colos"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsListColosValidateBeforeCall(String accountId, String timeStart, String timeEnd, String sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsListColos(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsListColos(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsListColos(Async)");
        }

        return dexEndpointsListColosCall(accountId, timeStart, timeEnd, sortBy, _callback);

    }

    /**
     * List Cloudflare colos
     * List Cloudflare colos that account&#39;s devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param timeStart Start time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param timeEnd End time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param sortBy Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically. (optional)
     * @return DexEndpointsListColos200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List colos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List colos failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsListColos200Response dexEndpointsListColos(String accountId, String timeStart, String timeEnd, String sortBy) throws ApiException {
        ApiResponse<DexEndpointsListColos200Response> localVarResp = dexEndpointsListColosWithHttpInfo(accountId, timeStart, timeEnd, sortBy);
        return localVarResp.getData();
    }

    /**
     * List Cloudflare colos
     * List Cloudflare colos that account&#39;s devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param timeStart Start time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param timeEnd End time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param sortBy Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically. (optional)
     * @return ApiResponse&lt;DexEndpointsListColos200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List colos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List colos failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsListColos200Response> dexEndpointsListColosWithHttpInfo(String accountId, String timeStart, String timeEnd, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsListColosValidateBeforeCall(accountId, timeStart, timeEnd, sortBy, null);
        Type localVarReturnType = new TypeToken<DexEndpointsListColos200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Cloudflare colos (asynchronously)
     * List Cloudflare colos that account&#39;s devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param timeStart Start time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param timeEnd End time for connection period in RFC3339 (ISO 8601) format. (required)
     * @param sortBy Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List colos response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List colos failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsListColosAsync(String accountId, String timeStart, String timeEnd, String sortBy, final ApiCallback<DexEndpointsListColos200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsListColosValidateBeforeCall(accountId, timeStart, timeEnd, sortBy, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsListColos200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsListTests
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param page Page number of paginated results (optional, default to 1)
     * @param perPage Number of items per page (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX tests list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DEX tests failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsListTestsCall(String accountId, String colo, String testName, List<String> deviceId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/tests"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        if (testName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testName", testName));
        }

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsListTestsValidateBeforeCall(String accountId, String colo, String testName, List<String> deviceId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsListTests(Async)");
        }

        return dexEndpointsListTestsCall(accountId, colo, testName, deviceId, page, perPage, _callback);

    }

    /**
     * List DEX test analytics
     * List DEX tests
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param page Page number of paginated results (optional, default to 1)
     * @param perPage Number of items per page (optional, default to 10)
     * @return DexEndpointsListTests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX tests list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DEX tests failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsListTests200Response dexEndpointsListTests(String accountId, String colo, String testName, List<String> deviceId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<DexEndpointsListTests200Response> localVarResp = dexEndpointsListTestsWithHttpInfo(accountId, colo, testName, deviceId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List DEX test analytics
     * List DEX tests
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param page Page number of paginated results (optional, default to 1)
     * @param perPage Number of items per page (optional, default to 10)
     * @return ApiResponse&lt;DexEndpointsListTests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX tests list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DEX tests failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsListTests200Response> dexEndpointsListTestsWithHttpInfo(String accountId, String colo, String testName, List<String> deviceId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsListTestsValidateBeforeCall(accountId, colo, testName, deviceId, page, perPage, null);
        Type localVarReturnType = new TypeToken<DexEndpointsListTests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DEX test analytics (asynchronously)
     * List DEX tests
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param page Page number of paginated results (optional, default to 1)
     * @param perPage Number of items per page (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX tests list response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List DEX tests failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsListTestsAsync(String accountId, String colo, String testName, List<String> deviceId, BigDecimal page, BigDecimal perPage, final ApiCallback<DexEndpointsListTests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsListTestsValidateBeforeCall(accountId, colo, testName, deviceId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsListTests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsTestsUniqueDevices
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX unique devices targeted response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX unique devices targeted failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTestsUniqueDevicesCall(String accountId, String testName, List<String> deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/tests/unique-devices"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testName", testName));
        }

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsTestsUniqueDevicesValidateBeforeCall(String accountId, String testName, List<String> deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsTestsUniqueDevices(Async)");
        }

        return dexEndpointsTestsUniqueDevicesCall(accountId, testName, deviceId, _callback);

    }

    /**
     * Get count of devices targeted
     * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @return DexEndpointsTestsUniqueDevices200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX unique devices targeted response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX unique devices targeted failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsTestsUniqueDevices200Response dexEndpointsTestsUniqueDevices(String accountId, String testName, List<String> deviceId) throws ApiException {
        ApiResponse<DexEndpointsTestsUniqueDevices200Response> localVarResp = dexEndpointsTestsUniqueDevicesWithHttpInfo(accountId, testName, deviceId);
        return localVarResp.getData();
    }

    /**
     * Get count of devices targeted
     * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @return ApiResponse&lt;DexEndpointsTestsUniqueDevices200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX unique devices targeted response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX unique devices targeted failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsTestsUniqueDevices200Response> dexEndpointsTestsUniqueDevicesWithHttpInfo(String accountId, String testName, List<String> deviceId) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsTestsUniqueDevicesValidateBeforeCall(accountId, testName, deviceId, null);
        Type localVarReturnType = new TypeToken<DexEndpointsTestsUniqueDevices200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get count of devices targeted (asynchronously)
     * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testName Optionally filter results by test name (optional)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX unique devices targeted response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX unique devices targeted failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTestsUniqueDevicesAsync(String accountId, String testName, List<String> deviceId, final ApiCallback<DexEndpointsTestsUniqueDevices200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsTestsUniqueDevicesValidateBeforeCall(accountId, testName, deviceId, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsTestsUniqueDevices200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsTracerouteTestDetails
     * @param accountId Unique identifier linked to an account (required)
     * @param testId Unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test details response failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestDetailsCall(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/traceroute-tests/{test_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsTracerouteTestDetailsValidateBeforeCall(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsTracerouteTestDetails(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling dexEndpointsTracerouteTestDetails(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsTracerouteTestDetails(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsTracerouteTestDetails(Async)");
        }

        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling dexEndpointsTracerouteTestDetails(Async)");
        }

        return dexEndpointsTracerouteTestDetailsCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, _callback);

    }

    /**
     * Get details and aggregate metrics for a traceroute test
     * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId Unique identifier linked to an account (required)
     * @param testId Unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return DexEndpointsTracerouteTestDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test details response failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsTracerouteTestDetails200Response dexEndpointsTracerouteTestDetails(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo) throws ApiException {
        ApiResponse<DexEndpointsTracerouteTestDetails200Response> localVarResp = dexEndpointsTracerouteTestDetailsWithHttpInfo(accountId, testId, timeStart, timeEnd, interval, deviceId, colo);
        return localVarResp.getData();
    }

    /**
     * Get details and aggregate metrics for a traceroute test
     * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId Unique identifier linked to an account (required)
     * @param testId Unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return ApiResponse&lt;DexEndpointsTracerouteTestDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test details response failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsTracerouteTestDetails200Response> dexEndpointsTracerouteTestDetailsWithHttpInfo(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsTracerouteTestDetailsValidateBeforeCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, null);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details and aggregate metrics for a traceroute test (asynchronously)
     * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId Unique identifier linked to an account (required)
     * @param testId Unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test details response failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestDetailsAsync(String accountId, String testId, String timeStart, String timeEnd, String interval, List<String> deviceId, String colo, final ApiCallback<DexEndpointsTracerouteTestDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsTracerouteTestDetailsValidateBeforeCall(accountId, testId, timeStart, timeEnd, interval, deviceId, colo, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsTracerouteTestNetworkPath
     * @param accountId unique identifier linked to an account (required)
     * @param testId unique identifier for a specific test (required)
     * @param deviceId Device to filter tracroute result runs to (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestNetworkPathCall(String accountId, String testId, String deviceId, String timeStart, String timeEnd, String interval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/traceroute-tests/{test_id}/network-path"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsTracerouteTestNetworkPathValidateBeforeCall(String accountId, String testId, String deviceId, String timeStart, String timeEnd, String interval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling dexEndpointsTracerouteTestNetworkPath(Async)");
        }

        return dexEndpointsTracerouteTestNetworkPathCall(accountId, testId, deviceId, timeStart, timeEnd, interval, _callback);

    }

    /**
     * Get network path breakdown for a traceroute test
     * Get a breakdown of metrics by hop for individual traceroute test runs
     * @param accountId unique identifier linked to an account (required)
     * @param testId unique identifier for a specific test (required)
     * @param deviceId Device to filter tracroute result runs to (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @return DexEndpointsTracerouteTestNetworkPath200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsTracerouteTestNetworkPath200Response dexEndpointsTracerouteTestNetworkPath(String accountId, String testId, String deviceId, String timeStart, String timeEnd, String interval) throws ApiException {
        ApiResponse<DexEndpointsTracerouteTestNetworkPath200Response> localVarResp = dexEndpointsTracerouteTestNetworkPathWithHttpInfo(accountId, testId, deviceId, timeStart, timeEnd, interval);
        return localVarResp.getData();
    }

    /**
     * Get network path breakdown for a traceroute test
     * Get a breakdown of metrics by hop for individual traceroute test runs
     * @param accountId unique identifier linked to an account (required)
     * @param testId unique identifier for a specific test (required)
     * @param deviceId Device to filter tracroute result runs to (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @return ApiResponse&lt;DexEndpointsTracerouteTestNetworkPath200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsTracerouteTestNetworkPath200Response> dexEndpointsTracerouteTestNetworkPathWithHttpInfo(String accountId, String testId, String deviceId, String timeStart, String timeEnd, String interval) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsTracerouteTestNetworkPathValidateBeforeCall(accountId, testId, deviceId, timeStart, timeEnd, interval, null);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestNetworkPath200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get network path breakdown for a traceroute test (asynchronously)
     * Get a breakdown of metrics by hop for individual traceroute test runs
     * @param accountId unique identifier linked to an account (required)
     * @param testId unique identifier for a specific test (required)
     * @param deviceId Device to filter tracroute result runs to (required)
     * @param timeStart Start time for aggregate metrics in ISO ms (required)
     * @param timeEnd End time for aggregate metrics in ISO ms (required)
     * @param interval Time interval for aggregate time slots. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestNetworkPathAsync(String accountId, String testId, String deviceId, String timeStart, String timeEnd, String interval, final ApiCallback<DexEndpointsTracerouteTestNetworkPath200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsTracerouteTestNetworkPathValidateBeforeCall(accountId, testId, deviceId, timeStart, timeEnd, interval, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestNetworkPath200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsTracerouteTestPercentiles
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX Traceroute test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX Traceroute test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestPercentilesCall(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/traceroute-tests/{test_id}/percentiles"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_id" + "}", localVarApiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeStart", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeEnd", timeEnd));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsTracerouteTestPercentilesValidateBeforeCall(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsTracerouteTestPercentiles(Async)");
        }

        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling dexEndpointsTracerouteTestPercentiles(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexEndpointsTracerouteTestPercentiles(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexEndpointsTracerouteTestPercentiles(Async)");
        }

        return dexEndpointsTracerouteTestPercentilesCall(accountId, testId, timeStart, timeEnd, deviceId, colo, _callback);

    }

    /**
     * Get percentiles for a traceroute test
     * Get percentiles for a traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return DexEndpointsTracerouteTestPercentiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX Traceroute test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX Traceroute test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsTracerouteTestPercentiles200Response dexEndpointsTracerouteTestPercentiles(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo) throws ApiException {
        ApiResponse<DexEndpointsTracerouteTestPercentiles200Response> localVarResp = dexEndpointsTracerouteTestPercentilesWithHttpInfo(accountId, testId, timeStart, timeEnd, deviceId, colo);
        return localVarResp.getData();
    }

    /**
     * Get percentiles for a traceroute test
     * Get percentiles for a traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @return ApiResponse&lt;DexEndpointsTracerouteTestPercentiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX Traceroute test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX Traceroute test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsTracerouteTestPercentiles200Response> dexEndpointsTracerouteTestPercentilesWithHttpInfo(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsTracerouteTestPercentilesValidateBeforeCall(accountId, testId, timeStart, timeEnd, deviceId, colo, null);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestPercentiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get percentiles for a traceroute test (asynchronously)
     * Get percentiles for a traceroute test for a given time period between 1 hour and 7 days.
     * @param accountId unique identifier linked to an account in the API request path. (required)
     * @param testId unique identifier for a specific test (required)
     * @param timeStart Start time for aggregate metrics in ISO format (required)
     * @param timeEnd End time for aggregate metrics in ISO format (required)
     * @param deviceId Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param. (optional)
     * @param colo Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX Traceroute test percentiles response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX Traceroute test percentiles failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestPercentilesAsync(String accountId, String testId, String timeStart, String timeEnd, List<String> deviceId, String colo, final ApiCallback<DexEndpointsTracerouteTestPercentiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsTracerouteTestPercentilesValidateBeforeCall(accountId, testId, timeStart, timeEnd, deviceId, colo, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestPercentiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexEndpointsTracerouteTestResultNetworkPath
     * @param accountId unique identifier linked to an account (required)
     * @param testResultId unique identifier for a specific traceroute test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test result network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test result network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestResultNetworkPathCall(String accountId, String testResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/traceroute-test-results/{test_result_id}/network-path"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "test_result_id" + "}", localVarApiClient.escapeString(testResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexEndpointsTracerouteTestResultNetworkPathValidateBeforeCall(String accountId, String testResultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexEndpointsTracerouteTestResultNetworkPath(Async)");
        }

        // verify the required parameter 'testResultId' is set
        if (testResultId == null) {
            throw new ApiException("Missing the required parameter 'testResultId' when calling dexEndpointsTracerouteTestResultNetworkPath(Async)");
        }

        return dexEndpointsTracerouteTestResultNetworkPathCall(accountId, testResultId, _callback);

    }

    /**
     * Get details for a specific traceroute test run
     * Get a breakdown of hops and performance metrics for a specific traceroute test run
     * @param accountId unique identifier linked to an account (required)
     * @param testResultId unique identifier for a specific traceroute test (required)
     * @return DexEndpointsTracerouteTestResultNetworkPath200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test result network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test result network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public DexEndpointsTracerouteTestResultNetworkPath200Response dexEndpointsTracerouteTestResultNetworkPath(String accountId, String testResultId) throws ApiException {
        ApiResponse<DexEndpointsTracerouteTestResultNetworkPath200Response> localVarResp = dexEndpointsTracerouteTestResultNetworkPathWithHttpInfo(accountId, testResultId);
        return localVarResp.getData();
    }

    /**
     * Get details for a specific traceroute test run
     * Get a breakdown of hops and performance metrics for a specific traceroute test run
     * @param accountId unique identifier linked to an account (required)
     * @param testResultId unique identifier for a specific traceroute test (required)
     * @return ApiResponse&lt;DexEndpointsTracerouteTestResultNetworkPath200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test result network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test result network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DexEndpointsTracerouteTestResultNetworkPath200Response> dexEndpointsTracerouteTestResultNetworkPathWithHttpInfo(String accountId, String testResultId) throws ApiException {
        okhttp3.Call localVarCall = dexEndpointsTracerouteTestResultNetworkPathValidateBeforeCall(accountId, testResultId, null);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestResultNetworkPath200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details for a specific traceroute test run (asynchronously)
     * Get a breakdown of hops and performance metrics for a specific traceroute test run
     * @param accountId unique identifier linked to an account (required)
     * @param testResultId unique identifier for a specific traceroute test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DEX traceroute test result network path response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> DEX traceroute test result network path failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexEndpointsTracerouteTestResultNetworkPathAsync(String accountId, String testResultId, final ApiCallback<DexEndpointsTracerouteTestResultNetworkPath200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexEndpointsTracerouteTestResultNetworkPathValidateBeforeCall(accountId, testResultId, _callback);
        Type localVarReturnType = new TypeToken<DexEndpointsTracerouteTestResultNetworkPath200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexFleetStatusDevices
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param page  (required)
     * @param perPage  (required)
     * @param sortBy  (optional, default to timestamp)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param mode  (optional)
     * @param status  (optional)
     * @param platform  (optional)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusDevicesCall(String accountId, String timeEnd, String timeStart, BigDecimal page, BigDecimal perPage, DigitalExperienceMonitoringSortBy sortBy, String colo, String deviceId, String mode, String status, String platform, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/fleet-status/devices"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexFleetStatusDevicesValidateBeforeCall(String accountId, String timeEnd, String timeStart, BigDecimal page, BigDecimal perPage, DigitalExperienceMonitoringSortBy sortBy, String colo, String deviceId, String mode, String status, String platform, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexFleetStatusDevices(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexFleetStatusDevices(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexFleetStatusDevices(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling dexFleetStatusDevices(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling dexFleetStatusDevices(Async)");
        }

        return dexFleetStatusDevicesCall(accountId, timeEnd, timeStart, page, perPage, sortBy, colo, deviceId, mode, status, platform, version, _callback);

    }

    /**
     * List fleet status devices
     * List details for devices using WARP
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param page  (required)
     * @param perPage  (required)
     * @param sortBy  (optional, default to timestamp)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param mode  (optional)
     * @param status  (optional)
     * @param platform  (optional)
     * @param version  (optional)
     * @return DigitalExperienceMonitoringFleetStatusDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public DigitalExperienceMonitoringFleetStatusDevicesResponse dexFleetStatusDevices(String accountId, String timeEnd, String timeStart, BigDecimal page, BigDecimal perPage, DigitalExperienceMonitoringSortBy sortBy, String colo, String deviceId, String mode, String status, String platform, String version) throws ApiException {
        ApiResponse<DigitalExperienceMonitoringFleetStatusDevicesResponse> localVarResp = dexFleetStatusDevicesWithHttpInfo(accountId, timeEnd, timeStart, page, perPage, sortBy, colo, deviceId, mode, status, platform, version);
        return localVarResp.getData();
    }

    /**
     * List fleet status devices
     * List details for devices using WARP
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param page  (required)
     * @param perPage  (required)
     * @param sortBy  (optional, default to timestamp)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param mode  (optional)
     * @param status  (optional)
     * @param platform  (optional)
     * @param version  (optional)
     * @return ApiResponse&lt;DigitalExperienceMonitoringFleetStatusDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalExperienceMonitoringFleetStatusDevicesResponse> dexFleetStatusDevicesWithHttpInfo(String accountId, String timeEnd, String timeStart, BigDecimal page, BigDecimal perPage, DigitalExperienceMonitoringSortBy sortBy, String colo, String deviceId, String mode, String status, String platform, String version) throws ApiException {
        okhttp3.Call localVarCall = dexFleetStatusDevicesValidateBeforeCall(accountId, timeEnd, timeStart, page, perPage, sortBy, colo, deviceId, mode, status, platform, version, null);
        Type localVarReturnType = new TypeToken<DigitalExperienceMonitoringFleetStatusDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List fleet status devices (asynchronously)
     * List details for devices using WARP
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param page  (required)
     * @param perPage  (required)
     * @param sortBy  (optional, default to timestamp)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param mode  (optional)
     * @param status  (optional)
     * @param platform  (optional)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List devices response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusDevicesAsync(String accountId, String timeEnd, String timeStart, BigDecimal page, BigDecimal perPage, DigitalExperienceMonitoringSortBy sortBy, String colo, String deviceId, String mode, String status, String platform, String version, final ApiCallback<DigitalExperienceMonitoringFleetStatusDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexFleetStatusDevicesValidateBeforeCall(accountId, timeEnd, timeStart, page, perPage, sortBy, colo, deviceId, mode, status, platform, version, _callback);
        Type localVarReturnType = new TypeToken<DigitalExperienceMonitoringFleetStatusDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexFleetStatusLive
     * @param accountId  (required)
     * @param sinceMinutes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device details (live) response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List device details (live) response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusLiveCall(String accountId, BigDecimal sinceMinutes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/fleet-status/live"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_minutes", sinceMinutes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexFleetStatusLiveValidateBeforeCall(String accountId, BigDecimal sinceMinutes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexFleetStatusLive(Async)");
        }

        // verify the required parameter 'sinceMinutes' is set
        if (sinceMinutes == null) {
            throw new ApiException("Missing the required parameter 'sinceMinutes' when calling dexFleetStatusLive(Async)");
        }

        return dexFleetStatusLiveCall(accountId, sinceMinutes, _callback);

    }

    /**
     * List fleet status details by dimension
     * List details for live (up to 60 minutes) devices using WARP
     * @param accountId  (required)
     * @param sinceMinutes  (required)
     * @return DigitalExperienceMonitoringFleetStatusLiveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device details (live) response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List device details (live) response failure </td><td>  -  </td></tr>
     </table>
     */
    public DigitalExperienceMonitoringFleetStatusLiveResponse dexFleetStatusLive(String accountId, BigDecimal sinceMinutes) throws ApiException {
        ApiResponse<DigitalExperienceMonitoringFleetStatusLiveResponse> localVarResp = dexFleetStatusLiveWithHttpInfo(accountId, sinceMinutes);
        return localVarResp.getData();
    }

    /**
     * List fleet status details by dimension
     * List details for live (up to 60 minutes) devices using WARP
     * @param accountId  (required)
     * @param sinceMinutes  (required)
     * @return ApiResponse&lt;DigitalExperienceMonitoringFleetStatusLiveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device details (live) response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List device details (live) response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalExperienceMonitoringFleetStatusLiveResponse> dexFleetStatusLiveWithHttpInfo(String accountId, BigDecimal sinceMinutes) throws ApiException {
        okhttp3.Call localVarCall = dexFleetStatusLiveValidateBeforeCall(accountId, sinceMinutes, null);
        Type localVarReturnType = new TypeToken<DigitalExperienceMonitoringFleetStatusLiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List fleet status details by dimension (asynchronously)
     * List details for live (up to 60 minutes) devices using WARP
     * @param accountId  (required)
     * @param sinceMinutes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List device details (live) response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> List device details (live) response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusLiveAsync(String accountId, BigDecimal sinceMinutes, final ApiCallback<DigitalExperienceMonitoringFleetStatusLiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexFleetStatusLiveValidateBeforeCall(accountId, sinceMinutes, _callback);
        Type localVarReturnType = new TypeToken<DigitalExperienceMonitoringFleetStatusLiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dexFleetStatusOverTime
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DEX devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusOverTimeCall(String accountId, String timeEnd, String timeStart, String colo, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dex/fleet-status/over-time"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (colo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("colo", colo));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dexFleetStatusOverTimeValidateBeforeCall(String accountId, String timeEnd, String timeStart, String colo, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dexFleetStatusOverTime(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling dexFleetStatusOverTime(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling dexFleetStatusOverTime(Async)");
        }

        return dexFleetStatusOverTimeCall(accountId, timeEnd, timeStart, colo, deviceId, _callback);

    }

    /**
     * List fleet status aggregate details by dimension
     * List details for devices using WARP, up to 7 days
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DEX devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public void dexFleetStatusOverTime(String accountId, String timeEnd, String timeStart, String colo, String deviceId) throws ApiException {
        dexFleetStatusOverTimeWithHttpInfo(accountId, timeEnd, timeStart, colo, deviceId);
    }

    /**
     * List fleet status aggregate details by dimension
     * List details for devices using WARP, up to 7 days
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DEX devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dexFleetStatusOverTimeWithHttpInfo(String accountId, String timeEnd, String timeStart, String colo, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = dexFleetStatusOverTimeValidateBeforeCall(accountId, timeEnd, timeStart, colo, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List fleet status aggregate details by dimension (asynchronously)
     * List details for devices using WARP, up to 7 days
     * @param accountId  (required)
     * @param timeEnd  (required)
     * @param timeStart  (required)
     * @param colo  (optional)
     * @param deviceId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List DEX devices response </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> DEX HTTP test details failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dexFleetStatusOverTimeAsync(String accountId, String timeEnd, String timeStart, String colo, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dexFleetStatusOverTimeValidateBeforeCall(accountId, timeEnd, timeStart, colo, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
