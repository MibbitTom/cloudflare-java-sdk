/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataZoneAnalyticsApiColoResponse;
import org.openapitools.client.model.DataZoneAnalyticsApiDashboardResponse;
import org.openapitools.client.model.DataZoneAnalyticsApiUntil;
import org.openapitools.client.model.ZoneAnalyticsDeprecatedGetAnalyticsByCoLocations4XXResponse;
import org.openapitools.client.model.ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter;
import org.openapitools.client.model.ZoneAnalyticsDeprecatedGetDashboard4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneAnalyticsDeprecatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneAnalyticsDeprecatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneAnalyticsDeprecatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneAnalyticsDeprecatedGetAnalyticsByCoLocations
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get analytics by Co-locations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get analytics by Co-locations response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsCall(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/analytics/colos"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (continuous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuous", continuous));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsValidateBeforeCall(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(Async)");
        }

        return zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsCall(zoneIdentifier, until, since, continuous, _callback);

    }

    /**
     * Get analytics by Co-locations
     * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @return DataZoneAnalyticsApiColoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get analytics by Co-locations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get analytics by Co-locations response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DataZoneAnalyticsApiColoResponse zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiColoResponse> localVarResp = zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsWithHttpInfo(zoneIdentifier, until, since, continuous);
        return localVarResp.getData();
    }

    /**
     * Get analytics by Co-locations
     * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @return ApiResponse&lt;DataZoneAnalyticsApiColoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get analytics by Co-locations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get analytics by Co-locations response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DataZoneAnalyticsApiColoResponse> zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsWithHttpInfo(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous) throws ApiException {
        okhttp3.Call localVarCall = zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsValidateBeforeCall(zoneIdentifier, until, since, continuous, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiColoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get analytics by Co-locations (asynchronously)
     * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get analytics by Co-locations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get analytics by Co-locations response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsAsync(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback<DataZoneAnalyticsApiColoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneAnalyticsDeprecatedGetAnalyticsByCoLocationsValidateBeforeCall(zoneIdentifier, until, since, continuous, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiColoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneAnalyticsDeprecatedGetDashboard
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get dashboard response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get dashboard response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call zoneAnalyticsDeprecatedGetDashboardCall(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/analytics/dashboard"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (continuous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuous", continuous));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneAnalyticsDeprecatedGetDashboardValidateBeforeCall(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneAnalyticsDeprecatedGetDashboard(Async)");
        }

        return zoneAnalyticsDeprecatedGetDashboardCall(zoneIdentifier, until, since, continuous, _callback);

    }

    /**
     * Get dashboard
     * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @return DataZoneAnalyticsApiDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get dashboard response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get dashboard response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DataZoneAnalyticsApiDashboardResponse zoneAnalyticsDeprecatedGetDashboard(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous) throws ApiException {
        ApiResponse<DataZoneAnalyticsApiDashboardResponse> localVarResp = zoneAnalyticsDeprecatedGetDashboardWithHttpInfo(zoneIdentifier, until, since, continuous);
        return localVarResp.getData();
    }

    /**
     * Get dashboard
     * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @return ApiResponse&lt;DataZoneAnalyticsApiDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get dashboard response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get dashboard response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DataZoneAnalyticsApiDashboardResponse> zoneAnalyticsDeprecatedGetDashboardWithHttpInfo(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous) throws ApiException {
        okhttp3.Call localVarCall = zoneAnalyticsDeprecatedGetDashboardValidateBeforeCall(zoneIdentifier, until, since, continuous, null);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiDashboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dashboard (asynchronously)
     * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
     * @param zoneIdentifier  (required)
     * @param until  (optional, default to 0)
     * @param since  (optional, default to -10080)
     * @param continuous  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get dashboard response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get dashboard response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call zoneAnalyticsDeprecatedGetDashboardAsync(String zoneIdentifier, DataZoneAnalyticsApiUntil until, ZoneAnalyticsDeprecatedGetAnalyticsByCoLocationsSinceParameter since, Boolean continuous, final ApiCallback<DataZoneAnalyticsApiDashboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneAnalyticsDeprecatedGetDashboardValidateBeforeCall(zoneIdentifier, until, since, continuous, _callback);
        Type localVarReturnType = new TypeToken<DataZoneAnalyticsApiDashboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
