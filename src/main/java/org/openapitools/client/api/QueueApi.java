/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueueV2CreateQueue200Response;
import org.openapitools.client.model.QueueV2CreateQueue4XXResponse;
import org.openapitools.client.model.QueueV2CreateQueueConsumer200Response;
import org.openapitools.client.model.QueueV2CreateQueueConsumer4XXResponse;
import org.openapitools.client.model.QueueV2DeleteQueue200Response;
import org.openapitools.client.model.QueueV2DeleteQueue4XXResponse;
import org.openapitools.client.model.QueueV2ListQueueConsumers200Response;
import org.openapitools.client.model.QueueV2ListQueueConsumers4XXResponse;
import org.openapitools.client.model.QueueV2ListQueues200Response;
import org.openapitools.client.model.QueueV2ListQueues4XXResponse;
import org.openapitools.client.model.QueueV2MessagesAck200Response;
import org.openapitools.client.model.QueueV2MessagesAckRequest;
import org.openapitools.client.model.QueueV2MessagesPull200Response;
import org.openapitools.client.model.QueueV2MessagesPullRequest;
import org.openapitools.client.model.QueueV2QueueDetails200Response;
import org.openapitools.client.model.QueueV2QueueDetails4XXResponse;
import org.openapitools.client.model.QueueV2UpdateQueue200Response;
import org.openapitools.client.model.QueueV2UpdateQueue4XXResponse;
import org.openapitools.client.model.QueueV2UpdateQueueConsumer200Response;
import org.openapitools.client.model.QueueV2UpdateQueueConsumer4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueueApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queueV2CreateQueue
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2CreateQueueCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2CreateQueueValidateBeforeCall(String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2CreateQueue(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueV2CreateQueue(Async)");
        }

        return queueV2CreateQueueCall(accountId, body, _callback);

    }

    /**
     * Create Queue
     * Creates a new queue.
     * @param accountId  (required)
     * @param body  (required)
     * @return QueueV2CreateQueue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2CreateQueue200Response queueV2CreateQueue(String accountId, Object body) throws ApiException {
        ApiResponse<QueueV2CreateQueue200Response> localVarResp = queueV2CreateQueueWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create Queue
     * Creates a new queue.
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;QueueV2CreateQueue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2CreateQueue200Response> queueV2CreateQueueWithHttpInfo(String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = queueV2CreateQueueValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<QueueV2CreateQueue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Queue (asynchronously)
     * Creates a new queue.
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2CreateQueueAsync(String accountId, Object body, final ApiCallback<QueueV2CreateQueue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2CreateQueueValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<QueueV2CreateQueue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2CreateQueueConsumer
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2CreateQueueConsumerCall(String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/consumers"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2CreateQueueConsumerValidateBeforeCall(String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2CreateQueueConsumer(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2CreateQueueConsumer(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueV2CreateQueueConsumer(Async)");
        }

        return queueV2CreateQueueConsumerCall(queueId, accountId, body, _callback);

    }

    /**
     * Create Queue Consumer
     * Creates a new consumer for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return QueueV2CreateQueueConsumer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2CreateQueueConsumer200Response queueV2CreateQueueConsumer(String queueId, String accountId, Object body) throws ApiException {
        ApiResponse<QueueV2CreateQueueConsumer200Response> localVarResp = queueV2CreateQueueConsumerWithHttpInfo(queueId, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create Queue Consumer
     * Creates a new consumer for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;QueueV2CreateQueueConsumer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2CreateQueueConsumer200Response> queueV2CreateQueueConsumerWithHttpInfo(String queueId, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = queueV2CreateQueueConsumerValidateBeforeCall(queueId, accountId, body, null);
        Type localVarReturnType = new TypeToken<QueueV2CreateQueueConsumer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Queue Consumer (asynchronously)
     * Creates a new consumer for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2CreateQueueConsumerAsync(String queueId, String accountId, Object body, final ApiCallback<QueueV2CreateQueueConsumer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2CreateQueueConsumerValidateBeforeCall(queueId, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<QueueV2CreateQueueConsumer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2DeleteQueue
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2DeleteQueueCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2DeleteQueueValidateBeforeCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2DeleteQueue(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2DeleteQueue(Async)");
        }

        return queueV2DeleteQueueCall(queueId, accountId, _callback);

    }

    /**
     * Delete Queue
     * Deletes a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return QueueV2DeleteQueue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2DeleteQueue200Response queueV2DeleteQueue(String queueId, String accountId) throws ApiException {
        ApiResponse<QueueV2DeleteQueue200Response> localVarResp = queueV2DeleteQueueWithHttpInfo(queueId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Queue
     * Deletes a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;QueueV2DeleteQueue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2DeleteQueue200Response> queueV2DeleteQueueWithHttpInfo(String queueId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = queueV2DeleteQueueValidateBeforeCall(queueId, accountId, null);
        Type localVarReturnType = new TypeToken<QueueV2DeleteQueue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Queue (asynchronously)
     * Deletes a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2DeleteQueueAsync(String queueId, String accountId, final ApiCallback<QueueV2DeleteQueue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2DeleteQueueValidateBeforeCall(queueId, accountId, _callback);
        Type localVarReturnType = new TypeToken<QueueV2DeleteQueue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2DeleteQueueConsumer
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2DeleteQueueConsumerCall(String consumerId, String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/consumers/{consumer_id}"
            .replace("{" + "consumer_id" + "}", localVarApiClient.escapeString(consumerId.toString()))
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2DeleteQueueConsumerValidateBeforeCall(String consumerId, String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling queueV2DeleteQueueConsumer(Async)");
        }

        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2DeleteQueueConsumer(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2DeleteQueueConsumer(Async)");
        }

        return queueV2DeleteQueueConsumerCall(consumerId, queueId, accountId, _callback);

    }

    /**
     * Delete Queue Consumer
     * Deletes the consumer for a queue.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @return QueueV2DeleteQueue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2DeleteQueue200Response queueV2DeleteQueueConsumer(String consumerId, String queueId, String accountId) throws ApiException {
        ApiResponse<QueueV2DeleteQueue200Response> localVarResp = queueV2DeleteQueueConsumerWithHttpInfo(consumerId, queueId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Queue Consumer
     * Deletes the consumer for a queue.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;QueueV2DeleteQueue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2DeleteQueue200Response> queueV2DeleteQueueConsumerWithHttpInfo(String consumerId, String queueId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = queueV2DeleteQueueConsumerValidateBeforeCall(consumerId, queueId, accountId, null);
        Type localVarReturnType = new TypeToken<QueueV2DeleteQueue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Queue Consumer (asynchronously)
     * Deletes the consumer for a queue.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2DeleteQueueConsumerAsync(String consumerId, String queueId, String accountId, final ApiCallback<QueueV2DeleteQueue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2DeleteQueueConsumerValidateBeforeCall(consumerId, queueId, accountId, _callback);
        Type localVarReturnType = new TypeToken<QueueV2DeleteQueue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2ListQueueConsumers
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queue Consumers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queue Consumers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2ListQueueConsumersCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/consumers"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2ListQueueConsumersValidateBeforeCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2ListQueueConsumers(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2ListQueueConsumers(Async)");
        }

        return queueV2ListQueueConsumersCall(queueId, accountId, _callback);

    }

    /**
     * List Queue Consumers
     * Returns the consumers for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return QueueV2ListQueueConsumers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queue Consumers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queue Consumers response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2ListQueueConsumers200Response queueV2ListQueueConsumers(String queueId, String accountId) throws ApiException {
        ApiResponse<QueueV2ListQueueConsumers200Response> localVarResp = queueV2ListQueueConsumersWithHttpInfo(queueId, accountId);
        return localVarResp.getData();
    }

    /**
     * List Queue Consumers
     * Returns the consumers for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;QueueV2ListQueueConsumers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queue Consumers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queue Consumers response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2ListQueueConsumers200Response> queueV2ListQueueConsumersWithHttpInfo(String queueId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = queueV2ListQueueConsumersValidateBeforeCall(queueId, accountId, null);
        Type localVarReturnType = new TypeToken<QueueV2ListQueueConsumers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Queue Consumers (asynchronously)
     * Returns the consumers for a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queue Consumers response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queue Consumers response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2ListQueueConsumersAsync(String queueId, String accountId, final ApiCallback<QueueV2ListQueueConsumers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2ListQueueConsumersValidateBeforeCall(queueId, accountId, _callback);
        Type localVarReturnType = new TypeToken<QueueV2ListQueueConsumers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2ListQueues
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queues response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queues response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2ListQueuesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2ListQueuesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2ListQueues(Async)");
        }

        return queueV2ListQueuesCall(accountId, _callback);

    }

    /**
     * List Queues
     * Returns the queues owned by an account.
     * @param accountId  (required)
     * @return QueueV2ListQueues200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queues response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queues response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2ListQueues200Response queueV2ListQueues(String accountId) throws ApiException {
        ApiResponse<QueueV2ListQueues200Response> localVarResp = queueV2ListQueuesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Queues
     * Returns the queues owned by an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;QueueV2ListQueues200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queues response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queues response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2ListQueues200Response> queueV2ListQueuesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = queueV2ListQueuesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<QueueV2ListQueues200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Queues (asynchronously)
     * Returns the queues owned by an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Queues response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Queues response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2ListQueuesAsync(String accountId, final ApiCallback<QueueV2ListQueues200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2ListQueuesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<QueueV2ListQueues200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2MessagesAck
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesAckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknoweldge Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Acknoweldge Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2MessagesAckCall(String queueId, String accountId, QueueV2MessagesAckRequest queueV2MessagesAckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queueV2MessagesAckRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/messages/ack"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2MessagesAckValidateBeforeCall(String queueId, String accountId, QueueV2MessagesAckRequest queueV2MessagesAckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2MessagesAck(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2MessagesAck(Async)");
        }

        // verify the required parameter 'queueV2MessagesAckRequest' is set
        if (queueV2MessagesAckRequest == null) {
            throw new ApiException("Missing the required parameter 'queueV2MessagesAckRequest' when calling queueV2MessagesAck(Async)");
        }

        return queueV2MessagesAckCall(queueId, accountId, queueV2MessagesAckRequest, _callback);

    }

    /**
     * Acknowledge + Retry Queue Messages
     * Acknowledge + Retry messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesAckRequest  (required)
     * @return QueueV2MessagesAck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknoweldge Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Acknoweldge Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2MessagesAck200Response queueV2MessagesAck(String queueId, String accountId, QueueV2MessagesAckRequest queueV2MessagesAckRequest) throws ApiException {
        ApiResponse<QueueV2MessagesAck200Response> localVarResp = queueV2MessagesAckWithHttpInfo(queueId, accountId, queueV2MessagesAckRequest);
        return localVarResp.getData();
    }

    /**
     * Acknowledge + Retry Queue Messages
     * Acknowledge + Retry messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesAckRequest  (required)
     * @return ApiResponse&lt;QueueV2MessagesAck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknoweldge Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Acknoweldge Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2MessagesAck200Response> queueV2MessagesAckWithHttpInfo(String queueId, String accountId, QueueV2MessagesAckRequest queueV2MessagesAckRequest) throws ApiException {
        okhttp3.Call localVarCall = queueV2MessagesAckValidateBeforeCall(queueId, accountId, queueV2MessagesAckRequest, null);
        Type localVarReturnType = new TypeToken<QueueV2MessagesAck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledge + Retry Queue Messages (asynchronously)
     * Acknowledge + Retry messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesAckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknoweldge Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Acknoweldge Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2MessagesAckAsync(String queueId, String accountId, QueueV2MessagesAckRequest queueV2MessagesAckRequest, final ApiCallback<QueueV2MessagesAck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2MessagesAckValidateBeforeCall(queueId, accountId, queueV2MessagesAckRequest, _callback);
        Type localVarReturnType = new TypeToken<QueueV2MessagesAck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2MessagesPull
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesPullRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pull Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pull Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2MessagesPullCall(String queueId, String accountId, QueueV2MessagesPullRequest queueV2MessagesPullRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queueV2MessagesPullRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/messages/pull"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2MessagesPullValidateBeforeCall(String queueId, String accountId, QueueV2MessagesPullRequest queueV2MessagesPullRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2MessagesPull(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2MessagesPull(Async)");
        }

        // verify the required parameter 'queueV2MessagesPullRequest' is set
        if (queueV2MessagesPullRequest == null) {
            throw new ApiException("Missing the required parameter 'queueV2MessagesPullRequest' when calling queueV2MessagesPull(Async)");
        }

        return queueV2MessagesPullCall(queueId, accountId, queueV2MessagesPullRequest, _callback);

    }

    /**
     * Pull Queue Messages
     * Pull a batch of messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesPullRequest  (required)
     * @return QueueV2MessagesPull200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pull Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pull Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2MessagesPull200Response queueV2MessagesPull(String queueId, String accountId, QueueV2MessagesPullRequest queueV2MessagesPullRequest) throws ApiException {
        ApiResponse<QueueV2MessagesPull200Response> localVarResp = queueV2MessagesPullWithHttpInfo(queueId, accountId, queueV2MessagesPullRequest);
        return localVarResp.getData();
    }

    /**
     * Pull Queue Messages
     * Pull a batch of messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesPullRequest  (required)
     * @return ApiResponse&lt;QueueV2MessagesPull200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pull Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pull Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2MessagesPull200Response> queueV2MessagesPullWithHttpInfo(String queueId, String accountId, QueueV2MessagesPullRequest queueV2MessagesPullRequest) throws ApiException {
        okhttp3.Call localVarCall = queueV2MessagesPullValidateBeforeCall(queueId, accountId, queueV2MessagesPullRequest, null);
        Type localVarReturnType = new TypeToken<QueueV2MessagesPull200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pull Queue Messages (asynchronously)
     * Pull a batch of messages from a Queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param queueV2MessagesPullRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pull Queue Messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Pull Queue Messages response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2MessagesPullAsync(String queueId, String accountId, QueueV2MessagesPullRequest queueV2MessagesPullRequest, final ApiCallback<QueueV2MessagesPull200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2MessagesPullValidateBeforeCall(queueId, accountId, queueV2MessagesPullRequest, _callback);
        Type localVarReturnType = new TypeToken<QueueV2MessagesPull200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2QueueDetails
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Queue Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2QueueDetailsCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2QueueDetailsValidateBeforeCall(String queueId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2QueueDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2QueueDetails(Async)");
        }

        return queueV2QueueDetailsCall(queueId, accountId, _callback);

    }

    /**
     * Queue Details
     * Get information about a specific queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return QueueV2QueueDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Queue Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2QueueDetails200Response queueV2QueueDetails(String queueId, String accountId) throws ApiException {
        ApiResponse<QueueV2QueueDetails200Response> localVarResp = queueV2QueueDetailsWithHttpInfo(queueId, accountId);
        return localVarResp.getData();
    }

    /**
     * Queue Details
     * Get information about a specific queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;QueueV2QueueDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Queue Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2QueueDetails200Response> queueV2QueueDetailsWithHttpInfo(String queueId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = queueV2QueueDetailsValidateBeforeCall(queueId, accountId, null);
        Type localVarReturnType = new TypeToken<QueueV2QueueDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queue Details (asynchronously)
     * Get information about a specific queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Queue Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Queue Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2QueueDetailsAsync(String queueId, String accountId, final ApiCallback<QueueV2QueueDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2QueueDetailsValidateBeforeCall(queueId, accountId, _callback);
        Type localVarReturnType = new TypeToken<QueueV2QueueDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2UpdateQueue
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2UpdateQueueCall(String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}"
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2UpdateQueueValidateBeforeCall(String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2UpdateQueue(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2UpdateQueue(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueV2UpdateQueue(Async)");
        }

        return queueV2UpdateQueueCall(queueId, accountId, body, _callback);

    }

    /**
     * Update Queue
     * Updates a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return QueueV2UpdateQueue200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2UpdateQueue200Response queueV2UpdateQueue(String queueId, String accountId, Object body) throws ApiException {
        ApiResponse<QueueV2UpdateQueue200Response> localVarResp = queueV2UpdateQueueWithHttpInfo(queueId, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Update Queue
     * Updates a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;QueueV2UpdateQueue200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2UpdateQueue200Response> queueV2UpdateQueueWithHttpInfo(String queueId, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = queueV2UpdateQueueValidateBeforeCall(queueId, accountId, body, null);
        Type localVarReturnType = new TypeToken<QueueV2UpdateQueue200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Queue (asynchronously)
     * Updates a queue.
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2UpdateQueueAsync(String queueId, String accountId, Object body, final ApiCallback<QueueV2UpdateQueue200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2UpdateQueueValidateBeforeCall(queueId, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<QueueV2UpdateQueue200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queueV2UpdateQueueConsumer
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2UpdateQueueConsumerCall(String consumerId, String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/queues/{queue_id}/consumers/{consumer_id}"
            .replace("{" + "consumer_id" + "}", localVarApiClient.escapeString(consumerId.toString()))
            .replace("{" + "queue_id" + "}", localVarApiClient.escapeString(queueId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queueV2UpdateQueueConsumerValidateBeforeCall(String consumerId, String queueId, String accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new ApiException("Missing the required parameter 'consumerId' when calling queueV2UpdateQueueConsumer(Async)");
        }

        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueV2UpdateQueueConsumer(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling queueV2UpdateQueueConsumer(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queueV2UpdateQueueConsumer(Async)");
        }

        return queueV2UpdateQueueConsumerCall(consumerId, queueId, accountId, body, _callback);

    }

    /**
     * Update Queue Consumer
     * Updates the consumer for a queue, or creates one if it does not exist.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return QueueV2UpdateQueueConsumer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public QueueV2UpdateQueueConsumer200Response queueV2UpdateQueueConsumer(String consumerId, String queueId, String accountId, Object body) throws ApiException {
        ApiResponse<QueueV2UpdateQueueConsumer200Response> localVarResp = queueV2UpdateQueueConsumerWithHttpInfo(consumerId, queueId, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Update Queue Consumer
     * Updates the consumer for a queue, or creates one if it does not exist.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;QueueV2UpdateQueueConsumer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueV2UpdateQueueConsumer200Response> queueV2UpdateQueueConsumerWithHttpInfo(String consumerId, String queueId, String accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = queueV2UpdateQueueConsumerValidateBeforeCall(consumerId, queueId, accountId, body, null);
        Type localVarReturnType = new TypeToken<QueueV2UpdateQueueConsumer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Queue Consumer (asynchronously)
     * Updates the consumer for a queue, or creates one if it does not exist.
     * @param consumerId  (required)
     * @param queueId  (required)
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Queue Consumer response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Queue Consumer response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queueV2UpdateQueueConsumerAsync(String consumerId, String queueId, String accountId, Object body, final ApiCallback<QueueV2UpdateQueueConsumer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queueV2UpdateQueueConsumerValidateBeforeCall(consumerId, queueId, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<QueueV2UpdateQueueConsumer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
