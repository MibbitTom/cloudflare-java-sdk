/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudforceOneApiResponseCommon;
import org.openapitools.client.model.CloudforceOneApiResponseCommonFailure;
import org.openapitools.client.model.CloudforceOnePriorityQuota200Response;
import org.openapitools.client.model.CloudforceOneRequestConstants200Response;
import org.openapitools.client.model.CloudforceOneRequestEdit;
import org.openapitools.client.model.CloudforceOneRequestList;
import org.openapitools.client.model.CloudforceOneRequestList200Response;
import org.openapitools.client.model.CloudforceOneRequestMessageEdit;
import org.openapitools.client.model.CloudforceOneRequestMessageList;
import org.openapitools.client.model.CloudforceOneRequestMessageList200Response;
import org.openapitools.client.model.CloudforceOneRequestMessageNew200Response;
import org.openapitools.client.model.CloudforceOneRequestNew200Response;
import org.openapitools.client.model.CloudforceOneRequestTypes200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestForInformationRfiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequestForInformationRfiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequestForInformationRfiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudforceOneRequestConstants
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request constants response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request constants response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestConstantsCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/constants"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestConstantsValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestConstants(Async)");
        }

        return cloudforceOneRequestConstantsCall(accountIdentifier, _callback);

    }

    /**
     * Get Request Priority, Status, and TLP constants
     * 
     * @param accountIdentifier  (required)
     * @return CloudforceOneRequestConstants200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request constants response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request constants response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestConstants200Response cloudforceOneRequestConstants(String accountIdentifier) throws ApiException {
        ApiResponse<CloudforceOneRequestConstants200Response> localVarResp = cloudforceOneRequestConstantsWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Request Priority, Status, and TLP constants
     * 
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOneRequestConstants200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request constants response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request constants response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestConstants200Response> cloudforceOneRequestConstantsWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestConstantsValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestConstants200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Request Priority, Status, and TLP constants (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request constants response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request constants response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestConstantsAsync(String accountIdentifier, final ApiCallback<CloudforceOneRequestConstants200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestConstantsValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestConstants200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestDelete
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestDeleteCall(String accountIdentifier, String requestIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestDeleteValidateBeforeCall(String accountIdentifier, String requestIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestDelete(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestDelete(Async)");
        }

        return cloudforceOneRequestDeleteCall(accountIdentifier, requestIdentifier, _callback);

    }

    /**
     * Delete a Request
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @return CloudforceOneApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneApiResponseCommon cloudforceOneRequestDelete(String accountIdentifier, String requestIdentifier) throws ApiException {
        ApiResponse<CloudforceOneApiResponseCommon> localVarResp = cloudforceOneRequestDeleteWithHttpInfo(accountIdentifier, requestIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a Request
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOneApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneApiResponseCommon> cloudforceOneRequestDeleteWithHttpInfo(String accountIdentifier, String requestIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestDeleteValidateBeforeCall(accountIdentifier, requestIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Request (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestDeleteAsync(String accountIdentifier, String requestIdentifier, final ApiCallback<CloudforceOneApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestDeleteValidateBeforeCall(accountIdentifier, requestIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestGet
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestGetCall(String accountIdentifier, String requestIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestGetValidateBeforeCall(String accountIdentifier, String requestIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestGet(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestGet(Async)");
        }

        return cloudforceOneRequestGetCall(accountIdentifier, requestIdentifier, _callback);

    }

    /**
     * Get a Request
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @return CloudforceOneRequestNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a request response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestNew200Response cloudforceOneRequestGet(String accountIdentifier, String requestIdentifier) throws ApiException {
        ApiResponse<CloudforceOneRequestNew200Response> localVarResp = cloudforceOneRequestGetWithHttpInfo(accountIdentifier, requestIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a Request
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOneRequestNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a request response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestNew200Response> cloudforceOneRequestGetWithHttpInfo(String accountIdentifier, String requestIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestGetValidateBeforeCall(accountIdentifier, requestIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Request (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestGetAsync(String accountIdentifier, String requestIdentifier, final ApiCallback<CloudforceOneRequestNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestGetValidateBeforeCall(accountIdentifier, requestIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestList
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List requests response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestListCall(String accountIdentifier, CloudforceOneRequestList cloudforceOneRequestList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestList;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestListValidateBeforeCall(String accountIdentifier, CloudforceOneRequestList cloudforceOneRequestList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestList(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestList' is set
        if (cloudforceOneRequestList == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestList' when calling cloudforceOneRequestList(Async)");
        }

        return cloudforceOneRequestListCall(accountIdentifier, cloudforceOneRequestList, _callback);

    }

    /**
     * List Requests
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestList  (required)
     * @return CloudforceOneRequestList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List requests response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestList200Response cloudforceOneRequestList(String accountIdentifier, CloudforceOneRequestList cloudforceOneRequestList) throws ApiException {
        ApiResponse<CloudforceOneRequestList200Response> localVarResp = cloudforceOneRequestListWithHttpInfo(accountIdentifier, cloudforceOneRequestList);
        return localVarResp.getData();
    }

    /**
     * List Requests
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestList  (required)
     * @return ApiResponse&lt;CloudforceOneRequestList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List requests response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestList200Response> cloudforceOneRequestListWithHttpInfo(String accountIdentifier, CloudforceOneRequestList cloudforceOneRequestList) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestListValidateBeforeCall(accountIdentifier, cloudforceOneRequestList, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Requests (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List requests response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestListAsync(String accountIdentifier, CloudforceOneRequestList cloudforceOneRequestList, final ApiCallback<CloudforceOneRequestList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestListValidateBeforeCall(accountIdentifier, cloudforceOneRequestList, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestMessageDelete
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request message response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageDeleteCall(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}/message/{message_identifer}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()))
            .replace("{" + "message_identifer" + "}", localVarApiClient.escapeString(messageIdentifer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestMessageDeleteValidateBeforeCall(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestMessageDelete(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestMessageDelete(Async)");
        }

        // verify the required parameter 'messageIdentifer' is set
        if (messageIdentifer == null) {
            throw new ApiException("Missing the required parameter 'messageIdentifer' when calling cloudforceOneRequestMessageDelete(Async)");
        }

        return cloudforceOneRequestMessageDeleteCall(accountIdentifier, requestIdentifier, messageIdentifer, _callback);

    }

    /**
     * Delete a Request Message
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @return CloudforceOneApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request message response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneApiResponseCommon cloudforceOneRequestMessageDelete(String accountIdentifier, String requestIdentifier, Integer messageIdentifer) throws ApiException {
        ApiResponse<CloudforceOneApiResponseCommon> localVarResp = cloudforceOneRequestMessageDeleteWithHttpInfo(accountIdentifier, requestIdentifier, messageIdentifer);
        return localVarResp.getData();
    }

    /**
     * Delete a Request Message
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @return ApiResponse&lt;CloudforceOneApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request message response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneApiResponseCommon> cloudforceOneRequestMessageDeleteWithHttpInfo(String accountIdentifier, String requestIdentifier, Integer messageIdentifer) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestMessageDeleteValidateBeforeCall(accountIdentifier, requestIdentifier, messageIdentifer, null);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Request Message (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a request message response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageDeleteAsync(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, final ApiCallback<CloudforceOneApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestMessageDeleteValidateBeforeCall(accountIdentifier, requestIdentifier, messageIdentifer, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestMessageList
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List request messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List requests message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageListCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageList cloudforceOneRequestMessageList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestMessageList;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}/message"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestMessageListValidateBeforeCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageList cloudforceOneRequestMessageList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestMessageList(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestMessageList(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestMessageList' is set
        if (cloudforceOneRequestMessageList == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestMessageList' when calling cloudforceOneRequestMessageList(Async)");
        }

        return cloudforceOneRequestMessageListCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageList, _callback);

    }

    /**
     * List Request Messages
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageList  (required)
     * @return CloudforceOneRequestMessageList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List request messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List requests message response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestMessageList200Response cloudforceOneRequestMessageList(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageList cloudforceOneRequestMessageList) throws ApiException {
        ApiResponse<CloudforceOneRequestMessageList200Response> localVarResp = cloudforceOneRequestMessageListWithHttpInfo(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageList);
        return localVarResp.getData();
    }

    /**
     * List Request Messages
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageList  (required)
     * @return ApiResponse&lt;CloudforceOneRequestMessageList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List request messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List requests message response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestMessageList200Response> cloudforceOneRequestMessageListWithHttpInfo(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageList cloudforceOneRequestMessageList) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestMessageListValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageList, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Request Messages (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List request messages response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List requests message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageListAsync(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageList cloudforceOneRequestMessageList, final ApiCallback<CloudforceOneRequestMessageList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestMessageListValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageList, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestMessageNew
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageNewCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageEdit cloudforceOneRequestMessageEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestMessageEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}/message/new"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestMessageNewValidateBeforeCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageEdit cloudforceOneRequestMessageEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestMessageNew(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestMessageNew(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestMessageEdit' is set
        if (cloudforceOneRequestMessageEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestMessageEdit' when calling cloudforceOneRequestMessageNew(Async)");
        }

        return cloudforceOneRequestMessageNewCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageEdit, _callback);

    }

    /**
     * Create a New Request Message
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageEdit  (required)
     * @return CloudforceOneRequestMessageNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestMessageNew200Response cloudforceOneRequestMessageNew(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageEdit cloudforceOneRequestMessageEdit) throws ApiException {
        ApiResponse<CloudforceOneRequestMessageNew200Response> localVarResp = cloudforceOneRequestMessageNewWithHttpInfo(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageEdit);
        return localVarResp.getData();
    }

    /**
     * Create a New Request Message
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageEdit  (required)
     * @return ApiResponse&lt;CloudforceOneRequestMessageNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestMessageNew200Response> cloudforceOneRequestMessageNewWithHttpInfo(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageEdit cloudforceOneRequestMessageEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestMessageNewValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Request Message (asynchronously)
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestMessageEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageNewAsync(String accountIdentifier, String requestIdentifier, CloudforceOneRequestMessageEdit cloudforceOneRequestMessageEdit, final ApiCallback<CloudforceOneRequestMessageNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestMessageNewValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestMessageEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestMessageUpdate
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request messeage response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageUpdateCall(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}/message/{message_identifer}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()))
            .replace("{" + "message_identifer" + "}", localVarApiClient.escapeString(messageIdentifer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestMessageUpdateValidateBeforeCall(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestMessageUpdate(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestMessageUpdate(Async)");
        }

        // verify the required parameter 'messageIdentifer' is set
        if (messageIdentifer == null) {
            throw new ApiException("Missing the required parameter 'messageIdentifer' when calling cloudforceOneRequestMessageUpdate(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestEdit' is set
        if (cloudforceOneRequestEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestEdit' when calling cloudforceOneRequestMessageUpdate(Async)");
        }

        return cloudforceOneRequestMessageUpdateCall(accountIdentifier, requestIdentifier, messageIdentifer, cloudforceOneRequestEdit, _callback);

    }

    /**
     * Update a Request Message
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return CloudforceOneRequestMessageNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request messeage response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestMessageNew200Response cloudforceOneRequestMessageUpdate(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        ApiResponse<CloudforceOneRequestMessageNew200Response> localVarResp = cloudforceOneRequestMessageUpdateWithHttpInfo(accountIdentifier, requestIdentifier, messageIdentifer, cloudforceOneRequestEdit);
        return localVarResp.getData();
    }

    /**
     * Update a Request Message
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return ApiResponse&lt;CloudforceOneRequestMessageNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request messeage response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestMessageNew200Response> cloudforceOneRequestMessageUpdateWithHttpInfo(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestMessageUpdateValidateBeforeCall(accountIdentifier, requestIdentifier, messageIdentifer, cloudforceOneRequestEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Request Message (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param messageIdentifer  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request messeage response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request message response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestMessageUpdateAsync(String accountIdentifier, String requestIdentifier, Integer messageIdentifer, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback<CloudforceOneRequestMessageNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestMessageUpdateValidateBeforeCall(accountIdentifier, requestIdentifier, messageIdentifer, cloudforceOneRequestEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestMessageNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestNew
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestNewCall(String accountIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/new"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestNewValidateBeforeCall(String accountIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestNew(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestEdit' is set
        if (cloudforceOneRequestEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestEdit' when calling cloudforceOneRequestNew(Async)");
        }

        return cloudforceOneRequestNewCall(accountIdentifier, cloudforceOneRequestEdit, _callback);

    }

    /**
     * Create a New Request
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return CloudforceOneRequestNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestNew200Response cloudforceOneRequestNew(String accountIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        ApiResponse<CloudforceOneRequestNew200Response> localVarResp = cloudforceOneRequestNewWithHttpInfo(accountIdentifier, cloudforceOneRequestEdit);
        return localVarResp.getData();
    }

    /**
     * Create a New Request
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return ApiResponse&lt;CloudforceOneRequestNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestNew200Response> cloudforceOneRequestNewWithHttpInfo(String accountIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestNewValidateBeforeCall(accountIdentifier, cloudforceOneRequestEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Request (asynchronously)
     * Creating a request adds the request into the Cloudforce One queue for analysis. In addition to the content, a short title, type, priority, and releasability should be provided. If one is not provided a default will be assigned.
     * @param accountIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestNewAsync(String accountIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback<CloudforceOneRequestNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestNewValidateBeforeCall(accountIdentifier, cloudforceOneRequestEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestQuota
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestQuotaCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/quota"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestQuotaValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestQuota(Async)");
        }

        return cloudforceOneRequestQuotaCall(accountIdentifier, _callback);

    }

    /**
     * Get Request Quota
     * 
     * @param accountIdentifier  (required)
     * @return CloudforceOnePriorityQuota200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOnePriorityQuota200Response cloudforceOneRequestQuota(String accountIdentifier) throws ApiException {
        ApiResponse<CloudforceOnePriorityQuota200Response> localVarResp = cloudforceOneRequestQuotaWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Request Quota
     * 
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOnePriorityQuota200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOnePriorityQuota200Response> cloudforceOneRequestQuotaWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestQuotaValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityQuota200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Request Quota (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request quota response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request quota response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestQuotaAsync(String accountIdentifier, final ApiCallback<CloudforceOnePriorityQuota200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestQuotaValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOnePriorityQuota200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestTypes
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request types response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request types response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestTypesCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/types"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestTypesValidateBeforeCall(String accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestTypes(Async)");
        }

        return cloudforceOneRequestTypesCall(accountIdentifier, _callback);

    }

    /**
     * Get Request Types
     * 
     * @param accountIdentifier  (required)
     * @return CloudforceOneRequestTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request types response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request types response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestTypes200Response cloudforceOneRequestTypes(String accountIdentifier) throws ApiException {
        ApiResponse<CloudforceOneRequestTypes200Response> localVarResp = cloudforceOneRequestTypesWithHttpInfo(accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Request Types
     * 
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudforceOneRequestTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request types response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request types response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestTypes200Response> cloudforceOneRequestTypesWithHttpInfo(String accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestTypesValidateBeforeCall(accountIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Request Types (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get request types response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get request types response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestTypesAsync(String accountIdentifier, final ApiCallback<CloudforceOneRequestTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestTypesValidateBeforeCall(accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudforceOneRequestUpdate
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestUpdateCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudforceOneRequestEdit;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cloudforce-one/requests/{request_identifier}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "request_identifier" + "}", localVarApiClient.escapeString(requestIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudforceOneRequestUpdateValidateBeforeCall(String accountIdentifier, String requestIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudforceOneRequestUpdate(Async)");
        }

        // verify the required parameter 'requestIdentifier' is set
        if (requestIdentifier == null) {
            throw new ApiException("Missing the required parameter 'requestIdentifier' when calling cloudforceOneRequestUpdate(Async)");
        }

        // verify the required parameter 'cloudforceOneRequestEdit' is set
        if (cloudforceOneRequestEdit == null) {
            throw new ApiException("Missing the required parameter 'cloudforceOneRequestEdit' when calling cloudforceOneRequestUpdate(Async)");
        }

        return cloudforceOneRequestUpdateCall(accountIdentifier, requestIdentifier, cloudforceOneRequestEdit, _callback);

    }

    /**
     * Update a Request
     * Updating a request alters the request in the Cloudforce One queue. This API may be used to update any attributes of the request after the initial submission. Only fields that you choose to update need to be add to the request body
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return CloudforceOneRequestNew200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudforceOneRequestNew200Response cloudforceOneRequestUpdate(String accountIdentifier, String requestIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        ApiResponse<CloudforceOneRequestNew200Response> localVarResp = cloudforceOneRequestUpdateWithHttpInfo(accountIdentifier, requestIdentifier, cloudforceOneRequestEdit);
        return localVarResp.getData();
    }

    /**
     * Update a Request
     * Updating a request alters the request in the Cloudforce One queue. This API may be used to update any attributes of the request after the initial submission. Only fields that you choose to update need to be add to the request body
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @return ApiResponse&lt;CloudforceOneRequestNew200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudforceOneRequestNew200Response> cloudforceOneRequestUpdateWithHttpInfo(String accountIdentifier, String requestIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit) throws ApiException {
        okhttp3.Call localVarCall = cloudforceOneRequestUpdateValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestEdit, null);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Request (asynchronously)
     * Updating a request alters the request in the Cloudforce One queue. This API may be used to update any attributes of the request after the initial submission. Only fields that you choose to update need to be add to the request body
     * @param accountIdentifier  (required)
     * @param requestIdentifier  (required)
     * @param cloudforceOneRequestEdit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a request response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update request response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudforceOneRequestUpdateAsync(String accountIdentifier, String requestIdentifier, CloudforceOneRequestEdit cloudforceOneRequestEdit, final ApiCallback<CloudforceOneRequestNew200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudforceOneRequestUpdateValidateBeforeCall(accountIdentifier, requestIdentifier, cloudforceOneRequestEdit, _callback);
        Type localVarReturnType = new TypeToken<CloudforceOneRequestNew200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
