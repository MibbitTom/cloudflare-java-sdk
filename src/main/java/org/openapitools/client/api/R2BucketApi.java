/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.R2CreateBucket200Response;
import org.openapitools.client.model.R2CreateBucketRequest;
import org.openapitools.client.model.R2DeleteBucketSippyConfig200Response;
import org.openapitools.client.model.R2GetBucketSippyConfig200Response;
import org.openapitools.client.model.R2ListBuckets200Response;
import org.openapitools.client.model.R2PutBucketSippyConfigRequest;
import org.openapitools.client.model.R2V4Response;
import org.openapitools.client.model.R2V4ResponseFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class R2BucketApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public R2BucketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public R2BucketApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for r2CreateBucket
     * @param accountId  (required)
     * @param r2CreateBucketRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2CreateBucketCall(String accountId, R2CreateBucketRequest r2CreateBucketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = r2CreateBucketRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2CreateBucketValidateBeforeCall(String accountId, R2CreateBucketRequest r2CreateBucketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2CreateBucket(Async)");
        }

        // verify the required parameter 'r2CreateBucketRequest' is set
        if (r2CreateBucketRequest == null) {
            throw new ApiException("Missing the required parameter 'r2CreateBucketRequest' when calling r2CreateBucket(Async)");
        }

        return r2CreateBucketCall(accountId, r2CreateBucketRequest, _callback);

    }

    /**
     * Create Bucket
     * Creates a new R2 bucket.
     * @param accountId  (required)
     * @param r2CreateBucketRequest  (required)
     * @return R2CreateBucket200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2CreateBucket200Response r2CreateBucket(String accountId, R2CreateBucketRequest r2CreateBucketRequest) throws ApiException {
        ApiResponse<R2CreateBucket200Response> localVarResp = r2CreateBucketWithHttpInfo(accountId, r2CreateBucketRequest);
        return localVarResp.getData();
    }

    /**
     * Create Bucket
     * Creates a new R2 bucket.
     * @param accountId  (required)
     * @param r2CreateBucketRequest  (required)
     * @return ApiResponse&lt;R2CreateBucket200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2CreateBucket200Response> r2CreateBucketWithHttpInfo(String accountId, R2CreateBucketRequest r2CreateBucketRequest) throws ApiException {
        okhttp3.Call localVarCall = r2CreateBucketValidateBeforeCall(accountId, r2CreateBucketRequest, null);
        Type localVarReturnType = new TypeToken<R2CreateBucket200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Bucket (asynchronously)
     * Creates a new R2 bucket.
     * @param accountId  (required)
     * @param r2CreateBucketRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2CreateBucketAsync(String accountId, R2CreateBucketRequest r2CreateBucketRequest, final ApiCallback<R2CreateBucket200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2CreateBucketValidateBeforeCall(accountId, r2CreateBucketRequest, _callback);
        Type localVarReturnType = new TypeToken<R2CreateBucket200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2DeleteBucket
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2DeleteBucketCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets/{bucket_name}"
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2DeleteBucketValidateBeforeCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling r2DeleteBucket(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2DeleteBucket(Async)");
        }

        return r2DeleteBucketCall(bucketName, accountId, _callback);

    }

    /**
     * Delete Bucket
     * Deletes an existing R2 bucket.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return R2V4Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2V4Response r2DeleteBucket(String bucketName, String accountId) throws ApiException {
        ApiResponse<R2V4Response> localVarResp = r2DeleteBucketWithHttpInfo(bucketName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete Bucket
     * Deletes an existing R2 bucket.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;R2V4Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2V4Response> r2DeleteBucketWithHttpInfo(String bucketName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = r2DeleteBucketValidateBeforeCall(bucketName, accountId, null);
        Type localVarReturnType = new TypeToken<R2V4Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Bucket (asynchronously)
     * Deletes an existing R2 bucket.
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2DeleteBucketAsync(String bucketName, String accountId, final ApiCallback<R2V4Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2DeleteBucketValidateBeforeCall(bucketName, accountId, _callback);
        Type localVarReturnType = new TypeToken<R2V4Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2DeleteBucketSippyConfig
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2DeleteBucketSippyConfigCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets/{bucket_name}/sippy"
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2DeleteBucketSippyConfigValidateBeforeCall(String bucketName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling r2DeleteBucketSippyConfig(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2DeleteBucketSippyConfig(Async)");
        }

        return r2DeleteBucketSippyConfigCall(bucketName, accountId, _callback);

    }

    /**
     * Disable Sippy
     * Disables Sippy on this bucket
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return R2DeleteBucketSippyConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2DeleteBucketSippyConfig200Response r2DeleteBucketSippyConfig(String bucketName, String accountId) throws ApiException {
        ApiResponse<R2DeleteBucketSippyConfig200Response> localVarResp = r2DeleteBucketSippyConfigWithHttpInfo(bucketName, accountId);
        return localVarResp.getData();
    }

    /**
     * Disable Sippy
     * Disables Sippy on this bucket
     * @param bucketName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;R2DeleteBucketSippyConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2DeleteBucketSippyConfig200Response> r2DeleteBucketSippyConfigWithHttpInfo(String bucketName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = r2DeleteBucketSippyConfigValidateBeforeCall(bucketName, accountId, null);
        Type localVarReturnType = new TypeToken<R2DeleteBucketSippyConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Sippy (asynchronously)
     * Disables Sippy on this bucket
     * @param bucketName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2DeleteBucketSippyConfigAsync(String bucketName, String accountId, final ApiCallback<R2DeleteBucketSippyConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2DeleteBucketSippyConfigValidateBeforeCall(bucketName, accountId, _callback);
        Type localVarReturnType = new TypeToken<R2DeleteBucketSippyConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2GetBucket
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2GetBucketCall(String accountId, String bucketName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets/{bucket_name}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2GetBucketValidateBeforeCall(String accountId, String bucketName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2GetBucket(Async)");
        }

        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling r2GetBucket(Async)");
        }

        return r2GetBucketCall(accountId, bucketName, _callback);

    }

    /**
     * Get Bucket
     * Gets metadata for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @return R2CreateBucket200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2CreateBucket200Response r2GetBucket(String accountId, String bucketName) throws ApiException {
        ApiResponse<R2CreateBucket200Response> localVarResp = r2GetBucketWithHttpInfo(accountId, bucketName);
        return localVarResp.getData();
    }

    /**
     * Get Bucket
     * Gets metadata for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @return ApiResponse&lt;R2CreateBucket200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2CreateBucket200Response> r2GetBucketWithHttpInfo(String accountId, String bucketName) throws ApiException {
        okhttp3.Call localVarCall = r2GetBucketValidateBeforeCall(accountId, bucketName, null);
        Type localVarReturnType = new TypeToken<R2CreateBucket200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bucket (asynchronously)
     * Gets metadata for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Bucket response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Bucket response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2GetBucketAsync(String accountId, String bucketName, final ApiCallback<R2CreateBucket200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2GetBucketValidateBeforeCall(accountId, bucketName, _callback);
        Type localVarReturnType = new TypeToken<R2CreateBucket200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2GetBucketSippyConfig
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2GetBucketSippyConfigCall(String accountId, String bucketName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets/{bucket_name}/sippy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2GetBucketSippyConfigValidateBeforeCall(String accountId, String bucketName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2GetBucketSippyConfig(Async)");
        }

        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling r2GetBucketSippyConfig(Async)");
        }

        return r2GetBucketSippyConfigCall(accountId, bucketName, _callback);

    }

    /**
     * Get Sippy Configuration
     * Gets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @return R2GetBucketSippyConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2GetBucketSippyConfig200Response r2GetBucketSippyConfig(String accountId, String bucketName) throws ApiException {
        ApiResponse<R2GetBucketSippyConfig200Response> localVarResp = r2GetBucketSippyConfigWithHttpInfo(accountId, bucketName);
        return localVarResp.getData();
    }

    /**
     * Get Sippy Configuration
     * Gets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @return ApiResponse&lt;R2GetBucketSippyConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2GetBucketSippyConfig200Response> r2GetBucketSippyConfigWithHttpInfo(String accountId, String bucketName) throws ApiException {
        okhttp3.Call localVarCall = r2GetBucketSippyConfigValidateBeforeCall(accountId, bucketName, null);
        Type localVarReturnType = new TypeToken<R2GetBucketSippyConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Sippy Configuration (asynchronously)
     * Gets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2GetBucketSippyConfigAsync(String accountId, String bucketName, final ApiCallback<R2GetBucketSippyConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2GetBucketSippyConfigValidateBeforeCall(accountId, bucketName, _callback);
        Type localVarReturnType = new TypeToken<R2GetBucketSippyConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2ListBuckets
     * @param accountId  (required)
     * @param nameContains  (optional)
     * @param startAfter  (optional)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param cursor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Buckets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Buckets response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2ListBucketsCall(String accountId, String nameContains, String startAfter, BigDecimal perPage, String order, String direction, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_contains", nameContains));
        }

        if (startAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_after", startAfter));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2ListBucketsValidateBeforeCall(String accountId, String nameContains, String startAfter, BigDecimal perPage, String order, String direction, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2ListBuckets(Async)");
        }

        return r2ListBucketsCall(accountId, nameContains, startAfter, perPage, order, direction, cursor, _callback);

    }

    /**
     * List Buckets
     * Lists all R2 buckets on your account
     * @param accountId  (required)
     * @param nameContains  (optional)
     * @param startAfter  (optional)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param cursor  (optional)
     * @return R2ListBuckets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Buckets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Buckets response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2ListBuckets200Response r2ListBuckets(String accountId, String nameContains, String startAfter, BigDecimal perPage, String order, String direction, String cursor) throws ApiException {
        ApiResponse<R2ListBuckets200Response> localVarResp = r2ListBucketsWithHttpInfo(accountId, nameContains, startAfter, perPage, order, direction, cursor);
        return localVarResp.getData();
    }

    /**
     * List Buckets
     * Lists all R2 buckets on your account
     * @param accountId  (required)
     * @param nameContains  (optional)
     * @param startAfter  (optional)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param cursor  (optional)
     * @return ApiResponse&lt;R2ListBuckets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Buckets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Buckets response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2ListBuckets200Response> r2ListBucketsWithHttpInfo(String accountId, String nameContains, String startAfter, BigDecimal perPage, String order, String direction, String cursor) throws ApiException {
        okhttp3.Call localVarCall = r2ListBucketsValidateBeforeCall(accountId, nameContains, startAfter, perPage, order, direction, cursor, null);
        Type localVarReturnType = new TypeToken<R2ListBuckets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Buckets (asynchronously)
     * Lists all R2 buckets on your account
     * @param accountId  (required)
     * @param nameContains  (optional)
     * @param startAfter  (optional)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param cursor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Buckets response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Buckets response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2ListBucketsAsync(String accountId, String nameContains, String startAfter, BigDecimal perPage, String order, String direction, String cursor, final ApiCallback<R2ListBuckets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2ListBucketsValidateBeforeCall(accountId, nameContains, startAfter, perPage, order, direction, cursor, _callback);
        Type localVarReturnType = new TypeToken<R2ListBuckets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for r2PutBucketSippyConfig
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param r2PutBucketSippyConfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2PutBucketSippyConfigCall(String accountId, String bucketName, R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = r2PutBucketSippyConfigRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/r2/buckets/{bucket_name}/sippy"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call r2PutBucketSippyConfigValidateBeforeCall(String accountId, String bucketName, R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling r2PutBucketSippyConfig(Async)");
        }

        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling r2PutBucketSippyConfig(Async)");
        }

        // verify the required parameter 'r2PutBucketSippyConfigRequest' is set
        if (r2PutBucketSippyConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'r2PutBucketSippyConfigRequest' when calling r2PutBucketSippyConfig(Async)");
        }

        return r2PutBucketSippyConfigCall(accountId, bucketName, r2PutBucketSippyConfigRequest, _callback);

    }

    /**
     * Enable Sippy
     * Sets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param r2PutBucketSippyConfigRequest  (required)
     * @return R2GetBucketSippyConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public R2GetBucketSippyConfig200Response r2PutBucketSippyConfig(String accountId, String bucketName, R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest) throws ApiException {
        ApiResponse<R2GetBucketSippyConfig200Response> localVarResp = r2PutBucketSippyConfigWithHttpInfo(accountId, bucketName, r2PutBucketSippyConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Enable Sippy
     * Sets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param r2PutBucketSippyConfigRequest  (required)
     * @return ApiResponse&lt;R2GetBucketSippyConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<R2GetBucketSippyConfig200Response> r2PutBucketSippyConfigWithHttpInfo(String accountId, String bucketName, R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = r2PutBucketSippyConfigValidateBeforeCall(accountId, bucketName, r2PutBucketSippyConfigRequest, null);
        Type localVarReturnType = new TypeToken<R2GetBucketSippyConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Sippy (asynchronously)
     * Sets configuration for Sippy for an existing R2 bucket.
     * @param accountId  (required)
     * @param bucketName  (required)
     * @param r2PutBucketSippyConfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Sippy Configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Sippy Configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call r2PutBucketSippyConfigAsync(String accountId, String bucketName, R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest, final ApiCallback<R2GetBucketSippyConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = r2PutBucketSippyConfigValidateBeforeCall(accountId, bucketName, r2PutBucketSippyConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<R2GetBucketSippyConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
