/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TunnelApiResponseCommonFailure;
import org.openapitools.client.model.TunnelZeroTrustConnectivitySettingsResponse;
import org.openapitools.client.model.ZeroTrustAccountsPatchConnectivitySettingsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZeroTrustConnectivitySettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZeroTrustConnectivitySettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZeroTrustConnectivitySettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zeroTrustAccountsGetConnectivitySettings
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustAccountsGetConnectivitySettingsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/zerotrust/connectivity_settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustAccountsGetConnectivitySettingsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling zeroTrustAccountsGetConnectivitySettings(Async)");
        }

        return zeroTrustAccountsGetConnectivitySettingsCall(accountId, _callback);

    }

    /**
     * Get Zero Trust Connectivity Settings
     * Gets the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @return TunnelZeroTrustConnectivitySettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelZeroTrustConnectivitySettingsResponse zeroTrustAccountsGetConnectivitySettings(String accountId) throws ApiException {
        ApiResponse<TunnelZeroTrustConnectivitySettingsResponse> localVarResp = zeroTrustAccountsGetConnectivitySettingsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Zero Trust Connectivity Settings
     * Gets the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @return ApiResponse&lt;TunnelZeroTrustConnectivitySettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelZeroTrustConnectivitySettingsResponse> zeroTrustAccountsGetConnectivitySettingsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustAccountsGetConnectivitySettingsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TunnelZeroTrustConnectivitySettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Zero Trust Connectivity Settings (asynchronously)
     * Gets the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustAccountsGetConnectivitySettingsAsync(String accountId, final ApiCallback<TunnelZeroTrustConnectivitySettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustAccountsGetConnectivitySettingsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TunnelZeroTrustConnectivitySettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zeroTrustAccountsPatchConnectivitySettings
     * @param accountId  (required)
     * @param zeroTrustAccountsPatchConnectivitySettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustAccountsPatchConnectivitySettingsCall(String accountId, ZeroTrustAccountsPatchConnectivitySettingsRequest zeroTrustAccountsPatchConnectivitySettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zeroTrustAccountsPatchConnectivitySettingsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/zerotrust/connectivity_settings"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zeroTrustAccountsPatchConnectivitySettingsValidateBeforeCall(String accountId, ZeroTrustAccountsPatchConnectivitySettingsRequest zeroTrustAccountsPatchConnectivitySettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling zeroTrustAccountsPatchConnectivitySettings(Async)");
        }

        // verify the required parameter 'zeroTrustAccountsPatchConnectivitySettingsRequest' is set
        if (zeroTrustAccountsPatchConnectivitySettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'zeroTrustAccountsPatchConnectivitySettingsRequest' when calling zeroTrustAccountsPatchConnectivitySettings(Async)");
        }

        return zeroTrustAccountsPatchConnectivitySettingsCall(accountId, zeroTrustAccountsPatchConnectivitySettingsRequest, _callback);

    }

    /**
     * Updates the Zero Trust Connectivity Settings
     * Updates the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @param zeroTrustAccountsPatchConnectivitySettingsRequest  (required)
     * @return TunnelZeroTrustConnectivitySettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public TunnelZeroTrustConnectivitySettingsResponse zeroTrustAccountsPatchConnectivitySettings(String accountId, ZeroTrustAccountsPatchConnectivitySettingsRequest zeroTrustAccountsPatchConnectivitySettingsRequest) throws ApiException {
        ApiResponse<TunnelZeroTrustConnectivitySettingsResponse> localVarResp = zeroTrustAccountsPatchConnectivitySettingsWithHttpInfo(accountId, zeroTrustAccountsPatchConnectivitySettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the Zero Trust Connectivity Settings
     * Updates the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @param zeroTrustAccountsPatchConnectivitySettingsRequest  (required)
     * @return ApiResponse&lt;TunnelZeroTrustConnectivitySettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TunnelZeroTrustConnectivitySettingsResponse> zeroTrustAccountsPatchConnectivitySettingsWithHttpInfo(String accountId, ZeroTrustAccountsPatchConnectivitySettingsRequest zeroTrustAccountsPatchConnectivitySettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = zeroTrustAccountsPatchConnectivitySettingsValidateBeforeCall(accountId, zeroTrustAccountsPatchConnectivitySettingsRequest, null);
        Type localVarReturnType = new TypeToken<TunnelZeroTrustConnectivitySettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Zero Trust Connectivity Settings (asynchronously)
     * Updates the Zero Trust Connectivity Settings for the given account.
     * @param accountId  (required)
     * @param zeroTrustAccountsPatchConnectivitySettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Zero Trust Connectivity Settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Zero Trust Connectivity Settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zeroTrustAccountsPatchConnectivitySettingsAsync(String accountId, ZeroTrustAccountsPatchConnectivitySettingsRequest zeroTrustAccountsPatchConnectivitySettingsRequest, final ApiCallback<TunnelZeroTrustConnectivitySettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zeroTrustAccountsPatchConnectivitySettingsValidateBeforeCall(accountId, zeroTrustAccountsPatchConnectivitySettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<TunnelZeroTrustConnectivitySettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
