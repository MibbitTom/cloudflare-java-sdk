/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LoadBalancerRegionsGetRegion4XXResponse;
import org.openapitools.client.model.LoadBalancerRegionsListRegions4XXResponse;
import org.openapitools.client.model.LoadBalancingComponentsSchemasSingleResponse;
import org.openapitools.client.model.LoadBalancingRegionCode;
import org.openapitools.client.model.LoadBalancingRegionComponentsSchemasResponseCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancerRegionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoadBalancerRegionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancerRegionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for loadBalancerRegionsGetRegion
     * @param regionId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Region response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Region response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerRegionsGetRegionCall(LoadBalancingRegionCode regionId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/regions/{region_id}"
            .replace("{" + "region_id" + "}", localVarApiClient.escapeString(regionId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerRegionsGetRegionValidateBeforeCall(LoadBalancingRegionCode regionId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'regionId' is set
        if (regionId == null) {
            throw new ApiException("Missing the required parameter 'regionId' when calling loadBalancerRegionsGetRegion(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling loadBalancerRegionsGetRegion(Async)");
        }

        return loadBalancerRegionsGetRegionCall(regionId, accountId, _callback);

    }

    /**
     * Get Region
     * Get a single region mapping.
     * @param regionId  (required)
     * @param accountId  (required)
     * @return LoadBalancingComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Region response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Region response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingComponentsSchemasSingleResponse loadBalancerRegionsGetRegion(LoadBalancingRegionCode regionId, String accountId) throws ApiException {
        ApiResponse<LoadBalancingComponentsSchemasSingleResponse> localVarResp = loadBalancerRegionsGetRegionWithHttpInfo(regionId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get Region
     * Get a single region mapping.
     * @param regionId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;LoadBalancingComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Region response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Region response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingComponentsSchemasSingleResponse> loadBalancerRegionsGetRegionWithHttpInfo(LoadBalancingRegionCode regionId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerRegionsGetRegionValidateBeforeCall(regionId, accountId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Region (asynchronously)
     * Get a single region mapping.
     * @param regionId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Region response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Region response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerRegionsGetRegionAsync(LoadBalancingRegionCode regionId, String accountId, final ApiCallback<LoadBalancingComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerRegionsGetRegionValidateBeforeCall(regionId, accountId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerRegionsListRegions
     * @param accountId  (required)
     * @param subdivisionCode  (optional)
     * @param subdivisionCodeA2  (optional)
     * @param countryCodeA2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Regions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Regions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerRegionsListRegionsCall(String accountId, String subdivisionCode, String subdivisionCodeA2, String countryCodeA2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/load_balancers/regions"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subdivisionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdivision_code", subdivisionCode));
        }

        if (subdivisionCodeA2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdivision_code_a2", subdivisionCodeA2));
        }

        if (countryCodeA2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code_a2", countryCodeA2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerRegionsListRegionsValidateBeforeCall(String accountId, String subdivisionCode, String subdivisionCodeA2, String countryCodeA2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling loadBalancerRegionsListRegions(Async)");
        }

        return loadBalancerRegionsListRegionsCall(accountId, subdivisionCode, subdivisionCodeA2, countryCodeA2, _callback);

    }

    /**
     * List Regions
     * List all region mappings.
     * @param accountId  (required)
     * @param subdivisionCode  (optional)
     * @param subdivisionCodeA2  (optional)
     * @param countryCodeA2  (optional)
     * @return LoadBalancingRegionComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Regions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Regions response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingRegionComponentsSchemasResponseCollection loadBalancerRegionsListRegions(String accountId, String subdivisionCode, String subdivisionCodeA2, String countryCodeA2) throws ApiException {
        ApiResponse<LoadBalancingRegionComponentsSchemasResponseCollection> localVarResp = loadBalancerRegionsListRegionsWithHttpInfo(accountId, subdivisionCode, subdivisionCodeA2, countryCodeA2);
        return localVarResp.getData();
    }

    /**
     * List Regions
     * List all region mappings.
     * @param accountId  (required)
     * @param subdivisionCode  (optional)
     * @param subdivisionCodeA2  (optional)
     * @param countryCodeA2  (optional)
     * @return ApiResponse&lt;LoadBalancingRegionComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Regions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Regions response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingRegionComponentsSchemasResponseCollection> loadBalancerRegionsListRegionsWithHttpInfo(String accountId, String subdivisionCode, String subdivisionCodeA2, String countryCodeA2) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerRegionsListRegionsValidateBeforeCall(accountId, subdivisionCode, subdivisionCodeA2, countryCodeA2, null);
        Type localVarReturnType = new TypeToken<LoadBalancingRegionComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Regions (asynchronously)
     * List all region mappings.
     * @param accountId  (required)
     * @param subdivisionCode  (optional)
     * @param subdivisionCodeA2  (optional)
     * @param countryCodeA2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Regions response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Regions response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerRegionsListRegionsAsync(String accountId, String subdivisionCode, String subdivisionCodeA2, String countryCodeA2, final ApiCallback<LoadBalancingRegionComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerRegionsListRegionsValidateBeforeCall(accountId, subdivisionCode, subdivisionCodeA2, countryCodeA2, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingRegionComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
