/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyJhsResponseCollection;
import org.openapitools.client.model.LegacyJhsResponseSingle;
import org.openapitools.client.model.LegacyJhsResponseSingleOriginDns;
import org.openapitools.client.model.SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin4XXResponse;
import org.openapitools.client.model.SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest;
import org.openapitools.client.model.SpectrumApplicationsDeleteSpectrumApplication200Response;
import org.openapitools.client.model.SpectrumApplicationsDeleteSpectrumApplication4XXResponse;
import org.openapitools.client.model.SpectrumApplicationsGetSpectrumApplicationConfiguration4XXResponse;
import org.openapitools.client.model.SpectrumApplicationsListSpectrumApplications4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpectrumApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpectrumApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpectrumApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Spectrum application using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Spectrum application using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginCall(String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps"
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(Async)");
        }

        // verify the required parameter 'spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest' is set
        if (spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest == null) {
            throw new ApiException("Missing the required parameter 'spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest' when calling spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(Async)");
        }

        return spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginCall(zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, _callback);

    }

    /**
     * Create Spectrum application using a name for the origin
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @return LegacyJhsResponseSingleOriginDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Spectrum application using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Spectrum application using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public LegacyJhsResponseSingleOriginDns spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest) throws ApiException {
        ApiResponse<LegacyJhsResponseSingleOriginDns> localVarResp = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginWithHttpInfo(zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest);
        return localVarResp.getData();
    }

    /**
     * Create Spectrum application using a name for the origin
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @return ApiResponse&lt;LegacyJhsResponseSingleOriginDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Spectrum application using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Spectrum application using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegacyJhsResponseSingleOriginDns> spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginWithHttpInfo(String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest) throws ApiException {
        okhttp3.Call localVarCall = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, null);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingleOriginDns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Spectrum application using a name for the origin (asynchronously)
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Spectrum application using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Spectrum application using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginAsync(String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback<LegacyJhsResponseSingleOriginDns> _callback) throws ApiException {

        okhttp3.Call localVarCall = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, _callback);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingleOriginDns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spectrumApplicationsDeleteSpectrumApplication
     * @param appId  (required)
     * @param zone  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Spectrum application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Spectrum application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsDeleteSpectrumApplicationCall(String appId, String zone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(String appId, String zone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsDeleteSpectrumApplication(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsDeleteSpectrumApplication(Async)");
        }

        return spectrumApplicationsDeleteSpectrumApplicationCall(appId, zone, _callback);

    }

    /**
     * Delete Spectrum application
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @return SpectrumApplicationsDeleteSpectrumApplication200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Spectrum application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Spectrum application response failure </td><td>  -  </td></tr>
     </table>
     */
    public SpectrumApplicationsDeleteSpectrumApplication200Response spectrumApplicationsDeleteSpectrumApplication(String appId, String zone) throws ApiException {
        ApiResponse<SpectrumApplicationsDeleteSpectrumApplication200Response> localVarResp = spectrumApplicationsDeleteSpectrumApplicationWithHttpInfo(appId, zone);
        return localVarResp.getData();
    }

    /**
     * Delete Spectrum application
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;SpectrumApplicationsDeleteSpectrumApplication200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Spectrum application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Spectrum application response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpectrumApplicationsDeleteSpectrumApplication200Response> spectrumApplicationsDeleteSpectrumApplicationWithHttpInfo(String appId, String zone) throws ApiException {
        okhttp3.Call localVarCall = spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(appId, zone, null);
        Type localVarReturnType = new TypeToken<SpectrumApplicationsDeleteSpectrumApplication200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Spectrum application (asynchronously)
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Spectrum application response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Spectrum application response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsDeleteSpectrumApplicationAsync(String appId, String zone, final ApiCallback<SpectrumApplicationsDeleteSpectrumApplication200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(appId, zone, _callback);
        Type localVarReturnType = new TypeToken<SpectrumApplicationsDeleteSpectrumApplication200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spectrumApplicationsGetSpectrumApplicationConfiguration
     * @param appId  (required)
     * @param zone  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Spectrum application configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Spectrum application configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsGetSpectrumApplicationConfigurationCall(String appId, String zone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(String appId, String zone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsGetSpectrumApplicationConfiguration(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsGetSpectrumApplicationConfiguration(Async)");
        }

        return spectrumApplicationsGetSpectrumApplicationConfigurationCall(appId, zone, _callback);

    }

    /**
     * Get Spectrum application configuration
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @return LegacyJhsResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Spectrum application configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Spectrum application configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public LegacyJhsResponseSingle spectrumApplicationsGetSpectrumApplicationConfiguration(String appId, String zone) throws ApiException {
        ApiResponse<LegacyJhsResponseSingle> localVarResp = spectrumApplicationsGetSpectrumApplicationConfigurationWithHttpInfo(appId, zone);
        return localVarResp.getData();
    }

    /**
     * Get Spectrum application configuration
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;LegacyJhsResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Spectrum application configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Spectrum application configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegacyJhsResponseSingle> spectrumApplicationsGetSpectrumApplicationConfigurationWithHttpInfo(String appId, String zone) throws ApiException {
        okhttp3.Call localVarCall = spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(appId, zone, null);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Spectrum application configuration (asynchronously)
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Spectrum application configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Spectrum application configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsGetSpectrumApplicationConfigurationAsync(String appId, String zone, final ApiCallback<LegacyJhsResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(appId, zone, _callback);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spectrumApplicationsListSpectrumApplications
     * @param zone  (required)
     * @param page  (optional)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param order  (optional, default to dns)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Spectrum applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Spectrum applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsListSpectrumApplicationsCall(String zone, BigDecimal page, BigDecimal perPage, String direction, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps"
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(String zone, BigDecimal page, BigDecimal perPage, String direction, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsListSpectrumApplications(Async)");
        }

        return spectrumApplicationsListSpectrumApplicationsCall(zone, page, perPage, direction, order, _callback);

    }

    /**
     * List Spectrum applications
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @param page  (optional)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param order  (optional, default to dns)
     * @return LegacyJhsResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Spectrum applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Spectrum applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public LegacyJhsResponseCollection spectrumApplicationsListSpectrumApplications(String zone, BigDecimal page, BigDecimal perPage, String direction, String order) throws ApiException {
        ApiResponse<LegacyJhsResponseCollection> localVarResp = spectrumApplicationsListSpectrumApplicationsWithHttpInfo(zone, page, perPage, direction, order);
        return localVarResp.getData();
    }

    /**
     * List Spectrum applications
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @param page  (optional)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param order  (optional, default to dns)
     * @return ApiResponse&lt;LegacyJhsResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Spectrum applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Spectrum applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegacyJhsResponseCollection> spectrumApplicationsListSpectrumApplicationsWithHttpInfo(String zone, BigDecimal page, BigDecimal perPage, String direction, String order) throws ApiException {
        okhttp3.Call localVarCall = spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(zone, page, perPage, direction, order, null);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Spectrum applications (asynchronously)
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @param page  (optional)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional, default to asc)
     * @param order  (optional, default to dns)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Spectrum applications response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Spectrum applications response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsListSpectrumApplicationsAsync(String zone, BigDecimal page, BigDecimal perPage, String direction, String order, final ApiCallback<LegacyJhsResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(zone, page, perPage, direction, order, _callback);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin
     * @param appId  (required)
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Spectrum application configuration using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Spectrum application configuration using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginCall(String appId, String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(String appId, String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }

        // verify the required parameter 'spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest' is set
        if (spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest == null) {
            throw new ApiException("Missing the required parameter 'spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }

        return spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginCall(appId, zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, _callback);

    }

    /**
     * Update Spectrum application configuration using a name for the origin
     * Updates a previously existing application&#39;s configuration that uses a name for the origin.
     * @param appId  (required)
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @return LegacyJhsResponseSingleOriginDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Spectrum application configuration using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Spectrum application configuration using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public LegacyJhsResponseSingleOriginDns spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(String appId, String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest) throws ApiException {
        ApiResponse<LegacyJhsResponseSingleOriginDns> localVarResp = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginWithHttpInfo(appId, zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest);
        return localVarResp.getData();
    }

    /**
     * Update Spectrum application configuration using a name for the origin
     * Updates a previously existing application&#39;s configuration that uses a name for the origin.
     * @param appId  (required)
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @return ApiResponse&lt;LegacyJhsResponseSingleOriginDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Spectrum application configuration using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Spectrum application configuration using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegacyJhsResponseSingleOriginDns> spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginWithHttpInfo(String appId, String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest) throws ApiException {
        okhttp3.Call localVarCall = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(appId, zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, null);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingleOriginDns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Spectrum application configuration using a name for the origin (asynchronously)
     * Updates a previously existing application&#39;s configuration that uses a name for the origin.
     * @param appId  (required)
     * @param zone  (required)
     * @param spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Spectrum application configuration using a name for the origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Spectrum application configuration using a name for the origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginAsync(String appId, String zone, SpectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, final ApiCallback<LegacyJhsResponseSingleOriginDns> _callback) throws ApiException {

        okhttp3.Call localVarCall = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(appId, zone, spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginRequest, _callback);
        Type localVarReturnType = new TypeToken<LegacyJhsResponseSingleOriginDns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
