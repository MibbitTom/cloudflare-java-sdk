/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FirewallApiResponseSingleId;
import org.openapitools.client.model.FirewallEgsPagination;
import org.openapitools.client.model.FirewallFilters;
import org.openapitools.client.model.FirewallResponseCollection;
import org.openapitools.client.model.FirewallResponseSingle;
import org.openapitools.client.model.FirewallSchemasRule;
import org.openapitools.client.model.IpAccessRulesForAnAccountCreateAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest;
import org.openapitools.client.model.IpAccessRulesForAnAccountDeleteAnIpAccessRule4XXResponse;
import org.openapitools.client.model.IpAccessRulesForAnAccountListIpAccessRules4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAccessRulesForAnAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpAccessRulesForAnAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAccessRulesForAnAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipAccessRulesForAnAccountCreateAnIpAccessRule
     * @param accountIdentifier  (required)
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountCreateAnIpAccessRuleCall(Object accountIdentifier, IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/firewall/access_rules/rules"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAnAccountCreateAnIpAccessRuleValidateBeforeCall(Object accountIdentifier, IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAccessRulesForAnAccountCreateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest' is set
        if (ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest' when calling ipAccessRulesForAnAccountCreateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAnAccountCreateAnIpAccessRuleCall(accountIdentifier, ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, _callback);

    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param accountIdentifier  (required)
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @return FirewallResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallResponseSingle ipAccessRulesForAnAccountCreateAnIpAccessRule(Object accountIdentifier, IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest) throws ApiException {
        ApiResponse<FirewallResponseSingle> localVarResp = ipAccessRulesForAnAccountCreateAnIpAccessRuleWithHttpInfo(accountIdentifier, ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Create an IP Access rule
     * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param accountIdentifier  (required)
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @return ApiResponse&lt;FirewallResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallResponseSingle> ipAccessRulesForAnAccountCreateAnIpAccessRuleWithHttpInfo(Object accountIdentifier, IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAnAccountCreateAnIpAccessRuleValidateBeforeCall(accountIdentifier, ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, null);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an IP Access rule (asynchronously)
     * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @param accountIdentifier  (required)
     * @param ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountCreateAnIpAccessRuleAsync(Object accountIdentifier, IpAccessRulesForAnAccountCreateAnIpAccessRuleRequest ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, final ApiCallback<FirewallResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAnAccountCreateAnIpAccessRuleValidateBeforeCall(accountIdentifier, ipAccessRulesForAnAccountCreateAnIpAccessRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAnAccountDeleteAnIpAccessRule
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountDeleteAnIpAccessRuleCall(Object identifier, Object accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAnAccountDeleteAnIpAccessRuleValidateBeforeCall(Object identifier, Object accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAnAccountDeleteAnIpAccessRule(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAccessRulesForAnAccountDeleteAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAnAccountDeleteAnIpAccessRuleCall(identifier, accountIdentifier, _callback);

    }

    /**
     * Delete an IP Access rule
     * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return FirewallApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallApiResponseSingleId ipAccessRulesForAnAccountDeleteAnIpAccessRule(Object identifier, Object accountIdentifier) throws ApiException {
        ApiResponse<FirewallApiResponseSingleId> localVarResp = ipAccessRulesForAnAccountDeleteAnIpAccessRuleWithHttpInfo(identifier, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete an IP Access rule
     * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;FirewallApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallApiResponseSingleId> ipAccessRulesForAnAccountDeleteAnIpAccessRuleWithHttpInfo(Object identifier, Object accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAnAccountDeleteAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an IP Access rule (asynchronously)
     * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountDeleteAnIpAccessRuleAsync(Object identifier, Object accountIdentifier, final ApiCallback<FirewallApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAnAccountDeleteAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAnAccountGetAnIpAccessRule
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountGetAnIpAccessRuleCall(Object identifier, Object accountIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAnAccountGetAnIpAccessRuleValidateBeforeCall(Object identifier, Object accountIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAnAccountGetAnIpAccessRule(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAccessRulesForAnAccountGetAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAnAccountGetAnIpAccessRuleCall(identifier, accountIdentifier, _callback);

    }

    /**
     * Get an IP Access rule
     * Fetches the details of an IP Access rule defined at the account level.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return FirewallResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallResponseSingle ipAccessRulesForAnAccountGetAnIpAccessRule(Object identifier, Object accountIdentifier) throws ApiException {
        ApiResponse<FirewallResponseSingle> localVarResp = ipAccessRulesForAnAccountGetAnIpAccessRuleWithHttpInfo(identifier, accountIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get an IP Access rule
     * Fetches the details of an IP Access rule defined at the account level.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;FirewallResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallResponseSingle> ipAccessRulesForAnAccountGetAnIpAccessRuleWithHttpInfo(Object identifier, Object accountIdentifier) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAnAccountGetAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an IP Access rule (asynchronously)
     * Fetches the details of an IP Access rule defined at the account level.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountGetAnIpAccessRuleAsync(Object identifier, Object accountIdentifier, final ApiCallback<FirewallResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAnAccountGetAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAnAccountListIpAccessRules
     * @param accountIdentifier  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountListIpAccessRulesCall(Object accountIdentifier, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/firewall/access_rules/rules"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (egsPaginationJson != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("egs-pagination.json", egsPaginationJson));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAnAccountListIpAccessRulesValidateBeforeCall(Object accountIdentifier, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAccessRulesForAnAccountListIpAccessRules(Async)");
        }

        return ipAccessRulesForAnAccountListIpAccessRulesCall(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, _callback);

    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
     * @param accountIdentifier  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return FirewallResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallResponseCollection ipAccessRulesForAnAccountListIpAccessRules(Object accountIdentifier, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        ApiResponse<FirewallResponseCollection> localVarResp = ipAccessRulesForAnAccountListIpAccessRulesWithHttpInfo(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction);
        return localVarResp.getData();
    }

    /**
     * List IP Access rules
     * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
     * @param accountIdentifier  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @return ApiResponse&lt;FirewallResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallResponseCollection> ipAccessRulesForAnAccountListIpAccessRulesWithHttpInfo(Object accountIdentifier, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAnAccountListIpAccessRulesValidateBeforeCall(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, null);
        Type localVarReturnType = new TypeToken<FirewallResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List IP Access rules (asynchronously)
     * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
     * @param accountIdentifier  (required)
     * @param filters  (optional)
     * @param egsPaginationJson  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param order  (optional)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List IP Access rules response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List IP Access rules response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountListIpAccessRulesAsync(Object accountIdentifier, FirewallFilters filters, FirewallEgsPagination egsPaginationJson, BigDecimal page, BigDecimal perPage, String order, String direction, final ApiCallback<FirewallResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAnAccountListIpAccessRulesValidateBeforeCall(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, _callback);
        Type localVarReturnType = new TypeToken<FirewallResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipAccessRulesForAnAccountUpdateAnIpAccessRule
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param firewallSchemasRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountUpdateAnIpAccessRuleCall(Object identifier, Object accountIdentifier, FirewallSchemasRule firewallSchemasRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallSchemasRule;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipAccessRulesForAnAccountUpdateAnIpAccessRuleValidateBeforeCall(Object identifier, Object accountIdentifier, FirewallSchemasRule firewallSchemasRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule(Async)");
        }

        // verify the required parameter 'firewallSchemasRule' is set
        if (firewallSchemasRule == null) {
            throw new ApiException("Missing the required parameter 'firewallSchemasRule' when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule(Async)");
        }

        return ipAccessRulesForAnAccountUpdateAnIpAccessRuleCall(identifier, accountIdentifier, firewallSchemasRule, _callback);

    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param firewallSchemasRule  (required)
     * @return FirewallResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public FirewallResponseSingle ipAccessRulesForAnAccountUpdateAnIpAccessRule(Object identifier, Object accountIdentifier, FirewallSchemasRule firewallSchemasRule) throws ApiException {
        ApiResponse<FirewallResponseSingle> localVarResp = ipAccessRulesForAnAccountUpdateAnIpAccessRuleWithHttpInfo(identifier, accountIdentifier, firewallSchemasRule);
        return localVarResp.getData();
    }

    /**
     * Update an IP Access rule
     * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param firewallSchemasRule  (required)
     * @return ApiResponse&lt;FirewallResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallResponseSingle> ipAccessRulesForAnAccountUpdateAnIpAccessRuleWithHttpInfo(Object identifier, Object accountIdentifier, FirewallSchemasRule firewallSchemasRule) throws ApiException {
        okhttp3.Call localVarCall = ipAccessRulesForAnAccountUpdateAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, firewallSchemasRule, null);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an IP Access rule (asynchronously)
     * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param firewallSchemasRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an IP Access rule response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an IP Access rule response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipAccessRulesForAnAccountUpdateAnIpAccessRuleAsync(Object identifier, Object accountIdentifier, FirewallSchemasRule firewallSchemasRule, final ApiCallback<FirewallResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipAccessRulesForAnAccountUpdateAnIpAccessRuleValidateBeforeCall(identifier, accountIdentifier, firewallSchemasRule, _callback);
        Type localVarReturnType = new TypeToken<FirewallResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
