/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArchiveSecurityCenterInsightRequest;
import org.openapitools.client.model.GetSecurityCenterIssueTypes200Response;
import org.openapitools.client.model.GetSecurityCenterIssues200Response;
import org.openapitools.client.model.SecurityCenterApiResponseCommonFailure;
import org.openapitools.client.model.SecurityCenterApiResponseSingle;
import org.openapitools.client.model.SecurityCenterIssueType;
import org.openapitools.client.model.SecurityCenterValueCountsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityCenterInsightsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityCenterInsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityCenterInsightsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for archiveSecurityCenterInsight
     * @param accountId  (required)
     * @param issueId  (required)
     * @param archiveSecurityCenterInsightRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveSecurityCenterInsightCall(String accountId, String issueId, ArchiveSecurityCenterInsightRequest archiveSecurityCenterInsightRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = archiveSecurityCenterInsightRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/{issue_id}/dismiss"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveSecurityCenterInsightValidateBeforeCall(String accountId, String issueId, ArchiveSecurityCenterInsightRequest archiveSecurityCenterInsightRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling archiveSecurityCenterInsight(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling archiveSecurityCenterInsight(Async)");
        }

        // verify the required parameter 'archiveSecurityCenterInsightRequest' is set
        if (archiveSecurityCenterInsightRequest == null) {
            throw new ApiException("Missing the required parameter 'archiveSecurityCenterInsightRequest' when calling archiveSecurityCenterInsight(Async)");
        }

        return archiveSecurityCenterInsightCall(accountId, issueId, archiveSecurityCenterInsightRequest, _callback);

    }

    /**
     * Archive Security Center Insight
     * 
     * @param accountId  (required)
     * @param issueId  (required)
     * @param archiveSecurityCenterInsightRequest  (required)
     * @return SecurityCenterApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityCenterApiResponseSingle archiveSecurityCenterInsight(String accountId, String issueId, ArchiveSecurityCenterInsightRequest archiveSecurityCenterInsightRequest) throws ApiException {
        ApiResponse<SecurityCenterApiResponseSingle> localVarResp = archiveSecurityCenterInsightWithHttpInfo(accountId, issueId, archiveSecurityCenterInsightRequest);
        return localVarResp.getData();
    }

    /**
     * Archive Security Center Insight
     * 
     * @param accountId  (required)
     * @param issueId  (required)
     * @param archiveSecurityCenterInsightRequest  (required)
     * @return ApiResponse&lt;SecurityCenterApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityCenterApiResponseSingle> archiveSecurityCenterInsightWithHttpInfo(String accountId, String issueId, ArchiveSecurityCenterInsightRequest archiveSecurityCenterInsightRequest) throws ApiException {
        okhttp3.Call localVarCall = archiveSecurityCenterInsightValidateBeforeCall(accountId, issueId, archiveSecurityCenterInsightRequest, null);
        Type localVarReturnType = new TypeToken<SecurityCenterApiResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive Security Center Insight (asynchronously)
     * 
     * @param accountId  (required)
     * @param issueId  (required)
     * @param archiveSecurityCenterInsightRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveSecurityCenterInsightAsync(String accountId, String issueId, ArchiveSecurityCenterInsightRequest archiveSecurityCenterInsightRequest, final ApiCallback<SecurityCenterApiResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveSecurityCenterInsightValidateBeforeCall(accountId, issueId, archiveSecurityCenterInsightRequest, _callback);
        Type localVarReturnType = new TypeToken<SecurityCenterApiResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurityCenterIssueCountsByClass
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsByClassCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/issues/class"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dismissed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dismissed", dismissed));
        }

        if (issueClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class", issueClass));
        }

        if (issueType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type", issueType));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product", product));
        }

        if (severity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity", severity));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (issueClassTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class~neq", issueClassTildeNeq));
        }

        if (issueTypeTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type~neq", issueTypeTildeNeq));
        }

        if (productTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product~neq", productTildeNeq));
        }

        if (severityTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity~neq", severityTildeNeq));
        }

        if (subjectTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject~neq", subjectTildeNeq));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityCenterIssueCountsByClassValidateBeforeCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSecurityCenterIssueCountsByClass(Async)");
        }

        return getSecurityCenterIssueCountsByClassCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);

    }

    /**
     * Get Security Center Issue Counts by Class
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return SecurityCenterValueCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityCenterValueCountsResponse getSecurityCenterIssueCountsByClass(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        ApiResponse<SecurityCenterValueCountsResponse> localVarResp = getSecurityCenterIssueCountsByClassWithHttpInfo(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq);
        return localVarResp.getData();
    }

    /**
     * Get Security Center Issue Counts by Class
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return ApiResponse&lt;SecurityCenterValueCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityCenterValueCountsResponse> getSecurityCenterIssueCountsByClassWithHttpInfo(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        okhttp3.Call localVarCall = getSecurityCenterIssueCountsByClassValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, null);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Center Issue Counts by Class (asynchronously)
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsByClassAsync(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback<SecurityCenterValueCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityCenterIssueCountsByClassValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurityCenterIssueCountsBySeverity
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsBySeverityCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/issues/severity"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dismissed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dismissed", dismissed));
        }

        if (issueClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class", issueClass));
        }

        if (issueType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type", issueType));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product", product));
        }

        if (severity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity", severity));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (issueClassTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class~neq", issueClassTildeNeq));
        }

        if (issueTypeTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type~neq", issueTypeTildeNeq));
        }

        if (productTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product~neq", productTildeNeq));
        }

        if (severityTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity~neq", severityTildeNeq));
        }

        if (subjectTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject~neq", subjectTildeNeq));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityCenterIssueCountsBySeverityValidateBeforeCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSecurityCenterIssueCountsBySeverity(Async)");
        }

        return getSecurityCenterIssueCountsBySeverityCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);

    }

    /**
     * Get Security Center Issue Counts by Severity
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return SecurityCenterValueCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityCenterValueCountsResponse getSecurityCenterIssueCountsBySeverity(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        ApiResponse<SecurityCenterValueCountsResponse> localVarResp = getSecurityCenterIssueCountsBySeverityWithHttpInfo(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq);
        return localVarResp.getData();
    }

    /**
     * Get Security Center Issue Counts by Severity
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return ApiResponse&lt;SecurityCenterValueCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityCenterValueCountsResponse> getSecurityCenterIssueCountsBySeverityWithHttpInfo(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        okhttp3.Call localVarCall = getSecurityCenterIssueCountsBySeverityValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, null);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Center Issue Counts by Severity (asynchronously)
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsBySeverityAsync(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback<SecurityCenterValueCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityCenterIssueCountsBySeverityValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurityCenterIssueCountsByType
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsByTypeCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/issues/type"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dismissed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dismissed", dismissed));
        }

        if (issueClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class", issueClass));
        }

        if (issueType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type", issueType));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product", product));
        }

        if (severity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity", severity));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (issueClassTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class~neq", issueClassTildeNeq));
        }

        if (issueTypeTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type~neq", issueTypeTildeNeq));
        }

        if (productTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product~neq", productTildeNeq));
        }

        if (severityTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity~neq", severityTildeNeq));
        }

        if (subjectTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject~neq", subjectTildeNeq));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityCenterIssueCountsByTypeValidateBeforeCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSecurityCenterIssueCountsByType(Async)");
        }

        return getSecurityCenterIssueCountsByTypeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);

    }

    /**
     * Get Security Center Issue Counts by Type
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return SecurityCenterValueCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityCenterValueCountsResponse getSecurityCenterIssueCountsByType(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        ApiResponse<SecurityCenterValueCountsResponse> localVarResp = getSecurityCenterIssueCountsByTypeWithHttpInfo(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq);
        return localVarResp.getData();
    }

    /**
     * Get Security Center Issue Counts by Type
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @return ApiResponse&lt;SecurityCenterValueCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityCenterValueCountsResponse> getSecurityCenterIssueCountsByTypeWithHttpInfo(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq) throws ApiException {
        okhttp3.Call localVarCall = getSecurityCenterIssueCountsByTypeValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, null);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Center Issue Counts by Type (asynchronously)
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueCountsByTypeAsync(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, final ApiCallback<SecurityCenterValueCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityCenterIssueCountsByTypeValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, _callback);
        Type localVarReturnType = new TypeToken<SecurityCenterValueCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurityCenterIssueTypes
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueTypesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/issue-types"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityCenterIssueTypesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSecurityCenterIssueTypes(Async)");
        }

        return getSecurityCenterIssueTypesCall(accountId, _callback);

    }

    /**
     * Get Security Center Issues Types
     * 
     * @param accountId  (required)
     * @return GetSecurityCenterIssueTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public GetSecurityCenterIssueTypes200Response getSecurityCenterIssueTypes(String accountId) throws ApiException {
        ApiResponse<GetSecurityCenterIssueTypes200Response> localVarResp = getSecurityCenterIssueTypesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Security Center Issues Types
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;GetSecurityCenterIssueTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSecurityCenterIssueTypes200Response> getSecurityCenterIssueTypesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getSecurityCenterIssueTypesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<GetSecurityCenterIssueTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Center Issues Types (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssueTypesAsync(String accountId, final ApiCallback<GetSecurityCenterIssueTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityCenterIssueTypesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<GetSecurityCenterIssueTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurityCenterIssues
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssuesCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/attack-surface-report/issues"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dismissed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dismissed", dismissed));
        }

        if (issueClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class", issueClass));
        }

        if (issueType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type", issueType));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product", product));
        }

        if (severity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity", severity));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (issueClassTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_class~neq", issueClassTildeNeq));
        }

        if (issueTypeTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issue_type~neq", issueTypeTildeNeq));
        }

        if (productTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product~neq", productTildeNeq));
        }

        if (severityTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity~neq", severityTildeNeq));
        }

        if (subjectTildeNeq != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject~neq", subjectTildeNeq));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityCenterIssuesValidateBeforeCall(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSecurityCenterIssues(Async)");
        }

        return getSecurityCenterIssuesCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, page, perPage, _callback);

    }

    /**
     * Get Security Center Issues
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @return GetSecurityCenterIssues200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public GetSecurityCenterIssues200Response getSecurityCenterIssues(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, Integer page, Integer perPage) throws ApiException {
        ApiResponse<GetSecurityCenterIssues200Response> localVarResp = getSecurityCenterIssuesWithHttpInfo(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get Security Center Issues
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @return ApiResponse&lt;GetSecurityCenterIssues200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSecurityCenterIssues200Response> getSecurityCenterIssuesWithHttpInfo(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getSecurityCenterIssuesValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, page, perPage, null);
        Type localVarReturnType = new TypeToken<GetSecurityCenterIssues200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Center Issues (asynchronously)
     * 
     * @param accountId  (required)
     * @param dismissed  (optional)
     * @param issueClass  (optional)
     * @param issueType  (optional)
     * @param product  (optional)
     * @param severity  (optional)
     * @param subject  (optional)
     * @param issueClassTildeNeq  (optional)
     * @param issueTypeTildeNeq  (optional)
     * @param productTildeNeq  (optional)
     * @param severityTildeNeq  (optional)
     * @param subjectTildeNeq  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecurityCenterIssuesAsync(String accountId, Boolean dismissed, List<String> issueClass, List<SecurityCenterIssueType> issueType, List<String> product, List<String> severity, List<String> subject, List<String> issueClassTildeNeq, List<SecurityCenterIssueType> issueTypeTildeNeq, List<String> productTildeNeq, List<String> severityTildeNeq, List<String> subjectTildeNeq, Integer page, Integer perPage, final ApiCallback<GetSecurityCenterIssues200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityCenterIssuesValidateBeforeCall(accountId, dismissed, issueClass, issueType, product, severity, subject, issueClassTildeNeq, issueTypeTildeNeq, productTildeNeq, severityTildeNeq, subjectTildeNeq, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<GetSecurityCenterIssues200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
