/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessNameResponse;
import org.openapitools.client.model.AccessTagWithoutAppCount;
import org.openapitools.client.model.AccessTagsComponentsSchemasResponseCollection;
import org.openapitools.client.model.AccessTagsComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessTagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessTagsCreateTag
     * @param identifier  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsCreateTagCall(String identifier, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessTagWithoutAppCount;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/tags"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTagsCreateTagValidateBeforeCall(String identifier, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessTagsCreateTag(Async)");
        }

        return accessTagsCreateTagCall(identifier, accessTagWithoutAppCount, _callback);

    }

    /**
     * Create a tag
     * Create a tag
     * @param identifier  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @return AccessTagsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessTagsComponentsSchemasSingleResponse accessTagsCreateTag(String identifier, AccessTagWithoutAppCount accessTagWithoutAppCount) throws ApiException {
        ApiResponse<AccessTagsComponentsSchemasSingleResponse> localVarResp = accessTagsCreateTagWithHttpInfo(identifier, accessTagWithoutAppCount);
        return localVarResp.getData();
    }

    /**
     * Create a tag
     * Create a tag
     * @param identifier  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @return ApiResponse&lt;AccessTagsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTagsComponentsSchemasSingleResponse> accessTagsCreateTagWithHttpInfo(String identifier, AccessTagWithoutAppCount accessTagWithoutAppCount) throws ApiException {
        okhttp3.Call localVarCall = accessTagsCreateTagValidateBeforeCall(identifier, accessTagWithoutAppCount, null);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tag (asynchronously)
     * Create a tag
     * @param identifier  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsCreateTagAsync(String identifier, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback<AccessTagsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTagsCreateTagValidateBeforeCall(identifier, accessTagWithoutAppCount, _callback);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessTagsDeleteATag
     * @param identifier  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsDeleteATagCall(String identifier, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/tags/{name}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTagsDeleteATagValidateBeforeCall(String identifier, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessTagsDeleteATag(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accessTagsDeleteATag(Async)");
        }

        return accessTagsDeleteATagCall(identifier, name, _callback);

    }

    /**
     * Delete a tag
     * Delete a tag
     * @param identifier  (required)
     * @param name  (required)
     * @return AccessNameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessNameResponse accessTagsDeleteATag(String identifier, String name) throws ApiException {
        ApiResponse<AccessNameResponse> localVarResp = accessTagsDeleteATagWithHttpInfo(identifier, name);
        return localVarResp.getData();
    }

    /**
     * Delete a tag
     * Delete a tag
     * @param identifier  (required)
     * @param name  (required)
     * @return ApiResponse&lt;AccessNameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessNameResponse> accessTagsDeleteATagWithHttpInfo(String identifier, String name) throws ApiException {
        okhttp3.Call localVarCall = accessTagsDeleteATagValidateBeforeCall(identifier, name, null);
        Type localVarReturnType = new TypeToken<AccessNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a tag (asynchronously)
     * Delete a tag
     * @param identifier  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Delete a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsDeleteATagAsync(String identifier, String name, final ApiCallback<AccessNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTagsDeleteATagValidateBeforeCall(identifier, name, _callback);
        Type localVarReturnType = new TypeToken<AccessNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessTagsGetATag
     * @param identifier  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsGetATagCall(String identifier, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/tags/{name}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTagsGetATagValidateBeforeCall(String identifier, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessTagsGetATag(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accessTagsGetATag(Async)");
        }

        return accessTagsGetATagCall(identifier, name, _callback);

    }

    /**
     * Get a tag
     * Get a tag
     * @param identifier  (required)
     * @param name  (required)
     * @return AccessTagsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessTagsComponentsSchemasSingleResponse accessTagsGetATag(String identifier, String name) throws ApiException {
        ApiResponse<AccessTagsComponentsSchemasSingleResponse> localVarResp = accessTagsGetATagWithHttpInfo(identifier, name);
        return localVarResp.getData();
    }

    /**
     * Get a tag
     * Get a tag
     * @param identifier  (required)
     * @param name  (required)
     * @return ApiResponse&lt;AccessTagsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTagsComponentsSchemasSingleResponse> accessTagsGetATagWithHttpInfo(String identifier, String name) throws ApiException {
        okhttp3.Call localVarCall = accessTagsGetATagValidateBeforeCall(identifier, name, null);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a tag (asynchronously)
     * Get a tag
     * @param identifier  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsGetATagAsync(String identifier, String name, final ApiCallback<AccessTagsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTagsGetATagValidateBeforeCall(identifier, name, _callback);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessTagsListTags
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tags response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tags response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsListTagsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/tags"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTagsListTagsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessTagsListTags(Async)");
        }

        return accessTagsListTagsCall(identifier, _callback);

    }

    /**
     * List tags
     * List tags
     * @param identifier  (required)
     * @return AccessTagsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tags response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tags response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessTagsComponentsSchemasResponseCollection accessTagsListTags(String identifier) throws ApiException {
        ApiResponse<AccessTagsComponentsSchemasResponseCollection> localVarResp = accessTagsListTagsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List tags
     * List tags
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessTagsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tags response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tags response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTagsComponentsSchemasResponseCollection> accessTagsListTagsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessTagsListTagsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * List tags
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List tags response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List tags response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsListTagsAsync(String identifier, final ApiCallback<AccessTagsComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTagsListTagsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessTagsUpdateATag
     * @param identifier  (required)
     * @param name  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsUpdateATagCall(String identifier, String name, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessTagWithoutAppCount;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/tags/{name}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTagsUpdateATagValidateBeforeCall(String identifier, String name, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessTagsUpdateATag(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling accessTagsUpdateATag(Async)");
        }

        return accessTagsUpdateATagCall(identifier, name, accessTagWithoutAppCount, _callback);

    }

    /**
     * Update a tag
     * Update a tag
     * @param identifier  (required)
     * @param name  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @return AccessTagsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessTagsComponentsSchemasSingleResponse accessTagsUpdateATag(String identifier, String name, AccessTagWithoutAppCount accessTagWithoutAppCount) throws ApiException {
        ApiResponse<AccessTagsComponentsSchemasSingleResponse> localVarResp = accessTagsUpdateATagWithHttpInfo(identifier, name, accessTagWithoutAppCount);
        return localVarResp.getData();
    }

    /**
     * Update a tag
     * Update a tag
     * @param identifier  (required)
     * @param name  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @return ApiResponse&lt;AccessTagsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTagsComponentsSchemasSingleResponse> accessTagsUpdateATagWithHttpInfo(String identifier, String name, AccessTagWithoutAppCount accessTagWithoutAppCount) throws ApiException {
        okhttp3.Call localVarCall = accessTagsUpdateATagValidateBeforeCall(identifier, name, accessTagWithoutAppCount, null);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tag (asynchronously)
     * Update a tag
     * @param identifier  (required)
     * @param name  (required)
     * @param accessTagWithoutAppCount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a tag response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTagsUpdateATagAsync(String identifier, String name, AccessTagWithoutAppCount accessTagWithoutAppCount, final ApiCallback<AccessTagsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTagsUpdateATagValidateBeforeCall(identifier, name, accessTagWithoutAppCount, _callback);
        Type localVarReturnType = new TypeToken<AccessTagsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
