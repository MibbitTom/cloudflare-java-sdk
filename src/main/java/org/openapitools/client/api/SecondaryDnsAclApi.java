/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SecondaryDnsAcl;
import org.openapitools.client.model.SecondaryDnsAclCreateAcl4XXResponse;
import org.openapitools.client.model.SecondaryDnsAclDeleteAcl4XXResponse;
import org.openapitools.client.model.SecondaryDnsAclListAcLs4XXResponse;
import org.openapitools.client.model.SecondaryDnsComponentsSchemasIdResponse;
import org.openapitools.client.model.SecondaryDnsComponentsSchemasResponseCollection;
import org.openapitools.client.model.SecondaryDnsComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecondaryDnsAclApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecondaryDnsAclApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecondaryDnsAclApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for secondaryDnsAclAclDetails
     * @param aclId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclAclDetailsCall(Object aclId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/acls/{acl_id}"
            .replace("{" + "acl_id" + "}", localVarApiClient.escapeString(aclId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsAclAclDetailsValidateBeforeCall(Object aclId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling secondaryDnsAclAclDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsAclAclDetails(Async)");
        }

        return secondaryDnsAclAclDetailsCall(aclId, accountId, _callback);

    }

    /**
     * ACL Details
     * Get ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @return SecondaryDnsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsComponentsSchemasSingleResponse secondaryDnsAclAclDetails(Object aclId, Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> localVarResp = secondaryDnsAclAclDetailsWithHttpInfo(aclId, accountId);
        return localVarResp.getData();
    }

    /**
     * ACL Details
     * Get ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> secondaryDnsAclAclDetailsWithHttpInfo(Object aclId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsAclAclDetailsValidateBeforeCall(aclId, accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ACL Details (asynchronously)
     * Get ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACL Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> ACL Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclAclDetailsAsync(Object aclId, Object accountId, final ApiCallback<SecondaryDnsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsAclAclDetailsValidateBeforeCall(aclId, accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsAclCreateAcl
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclCreateAclCall(Object accountId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/acls"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsAclCreateAclValidateBeforeCall(Object accountId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsAclCreateAcl(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secondaryDnsAclCreateAcl(Async)");
        }

        return secondaryDnsAclCreateAclCall(accountId, body, _callback);

    }

    /**
     * Create ACL
     * Create ACL.
     * @param accountId  (required)
     * @param body  (required)
     * @return SecondaryDnsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsComponentsSchemasSingleResponse secondaryDnsAclCreateAcl(Object accountId, Object body) throws ApiException {
        ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> localVarResp = secondaryDnsAclCreateAclWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create ACL
     * Create ACL.
     * @param accountId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;SecondaryDnsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> secondaryDnsAclCreateAclWithHttpInfo(Object accountId, Object body) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsAclCreateAclValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create ACL (asynchronously)
     * Create ACL.
     * @param accountId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclCreateAclAsync(Object accountId, Object body, final ApiCallback<SecondaryDnsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsAclCreateAclValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsAclDeleteAcl
     * @param aclId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclDeleteAclCall(Object aclId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/acls/{acl_id}"
            .replace("{" + "acl_id" + "}", localVarApiClient.escapeString(aclId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsAclDeleteAclValidateBeforeCall(Object aclId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling secondaryDnsAclDeleteAcl(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsAclDeleteAcl(Async)");
        }

        return secondaryDnsAclDeleteAclCall(aclId, accountId, _callback);

    }

    /**
     * Delete ACL
     * Delete ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @return SecondaryDnsComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsComponentsSchemasIdResponse secondaryDnsAclDeleteAcl(Object aclId, Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsComponentsSchemasIdResponse> localVarResp = secondaryDnsAclDeleteAclWithHttpInfo(aclId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete ACL
     * Delete ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsComponentsSchemasIdResponse> secondaryDnsAclDeleteAclWithHttpInfo(Object aclId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsAclDeleteAclValidateBeforeCall(aclId, accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete ACL (asynchronously)
     * Delete ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclDeleteAclAsync(Object aclId, Object accountId, final ApiCallback<SecondaryDnsComponentsSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsAclDeleteAclValidateBeforeCall(aclId, accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsAclListAcLs
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclListAcLsCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/acls"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsAclListAcLsValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsAclListAcLs(Async)");
        }

        return secondaryDnsAclListAcLsCall(accountId, _callback);

    }

    /**
     * List ACLs
     * List ACLs.
     * @param accountId  (required)
     * @return SecondaryDnsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsComponentsSchemasResponseCollection secondaryDnsAclListAcLs(Object accountId) throws ApiException {
        ApiResponse<SecondaryDnsComponentsSchemasResponseCollection> localVarResp = secondaryDnsAclListAcLsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List ACLs
     * List ACLs.
     * @param accountId  (required)
     * @return ApiResponse&lt;SecondaryDnsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsComponentsSchemasResponseCollection> secondaryDnsAclListAcLsWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsAclListAcLsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ACLs (asynchronously)
     * List ACLs.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List ACLs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List ACLs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclListAcLsAsync(Object accountId, final ApiCallback<SecondaryDnsComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsAclListAcLsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secondaryDnsAclUpdateAcl
     * @param aclId  (required)
     * @param accountId  (required)
     * @param secondaryDnsAcl  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclUpdateAclCall(Object aclId, Object accountId, SecondaryDnsAcl secondaryDnsAcl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secondaryDnsAcl;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/secondary_dns/acls/{acl_id}"
            .replace("{" + "acl_id" + "}", localVarApiClient.escapeString(aclId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secondaryDnsAclUpdateAclValidateBeforeCall(Object aclId, Object accountId, SecondaryDnsAcl secondaryDnsAcl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aclId' is set
        if (aclId == null) {
            throw new ApiException("Missing the required parameter 'aclId' when calling secondaryDnsAclUpdateAcl(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling secondaryDnsAclUpdateAcl(Async)");
        }

        // verify the required parameter 'secondaryDnsAcl' is set
        if (secondaryDnsAcl == null) {
            throw new ApiException("Missing the required parameter 'secondaryDnsAcl' when calling secondaryDnsAclUpdateAcl(Async)");
        }

        return secondaryDnsAclUpdateAclCall(aclId, accountId, secondaryDnsAcl, _callback);

    }

    /**
     * Update ACL
     * Modify ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @param secondaryDnsAcl  (required)
     * @return SecondaryDnsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public SecondaryDnsComponentsSchemasSingleResponse secondaryDnsAclUpdateAcl(Object aclId, Object accountId, SecondaryDnsAcl secondaryDnsAcl) throws ApiException {
        ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> localVarResp = secondaryDnsAclUpdateAclWithHttpInfo(aclId, accountId, secondaryDnsAcl);
        return localVarResp.getData();
    }

    /**
     * Update ACL
     * Modify ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @param secondaryDnsAcl  (required)
     * @return ApiResponse&lt;SecondaryDnsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecondaryDnsComponentsSchemasSingleResponse> secondaryDnsAclUpdateAclWithHttpInfo(Object aclId, Object accountId, SecondaryDnsAcl secondaryDnsAcl) throws ApiException {
        okhttp3.Call localVarCall = secondaryDnsAclUpdateAclValidateBeforeCall(aclId, accountId, secondaryDnsAcl, null);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update ACL (asynchronously)
     * Modify ACL.
     * @param aclId  (required)
     * @param accountId  (required)
     * @param secondaryDnsAcl  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update ACL response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update ACL response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call secondaryDnsAclUpdateAclAsync(Object aclId, Object accountId, SecondaryDnsAcl secondaryDnsAcl, final ApiCallback<SecondaryDnsComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = secondaryDnsAclUpdateAclValidateBeforeCall(aclId, accountId, secondaryDnsAcl, _callback);
        Type localVarReturnType = new TypeToken<SecondaryDnsComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
