/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response;
import org.openapitools.client.model.DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier4XXResponse;
import org.openapitools.client.model.DeleteAccountsAccountIdentifierLogpushValidateDestinationExists4XXResponse;
import org.openapitools.client.model.GetAccountsAccountIdentifierLogpushDatasetsDatasetFields4XXResponse;
import org.openapitools.client.model.GetAccountsAccountIdentifierLogpushDatasetsDatasetJobs4XXResponse;
import org.openapitools.client.model.LogpushDestinationExistsResponse;
import org.openapitools.client.model.LogpushGetOwnershipResponse;
import org.openapitools.client.model.LogpushLogpushFieldResponseCollection;
import org.openapitools.client.model.LogpushLogpushJobResponseCollection;
import org.openapitools.client.model.LogpushLogpushJobResponseSingle;
import org.openapitools.client.model.LogpushValidateOwnershipResponse;
import org.openapitools.client.model.LogpushValidateResponse;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushJobs4XXResponse;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushJobsRequest;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushOwnership4XXResponse;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushOwnershipRequest;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushOwnershipValidate4XXResponse;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushOwnershipValidateRequest;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushValidateOrigin4XXResponse;
import org.openapitools.client.model.PostAccountsAccountIdentifierLogpushValidateOriginRequest;
import org.openapitools.client.model.PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogpushJobsForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogpushJobsForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogpushJobsForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return deleteZonesZoneIdentifierLogpushJobsJobIdentifierCall(jobId, zoneId, _callback);

    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @return DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response deleteZonesZoneIdentifierLogpushJobsJobIdentifier(Integer jobId, String zoneId) throws ApiException {
        ApiResponse<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> localVarResp = deleteZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> deleteZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, null);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Logpush job (asynchronously)
     * Deletes a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String zoneId, final ApiCallback<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAccountsAccountIdentifierLogpushJobsJobIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushDatasetsDatasetFields
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsCall(String datasetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/datasets/{dataset_id}/fields"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(String datasetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields(Async)");
        }

        return getZonesZoneIdentifierLogpushDatasetsDatasetFieldsCall(datasetId, zoneId, _callback);

    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @return LogpushLogpushFieldResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushFieldResponseCollection getZonesZoneIdentifierLogpushDatasetsDatasetFields(String datasetId, String zoneId) throws ApiException {
        ApiResponse<LogpushLogpushFieldResponseCollection> localVarResp = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(datasetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;LogpushLogpushFieldResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushFieldResponseCollection> getZonesZoneIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(String datasetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(datasetId, zoneId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushFieldResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List fields (asynchronously)
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsAsync(String datasetId, String zoneId, final ApiCallback<LogpushLogpushFieldResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(datasetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushFieldResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushDatasetsDatasetJobs
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsCall(String datasetId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/datasets/{dataset_id}/jobs"
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(String datasetId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs(Async)");
        }

        return getZonesZoneIdentifierLogpushDatasetsDatasetJobsCall(datasetId, zoneId, _callback);

    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for a zone for a dataset.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @return LogpushLogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseCollection getZonesZoneIdentifierLogpushDatasetsDatasetJobs(String datasetId, String zoneId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseCollection> localVarResp = getZonesZoneIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(datasetId, zoneId);
        return localVarResp.getData();
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for a zone for a dataset.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseCollection> getZonesZoneIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(String datasetId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(datasetId, zoneId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Logpush jobs for a dataset (asynchronously)
     * Lists Logpush jobs for a zone for a dataset.
     * @param datasetId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs for a dataset response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs for a dataset response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsAsync(String datasetId, String zoneId, final ApiCallback<LogpushLogpushJobResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(datasetId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushJobs
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushJobsCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/jobs"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierLogpushJobsValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierLogpushJobs(Async)");
        }

        return getZonesZoneIdentifierLogpushJobsCall(zoneId, _callback);

    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for a zone.
     * @param zoneId  (required)
     * @return LogpushLogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseCollection getZonesZoneIdentifierLogpushJobs(String zoneId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseCollection> localVarResp = getZonesZoneIdentifierLogpushJobsWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseCollection> getZonesZoneIdentifierLogpushJobsWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Logpush jobs (asynchronously)
     * Lists Logpush jobs for a zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Logpush jobs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Logpush jobs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushJobsAsync(String zoneId, final ApiCallback<LogpushLogpushJobResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling getZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return getZonesZoneIdentifierLogpushJobsJobIdentifierCall(jobId, zoneId, _callback);

    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle getZonesZoneIdentifierLogpushJobsJobIdentifier(Integer jobId, String zoneId) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = getZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> getZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Logpush job details (asynchronously)
     * Gets the details of a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Logpush job details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Logpush job details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZonesZoneIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String zoneId, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushJobs
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushJobsCall(String zoneId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushJobsRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/jobs"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierLogpushJobsValidateBeforeCall(String zoneId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierLogpushJobs(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushJobsRequest' is set
        if (postAccountsAccountIdentifierLogpushJobsRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushJobsRequest' when calling postZonesZoneIdentifierLogpushJobs(Async)");
        }

        return postZonesZoneIdentifierLogpushJobsCall(zoneId, postAccountsAccountIdentifierLogpushJobsRequest, _callback);

    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for a zone.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle postZonesZoneIdentifierLogpushJobs(String zoneId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = postZonesZoneIdentifierLogpushJobsWithHttpInfo(zoneId, postAccountsAccountIdentifierLogpushJobsRequest);
        return localVarResp.getData();
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for a zone.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> postZonesZoneIdentifierLogpushJobsWithHttpInfo(String zoneId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushJobsRequest, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Logpush job (asynchronously)
     * Creates a new Logpush job for a zone.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushJobsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushJobsAsync(String zoneId, PostAccountsAccountIdentifierLogpushJobsRequest postAccountsAccountIdentifierLogpushJobsRequest, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushJobsRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushOwnership
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushOwnershipCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/ownership"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierLogpushOwnership(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' when calling postZonesZoneIdentifierLogpushOwnership(Async)");
        }

        return postZonesZoneIdentifierLogpushOwnershipCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);

    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return LogpushGetOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushGetOwnershipResponse postZonesZoneIdentifierLogpushOwnership(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        ApiResponse<LogpushGetOwnershipResponse> localVarResp = postZonesZoneIdentifierLogpushOwnershipWithHttpInfo(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return ApiResponse&lt;LogpushGetOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushGetOwnershipResponse> postZonesZoneIdentifierLogpushOwnershipWithHttpInfo(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<LogpushGetOwnershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ownership challenge (asynchronously)
     * Gets a new ownership challenge sent to your destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushOwnershipAsync(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback<LogpushGetOwnershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushGetOwnershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushOwnershipValidate
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushOwnershipValidateCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipValidateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/ownership/validate"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierLogpushOwnershipValidate(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipValidateRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipValidateRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipValidateRequest' when calling postZonesZoneIdentifierLogpushOwnershipValidate(Async)");
        }

        return postZonesZoneIdentifierLogpushOwnershipValidateCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, _callback);

    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @return LogpushValidateOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushValidateOwnershipResponse postZonesZoneIdentifierLogpushOwnershipValidate(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest) throws ApiException {
        ApiResponse<LogpushValidateOwnershipResponse> localVarResp = postZonesZoneIdentifierLogpushOwnershipValidateWithHttpInfo(zoneId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest);
        return localVarResp.getData();
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @return ApiResponse&lt;LogpushValidateOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushValidateOwnershipResponse> postZonesZoneIdentifierLogpushOwnershipValidateWithHttpInfo(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, null);
        Type localVarReturnType = new TypeToken<LogpushValidateOwnershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate ownership challenge (asynchronously)
     * Validates ownership challenge of the destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipValidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate ownership challenge response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate ownership challenge response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushOwnershipValidateAsync(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipValidateRequest postAccountsAccountIdentifierLogpushOwnershipValidateRequest, final ApiCallback<LogpushValidateOwnershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushValidateOwnershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushValidateDestinationExists
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushValidateDestinationExistsCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushOwnershipRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/validate/destination/exists"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierLogpushValidateDestinationExists(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' is set
        if (postAccountsAccountIdentifierLogpushOwnershipRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushOwnershipRequest' when calling postZonesZoneIdentifierLogpushValidateDestinationExists(Async)");
        }

        return postZonesZoneIdentifierLogpushValidateDestinationExistsCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);

    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return LogpushDestinationExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushDestinationExistsResponse postZonesZoneIdentifierLogpushValidateDestinationExists(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        ApiResponse<LogpushDestinationExistsResponse> localVarResp = postZonesZoneIdentifierLogpushValidateDestinationExistsWithHttpInfo(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest);
        return localVarResp.getData();
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @return ApiResponse&lt;LogpushDestinationExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushDestinationExistsResponse> postZonesZoneIdentifierLogpushValidateDestinationExistsWithHttpInfo(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, null);
        Type localVarReturnType = new TypeToken<LogpushDestinationExistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check destination exists (asynchronously)
     * Checks if there is an existing job with a destination.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushOwnershipRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check destination exists response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Check destination exists response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushValidateDestinationExistsAsync(String zoneId, PostAccountsAccountIdentifierLogpushOwnershipRequest postAccountsAccountIdentifierLogpushOwnershipRequest, final ApiCallback<LogpushDestinationExistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushOwnershipRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushDestinationExistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushValidateOrigin
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushValidateOriginCall(String zoneId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAccountsAccountIdentifierLogpushValidateOriginRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/validate/origin"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(String zoneId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling postZonesZoneIdentifierLogpushValidateOrigin(Async)");
        }

        // verify the required parameter 'postAccountsAccountIdentifierLogpushValidateOriginRequest' is set
        if (postAccountsAccountIdentifierLogpushValidateOriginRequest == null) {
            throw new ApiException("Missing the required parameter 'postAccountsAccountIdentifierLogpushValidateOriginRequest' when calling postZonesZoneIdentifierLogpushValidateOrigin(Async)");
        }

        return postZonesZoneIdentifierLogpushValidateOriginCall(zoneId, postAccountsAccountIdentifierLogpushValidateOriginRequest, _callback);

    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @return LogpushValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushValidateResponse postZonesZoneIdentifierLogpushValidateOrigin(String zoneId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest) throws ApiException {
        ApiResponse<LogpushValidateResponse> localVarResp = postZonesZoneIdentifierLogpushValidateOriginWithHttpInfo(zoneId, postAccountsAccountIdentifierLogpushValidateOriginRequest);
        return localVarResp.getData();
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @return ApiResponse&lt;LogpushValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushValidateResponse> postZonesZoneIdentifierLogpushValidateOriginWithHttpInfo(String zoneId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest) throws ApiException {
        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushValidateOriginRequest, null);
        Type localVarReturnType = new TypeToken<LogpushValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate origin (asynchronously)
     * Validates logpull origin with logpull_options.
     * @param zoneId  (required)
     * @param postAccountsAccountIdentifierLogpushValidateOriginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validate origin response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Validate origin response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZonesZoneIdentifierLogpushValidateOriginAsync(String zoneId, PostAccountsAccountIdentifierLogpushValidateOriginRequest postAccountsAccountIdentifierLogpushValidateOriginRequest, final ApiCallback<LogpushValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(zoneId, postAccountsAccountIdentifierLogpushValidateOriginRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierLogpushJobsJobIdentifierCall(Integer jobId, String zoneId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/logpush/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(Integer jobId, String zoneId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        // verify the required parameter 'putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest' is set
        if (putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }

        return putZonesZoneIdentifierLogpushJobsJobIdentifierCall(jobId, zoneId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, _callback);

    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @return LogpushLogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public LogpushLogpushJobResponseSingle putZonesZoneIdentifierLogpushJobsJobIdentifier(Integer jobId, String zoneId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest) throws ApiException {
        ApiResponse<LogpushLogpushJobResponseSingle> localVarResp = putZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobId, zoneId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest);
        return localVarResp.getData();
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @return ApiResponse&lt;LogpushLogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogpushLogpushJobResponseSingle> putZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(Integer jobId, String zoneId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest) throws ApiException {
        okhttp3.Call localVarCall = putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, null);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Logpush job (asynchronously)
     * Updates a Logpush job.
     * @param jobId  (required)
     * @param zoneId  (required)
     * @param putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Logpush job response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Logpush job response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdentifierLogpushJobsJobIdentifierAsync(Integer jobId, String zoneId, PutAccountsAccountIdentifierLogpushJobsJobIdentifierRequest putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, final ApiCallback<LogpushLogpushJobResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobId, zoneId, putAccountsAccountIdentifierLogpushJobsJobIdentifierRequest, _callback);
        Type localVarReturnType = new TypeToken<LogpushLogpushJobResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
