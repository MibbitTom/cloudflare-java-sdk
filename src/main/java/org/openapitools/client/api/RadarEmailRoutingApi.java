/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByEncrypted200Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByIpVersion200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarEmailRoutingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarEmailRoutingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarEmailRoutingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetEmailRoutingSummaryByArc
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByArcCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryByArcValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryByArcCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get ARC Validations Summary
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailRoutingSummaryByArc(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailRoutingSummaryByArcWithHttpInfo(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get ARC Validations Summary
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailRoutingSummaryByArcWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByArcValidateBeforeCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ARC Validations Summary (asynchronously)
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByArcAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByArcValidateBeforeCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingSummaryByDkim
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByDkimCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryByDkimValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryByDkimCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get DKIM Validations Summary
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailRoutingSummaryByDkim(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailRoutingSummaryByDkimWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get DKIM Validations Summary
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailRoutingSummaryByDkimWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByDkimValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DKIM Validations Summary (asynchronously)
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByDkimAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByDkimValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingSummaryByDmarc
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByDmarcCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryByDmarcValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryByDmarcCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get DMARC Validations Summary
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailRoutingSummaryByDmarc(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailRoutingSummaryByDmarcWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get DMARC Validations Summary
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailRoutingSummaryByDmarcWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByDmarcValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMARC Validations Summary (asynchronously)
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByDmarcAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByDmarcValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingSummaryByEncrypted
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByEncryptedCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/encrypted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryByEncryptedValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryByEncryptedCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, _callback);

    }

    /**
     * Get Encrypted Summary
     * Percentage distribution of emails by Encrypted
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByEncrypted200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByEncrypted200Response radarGetEmailRoutingSummaryByEncrypted(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByEncrypted200Response> localVarResp = radarGetEmailRoutingSummaryByEncryptedWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Encrypted Summary
     * Percentage distribution of emails by Encrypted
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByEncrypted200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByEncrypted200Response> radarGetEmailRoutingSummaryByEncryptedWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByEncryptedValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByEncrypted200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Encrypted Summary (asynchronously)
     * Percentage distribution of emails by Encrypted
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByEncryptedAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByEncrypted200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByEncryptedValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByEncrypted200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingSummaryByIpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByIpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryByIpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryByIpVersionCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, _callback);

    }

    /**
     * Get Ip Version Summary
     * Percentage distribution of emails by Ip Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByIpVersion200Response radarGetEmailRoutingSummaryByIpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByIpVersion200Response> localVarResp = radarGetEmailRoutingSummaryByIpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get Ip Version Summary
     * Percentage distribution of emails by Ip Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByIpVersion200Response> radarGetEmailRoutingSummaryByIpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ip Version Summary (asynchronously)
     * Percentage distribution of emails by Ip Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryByIpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingSummaryByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingSummaryBySpf
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryBySpfCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/summary/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingSummaryBySpfValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingSummaryBySpfCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get SPF Validations Summary
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailRoutingSummaryBySpf(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailRoutingSummaryBySpfWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get SPF Validations Summary
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailRoutingSummaryBySpfWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryBySpfValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPF Validations Summary (asynchronously)
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingSummaryBySpfAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingSummaryBySpfValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupByArc
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByArcCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupByArcValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupByArcCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get ARC Validations Time Series
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailRoutingTimeseriesGroupByArc(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupByArcWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get ARC Validations Time Series
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailRoutingTimeseriesGroupByArcWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByArcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ARC Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByArcAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByArcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupByDkim
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDkimCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDkimValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupByDkimCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get DKIM Validations Time Series
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailRoutingTimeseriesGroupByDkim(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupByDkimWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get DKIM Validations Time Series
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailRoutingTimeseriesGroupByDkimWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByDkimValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DKIM Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDkimAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByDkimValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupByDmarc
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDmarcCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDmarcValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupByDmarcCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get DMARC Validations Time Series
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailRoutingTimeseriesGroupByDmarc(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupByDmarcWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get DMARC Validations Time Series
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailRoutingTimeseriesGroupByDmarcWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByDmarcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMARC Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByDmarcAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByDmarcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupByEncrypted
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByEncryptedCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/encrypted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupByEncryptedValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupByEncryptedCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, _callback);

    }

    /**
     * Get Encrypted Time Series
     * Percentage distribution of emails by Encrypted over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response radarGetEmailRoutingTimeseriesGroupByEncrypted(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupByEncryptedWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Encrypted Time Series
     * Percentage distribution of emails by Encrypted over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response> radarGetEmailRoutingTimeseriesGroupByEncryptedWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByEncryptedValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Encrypted Time Series (asynchronously)
     * Percentage distribution of emails by Encrypted over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param ipVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByEncryptedAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> ipVersion, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByEncryptedValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupByIpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByIpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupByIpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupByIpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, _callback);

    }

    /**
     * Get Ip Version Time Series
     * Percentage distribution of emails by Ip Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response radarGetEmailRoutingTimeseriesGroupByIpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupByIpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get Ip Version Time Series
     * Percentage distribution of emails by Ip Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response> radarGetEmailRoutingTimeseriesGroupByIpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ip Version Time Series (asynchronously)
     * Percentage distribution of emails by Ip Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupByIpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailRoutingTimeseriesGroupBySpf
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupBySpfCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/routing/timeseries_groups/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (encrypted != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "encrypted", encrypted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailRoutingTimeseriesGroupBySpfValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailRoutingTimeseriesGroupBySpfCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, _callback);

    }

    /**
     * Get SPF Validations Time Series
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailRoutingTimeseriesGroupBySpf(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailRoutingTimeseriesGroupBySpfWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format);
        return localVarResp.getData();
    }

    /**
     * Get SPF Validations Time Series
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailRoutingTimeseriesGroupBySpfWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupBySpfValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPF Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param ipVersion  (optional)
     * @param encrypted  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailRoutingTimeseriesGroupBySpfAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> ipVersion, List<String> encrypted, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailRoutingTimeseriesGroupBySpfValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
