/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PagesDeploymentCreateDeployment4XXResponse;
import org.openapitools.client.model.PagesDeploymentGetDeploymentInfo4XXResponse;
import org.openapitools.client.model.PagesDeploymentGetDeploymentLogs4XXResponse;
import org.openapitools.client.model.PagesDeploymentGetDeployments4XXResponse;
import org.openapitools.client.model.PagesDeploymentListResponse;
import org.openapitools.client.model.PagesDeploymentNewDeployment;
import org.openapitools.client.model.PagesDeploymentResponseDetails;
import org.openapitools.client.model.PagesDeploymentResponseLogs;
import org.openapitools.client.model.PagesProjectDeleteProject4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PagesDeploymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PagesDeploymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PagesDeploymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pagesDeploymentCreateDeployment
     * @param projectName  (required)
     * @param accountId  (required)
     * @param branch The branch to build the new deployment from. The &#x60;HEAD&#x60; of the branch will be used. If omitted, the production branch will be used by default. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentCreateDeploymentCall(String projectName, String accountId, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments"
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarFormParams.put("branch", branch);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentCreateDeploymentValidateBeforeCall(String projectName, String accountId, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentCreateDeployment(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentCreateDeployment(Async)");
        }

        return pagesDeploymentCreateDeploymentCall(projectName, accountId, branch, _callback);

    }

    /**
     * Create deployment
     * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param branch The branch to build the new deployment from. The &#x60;HEAD&#x60; of the branch will be used. If omitted, the production branch will be used by default. (optional)
     * @return PagesDeploymentNewDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentNewDeployment pagesDeploymentCreateDeployment(String projectName, String accountId, String branch) throws ApiException {
        ApiResponse<PagesDeploymentNewDeployment> localVarResp = pagesDeploymentCreateDeploymentWithHttpInfo(projectName, accountId, branch);
        return localVarResp.getData();
    }

    /**
     * Create deployment
     * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param branch The branch to build the new deployment from. The &#x60;HEAD&#x60; of the branch will be used. If omitted, the production branch will be used by default. (optional)
     * @return ApiResponse&lt;PagesDeploymentNewDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentNewDeployment> pagesDeploymentCreateDeploymentWithHttpInfo(String projectName, String accountId, String branch) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentCreateDeploymentValidateBeforeCall(projectName, accountId, branch, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentNewDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create deployment (asynchronously)
     * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param branch The branch to build the new deployment from. The &#x60;HEAD&#x60; of the branch will be used. If omitted, the production branch will be used by default. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentCreateDeploymentAsync(String projectName, String accountId, String branch, final ApiCallback<PagesDeploymentNewDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentCreateDeploymentValidateBeforeCall(projectName, accountId, branch, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentNewDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentDeleteDeployment
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentDeleteDeploymentCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentDeleteDeploymentValidateBeforeCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling pagesDeploymentDeleteDeployment(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentDeleteDeployment(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentDeleteDeployment(Async)");
        }

        return pagesDeploymentDeleteDeploymentCall(deploymentId, projectName, accountId, _callback);

    }

    /**
     * Delete deployment
     * Delete a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public Object pagesDeploymentDeleteDeployment(String deploymentId, String projectName, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = pagesDeploymentDeleteDeploymentWithHttpInfo(deploymentId, projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete deployment
     * Delete a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pagesDeploymentDeleteDeploymentWithHttpInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentDeleteDeploymentValidateBeforeCall(deploymentId, projectName, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete deployment (asynchronously)
     * Delete a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentDeleteDeploymentAsync(String deploymentId, String projectName, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentDeleteDeploymentValidateBeforeCall(deploymentId, projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentGetDeploymentInfo
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment info response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment info response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentInfoCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentGetDeploymentInfoValidateBeforeCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }

        return pagesDeploymentGetDeploymentInfoCall(deploymentId, projectName, accountId, _callback);

    }

    /**
     * Get deployment info
     * Fetch information about a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return PagesDeploymentResponseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment info response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment info response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentResponseDetails pagesDeploymentGetDeploymentInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        ApiResponse<PagesDeploymentResponseDetails> localVarResp = pagesDeploymentGetDeploymentInfoWithHttpInfo(deploymentId, projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Get deployment info
     * Fetch information about a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesDeploymentResponseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment info response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment info response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentResponseDetails> pagesDeploymentGetDeploymentInfoWithHttpInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentInfoValidateBeforeCall(deploymentId, projectName, accountId, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deployment info (asynchronously)
     * Fetch information about a deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment info response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment info response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentInfoAsync(String deploymentId, String projectName, String accountId, final ApiCallback<PagesDeploymentResponseDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentInfoValidateBeforeCall(deploymentId, projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentGetDeploymentLogs
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment logs response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment logs response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentLogsCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/history/logs"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentGetDeploymentLogsValidateBeforeCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }

        return pagesDeploymentGetDeploymentLogsCall(deploymentId, projectName, accountId, _callback);

    }

    /**
     * Get deployment logs
     * Fetch deployment logs for a project.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return PagesDeploymentResponseLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment logs response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment logs response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentResponseLogs pagesDeploymentGetDeploymentLogs(String deploymentId, String projectName, String accountId) throws ApiException {
        ApiResponse<PagesDeploymentResponseLogs> localVarResp = pagesDeploymentGetDeploymentLogsWithHttpInfo(deploymentId, projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Get deployment logs
     * Fetch deployment logs for a project.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesDeploymentResponseLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment logs response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment logs response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentResponseLogs> pagesDeploymentGetDeploymentLogsWithHttpInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentLogsValidateBeforeCall(deploymentId, projectName, accountId, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deployment logs (asynchronously)
     * Fetch deployment logs for a project.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployment logs response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployment logs response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentLogsAsync(String deploymentId, String projectName, String accountId, final ApiCallback<PagesDeploymentResponseLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentLogsValidateBeforeCall(deploymentId, projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentGetDeployments
     * @param projectName  (required)
     * @param accountId  (required)
     * @param env  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployments response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployments response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentsCall(String projectName, String accountId, String env, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments"
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (env != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("env", env));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentGetDeploymentsValidateBeforeCall(String projectName, String accountId, String env, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeployments(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentGetDeployments(Async)");
        }

        return pagesDeploymentGetDeploymentsCall(projectName, accountId, env, _callback);

    }

    /**
     * Get deployments
     * Fetch a list of project deployments.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param env  (optional)
     * @return PagesDeploymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployments response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployments response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentListResponse pagesDeploymentGetDeployments(String projectName, String accountId, String env) throws ApiException {
        ApiResponse<PagesDeploymentListResponse> localVarResp = pagesDeploymentGetDeploymentsWithHttpInfo(projectName, accountId, env);
        return localVarResp.getData();
    }

    /**
     * Get deployments
     * Fetch a list of project deployments.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param env  (optional)
     * @return ApiResponse&lt;PagesDeploymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployments response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployments response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentListResponse> pagesDeploymentGetDeploymentsWithHttpInfo(String projectName, String accountId, String env) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentsValidateBeforeCall(projectName, accountId, env, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deployments (asynchronously)
     * Fetch a list of project deployments.
     * @param projectName  (required)
     * @param accountId  (required)
     * @param env  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get deployments response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get deployments response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentGetDeploymentsAsync(String projectName, String accountId, String env, final ApiCallback<PagesDeploymentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentGetDeploymentsValidateBeforeCall(projectName, accountId, env, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentRetryDeployment
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retry deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retry deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentRetryDeploymentCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/retry"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentRetryDeploymentValidateBeforeCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling pagesDeploymentRetryDeployment(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentRetryDeployment(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentRetryDeployment(Async)");
        }

        return pagesDeploymentRetryDeploymentCall(deploymentId, projectName, accountId, _callback);

    }

    /**
     * Retry deployment
     * Retry a previous deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return PagesDeploymentNewDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retry deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retry deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentNewDeployment pagesDeploymentRetryDeployment(String deploymentId, String projectName, String accountId) throws ApiException {
        ApiResponse<PagesDeploymentNewDeployment> localVarResp = pagesDeploymentRetryDeploymentWithHttpInfo(deploymentId, projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Retry deployment
     * Retry a previous deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesDeploymentNewDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retry deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retry deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentNewDeployment> pagesDeploymentRetryDeploymentWithHttpInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentRetryDeploymentValidateBeforeCall(deploymentId, projectName, accountId, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentNewDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry deployment (asynchronously)
     * Retry a previous deployment.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retry deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retry deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentRetryDeploymentAsync(String deploymentId, String projectName, String accountId, final ApiCallback<PagesDeploymentNewDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentRetryDeploymentValidateBeforeCall(deploymentId, projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentNewDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesDeploymentRollbackDeployment
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rollback deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rollback deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentRollbackDeploymentCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/rollback"
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "project_name" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesDeploymentRollbackDeploymentValidateBeforeCall(String deploymentId, String projectName, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling pagesDeploymentRollbackDeployment(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentRollbackDeployment(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling pagesDeploymentRollbackDeployment(Async)");
        }

        return pagesDeploymentRollbackDeploymentCall(deploymentId, projectName, accountId, _callback);

    }

    /**
     * Rollback deployment
     * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return PagesDeploymentResponseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rollback deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rollback deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public PagesDeploymentResponseDetails pagesDeploymentRollbackDeployment(String deploymentId, String projectName, String accountId) throws ApiException {
        ApiResponse<PagesDeploymentResponseDetails> localVarResp = pagesDeploymentRollbackDeploymentWithHttpInfo(deploymentId, projectName, accountId);
        return localVarResp.getData();
    }

    /**
     * Rollback deployment
     * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;PagesDeploymentResponseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rollback deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rollback deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagesDeploymentResponseDetails> pagesDeploymentRollbackDeploymentWithHttpInfo(String deploymentId, String projectName, String accountId) throws ApiException {
        okhttp3.Call localVarCall = pagesDeploymentRollbackDeploymentValidateBeforeCall(deploymentId, projectName, accountId, null);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback deployment (asynchronously)
     * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
     * @param deploymentId  (required)
     * @param projectName  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rollback deployment response. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rollback deployment response failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesDeploymentRollbackDeploymentAsync(String deploymentId, String projectName, String accountId, final ApiCallback<PagesDeploymentResponseDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesDeploymentRollbackDeploymentValidateBeforeCall(deploymentId, projectName, accountId, _callback);
        Type localVarReturnType = new TypeToken<PagesDeploymentResponseDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
