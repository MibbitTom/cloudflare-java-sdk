/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AaaApiResponseCommon;
import org.openapitools.client.model.AuditLogsGetAccountAuditLogs4XXResponse;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditLogsGetAccountAuditLogs
     * @param accountId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get account audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get account audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAccountAuditLogsCall(String accountId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/audit_logs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        if (actionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action.type", actionType));
        }

        if (actorIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.ip", actorIp));
        }

        if (actorEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.email", actorEmail));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (zoneName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone.name", zoneName));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hideUserLogs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_user_logs", hideUserLogs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditLogsGetAccountAuditLogsValidateBeforeCall(String accountId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling auditLogsGetAccountAuditLogs(Async)");
        }

        return auditLogsGetAccountAuditLogsCall(accountId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);

    }

    /**
     * Get account audit logs
     * Gets a list of audit logs for an account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param accountId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return AaaApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get account audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get account audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaApiResponseCommon auditLogsGetAccountAuditLogs(String accountId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        ApiResponse<AaaApiResponseCommon> localVarResp = auditLogsGetAccountAuditLogsWithHttpInfo(accountId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs);
        return localVarResp.getData();
    }

    /**
     * Get account audit logs
     * Gets a list of audit logs for an account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param accountId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return ApiResponse&lt;AaaApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get account audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get account audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaApiResponseCommon> auditLogsGetAccountAuditLogsWithHttpInfo(String accountId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        okhttp3.Call localVarCall = auditLogsGetAccountAuditLogsValidateBeforeCall(accountId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, null);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account audit logs (asynchronously)
     * Gets a list of audit logs for an account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param accountId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get account audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get account audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAccountAuditLogsAsync(String accountId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback<AaaApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditLogsGetAccountAuditLogsValidateBeforeCall(accountId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditLogsGetOrganizationAuditLogs
     * @param organizationId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get organization audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get organization audit logs response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call auditLogsGetOrganizationAuditLogsCall(String organizationId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/audit_logs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        if (actionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action.type", actionType));
        }

        if (actorIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.ip", actorIp));
        }

        if (actorEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.email", actorEmail));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (zoneName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone.name", zoneName));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hideUserLogs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_user_logs", hideUserLogs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditLogsGetOrganizationAuditLogsValidateBeforeCall(String organizationId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling auditLogsGetOrganizationAuditLogs(Async)");
        }

        return auditLogsGetOrganizationAuditLogsCall(organizationId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);

    }

    /**
     * Get organization audit logs
     * Gets a list of audit logs for an organization. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param organizationId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return AaaApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get organization audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get organization audit logs response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AaaApiResponseCommon auditLogsGetOrganizationAuditLogs(String organizationId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        ApiResponse<AaaApiResponseCommon> localVarResp = auditLogsGetOrganizationAuditLogsWithHttpInfo(organizationId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs);
        return localVarResp.getData();
    }

    /**
     * Get organization audit logs
     * Gets a list of audit logs for an organization. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param organizationId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return ApiResponse&lt;AaaApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get organization audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get organization audit logs response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AaaApiResponseCommon> auditLogsGetOrganizationAuditLogsWithHttpInfo(String organizationId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        okhttp3.Call localVarCall = auditLogsGetOrganizationAuditLogsValidateBeforeCall(organizationId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, null);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization audit logs (asynchronously)
     * Gets a list of audit logs for an organization. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param organizationId  (required)
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get organization audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get organization audit logs response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call auditLogsGetOrganizationAuditLogsAsync(String organizationId, String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback<AaaApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditLogsGetOrganizationAuditLogsValidateBeforeCall(organizationId, id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditLogsGetUserAuditLogs
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get user audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetUserAuditLogsCall(String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/audit_logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        if (actionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action.type", actionType));
        }

        if (actorIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.ip", actorIp));
        }

        if (actorEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor.email", actorEmail));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (zoneName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zone.name", zoneName));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hideUserLogs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_user_logs", hideUserLogs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditLogsGetUserAuditLogsValidateBeforeCall(String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback _callback) throws ApiException {
        return auditLogsGetUserAuditLogsCall(id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);

    }

    /**
     * Get user audit logs
     * Gets a list of audit logs for a user account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return AaaApiResponseCommon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get user audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public AaaApiResponseCommon auditLogsGetUserAuditLogs(String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        ApiResponse<AaaApiResponseCommon> localVarResp = auditLogsGetUserAuditLogsWithHttpInfo(id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs);
        return localVarResp.getData();
    }

    /**
     * Get user audit logs
     * Gets a list of audit logs for a user account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @return ApiResponse&lt;AaaApiResponseCommon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get user audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AaaApiResponseCommon> auditLogsGetUserAuditLogsWithHttpInfo(String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs) throws ApiException {
        okhttp3.Call localVarCall = auditLogsGetUserAuditLogsValidateBeforeCall(id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, null);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user audit logs (asynchronously)
     * Gets a list of audit logs for a user account. Can be filtered by who made the change, on which zone, and the timeframe of the change.
     * @param id  (optional)
     * @param export  (optional)
     * @param actionType  (optional)
     * @param actorIp  (optional)
     * @param actorEmail  (optional)
     * @param since  (optional)
     * @param before  (optional)
     * @param zoneName  (optional)
     * @param direction  (optional, default to desc)
     * @param perPage  (optional, default to 100)
     * @param page  (optional, default to 1)
     * @param hideUserLogs  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user audit logs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get user audit logs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetUserAuditLogsAsync(String id, Boolean export, String actionType, String actorIp, String actorEmail, OffsetDateTime since, OffsetDateTime before, String zoneName, String direction, BigDecimal perPage, BigDecimal page, Boolean hideUserLogs, final ApiCallback<AaaApiResponseCommon> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditLogsGetUserAuditLogsValidateBeforeCall(id, export, actionType, actorIp, actorEmail, since, before, zoneName, direction, perPage, page, hideUserLogs, _callback);
        Type localVarReturnType = new TypeToken<AaaApiResponseCommon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
