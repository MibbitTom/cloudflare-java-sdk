/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountMembersRemoveMember4XXResponse;
import org.openapitools.client.model.AccountsAccountDetails4XXResponse;
import org.openapitools.client.model.AccountsListAccounts4XXResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.IamApiResponseSingleId;
import org.openapitools.client.model.IamCreatePayload;
import org.openapitools.client.model.IamResponseCollection;
import org.openapitools.client.model.IamResponseCreate;
import org.openapitools.client.model.IamResponseSingle;
import org.openapitools.client.model.IamResponseSingleSegment;
import org.openapitools.client.model.IamResponseSingleValue;
import org.openapitools.client.model.IamSchemasToken;
import org.openapitools.client.model.UserApiTokensCreateToken4XXResponse;
import org.openapitools.client.model.UserApiTokensRollToken4XXResponse;
import org.openapitools.client.model.UserApiTokensVerifyToken4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApiTokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApiTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApiTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userApiTokensCreateToken
     * @param iamCreatePayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensCreateTokenCall(IamCreatePayload iamCreatePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iamCreatePayload;

        // create path and map variables
        String localVarPath = "/user/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensCreateTokenValidateBeforeCall(IamCreatePayload iamCreatePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iamCreatePayload' is set
        if (iamCreatePayload == null) {
            throw new ApiException("Missing the required parameter 'iamCreatePayload' when calling userApiTokensCreateToken(Async)");
        }

        return userApiTokensCreateTokenCall(iamCreatePayload, _callback);

    }

    /**
     * Create Token
     * Create a new access token.
     * @param iamCreatePayload  (required)
     * @return IamResponseCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseCreate userApiTokensCreateToken(IamCreatePayload iamCreatePayload) throws ApiException {
        ApiResponse<IamResponseCreate> localVarResp = userApiTokensCreateTokenWithHttpInfo(iamCreatePayload);
        return localVarResp.getData();
    }

    /**
     * Create Token
     * Create a new access token.
     * @param iamCreatePayload  (required)
     * @return ApiResponse&lt;IamResponseCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseCreate> userApiTokensCreateTokenWithHttpInfo(IamCreatePayload iamCreatePayload) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensCreateTokenValidateBeforeCall(iamCreatePayload, null);
        Type localVarReturnType = new TypeToken<IamResponseCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Token (asynchronously)
     * Create a new access token.
     * @param iamCreatePayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensCreateTokenAsync(IamCreatePayload iamCreatePayload, final ApiCallback<IamResponseCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensCreateTokenValidateBeforeCall(iamCreatePayload, _callback);
        Type localVarReturnType = new TypeToken<IamResponseCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensDeleteToken
     * @param tokenId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensDeleteTokenCall(Object tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/tokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensDeleteTokenValidateBeforeCall(Object tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling userApiTokensDeleteToken(Async)");
        }

        return userApiTokensDeleteTokenCall(tokenId, _callback);

    }

    /**
     * Delete Token
     * Destroy a token.
     * @param tokenId  (required)
     * @return IamApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamApiResponseSingleId userApiTokensDeleteToken(Object tokenId) throws ApiException {
        ApiResponse<IamApiResponseSingleId> localVarResp = userApiTokensDeleteTokenWithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * Delete Token
     * Destroy a token.
     * @param tokenId  (required)
     * @return ApiResponse&lt;IamApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamApiResponseSingleId> userApiTokensDeleteTokenWithHttpInfo(Object tokenId) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensDeleteTokenValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<IamApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Token (asynchronously)
     * Destroy a token.
     * @param tokenId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensDeleteTokenAsync(Object tokenId, final ApiCallback<IamApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensDeleteTokenValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<IamApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensListTokens
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensListTokensCall(BigDecimal page, BigDecimal perPage, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensListTokensValidateBeforeCall(BigDecimal page, BigDecimal perPage, String direction, final ApiCallback _callback) throws ApiException {
        return userApiTokensListTokensCall(page, perPage, direction, _callback);

    }

    /**
     * List Tokens
     * List all access tokens you created.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional)
     * @return IamResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseCollection userApiTokensListTokens(BigDecimal page, BigDecimal perPage, String direction) throws ApiException {
        ApiResponse<IamResponseCollection> localVarResp = userApiTokensListTokensWithHttpInfo(page, perPage, direction);
        return localVarResp.getData();
    }

    /**
     * List Tokens
     * List all access tokens you created.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional)
     * @return ApiResponse&lt;IamResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseCollection> userApiTokensListTokensWithHttpInfo(BigDecimal page, BigDecimal perPage, String direction) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensListTokensValidateBeforeCall(page, perPage, direction, null);
        Type localVarReturnType = new TypeToken<IamResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tokens (asynchronously)
     * List all access tokens you created.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param direction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensListTokensAsync(BigDecimal page, BigDecimal perPage, String direction, final ApiCallback<IamResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensListTokensValidateBeforeCall(page, perPage, direction, _callback);
        Type localVarReturnType = new TypeToken<IamResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensRollToken
     * @param tokenId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roll Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Roll Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensRollTokenCall(Object tokenId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/tokens/{token_id}/value"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensRollTokenValidateBeforeCall(Object tokenId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling userApiTokensRollToken(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userApiTokensRollToken(Async)");
        }

        return userApiTokensRollTokenCall(tokenId, body, _callback);

    }

    /**
     * Roll Token
     * Roll the token secret.
     * @param tokenId  (required)
     * @param body  (required)
     * @return IamResponseSingleValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roll Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Roll Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseSingleValue userApiTokensRollToken(Object tokenId, Object body) throws ApiException {
        ApiResponse<IamResponseSingleValue> localVarResp = userApiTokensRollTokenWithHttpInfo(tokenId, body);
        return localVarResp.getData();
    }

    /**
     * Roll Token
     * Roll the token secret.
     * @param tokenId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;IamResponseSingleValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roll Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Roll Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseSingleValue> userApiTokensRollTokenWithHttpInfo(Object tokenId, Object body) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensRollTokenValidateBeforeCall(tokenId, body, null);
        Type localVarReturnType = new TypeToken<IamResponseSingleValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Roll Token (asynchronously)
     * Roll the token secret.
     * @param tokenId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roll Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Roll Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensRollTokenAsync(Object tokenId, Object body, final ApiCallback<IamResponseSingleValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensRollTokenValidateBeforeCall(tokenId, body, _callback);
        Type localVarReturnType = new TypeToken<IamResponseSingleValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensTokenDetails
     * @param tokenId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Token Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensTokenDetailsCall(Object tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/tokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensTokenDetailsValidateBeforeCall(Object tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling userApiTokensTokenDetails(Async)");
        }

        return userApiTokensTokenDetailsCall(tokenId, _callback);

    }

    /**
     * Token Details
     * Get information about a specific token.
     * @param tokenId  (required)
     * @return IamResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Token Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseSingle userApiTokensTokenDetails(Object tokenId) throws ApiException {
        ApiResponse<IamResponseSingle> localVarResp = userApiTokensTokenDetailsWithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * Token Details
     * Get information about a specific token.
     * @param tokenId  (required)
     * @return ApiResponse&lt;IamResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Token Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseSingle> userApiTokensTokenDetailsWithHttpInfo(Object tokenId) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensTokenDetailsValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<IamResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Token Details (asynchronously)
     * Get information about a specific token.
     * @param tokenId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Token Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensTokenDetailsAsync(Object tokenId, final ApiCallback<IamResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensTokenDetailsValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<IamResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensUpdateToken
     * @param tokenId  (required)
     * @param iamSchemasToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensUpdateTokenCall(Object tokenId, IamSchemasToken iamSchemasToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iamSchemasToken;

        // create path and map variables
        String localVarPath = "/user/tokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensUpdateTokenValidateBeforeCall(Object tokenId, IamSchemasToken iamSchemasToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling userApiTokensUpdateToken(Async)");
        }

        // verify the required parameter 'iamSchemasToken' is set
        if (iamSchemasToken == null) {
            throw new ApiException("Missing the required parameter 'iamSchemasToken' when calling userApiTokensUpdateToken(Async)");
        }

        return userApiTokensUpdateTokenCall(tokenId, iamSchemasToken, _callback);

    }

    /**
     * Update Token
     * Update an existing token.
     * @param tokenId  (required)
     * @param iamSchemasToken  (required)
     * @return IamResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseSingle userApiTokensUpdateToken(Object tokenId, IamSchemasToken iamSchemasToken) throws ApiException {
        ApiResponse<IamResponseSingle> localVarResp = userApiTokensUpdateTokenWithHttpInfo(tokenId, iamSchemasToken);
        return localVarResp.getData();
    }

    /**
     * Update Token
     * Update an existing token.
     * @param tokenId  (required)
     * @param iamSchemasToken  (required)
     * @return ApiResponse&lt;IamResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseSingle> userApiTokensUpdateTokenWithHttpInfo(Object tokenId, IamSchemasToken iamSchemasToken) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensUpdateTokenValidateBeforeCall(tokenId, iamSchemasToken, null);
        Type localVarReturnType = new TypeToken<IamResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Token (asynchronously)
     * Update an existing token.
     * @param tokenId  (required)
     * @param iamSchemasToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensUpdateTokenAsync(Object tokenId, IamSchemasToken iamSchemasToken, final ApiCallback<IamResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensUpdateTokenValidateBeforeCall(tokenId, iamSchemasToken, _callback);
        Type localVarReturnType = new TypeToken<IamResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensVerifyToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensVerifyTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/tokens/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensVerifyTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userApiTokensVerifyTokenCall(_callback);

    }

    /**
     * Verify Token
     * Test whether a token works.
     * @return IamResponseSingleSegment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public IamResponseSingleSegment userApiTokensVerifyToken() throws ApiException {
        ApiResponse<IamResponseSingleSegment> localVarResp = userApiTokensVerifyTokenWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Verify Token
     * Test whether a token works.
     * @return ApiResponse&lt;IamResponseSingleSegment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IamResponseSingleSegment> userApiTokensVerifyTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userApiTokensVerifyTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IamResponseSingleSegment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Token (asynchronously)
     * Test whether a token works.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verify Token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Verify Token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensVerifyTokenAsync(final ApiCallback<IamResponseSingleSegment> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensVerifyTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IamResponseSingleSegment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
