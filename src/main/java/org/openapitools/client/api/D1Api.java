/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CloudflareD1CreateDatabase200Response;
import org.openapitools.client.model.CloudflareD1CreateDatabaseRequest;
import org.openapitools.client.model.CloudflareD1DeleteDatabase200Response;
import org.openapitools.client.model.CloudflareD1GetDatabase200Response;
import org.openapitools.client.model.CloudflareD1GetDatabase4XXResponse;
import org.openapitools.client.model.CloudflareD1ListDatabases200Response;
import org.openapitools.client.model.CloudflareD1QueryDatabase200Response;
import org.openapitools.client.model.CloudflareD1QueryDatabaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class D1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public D1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public D1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudflareD1CreateDatabase
     * @param accountId  (required)
     * @param cloudflareD1CreateDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the created D1 database&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1CreateDatabaseCall(String accountId, CloudflareD1CreateDatabaseRequest cloudflareD1CreateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudflareD1CreateDatabaseRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/d1/database"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareD1CreateDatabaseValidateBeforeCall(String accountId, CloudflareD1CreateDatabaseRequest cloudflareD1CreateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareD1CreateDatabase(Async)");
        }

        // verify the required parameter 'cloudflareD1CreateDatabaseRequest' is set
        if (cloudflareD1CreateDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudflareD1CreateDatabaseRequest' when calling cloudflareD1CreateDatabase(Async)");
        }

        return cloudflareD1CreateDatabaseCall(accountId, cloudflareD1CreateDatabaseRequest, _callback);

    }

    /**
     * Create D1 Database
     * Returns the created D1 database.
     * @param accountId  (required)
     * @param cloudflareD1CreateDatabaseRequest  (required)
     * @return CloudflareD1CreateDatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the created D1 database&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudflareD1CreateDatabase200Response cloudflareD1CreateDatabase(String accountId, CloudflareD1CreateDatabaseRequest cloudflareD1CreateDatabaseRequest) throws ApiException {
        ApiResponse<CloudflareD1CreateDatabase200Response> localVarResp = cloudflareD1CreateDatabaseWithHttpInfo(accountId, cloudflareD1CreateDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Create D1 Database
     * Returns the created D1 database.
     * @param accountId  (required)
     * @param cloudflareD1CreateDatabaseRequest  (required)
     * @return ApiResponse&lt;CloudflareD1CreateDatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the created D1 database&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudflareD1CreateDatabase200Response> cloudflareD1CreateDatabaseWithHttpInfo(String accountId, CloudflareD1CreateDatabaseRequest cloudflareD1CreateDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = cloudflareD1CreateDatabaseValidateBeforeCall(accountId, cloudflareD1CreateDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<CloudflareD1CreateDatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create D1 Database (asynchronously)
     * Returns the created D1 database.
     * @param accountId  (required)
     * @param cloudflareD1CreateDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the created D1 database&#39;s metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1CreateDatabaseAsync(String accountId, CloudflareD1CreateDatabaseRequest cloudflareD1CreateDatabaseRequest, final ApiCallback<CloudflareD1CreateDatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareD1CreateDatabaseValidateBeforeCall(accountId, cloudflareD1CreateDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudflareD1CreateDatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareD1DeleteDatabase
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete D1 database response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete D1 database response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1DeleteDatabaseCall(String accountIdentifier, String databaseIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/d1/database/{database_identifier}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "database_identifier" + "}", localVarApiClient.escapeString(databaseIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareD1DeleteDatabaseValidateBeforeCall(String accountIdentifier, String databaseIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareD1DeleteDatabase(Async)");
        }

        // verify the required parameter 'databaseIdentifier' is set
        if (databaseIdentifier == null) {
            throw new ApiException("Missing the required parameter 'databaseIdentifier' when calling cloudflareD1DeleteDatabase(Async)");
        }

        return cloudflareD1DeleteDatabaseCall(accountIdentifier, databaseIdentifier, _callback);

    }

    /**
     * Delete D1 Database
     * Deletes the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @return CloudflareD1DeleteDatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete D1 database response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete D1 database response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudflareD1DeleteDatabase200Response cloudflareD1DeleteDatabase(String accountIdentifier, String databaseIdentifier) throws ApiException {
        ApiResponse<CloudflareD1DeleteDatabase200Response> localVarResp = cloudflareD1DeleteDatabaseWithHttpInfo(accountIdentifier, databaseIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete D1 Database
     * Deletes the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @return ApiResponse&lt;CloudflareD1DeleteDatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete D1 database response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete D1 database response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudflareD1DeleteDatabase200Response> cloudflareD1DeleteDatabaseWithHttpInfo(String accountIdentifier, String databaseIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudflareD1DeleteDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudflareD1DeleteDatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete D1 Database (asynchronously)
     * Deletes the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete D1 database response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete D1 database response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1DeleteDatabaseAsync(String accountIdentifier, String databaseIdentifier, final ApiCallback<CloudflareD1DeleteDatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareD1DeleteDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudflareD1DeleteDatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareD1GetDatabase
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1GetDatabaseCall(String accountIdentifier, String databaseIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/d1/database/{database_identifier}"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "database_identifier" + "}", localVarApiClient.escapeString(databaseIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareD1GetDatabaseValidateBeforeCall(String accountIdentifier, String databaseIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareD1GetDatabase(Async)");
        }

        // verify the required parameter 'databaseIdentifier' is set
        if (databaseIdentifier == null) {
            throw new ApiException("Missing the required parameter 'databaseIdentifier' when calling cloudflareD1GetDatabase(Async)");
        }

        return cloudflareD1GetDatabaseCall(accountIdentifier, databaseIdentifier, _callback);

    }

    /**
     * Get D1 Database
     * Returns the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @return CloudflareD1GetDatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudflareD1GetDatabase200Response cloudflareD1GetDatabase(String accountIdentifier, String databaseIdentifier) throws ApiException {
        ApiResponse<CloudflareD1GetDatabase200Response> localVarResp = cloudflareD1GetDatabaseWithHttpInfo(accountIdentifier, databaseIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get D1 Database
     * Returns the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @return ApiResponse&lt;CloudflareD1GetDatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudflareD1GetDatabase200Response> cloudflareD1GetDatabaseWithHttpInfo(String accountIdentifier, String databaseIdentifier) throws ApiException {
        okhttp3.Call localVarCall = cloudflareD1GetDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, null);
        Type localVarReturnType = new TypeToken<CloudflareD1GetDatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get D1 Database (asynchronously)
     * Returns the specified D1 database.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Database details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Database details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1GetDatabaseAsync(String accountIdentifier, String databaseIdentifier, final ApiCallback<CloudflareD1GetDatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareD1GetDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CloudflareD1GetDatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareD1ListDatabases
     * @param accountId  (required)
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List D1 databases response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List D1 databases response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1ListDatabasesCall(String accountId, String name, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/d1/database"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareD1ListDatabasesValidateBeforeCall(String accountId, String name, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareD1ListDatabases(Async)");
        }

        return cloudflareD1ListDatabasesCall(accountId, name, page, perPage, _callback);

    }

    /**
     * List D1 Databases
     * Returns a list of D1 databases.
     * @param accountId  (required)
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @return CloudflareD1ListDatabases200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List D1 databases response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List D1 databases response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudflareD1ListDatabases200Response cloudflareD1ListDatabases(String accountId, String name, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<CloudflareD1ListDatabases200Response> localVarResp = cloudflareD1ListDatabasesWithHttpInfo(accountId, name, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List D1 Databases
     * Returns a list of D1 databases.
     * @param accountId  (required)
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @return ApiResponse&lt;CloudflareD1ListDatabases200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List D1 databases response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List D1 databases response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudflareD1ListDatabases200Response> cloudflareD1ListDatabasesWithHttpInfo(String accountId, String name, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = cloudflareD1ListDatabasesValidateBeforeCall(accountId, name, page, perPage, null);
        Type localVarReturnType = new TypeToken<CloudflareD1ListDatabases200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List D1 Databases (asynchronously)
     * Returns a list of D1 databases.
     * @param accountId  (required)
     * @param name  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List D1 databases response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List D1 databases response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1ListDatabasesAsync(String accountId, String name, BigDecimal page, BigDecimal perPage, final ApiCallback<CloudflareD1ListDatabases200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareD1ListDatabasesValidateBeforeCall(accountId, name, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CloudflareD1ListDatabases200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareD1QueryDatabase
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param cloudflareD1QueryDatabaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1QueryDatabaseCall(String accountIdentifier, String databaseIdentifier, CloudflareD1QueryDatabaseRequest cloudflareD1QueryDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudflareD1QueryDatabaseRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/d1/database/{database_identifier}/query"
            .replace("{" + "account_identifier" + "}", localVarApiClient.escapeString(accountIdentifier.toString()))
            .replace("{" + "database_identifier" + "}", localVarApiClient.escapeString(databaseIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareD1QueryDatabaseValidateBeforeCall(String accountIdentifier, String databaseIdentifier, CloudflareD1QueryDatabaseRequest cloudflareD1QueryDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareD1QueryDatabase(Async)");
        }

        // verify the required parameter 'databaseIdentifier' is set
        if (databaseIdentifier == null) {
            throw new ApiException("Missing the required parameter 'databaseIdentifier' when calling cloudflareD1QueryDatabase(Async)");
        }

        // verify the required parameter 'cloudflareD1QueryDatabaseRequest' is set
        if (cloudflareD1QueryDatabaseRequest == null) {
            throw new ApiException("Missing the required parameter 'cloudflareD1QueryDatabaseRequest' when calling cloudflareD1QueryDatabase(Async)");
        }

        return cloudflareD1QueryDatabaseCall(accountIdentifier, databaseIdentifier, cloudflareD1QueryDatabaseRequest, _callback);

    }

    /**
     * Query D1 Database
     * Returns the query result.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param cloudflareD1QueryDatabaseRequest  (required)
     * @return CloudflareD1QueryDatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query response failure </td><td>  -  </td></tr>
     </table>
     */
    public CloudflareD1QueryDatabase200Response cloudflareD1QueryDatabase(String accountIdentifier, String databaseIdentifier, CloudflareD1QueryDatabaseRequest cloudflareD1QueryDatabaseRequest) throws ApiException {
        ApiResponse<CloudflareD1QueryDatabase200Response> localVarResp = cloudflareD1QueryDatabaseWithHttpInfo(accountIdentifier, databaseIdentifier, cloudflareD1QueryDatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Query D1 Database
     * Returns the query result.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param cloudflareD1QueryDatabaseRequest  (required)
     * @return ApiResponse&lt;CloudflareD1QueryDatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudflareD1QueryDatabase200Response> cloudflareD1QueryDatabaseWithHttpInfo(String accountIdentifier, String databaseIdentifier, CloudflareD1QueryDatabaseRequest cloudflareD1QueryDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = cloudflareD1QueryDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, cloudflareD1QueryDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<CloudflareD1QueryDatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query D1 Database (asynchronously)
     * Returns the query result.
     * @param accountIdentifier  (required)
     * @param databaseIdentifier  (required)
     * @param cloudflareD1QueryDatabaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Query response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareD1QueryDatabaseAsync(String accountIdentifier, String databaseIdentifier, CloudflareD1QueryDatabaseRequest cloudflareD1QueryDatabaseRequest, final ApiCallback<CloudflareD1QueryDatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareD1QueryDatabaseValidateBeforeCall(accountIdentifier, databaseIdentifier, cloudflareD1QueryDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudflareD1QueryDatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
