/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest;
import org.openapitools.client.model.AccessKeysComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessKeyConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessKeyConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessKeyConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessKeyConfigurationGetTheAccessKeyConfiguration
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationGetTheAccessKeyConfigurationCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/keys"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessKeyConfigurationGetTheAccessKeyConfigurationValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessKeyConfigurationGetTheAccessKeyConfiguration(Async)");
        }

        return accessKeyConfigurationGetTheAccessKeyConfigurationCall(identifier, _callback);

    }

    /**
     * Get the Access key configuration
     * Gets the Access key rotation settings for an account.
     * @param identifier  (required)
     * @return AccessKeysComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessKeysComponentsSchemasSingleResponse accessKeyConfigurationGetTheAccessKeyConfiguration(String identifier) throws ApiException {
        ApiResponse<AccessKeysComponentsSchemasSingleResponse> localVarResp = accessKeyConfigurationGetTheAccessKeyConfigurationWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Get the Access key configuration
     * Gets the Access key rotation settings for an account.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessKeysComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessKeysComponentsSchemasSingleResponse> accessKeyConfigurationGetTheAccessKeyConfigurationWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessKeyConfigurationGetTheAccessKeyConfigurationValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Access key configuration (asynchronously)
     * Gets the Access key rotation settings for an account.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationGetTheAccessKeyConfigurationAsync(String identifier, final ApiCallback<AccessKeysComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessKeyConfigurationGetTheAccessKeyConfigurationValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessKeyConfigurationRotateAccessKeys
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Access keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Access keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationRotateAccessKeysCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/keys/rotate"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessKeyConfigurationRotateAccessKeysValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessKeyConfigurationRotateAccessKeys(Async)");
        }

        return accessKeyConfigurationRotateAccessKeysCall(identifier, _callback);

    }

    /**
     * Rotate Access keys
     * Perfoms a key rotation for an account.
     * @param identifier  (required)
     * @return AccessKeysComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Access keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Access keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessKeysComponentsSchemasSingleResponse accessKeyConfigurationRotateAccessKeys(String identifier) throws ApiException {
        ApiResponse<AccessKeysComponentsSchemasSingleResponse> localVarResp = accessKeyConfigurationRotateAccessKeysWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Rotate Access keys
     * Perfoms a key rotation for an account.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessKeysComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Access keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Access keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessKeysComponentsSchemasSingleResponse> accessKeyConfigurationRotateAccessKeysWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessKeyConfigurationRotateAccessKeysValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate Access keys (asynchronously)
     * Perfoms a key rotation for an account.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate Access keys response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate Access keys response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationRotateAccessKeysAsync(String identifier, final ApiCallback<AccessKeysComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessKeyConfigurationRotateAccessKeysValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessKeyConfigurationUpdateTheAccessKeyConfiguration
     * @param identifier  (required)
     * @param accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationUpdateTheAccessKeyConfigurationCall(String identifier, AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/keys"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessKeyConfigurationUpdateTheAccessKeyConfigurationValidateBeforeCall(String identifier, AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessKeyConfigurationUpdateTheAccessKeyConfiguration(Async)");
        }

        // verify the required parameter 'accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest' is set
        if (accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest' when calling accessKeyConfigurationUpdateTheAccessKeyConfiguration(Async)");
        }

        return accessKeyConfigurationUpdateTheAccessKeyConfigurationCall(identifier, accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, _callback);

    }

    /**
     * Update the Access key configuration
     * Updates the Access key rotation settings for an account.
     * @param identifier  (required)
     * @param accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest  (required)
     * @return AccessKeysComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessKeysComponentsSchemasSingleResponse accessKeyConfigurationUpdateTheAccessKeyConfiguration(String identifier, AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest) throws ApiException {
        ApiResponse<AccessKeysComponentsSchemasSingleResponse> localVarResp = accessKeyConfigurationUpdateTheAccessKeyConfigurationWithHttpInfo(identifier, accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Update the Access key configuration
     * Updates the Access key rotation settings for an account.
     * @param identifier  (required)
     * @param accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest  (required)
     * @return ApiResponse&lt;AccessKeysComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessKeysComponentsSchemasSingleResponse> accessKeyConfigurationUpdateTheAccessKeyConfigurationWithHttpInfo(String identifier, AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = accessKeyConfigurationUpdateTheAccessKeyConfigurationValidateBeforeCall(identifier, accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Access key configuration (asynchronously)
     * Updates the Access key rotation settings for an account.
     * @param identifier  (required)
     * @param accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update the Access key configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update the Access key configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessKeyConfigurationUpdateTheAccessKeyConfigurationAsync(String identifier, AccessKeyConfigurationUpdateTheAccessKeyConfigurationRequest accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, final ApiCallback<AccessKeysComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessKeyConfigurationUpdateTheAccessKeyConfigurationValidateBeforeCall(identifier, accessKeyConfigurationUpdateTheAccessKeyConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessKeysComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
