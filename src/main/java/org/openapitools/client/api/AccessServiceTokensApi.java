/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessComponentsSchemasResponseCollection;
import org.openapitools.client.model.AccessCreateResponse;
import org.openapitools.client.model.AccessServiceTokensComponentsSchemasSingleResponse;
import org.openapitools.client.model.AccessServiceTokensCreateAServiceTokenRequest;
import org.openapitools.client.model.AccessServiceTokensUpdateAServiceTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessServiceTokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessServiceTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessServiceTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessServiceTokensCreateAServiceToken
     * @param identifier  (required)
     * @param accessServiceTokensCreateAServiceTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensCreateAServiceTokenCall(String identifier, AccessServiceTokensCreateAServiceTokenRequest accessServiceTokensCreateAServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessServiceTokensCreateAServiceTokenRequest;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensCreateAServiceTokenValidateBeforeCall(String identifier, AccessServiceTokensCreateAServiceTokenRequest accessServiceTokensCreateAServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensCreateAServiceToken(Async)");
        }

        // verify the required parameter 'accessServiceTokensCreateAServiceTokenRequest' is set
        if (accessServiceTokensCreateAServiceTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'accessServiceTokensCreateAServiceTokenRequest' when calling accessServiceTokensCreateAServiceToken(Async)");
        }

        return accessServiceTokensCreateAServiceTokenCall(identifier, accessServiceTokensCreateAServiceTokenRequest, _callback);

    }

    /**
     * Create a service token
     * Generates a new service token. **Note:** This is the only time you can get the Client Secret. If you lose the Client Secret, you will have to rotate the Client Secret or create a new service token.
     * @param identifier  (required)
     * @param accessServiceTokensCreateAServiceTokenRequest  (required)
     * @return AccessCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCreateResponse accessServiceTokensCreateAServiceToken(String identifier, AccessServiceTokensCreateAServiceTokenRequest accessServiceTokensCreateAServiceTokenRequest) throws ApiException {
        ApiResponse<AccessCreateResponse> localVarResp = accessServiceTokensCreateAServiceTokenWithHttpInfo(identifier, accessServiceTokensCreateAServiceTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create a service token
     * Generates a new service token. **Note:** This is the only time you can get the Client Secret. If you lose the Client Secret, you will have to rotate the Client Secret or create a new service token.
     * @param identifier  (required)
     * @param accessServiceTokensCreateAServiceTokenRequest  (required)
     * @return ApiResponse&lt;AccessCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCreateResponse> accessServiceTokensCreateAServiceTokenWithHttpInfo(String identifier, AccessServiceTokensCreateAServiceTokenRequest accessServiceTokensCreateAServiceTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensCreateAServiceTokenValidateBeforeCall(identifier, accessServiceTokensCreateAServiceTokenRequest, null);
        Type localVarReturnType = new TypeToken<AccessCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a service token (asynchronously)
     * Generates a new service token. **Note:** This is the only time you can get the Client Secret. If you lose the Client Secret, you will have to rotate the Client Secret or create a new service token.
     * @param identifier  (required)
     * @param accessServiceTokensCreateAServiceTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensCreateAServiceTokenAsync(String identifier, AccessServiceTokensCreateAServiceTokenRequest accessServiceTokensCreateAServiceTokenRequest, final ApiCallback<AccessCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensCreateAServiceTokenValidateBeforeCall(identifier, accessServiceTokensCreateAServiceTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessServiceTokensDeleteAServiceToken
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensDeleteAServiceTokenCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensDeleteAServiceTokenValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessServiceTokensDeleteAServiceToken(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensDeleteAServiceToken(Async)");
        }

        return accessServiceTokensDeleteAServiceTokenCall(uuid, identifier, _callback);

    }

    /**
     * Delete a service token
     * Deletes a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessServiceTokensComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessServiceTokensComponentsSchemasSingleResponse accessServiceTokensDeleteAServiceToken(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> localVarResp = accessServiceTokensDeleteAServiceTokenWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete a service token
     * Deletes a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessServiceTokensComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> accessServiceTokensDeleteAServiceTokenWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensDeleteAServiceTokenValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a service token (asynchronously)
     * Deletes a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensDeleteAServiceTokenAsync(String uuid, String identifier, final ApiCallback<AccessServiceTokensComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensDeleteAServiceTokenValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessServiceTokensListServiceTokens
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List service tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List service tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensListServiceTokensCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensListServiceTokensValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensListServiceTokens(Async)");
        }

        return accessServiceTokensListServiceTokensCall(identifier, _callback);

    }

    /**
     * List service tokens
     * Lists all service tokens.
     * @param identifier  (required)
     * @return AccessComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List service tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List service tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessComponentsSchemasResponseCollection accessServiceTokensListServiceTokens(String identifier) throws ApiException {
        ApiResponse<AccessComponentsSchemasResponseCollection> localVarResp = accessServiceTokensListServiceTokensWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List service tokens
     * Lists all service tokens.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List service tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List service tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessComponentsSchemasResponseCollection> accessServiceTokensListServiceTokensWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensListServiceTokensValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List service tokens (asynchronously)
     * Lists all service tokens.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List service tokens response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List service tokens response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensListServiceTokensAsync(String identifier, final ApiCallback<AccessComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensListServiceTokensValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessServiceTokensRefreshAServiceToken
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refresh a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Refresh a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensRefreshAServiceTokenCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens/{uuid}/refresh"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensRefreshAServiceTokenValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessServiceTokensRefreshAServiceToken(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensRefreshAServiceToken(Async)");
        }

        return accessServiceTokensRefreshAServiceTokenCall(uuid, identifier, _callback);

    }

    /**
     * Refresh a service token
     * Refreshes the expiration of a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessServiceTokensComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refresh a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Refresh a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessServiceTokensComponentsSchemasSingleResponse accessServiceTokensRefreshAServiceToken(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> localVarResp = accessServiceTokensRefreshAServiceTokenWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Refresh a service token
     * Refreshes the expiration of a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessServiceTokensComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refresh a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Refresh a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> accessServiceTokensRefreshAServiceTokenWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensRefreshAServiceTokenValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a service token (asynchronously)
     * Refreshes the expiration of a service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refresh a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Refresh a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensRefreshAServiceTokenAsync(String uuid, String identifier, final ApiCallback<AccessServiceTokensComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensRefreshAServiceTokenValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessServiceTokensRotateAServiceToken
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensRotateAServiceTokenCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens/{uuid}/rotate"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensRotateAServiceTokenValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessServiceTokensRotateAServiceToken(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensRotateAServiceToken(Async)");
        }

        return accessServiceTokensRotateAServiceTokenCall(uuid, identifier, _callback);

    }

    /**
     * Rotate a service token
     * Generates a new Client Secret for a service token and revokes the old one.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCreateResponse accessServiceTokensRotateAServiceToken(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessCreateResponse> localVarResp = accessServiceTokensRotateAServiceTokenWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Rotate a service token
     * Generates a new Client Secret for a service token and revokes the old one.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCreateResponse> accessServiceTokensRotateAServiceTokenWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensRotateAServiceTokenValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate a service token (asynchronously)
     * Generates a new Client Secret for a service token and revokes the old one.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rotate a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Rotate a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensRotateAServiceTokenAsync(String uuid, String identifier, final ApiCallback<AccessCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensRotateAServiceTokenValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessServiceTokensUpdateAServiceToken
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessServiceTokensUpdateAServiceTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensUpdateAServiceTokenCall(String uuid, String identifier, AccessServiceTokensUpdateAServiceTokenRequest accessServiceTokensUpdateAServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessServiceTokensUpdateAServiceTokenRequest;

        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/service_tokens/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessServiceTokensUpdateAServiceTokenValidateBeforeCall(String uuid, String identifier, AccessServiceTokensUpdateAServiceTokenRequest accessServiceTokensUpdateAServiceTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessServiceTokensUpdateAServiceToken(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessServiceTokensUpdateAServiceToken(Async)");
        }

        // verify the required parameter 'accessServiceTokensUpdateAServiceTokenRequest' is set
        if (accessServiceTokensUpdateAServiceTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'accessServiceTokensUpdateAServiceTokenRequest' when calling accessServiceTokensUpdateAServiceToken(Async)");
        }

        return accessServiceTokensUpdateAServiceTokenCall(uuid, identifier, accessServiceTokensUpdateAServiceTokenRequest, _callback);

    }

    /**
     * Update a service token
     * Updates a configured service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessServiceTokensUpdateAServiceTokenRequest  (required)
     * @return AccessServiceTokensComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessServiceTokensComponentsSchemasSingleResponse accessServiceTokensUpdateAServiceToken(String uuid, String identifier, AccessServiceTokensUpdateAServiceTokenRequest accessServiceTokensUpdateAServiceTokenRequest) throws ApiException {
        ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> localVarResp = accessServiceTokensUpdateAServiceTokenWithHttpInfo(uuid, identifier, accessServiceTokensUpdateAServiceTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Update a service token
     * Updates a configured service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessServiceTokensUpdateAServiceTokenRequest  (required)
     * @return ApiResponse&lt;AccessServiceTokensComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessServiceTokensComponentsSchemasSingleResponse> accessServiceTokensUpdateAServiceTokenWithHttpInfo(String uuid, String identifier, AccessServiceTokensUpdateAServiceTokenRequest accessServiceTokensUpdateAServiceTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = accessServiceTokensUpdateAServiceTokenValidateBeforeCall(uuid, identifier, accessServiceTokensUpdateAServiceTokenRequest, null);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a service token (asynchronously)
     * Updates a configured service token.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessServiceTokensUpdateAServiceTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a service token response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a service token response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessServiceTokensUpdateAServiceTokenAsync(String uuid, String identifier, AccessServiceTokensUpdateAServiceTokenRequest accessServiceTokensUpdateAServiceTokenRequest, final ApiCallback<AccessServiceTokensComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessServiceTokensUpdateAServiceTokenValidateBeforeCall(uuid, identifier, accessServiceTokensUpdateAServiceTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessServiceTokensComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
