/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CloudflareImagesBaseImage4XXResponse;
import org.openapitools.client.model.CloudflareImagesCreateAuthenticatedDirectUploadUrlV24XXResponse;
import org.openapitools.client.model.CloudflareImagesImagesUsageStatistics4XXResponse;
import org.openapitools.client.model.CloudflareImagesListImages4XXResponse;
import org.openapitools.client.model.CloudflareImagesListImagesV24XXResponse;
import org.openapitools.client.model.CloudflareImagesUploadAnImageViaUrl4XXResponse;
import org.openapitools.client.model.CloudflareImagesVariantsDeleteAVariant4XXResponse;
import java.io.File;
import org.openapitools.client.model.ImagesDeletedResponse;
import org.openapitools.client.model.ImagesImageDirectUploadResponseV2;
import org.openapitools.client.model.ImagesImagePatchRequest;
import org.openapitools.client.model.ImagesImageResponseSingle;
import org.openapitools.client.model.ImagesImagesListResponse;
import org.openapitools.client.model.ImagesImagesListResponseV2;
import org.openapitools.client.model.ImagesImagesStatsResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudflareImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CloudflareImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudflareImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudflareImagesBaseImage
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Base image response. Returns uploaded image data. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Base image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesBaseImageCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/{image_id}/blob"
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesBaseImageValidateBeforeCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling cloudflareImagesBaseImage(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesBaseImage(Async)");
        }

        return cloudflareImagesBaseImageCall(imageId, accountId, _callback);

    }

    /**
     * Base image
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Base image response. Returns uploaded image data. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Base image response failure </td><td>  -  </td></tr>
     </table>
     */
    public File cloudflareImagesBaseImage(String imageId, String accountId) throws ApiException {
        ApiResponse<File> localVarResp = cloudflareImagesBaseImageWithHttpInfo(imageId, accountId);
        return localVarResp.getData();
    }

    /**
     * Base image
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Base image response. Returns uploaded image data. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Base image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cloudflareImagesBaseImageWithHttpInfo(String imageId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesBaseImageValidateBeforeCall(imageId, accountId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Base image (asynchronously)
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Base image response. Returns uploaded image data. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Base image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesBaseImageAsync(String imageId, String accountId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesBaseImageValidateBeforeCall(imageId, accountId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesCreateAuthenticatedDirectUploadUrlV2
     * @param accountId  (required)
     * @param expiry The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours. (optional)
     * @param id Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID. (optional)
     * @param metadata User modifiable key-value store. Can be used for keeping references to another system of record, for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token to be accessed. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create authenticated direct upload URL V2 response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create authenticated direct upload URL V2 response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Call(String accountId, OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v2/direct_upload"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expiry != null) {
            localVarFormParams.put("expiry", expiry);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (requireSignedURLs != null) {
            localVarFormParams.put("requireSignedURLs", requireSignedURLs);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(String accountId, OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }

        return cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Call(accountId, expiry, id, metadata, requireSignedURLs, _callback);

    }

    /**
     * Create authenticated direct upload URL V2
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param accountId  (required)
     * @param expiry The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours. (optional)
     * @param id Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID. (optional)
     * @param metadata User modifiable key-value store. Can be used for keeping references to another system of record, for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token to be accessed. (optional, default to false)
     * @return ImagesImageDirectUploadResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create authenticated direct upload URL V2 response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create authenticated direct upload URL V2 response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageDirectUploadResponseV2 cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(String accountId, OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs) throws ApiException {
        ApiResponse<ImagesImageDirectUploadResponseV2> localVarResp = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2WithHttpInfo(accountId, expiry, id, metadata, requireSignedURLs);
        return localVarResp.getData();
    }

    /**
     * Create authenticated direct upload URL V2
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param accountId  (required)
     * @param expiry The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours. (optional)
     * @param id Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID. (optional)
     * @param metadata User modifiable key-value store. Can be used for keeping references to another system of record, for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token to be accessed. (optional, default to false)
     * @return ApiResponse&lt;ImagesImageDirectUploadResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create authenticated direct upload URL V2 response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create authenticated direct upload URL V2 response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageDirectUploadResponseV2> cloudflareImagesCreateAuthenticatedDirectUploadUrlV2WithHttpInfo(String accountId, OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(accountId, expiry, id, metadata, requireSignedURLs, null);
        Type localVarReturnType = new TypeToken<ImagesImageDirectUploadResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create authenticated direct upload URL V2 (asynchronously)
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param accountId  (required)
     * @param expiry The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours. (optional)
     * @param id Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID. (optional)
     * @param metadata User modifiable key-value store. Can be used for keeping references to another system of record, for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token to be accessed. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create authenticated direct upload URL V2 response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create authenticated direct upload URL V2 response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Async(String accountId, OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, final ApiCallback<ImagesImageDirectUploadResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(accountId, expiry, id, metadata, requireSignedURLs, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageDirectUploadResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesDeleteImage
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesDeleteImageCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/{image_id}"
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesDeleteImageValidateBeforeCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling cloudflareImagesDeleteImage(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesDeleteImage(Async)");
        }

        return cloudflareImagesDeleteImageCall(imageId, accountId, _callback);

    }

    /**
     * Delete image
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return ImagesDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesDeletedResponse cloudflareImagesDeleteImage(String imageId, String accountId) throws ApiException {
        ApiResponse<ImagesDeletedResponse> localVarResp = cloudflareImagesDeleteImageWithHttpInfo(imageId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete image
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesDeletedResponse> cloudflareImagesDeleteImageWithHttpInfo(String imageId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesDeleteImageValidateBeforeCall(imageId, accountId, null);
        Type localVarReturnType = new TypeToken<ImagesDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete image (asynchronously)
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesDeleteImageAsync(String imageId, String accountId, final ApiCallback<ImagesDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesDeleteImageValidateBeforeCall(imageId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesImageDetails
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Image details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesImageDetailsCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/{image_id}"
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesImageDetailsValidateBeforeCall(String imageId, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling cloudflareImagesImageDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesImageDetails(Async)");
        }

        return cloudflareImagesImageDetailsCall(imageId, accountId, _callback);

    }

    /**
     * Image details
     * Fetch details for a single image.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return ImagesImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Image details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageResponseSingle cloudflareImagesImageDetails(String imageId, String accountId) throws ApiException {
        ApiResponse<ImagesImageResponseSingle> localVarResp = cloudflareImagesImageDetailsWithHttpInfo(imageId, accountId);
        return localVarResp.getData();
    }

    /**
     * Image details
     * Fetch details for a single image.
     * @param imageId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Image details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageResponseSingle> cloudflareImagesImageDetailsWithHttpInfo(String imageId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesImageDetailsValidateBeforeCall(imageId, accountId, null);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image details (asynchronously)
     * Fetch details for a single image.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Image details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesImageDetailsAsync(String imageId, String accountId, final ApiCallback<ImagesImageResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesImageDetailsValidateBeforeCall(imageId, accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesImagesUsageStatistics
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Images usage statistics response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Images usage statistics response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesImagesUsageStatisticsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/stats"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesImagesUsageStatisticsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesImagesUsageStatistics(Async)");
        }

        return cloudflareImagesImagesUsageStatisticsCall(accountId, _callback);

    }

    /**
     * Images usage statistics
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountId  (required)
     * @return ImagesImagesStatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Images usage statistics response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Images usage statistics response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImagesStatsResponse cloudflareImagesImagesUsageStatistics(String accountId) throws ApiException {
        ApiResponse<ImagesImagesStatsResponse> localVarResp = cloudflareImagesImagesUsageStatisticsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Images usage statistics
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountId  (required)
     * @return ApiResponse&lt;ImagesImagesStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Images usage statistics response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Images usage statistics response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImagesStatsResponse> cloudflareImagesImagesUsageStatisticsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesImagesUsageStatisticsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<ImagesImagesStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Images usage statistics (asynchronously)
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Images usage statistics response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Images usage statistics response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesImagesUsageStatisticsAsync(String accountId, final ApiCallback<ImagesImagesStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesImagesUsageStatisticsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<ImagesImagesStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesListImages
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cloudflareImagesListImagesCall(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesListImagesValidateBeforeCall(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesListImages(Async)");
        }

        return cloudflareImagesListImagesCall(accountId, page, perPage, _callback);

    }

    /**
     * List images
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @return ImagesImagesListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ImagesImagesListResponse cloudflareImagesListImages(String accountId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<ImagesImagesListResponse> localVarResp = cloudflareImagesListImagesWithHttpInfo(accountId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List images
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @return ApiResponse&lt;ImagesImagesListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ImagesImagesListResponse> cloudflareImagesListImagesWithHttpInfo(String accountId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesListImagesValidateBeforeCall(accountId, page, perPage, null);
        Type localVarReturnType = new TypeToken<ImagesImagesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List images (asynchronously)
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountId  (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cloudflareImagesListImagesAsync(String accountId, BigDecimal page, BigDecimal perPage, final ApiCallback<ImagesImagesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesListImagesValidateBeforeCall(accountId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ImagesImagesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesListImagesV2
     * @param accountId  (required)
     * @param continuationToken  (optional)
     * @param perPage  (optional, default to 1000)
     * @param sortOrder  (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesListImagesV2Call(String accountId, String continuationToken, BigDecimal perPage, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v2"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuation_token", continuationToken));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesListImagesV2ValidateBeforeCall(String accountId, String continuationToken, BigDecimal perPage, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesListImagesV2(Async)");
        }

        return cloudflareImagesListImagesV2Call(accountId, continuationToken, perPage, sortOrder, _callback);

    }

    /**
     * List images V2
     * List up to 10000 images with one request. Use the optional parameters below to get a specific range of images. Endpoint returns continuation_token if more images are present. 
     * @param accountId  (required)
     * @param continuationToken  (optional)
     * @param perPage  (optional, default to 1000)
     * @param sortOrder  (optional, default to desc)
     * @return ImagesImagesListResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImagesListResponseV2 cloudflareImagesListImagesV2(String accountId, String continuationToken, BigDecimal perPage, String sortOrder) throws ApiException {
        ApiResponse<ImagesImagesListResponseV2> localVarResp = cloudflareImagesListImagesV2WithHttpInfo(accountId, continuationToken, perPage, sortOrder);
        return localVarResp.getData();
    }

    /**
     * List images V2
     * List up to 10000 images with one request. Use the optional parameters below to get a specific range of images. Endpoint returns continuation_token if more images are present. 
     * @param accountId  (required)
     * @param continuationToken  (optional)
     * @param perPage  (optional, default to 1000)
     * @param sortOrder  (optional, default to desc)
     * @return ApiResponse&lt;ImagesImagesListResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImagesListResponseV2> cloudflareImagesListImagesV2WithHttpInfo(String accountId, String continuationToken, BigDecimal perPage, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesListImagesV2ValidateBeforeCall(accountId, continuationToken, perPage, sortOrder, null);
        Type localVarReturnType = new TypeToken<ImagesImagesListResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List images V2 (asynchronously)
     * List up to 10000 images with one request. Use the optional parameters below to get a specific range of images. Endpoint returns continuation_token if more images are present. 
     * @param accountId  (required)
     * @param continuationToken  (optional)
     * @param perPage  (optional, default to 1000)
     * @param sortOrder  (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List images response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List images response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesListImagesV2Async(String accountId, String continuationToken, BigDecimal perPage, String sortOrder, final ApiCallback<ImagesImagesListResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesListImagesV2ValidateBeforeCall(accountId, continuationToken, perPage, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ImagesImagesListResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesUpdateImage
     * @param imageId  (required)
     * @param accountId  (required)
     * @param imagesImagePatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesUpdateImageCall(String imageId, String accountId, ImagesImagePatchRequest imagesImagePatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imagesImagePatchRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1/{image_id}"
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesUpdateImageValidateBeforeCall(String imageId, String accountId, ImagesImagePatchRequest imagesImagePatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling cloudflareImagesUpdateImage(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesUpdateImage(Async)");
        }

        // verify the required parameter 'imagesImagePatchRequest' is set
        if (imagesImagePatchRequest == null) {
            throw new ApiException("Missing the required parameter 'imagesImagePatchRequest' when calling cloudflareImagesUpdateImage(Async)");
        }

        return cloudflareImagesUpdateImageCall(imageId, accountId, imagesImagePatchRequest, _callback);

    }

    /**
     * Update image
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param imagesImagePatchRequest  (required)
     * @return ImagesImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageResponseSingle cloudflareImagesUpdateImage(String imageId, String accountId, ImagesImagePatchRequest imagesImagePatchRequest) throws ApiException {
        ApiResponse<ImagesImageResponseSingle> localVarResp = cloudflareImagesUpdateImageWithHttpInfo(imageId, accountId, imagesImagePatchRequest);
        return localVarResp.getData();
    }

    /**
     * Update image
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param imagesImagePatchRequest  (required)
     * @return ApiResponse&lt;ImagesImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageResponseSingle> cloudflareImagesUpdateImageWithHttpInfo(String imageId, String accountId, ImagesImagePatchRequest imagesImagePatchRequest) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesUpdateImageValidateBeforeCall(imageId, accountId, imagesImagePatchRequest, null);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update image (asynchronously)
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param imageId  (required)
     * @param accountId  (required)
     * @param imagesImagePatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesUpdateImageAsync(String imageId, String accountId, ImagesImagePatchRequest imagesImagePatchRequest, final ApiCallback<ImagesImageResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesUpdateImageValidateBeforeCall(imageId, accountId, imagesImagePatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareImagesUploadAnImageViaUrl
     * @param accountId  (required)
     * @param _file An image binary data. Only needed when type is uploading a file. (optional)
     * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token for the access. (optional, default to false)
     * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload an image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload an image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesUploadAnImageViaUrlCall(String accountId, Object _file, Object metadata, Boolean requireSignedURLs, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/images/v1"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (metadata != null) {
            localVarFormParams.put("metadata", metadata);
        }

        if (requireSignedURLs != null) {
            localVarFormParams.put("requireSignedURLs", requireSignedURLs);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(String accountId, Object _file, Object metadata, Boolean requireSignedURLs, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cloudflareImagesUploadAnImageViaUrl(Async)");
        }

        return cloudflareImagesUploadAnImageViaUrlCall(accountId, _file, metadata, requireSignedURLs, url, _callback);

    }

    /**
     * Upload an image
     * Upload an image with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request. An image can be uploaded by sending an image file or passing an accessible to an API url. 
     * @param accountId  (required)
     * @param _file An image binary data. Only needed when type is uploading a file. (optional)
     * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token for the access. (optional, default to false)
     * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL. (optional)
     * @return ImagesImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload an image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload an image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ImagesImageResponseSingle cloudflareImagesUploadAnImageViaUrl(String accountId, Object _file, Object metadata, Boolean requireSignedURLs, String url) throws ApiException {
        ApiResponse<ImagesImageResponseSingle> localVarResp = cloudflareImagesUploadAnImageViaUrlWithHttpInfo(accountId, _file, metadata, requireSignedURLs, url);
        return localVarResp.getData();
    }

    /**
     * Upload an image
     * Upload an image with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request. An image can be uploaded by sending an image file or passing an accessible to an API url. 
     * @param accountId  (required)
     * @param _file An image binary data. Only needed when type is uploading a file. (optional)
     * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token for the access. (optional, default to false)
     * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL. (optional)
     * @return ApiResponse&lt;ImagesImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload an image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload an image response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagesImageResponseSingle> cloudflareImagesUploadAnImageViaUrlWithHttpInfo(String accountId, Object _file, Object metadata, Boolean requireSignedURLs, String url) throws ApiException {
        okhttp3.Call localVarCall = cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(accountId, _file, metadata, requireSignedURLs, url, null);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an image (asynchronously)
     * Upload an image with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request. An image can be uploaded by sending an image file or passing an accessible to an API url. 
     * @param accountId  (required)
     * @param _file An image binary data. Only needed when type is uploading a file. (optional)
     * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images. (optional)
     * @param requireSignedURLs Indicates whether the image requires a signature token for the access. (optional, default to false)
     * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload an image response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload an image response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareImagesUploadAnImageViaUrlAsync(String accountId, Object _file, Object metadata, Boolean requireSignedURLs, String url, final ApiCallback<ImagesImageResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(accountId, _file, metadata, requireSignedURLs, url, _callback);
        Type localVarReturnType = new TypeToken<ImagesImageResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
