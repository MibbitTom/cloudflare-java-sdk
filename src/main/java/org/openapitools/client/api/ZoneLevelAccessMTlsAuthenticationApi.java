/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessCertificatesComponentsSchemasResponseCollection2;
import org.openapitools.client.model.AccessCertificatesComponentsSchemasSingleResponse2;
import org.openapitools.client.model.AccessComponentsSchemasIdResponse;
import org.openapitools.client.model.AccessMtlsAuthenticationAddAnMtlsCertificateRequest;
import org.openapitools.client.model.AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest;
import org.openapitools.client.model.AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest;
import org.openapitools.client.model.AccessResponseCollectionHostnames;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessMTlsAuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAccessMTlsAuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessMTlsAuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificate
     * @param identifier  (required)
     * @param accessMtlsAuthenticationAddAnMtlsCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateCall(String identifier, AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessMtlsAuthenticationAddAnMtlsCertificateRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateValidateBeforeCall(String identifier, AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificate(Async)");
        }

        // verify the required parameter 'accessMtlsAuthenticationAddAnMtlsCertificateRequest' is set
        if (accessMtlsAuthenticationAddAnMtlsCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'accessMtlsAuthenticationAddAnMtlsCertificateRequest' when calling zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificate(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateCall(identifier, accessMtlsAuthenticationAddAnMtlsCertificateRequest, _callback);

    }

    /**
     * Add an mTLS certificate
     * Adds a new mTLS root certificate to Access.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationAddAnMtlsCertificateRequest  (required)
     * @return AccessCertificatesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCertificatesComponentsSchemasSingleResponse2 zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificate(String identifier, AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest) throws ApiException {
        ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateWithHttpInfo(identifier, accessMtlsAuthenticationAddAnMtlsCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Add an mTLS certificate
     * Adds a new mTLS root certificate to Access.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationAddAnMtlsCertificateRequest  (required)
     * @return ApiResponse&lt;AccessCertificatesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateWithHttpInfo(String identifier, AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateValidateBeforeCall(identifier, accessMtlsAuthenticationAddAnMtlsCertificateRequest, null);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an mTLS certificate (asynchronously)
     * Adds a new mTLS root certificate to Access.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationAddAnMtlsCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Add an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateAsync(String identifier, AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest, final ApiCallback<AccessCertificatesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateValidateBeforeCall(identifier, accessMtlsAuthenticationAddAnMtlsCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificate
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificate(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificate(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateCall(uuid, identifier, _callback);

    }

    /**
     * Delete an mTLS certificate
     * Deletes an mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessComponentsSchemasIdResponse zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificate(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessComponentsSchemasIdResponse> localVarResp = zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Delete an mTLS certificate
     * Deletes an mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessComponentsSchemasIdResponse> zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessComponentsSchemasIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an mTLS certificate (asynchronously)
     * Deletes an mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateAsync(String uuid, String identifier, final ApiCallback<AccessComponentsSchemasIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessComponentsSchemasIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificate
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateValidateBeforeCall(String uuid, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificate(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificate(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateCall(uuid, identifier, _callback);

    }

    /**
     * Get an mTLS certificate
     * Fetches a single mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return AccessCertificatesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCertificatesComponentsSchemasSingleResponse2 zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificate(String uuid, String identifier) throws ApiException {
        ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateWithHttpInfo(uuid, identifier);
        return localVarResp.getData();
    }

    /**
     * Get an mTLS certificate
     * Fetches a single mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCertificatesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateWithHttpInfo(String uuid, String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateValidateBeforeCall(uuid, identifier, null);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an mTLS certificate (asynchronously)
     * Fetches a single mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateAsync(String uuid, String identifier, final ApiCallback<AccessCertificatesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateValidateBeforeCall(uuid, identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationListMtlsCertificates
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationListMtlsCertificates(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationListMtlsCertificatesCall(identifier, _callback);

    }

    /**
     * List mTLS certificates
     * Lists all mTLS certificates.
     * @param identifier  (required)
     * @return AccessCertificatesComponentsSchemasResponseCollection2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCertificatesComponentsSchemasResponseCollection2 zoneLevelAccessMtlsAuthenticationListMtlsCertificates(String identifier) throws ApiException {
        ApiResponse<AccessCertificatesComponentsSchemasResponseCollection2> localVarResp = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List mTLS certificates
     * Lists all mTLS certificates.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessCertificatesComponentsSchemasResponseCollection2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCertificatesComponentsSchemasResponseCollection2> zoneLevelAccessMtlsAuthenticationListMtlsCertificatesWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasResponseCollection2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List mTLS certificates (asynchronously)
     * Lists all mTLS certificates.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesAsync(String identifier, final ApiCallback<AccessCertificatesComponentsSchemasResponseCollection2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasResponseCollection2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettings
     * @param identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS hostname settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates/settings"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettings(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsCall(identifier, _callback);

    }

    /**
     * List all mTLS hostname settings
     * List all mTLS hostname settings for this zone.
     * @param identifier  (required)
     * @return AccessResponseCollectionHostnames
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS hostname settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessResponseCollectionHostnames zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettings(String identifier) throws ApiException {
        ApiResponse<AccessResponseCollectionHostnames> localVarResp = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * List all mTLS hostname settings
     * List all mTLS hostname settings for this zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;AccessResponseCollectionHostnames&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS hostname settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessResponseCollectionHostnames> zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<AccessResponseCollectionHostnames>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all mTLS hostname settings (asynchronously)
     * List all mTLS hostname settings for this zone.
     * @param identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List mTLS hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List mTLS hostname settings response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsAsync(String identifier, final ApiCallback<AccessResponseCollectionHostnames> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<AccessResponseCollectionHostnames>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateCall(String uuid, String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessMtlsAuthenticationUpdateAnMtlsCertificateRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateValidateBeforeCall(String uuid, String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate(Async)");
        }

        // verify the required parameter 'accessMtlsAuthenticationUpdateAnMtlsCertificateRequest' is set
        if (accessMtlsAuthenticationUpdateAnMtlsCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'accessMtlsAuthenticationUpdateAnMtlsCertificateRequest' when calling zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateCall(uuid, identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, _callback);

    }

    /**
     * Update an mTLS certificate
     * Updates a configured mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateRequest  (required)
     * @return AccessCertificatesComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessCertificatesComponentsSchemasSingleResponse2 zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate(String uuid, String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest) throws ApiException {
        ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> localVarResp = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateWithHttpInfo(uuid, identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an mTLS certificate
     * Updates a configured mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateRequest  (required)
     * @return ApiResponse&lt;AccessCertificatesComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessCertificatesComponentsSchemasSingleResponse2> zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateWithHttpInfo(String uuid, String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateValidateBeforeCall(uuid, identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, null);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an mTLS certificate (asynchronously)
     * Updates a configured mTLS certificate.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an mTLS certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateAsync(String uuid, String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, final ApiCallback<AccessCertificatesComponentsSchemasSingleResponse2> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateValidateBeforeCall(uuid, identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessCertificatesComponentsSchemasSingleResponse2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettings
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Update an mTLS certificates hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificates hostname settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsCall(String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest;

        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/certificates/settings"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsValidateBeforeCall(String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettings(Async)");
        }

        // verify the required parameter 'accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest' is set
        if (accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest' when calling zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettings(Async)");
        }

        return zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsCall(identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, _callback);

    }

    /**
     * Update an mTLS certificate&#39;s hostname settings
     * Updates an mTLS certificate&#39;s hostname settings.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest  (required)
     * @return AccessResponseCollectionHostnames
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Update an mTLS certificates hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificates hostname settings failure </td><td>  -  </td></tr>
     </table>
     */
    public AccessResponseCollectionHostnames zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettings(String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest) throws ApiException {
        ApiResponse<AccessResponseCollectionHostnames> localVarResp = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsWithHttpInfo(identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update an mTLS certificate&#39;s hostname settings
     * Updates an mTLS certificate&#39;s hostname settings.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest  (required)
     * @return ApiResponse&lt;AccessResponseCollectionHostnames&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Update an mTLS certificates hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificates hostname settings failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessResponseCollectionHostnames> zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsWithHttpInfo(String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsValidateBeforeCall(identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, null);
        Type localVarReturnType = new TypeToken<AccessResponseCollectionHostnames>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an mTLS certificate&#39;s hostname settings (asynchronously)
     * Updates an mTLS certificate&#39;s hostname settings.
     * @param identifier  (required)
     * @param accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Update an mTLS certificates hostname settings response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an mTLS certificates hostname settings failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsAsync(String identifier, AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, final ApiCallback<AccessResponseCollectionHostnames> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsValidateBeforeCall(identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessResponseCollectionHostnames>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
