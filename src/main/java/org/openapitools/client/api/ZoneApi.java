/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CachePurgeApiResponseSingleId;
import org.openapitools.client.model.PutZonesZoneIdActivationCheck200Response;
import org.openapitools.client.model.ZoneActivationApiResponseCommonFailure;
import org.openapitools.client.model.ZonePurge4xxResponse;
import org.openapitools.client.model.ZonePurgeRequest;
import org.openapitools.client.model.Zones0PatchRequest;
import org.openapitools.client.model.ZonesApiResponseCommonFailure;
import org.openapitools.client.model.ZonesApiResponseSingleId;
import org.openapitools.client.model.ZonesGet200Response;
import org.openapitools.client.model.ZonesPost200Response;
import org.openapitools.client.model.ZonesPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for putZonesZoneIdActivationCheck
     * @param zoneId Zone ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdActivationCheckCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/activation_check"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putZonesZoneIdActivationCheckValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling putZonesZoneIdActivationCheck(Async)");
        }

        return putZonesZoneIdActivationCheckCall(zoneId, _callback);

    }

    /**
     * Rerun the Activation Check
     * Triggeres a new activation check for a PENDING Zone. This can be triggered every 5 min for paygo/ent customers, every hour for FREE Zones.
     * @param zoneId Zone ID (required)
     * @return PutZonesZoneIdActivationCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public PutZonesZoneIdActivationCheck200Response putZonesZoneIdActivationCheck(String zoneId) throws ApiException {
        ApiResponse<PutZonesZoneIdActivationCheck200Response> localVarResp = putZonesZoneIdActivationCheckWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Rerun the Activation Check
     * Triggeres a new activation check for a PENDING Zone. This can be triggered every 5 min for paygo/ent customers, every hour for FREE Zones.
     * @param zoneId Zone ID (required)
     * @return ApiResponse&lt;PutZonesZoneIdActivationCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutZonesZoneIdActivationCheck200Response> putZonesZoneIdActivationCheckWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = putZonesZoneIdActivationCheckValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<PutZonesZoneIdActivationCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rerun the Activation Check (asynchronously)
     * Triggeres a new activation check for a PENDING Zone. This can be triggered every 5 min for paygo/ent customers, every hour for FREE Zones.
     * @param zoneId Zone ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putZonesZoneIdActivationCheckAsync(String zoneId, final ApiCallback<PutZonesZoneIdActivationCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = putZonesZoneIdActivationCheckValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<PutZonesZoneIdActivationCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonePurge
     * @param zoneId  (required)
     * @param zonePurgeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Purge Cached Content </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Purge Cached Content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonePurgeCall(String zoneId, ZonePurgeRequest zonePurgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zonePurgeRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/purge_cache"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonePurgeValidateBeforeCall(String zoneId, ZonePurgeRequest zonePurgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zonePurge(Async)");
        }

        // verify the required parameter 'zonePurgeRequest' is set
        if (zonePurgeRequest == null) {
            throw new ApiException("Missing the required parameter 'zonePurgeRequest' when calling zonePurge(Async)");
        }

        return zonePurgeCall(zoneId, zonePurgeRequest, _callback);

    }

    /**
     * Purge Cached Content
     * ### Purge All Cached Content Removes ALL files from Cloudflare&#39;s cache. All tiers can purge everything.  ### Purge Cached Content by URL Granularly removes one or more files from Cloudflare&#39;s cache by specifying URLs. All tiers can purge by URL.  To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.  **NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise. **NB:** For Zones on Free/Pro/Business plan, you may purge up to 30 URLs in one API call. For Zones on Enterprise plan, you may purge up to 500 URLs in one API call.  ### Purge Cached Content by Tag, Host or Prefix Granularly removes one or more files from Cloudflare&#39;s cache either by specifying the host, the associated Cache-Tag, or a Prefix. Only Enterprise customers are permitted to purge by Tag, Host or Prefix.  **NB:** Cache-Tag, host, and prefix purging each have a rate limit of 30,000 purge API calls in every 24 hour period. You may purge up to 30 tags, hosts, or prefixes in one API call. This rate limit can be raised for customers who need to purge at higher volume. 
     * @param zoneId  (required)
     * @param zonePurgeRequest  (required)
     * @return CachePurgeApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Purge Cached Content </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Purge Cached Content failure </td><td>  -  </td></tr>
     </table>
     */
    public CachePurgeApiResponseSingleId zonePurge(String zoneId, ZonePurgeRequest zonePurgeRequest) throws ApiException {
        ApiResponse<CachePurgeApiResponseSingleId> localVarResp = zonePurgeWithHttpInfo(zoneId, zonePurgeRequest);
        return localVarResp.getData();
    }

    /**
     * Purge Cached Content
     * ### Purge All Cached Content Removes ALL files from Cloudflare&#39;s cache. All tiers can purge everything.  ### Purge Cached Content by URL Granularly removes one or more files from Cloudflare&#39;s cache by specifying URLs. All tiers can purge by URL.  To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.  **NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise. **NB:** For Zones on Free/Pro/Business plan, you may purge up to 30 URLs in one API call. For Zones on Enterprise plan, you may purge up to 500 URLs in one API call.  ### Purge Cached Content by Tag, Host or Prefix Granularly removes one or more files from Cloudflare&#39;s cache either by specifying the host, the associated Cache-Tag, or a Prefix. Only Enterprise customers are permitted to purge by Tag, Host or Prefix.  **NB:** Cache-Tag, host, and prefix purging each have a rate limit of 30,000 purge API calls in every 24 hour period. You may purge up to 30 tags, hosts, or prefixes in one API call. This rate limit can be raised for customers who need to purge at higher volume. 
     * @param zoneId  (required)
     * @param zonePurgeRequest  (required)
     * @return ApiResponse&lt;CachePurgeApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Purge Cached Content </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Purge Cached Content failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CachePurgeApiResponseSingleId> zonePurgeWithHttpInfo(String zoneId, ZonePurgeRequest zonePurgeRequest) throws ApiException {
        okhttp3.Call localVarCall = zonePurgeValidateBeforeCall(zoneId, zonePurgeRequest, null);
        Type localVarReturnType = new TypeToken<CachePurgeApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purge Cached Content (asynchronously)
     * ### Purge All Cached Content Removes ALL files from Cloudflare&#39;s cache. All tiers can purge everything.  ### Purge Cached Content by URL Granularly removes one or more files from Cloudflare&#39;s cache by specifying URLs. All tiers can purge by URL.  To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.  **NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise. **NB:** For Zones on Free/Pro/Business plan, you may purge up to 30 URLs in one API call. For Zones on Enterprise plan, you may purge up to 500 URLs in one API call.  ### Purge Cached Content by Tag, Host or Prefix Granularly removes one or more files from Cloudflare&#39;s cache either by specifying the host, the associated Cache-Tag, or a Prefix. Only Enterprise customers are permitted to purge by Tag, Host or Prefix.  **NB:** Cache-Tag, host, and prefix purging each have a rate limit of 30,000 purge API calls in every 24 hour period. You may purge up to 30 tags, hosts, or prefixes in one API call. This rate limit can be raised for customers who need to purge at higher volume. 
     * @param zoneId  (required)
     * @param zonePurgeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Purge Cached Content </td><td>  -  </td></tr>
        <tr><td> 4xx </td><td> Purge Cached Content failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonePurgeAsync(String zoneId, ZonePurgeRequest zonePurgeRequest, final ApiCallback<CachePurgeApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonePurgeValidateBeforeCall(zoneId, zonePurgeRequest, _callback);
        Type localVarReturnType = new TypeToken<CachePurgeApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zones0Delete
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0DeleteCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0DeleteValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0Delete(Async)");
        }

        return zones0DeleteCall(zoneId, _callback);

    }

    /**
     * Delete Zone
     * Deletes an existing zone.
     * @param zoneId  (required)
     * @return ZonesApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesApiResponseSingleId zones0Delete(String zoneId) throws ApiException {
        ApiResponse<ZonesApiResponseSingleId> localVarResp = zones0DeleteWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Zone
     * Deletes an existing zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZonesApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesApiResponseSingleId> zones0DeleteWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zones0DeleteValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZonesApiResponseSingleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Zone (asynchronously)
     * Deletes an existing zone.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0DeleteAsync(String zoneId, final ApiCallback<ZonesApiResponseSingleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0DeleteValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZonesApiResponseSingleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zones0Get
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0GetCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0GetValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0Get(Async)");
        }

        return zones0GetCall(zoneId, _callback);

    }

    /**
     * Zone Details
     * 
     * @param zoneId  (required)
     * @return ZonesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPost200Response zones0Get(String zoneId) throws ApiException {
        ApiResponse<ZonesPost200Response> localVarResp = zones0GetWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Zone Details
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;ZonesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPost200Response> zones0GetWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zones0GetValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Zone Details (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zone Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Zone Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0GetAsync(String zoneId, final ApiCallback<ZonesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0GetValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zones0Patch
     * @param zoneId  (required)
     * @param zones0PatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0PatchCall(String zoneId, Zones0PatchRequest zones0PatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zones0PatchRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zones0PatchValidateBeforeCall(String zoneId, Zones0PatchRequest zones0PatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zones0Patch(Async)");
        }

        // verify the required parameter 'zones0PatchRequest' is set
        if (zones0PatchRequest == null) {
            throw new ApiException("Missing the required parameter 'zones0PatchRequest' when calling zones0Patch(Async)");
        }

        return zones0PatchCall(zoneId, zones0PatchRequest, _callback);

    }

    /**
     * Edit Zone
     * Edits a zone. Only one zone property can be changed at a time.
     * @param zoneId  (required)
     * @param zones0PatchRequest  (required)
     * @return ZonesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPost200Response zones0Patch(String zoneId, Zones0PatchRequest zones0PatchRequest) throws ApiException {
        ApiResponse<ZonesPost200Response> localVarResp = zones0PatchWithHttpInfo(zoneId, zones0PatchRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Zone
     * Edits a zone. Only one zone property can be changed at a time.
     * @param zoneId  (required)
     * @param zones0PatchRequest  (required)
     * @return ApiResponse&lt;ZonesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPost200Response> zones0PatchWithHttpInfo(String zoneId, Zones0PatchRequest zones0PatchRequest) throws ApiException {
        okhttp3.Call localVarCall = zones0PatchValidateBeforeCall(zoneId, zones0PatchRequest, null);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Zone (asynchronously)
     * Edits a zone. Only one zone property can be changed at a time.
     * @param zoneId  (required)
     * @param zones0PatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Edit Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zones0PatchAsync(String zoneId, Zones0PatchRequest zones0PatchRequest, final ApiCallback<ZonesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zones0PatchValidateBeforeCall(zoneId, zones0PatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesGet
     * @param name  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param accountName  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zones response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zones response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesGetCall(String name, String status, String accountId, String accountName, BigDecimal page, BigDecimal perPage, String order, String direction, String match, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account.id", accountId));
        }

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account.name", accountName));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (match != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match", match));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesGetValidateBeforeCall(String name, String status, String accountId, String accountName, BigDecimal page, BigDecimal perPage, String order, String direction, String match, final ApiCallback _callback) throws ApiException {
        return zonesGetCall(name, status, accountId, accountName, page, perPage, order, direction, match, _callback);

    }

    /**
     * List Zones
     * Lists, searches, sorts, and filters your zones.
     * @param name  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param accountName  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @return ZonesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zones response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zones response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesGet200Response zonesGet(String name, String status, String accountId, String accountName, BigDecimal page, BigDecimal perPage, String order, String direction, String match) throws ApiException {
        ApiResponse<ZonesGet200Response> localVarResp = zonesGetWithHttpInfo(name, status, accountId, accountName, page, perPage, order, direction, match);
        return localVarResp.getData();
    }

    /**
     * List Zones
     * Lists, searches, sorts, and filters your zones.
     * @param name  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param accountName  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @return ApiResponse&lt;ZonesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zones response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zones response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesGet200Response> zonesGetWithHttpInfo(String name, String status, String accountId, String accountName, BigDecimal page, BigDecimal perPage, String order, String direction, String match) throws ApiException {
        okhttp3.Call localVarCall = zonesGetValidateBeforeCall(name, status, accountId, accountName, page, perPage, order, direction, match, null);
        Type localVarReturnType = new TypeToken<ZonesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Zones (asynchronously)
     * Lists, searches, sorts, and filters your zones.
     * @param name  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param accountName  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param order  (optional)
     * @param direction  (optional)
     * @param match  (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Zones response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Zones response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesGetAsync(String name, String status, String accountId, String accountName, BigDecimal page, BigDecimal perPage, String order, String direction, String match, final ApiCallback<ZonesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesGetValidateBeforeCall(name, status, accountId, accountName, page, perPage, order, direction, match, _callback);
        Type localVarReturnType = new TypeToken<ZonesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesPost
     * @param zonesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesPostCall(ZonesPostRequest zonesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zonesPostRequest;

        // create path and map variables
        String localVarPath = "/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesPostValidateBeforeCall(ZonesPostRequest zonesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zonesPostRequest' is set
        if (zonesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'zonesPostRequest' when calling zonesPost(Async)");
        }

        return zonesPostCall(zonesPostRequest, _callback);

    }

    /**
     * Create Zone
     * 
     * @param zonesPostRequest  (required)
     * @return ZonesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ZonesPost200Response zonesPost(ZonesPostRequest zonesPostRequest) throws ApiException {
        ApiResponse<ZonesPost200Response> localVarResp = zonesPostWithHttpInfo(zonesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Zone
     * 
     * @param zonesPostRequest  (required)
     * @return ApiResponse&lt;ZonesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZonesPost200Response> zonesPostWithHttpInfo(ZonesPostRequest zonesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = zonesPostValidateBeforeCall(zonesPostRequest, null);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Zone (asynchronously)
     * 
     * @param zonesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesPostAsync(ZonesPostRequest zonesPostRequest, final ApiCallback<ZonesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesPostValidateBeforeCall(zonesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ZonesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
