/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FiltersDeleteAFilter4XXResponse;
import org.openapitools.client.model.FiltersDeleteFilters4XXResponse;
import org.openapitools.client.model.FiltersDeleteFiltersRequest;
import org.openapitools.client.model.FiltersGetAFilter4XXResponse;
import org.openapitools.client.model.FiltersListFilters4XXResponse;
import org.openapitools.client.model.FirewallFilterDeleteResponseCollection;
import org.openapitools.client.model.FirewallFilterDeleteResponseSingle;
import org.openapitools.client.model.FirewallFilterResponseCollection;
import org.openapitools.client.model.FirewallFilterResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filtersCreateFilters
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersCreateFiltersCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersCreateFiltersValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersCreateFilters(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling filtersCreateFilters(Async)");
        }

        return filtersCreateFiltersCall(zoneIdentifier, body, _callback);

    }

    /**
     * Create filters
     * Creates one or more filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterResponseCollection filtersCreateFilters(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterResponseCollection> localVarResp = filtersCreateFiltersWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Create filters
     * Creates one or more filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterResponseCollection> filtersCreateFiltersWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = filtersCreateFiltersValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create filters (asynchronously)
     * Creates one or more filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersCreateFiltersAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFilterResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersCreateFiltersValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersDeleteAFilter
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersDeleteAFilterCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersDeleteAFilterValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filtersDeleteAFilter(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersDeleteAFilter(Async)");
        }

        return filtersDeleteAFilterCall(id, zoneIdentifier, _callback);

    }

    /**
     * Delete a filter
     * Deletes an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallFilterDeleteResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterDeleteResponseSingle filtersDeleteAFilter(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallFilterDeleteResponseSingle> localVarResp = filtersDeleteAFilterWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Delete a filter
     * Deletes an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallFilterDeleteResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterDeleteResponseSingle> filtersDeleteAFilterWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = filtersDeleteAFilterValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallFilterDeleteResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a filter (asynchronously)
     * Deletes an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersDeleteAFilterAsync(String id, String zoneIdentifier, final ApiCallback<FirewallFilterDeleteResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersDeleteAFilterValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterDeleteResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersDeleteFilters
     * @param zoneIdentifier  (required)
     * @param filtersDeleteFiltersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersDeleteFiltersCall(String zoneIdentifier, FiltersDeleteFiltersRequest filtersDeleteFiltersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filtersDeleteFiltersRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersDeleteFiltersValidateBeforeCall(String zoneIdentifier, FiltersDeleteFiltersRequest filtersDeleteFiltersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersDeleteFilters(Async)");
        }

        // verify the required parameter 'filtersDeleteFiltersRequest' is set
        if (filtersDeleteFiltersRequest == null) {
            throw new ApiException("Missing the required parameter 'filtersDeleteFiltersRequest' when calling filtersDeleteFilters(Async)");
        }

        return filtersDeleteFiltersCall(zoneIdentifier, filtersDeleteFiltersRequest, _callback);

    }

    /**
     * Delete filters
     * Deletes one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param filtersDeleteFiltersRequest  (required)
     * @return FirewallFilterDeleteResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterDeleteResponseCollection filtersDeleteFilters(String zoneIdentifier, FiltersDeleteFiltersRequest filtersDeleteFiltersRequest) throws ApiException {
        ApiResponse<FirewallFilterDeleteResponseCollection> localVarResp = filtersDeleteFiltersWithHttpInfo(zoneIdentifier, filtersDeleteFiltersRequest);
        return localVarResp.getData();
    }

    /**
     * Delete filters
     * Deletes one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param filtersDeleteFiltersRequest  (required)
     * @return ApiResponse&lt;FirewallFilterDeleteResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterDeleteResponseCollection> filtersDeleteFiltersWithHttpInfo(String zoneIdentifier, FiltersDeleteFiltersRequest filtersDeleteFiltersRequest) throws ApiException {
        okhttp3.Call localVarCall = filtersDeleteFiltersValidateBeforeCall(zoneIdentifier, filtersDeleteFiltersRequest, null);
        Type localVarReturnType = new TypeToken<FirewallFilterDeleteResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete filters (asynchronously)
     * Deletes one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param filtersDeleteFiltersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersDeleteFiltersAsync(String zoneIdentifier, FiltersDeleteFiltersRequest filtersDeleteFiltersRequest, final ApiCallback<FirewallFilterDeleteResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersDeleteFiltersValidateBeforeCall(zoneIdentifier, filtersDeleteFiltersRequest, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterDeleteResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersGetAFilter
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersGetAFilterCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersGetAFilterValidateBeforeCall(String id, String zoneIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filtersGetAFilter(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersGetAFilter(Async)");
        }

        return filtersGetAFilterCall(id, zoneIdentifier, _callback);

    }

    /**
     * Get a filter
     * Fetches the details of a filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return FirewallFilterResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterResponseSingle filtersGetAFilter(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<FirewallFilterResponseSingle> localVarResp = filtersGetAFilterWithHttpInfo(id, zoneIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get a filter
     * Fetches the details of a filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;FirewallFilterResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterResponseSingle> filtersGetAFilterWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        okhttp3.Call localVarCall = filtersGetAFilterValidateBeforeCall(id, zoneIdentifier, null);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a filter (asynchronously)
     * Fetches the details of a filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersGetAFilterAsync(String id, String zoneIdentifier, final ApiCallback<FirewallFilterResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersGetAFilterValidateBeforeCall(id, zoneIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersListFilters
     * @param zoneIdentifier  (required)
     * @param paused  (optional)
     * @param expression  (optional)
     * @param description  (optional)
     * @param ref  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersListFiltersCall(String zoneIdentifier, Boolean paused, String expression, String description, String ref, BigDecimal page, BigDecimal perPage, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paused != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paused", paused));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersListFiltersValidateBeforeCall(String zoneIdentifier, Boolean paused, String expression, String description, String ref, BigDecimal page, BigDecimal perPage, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersListFilters(Async)");
        }

        return filtersListFiltersCall(zoneIdentifier, paused, expression, description, ref, page, perPage, id, _callback);

    }

    /**
     * List filters
     * Fetches filters in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param paused  (optional)
     * @param expression  (optional)
     * @param description  (optional)
     * @param ref  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @return FirewallFilterResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterResponseCollection filtersListFilters(String zoneIdentifier, Boolean paused, String expression, String description, String ref, BigDecimal page, BigDecimal perPage, String id) throws ApiException {
        ApiResponse<FirewallFilterResponseCollection> localVarResp = filtersListFiltersWithHttpInfo(zoneIdentifier, paused, expression, description, ref, page, perPage, id);
        return localVarResp.getData();
    }

    /**
     * List filters
     * Fetches filters in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param paused  (optional)
     * @param expression  (optional)
     * @param description  (optional)
     * @param ref  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @return ApiResponse&lt;FirewallFilterResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterResponseCollection> filtersListFiltersWithHttpInfo(String zoneIdentifier, Boolean paused, String expression, String description, String ref, BigDecimal page, BigDecimal perPage, String id) throws ApiException {
        okhttp3.Call localVarCall = filtersListFiltersValidateBeforeCall(zoneIdentifier, paused, expression, description, ref, page, perPage, id, null);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List filters (asynchronously)
     * Fetches filters in a zone. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param paused  (optional)
     * @param expression  (optional)
     * @param description  (optional)
     * @param ref  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 25)
     * @param id  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersListFiltersAsync(String zoneIdentifier, Boolean paused, String expression, String description, String ref, BigDecimal page, BigDecimal perPage, String id, final ApiCallback<FirewallFilterResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersListFiltersValidateBeforeCall(zoneIdentifier, paused, expression, description, ref, page, perPage, id, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersUpdateAFilter
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersUpdateAFilterCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersUpdateAFilterValidateBeforeCall(String id, String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling filtersUpdateAFilter(Async)");
        }

        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersUpdateAFilter(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling filtersUpdateAFilter(Async)");
        }

        return filtersUpdateAFilterCall(id, zoneIdentifier, body, _callback);

    }

    /**
     * Update a filter
     * Updates an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterResponseSingle filtersUpdateAFilter(String id, String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterResponseSingle> localVarResp = filtersUpdateAFilterWithHttpInfo(id, zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update a filter
     * Updates an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterResponseSingle> filtersUpdateAFilterWithHttpInfo(String id, String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = filtersUpdateAFilterValidateBeforeCall(id, zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a filter (asynchronously)
     * Updates an existing filter.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a filter response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a filter response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersUpdateAFilterAsync(String id, String zoneIdentifier, Object body, final ApiCallback<FirewallFilterResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersUpdateAFilterValidateBeforeCall(id, zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersUpdateFilters
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersUpdateFiltersCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/filters"
            .replace("{" + "zone_identifier" + "}", localVarApiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersUpdateFiltersValidateBeforeCall(String zoneIdentifier, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling filtersUpdateFilters(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling filtersUpdateFilters(Async)");
        }

        return filtersUpdateFiltersCall(zoneIdentifier, body, _callback);

    }

    /**
     * Update filters
     * Updates one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return FirewallFilterResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public FirewallFilterResponseCollection filtersUpdateFilters(String zoneIdentifier, Object body) throws ApiException {
        ApiResponse<FirewallFilterResponseCollection> localVarResp = filtersUpdateFiltersWithHttpInfo(zoneIdentifier, body);
        return localVarResp.getData();
    }

    /**
     * Update filters
     * Updates one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @return ApiResponse&lt;FirewallFilterResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FirewallFilterResponseCollection> filtersUpdateFiltersWithHttpInfo(String zoneIdentifier, Object body) throws ApiException {
        okhttp3.Call localVarCall = filtersUpdateFiltersValidateBeforeCall(zoneIdentifier, body, null);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update filters (asynchronously)
     * Updates one or more existing filters.
     * @param zoneIdentifier  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update filters response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update filters response failure </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call filtersUpdateFiltersAsync(String zoneIdentifier, Object body, final ApiCallback<FirewallFilterResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersUpdateFiltersValidateBeforeCall(zoneIdentifier, body, _callback);
        Type localVarReturnType = new TypeToken<FirewallFilterResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
