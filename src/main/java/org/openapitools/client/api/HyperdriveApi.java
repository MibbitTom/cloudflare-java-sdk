/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateHyperdrive200Response;
import org.openapitools.client.model.DeleteHyperdrive200Response;
import org.openapitools.client.model.HyperdriveCreateUpdateHyperdriveConfig;
import org.openapitools.client.model.HyperdrivePatchHyperdriveConfig;
import org.openapitools.client.model.ListHyperdrive200Response;
import org.openapitools.client.model.ListHyperdrive4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HyperdriveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HyperdriveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HyperdriveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createHyperdrive
     * @param accountId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperdriveCall(String accountId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperdriveCreateUpdateHyperdriveConfig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHyperdriveValidateBeforeCall(String accountId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveCreateUpdateHyperdriveConfig' is set
        if (hyperdriveCreateUpdateHyperdriveConfig == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveCreateUpdateHyperdriveConfig' when calling createHyperdrive(Async)");
        }

        return createHyperdriveCall(accountId, hyperdriveCreateUpdateHyperdriveConfig, _callback);

    }

    /**
     * Create Hyperdrive
     * Creates and returns a new Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @return CreateHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperdrive200Response createHyperdrive(String accountId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig) throws ApiException {
        ApiResponse<CreateHyperdrive200Response> localVarResp = createHyperdriveWithHttpInfo(accountId, hyperdriveCreateUpdateHyperdriveConfig);
        return localVarResp.getData();
    }

    /**
     * Create Hyperdrive
     * Creates and returns a new Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @return ApiResponse&lt;CreateHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperdrive200Response> createHyperdriveWithHttpInfo(String accountId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig) throws ApiException {
        okhttp3.Call localVarCall = createHyperdriveValidateBeforeCall(accountId, hyperdriveCreateUpdateHyperdriveConfig, null);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Hyperdrive (asynchronously)
     * Creates and returns a new Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperdriveAsync(String accountId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback<CreateHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHyperdriveValidateBeforeCall(accountId, hyperdriveCreateUpdateHyperdriveConfig, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHyperdrive
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperdriveCall(String accountId, String hyperdriveId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "hyperdrive_id" + "}", localVarApiClient.escapeString(hyperdriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHyperdriveValidateBeforeCall(String accountId, String hyperdriveId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveId' is set
        if (hyperdriveId == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveId' when calling deleteHyperdrive(Async)");
        }

        return deleteHyperdriveCall(accountId, hyperdriveId, _callback);

    }

    /**
     * Delete Hyperdrive
     * Deletes the specified Hyperdrive.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @return DeleteHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHyperdrive200Response deleteHyperdrive(String accountId, String hyperdriveId) throws ApiException {
        ApiResponse<DeleteHyperdrive200Response> localVarResp = deleteHyperdriveWithHttpInfo(accountId, hyperdriveId);
        return localVarResp.getData();
    }

    /**
     * Delete Hyperdrive
     * Deletes the specified Hyperdrive.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @return ApiResponse&lt;DeleteHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteHyperdrive200Response> deleteHyperdriveWithHttpInfo(String accountId, String hyperdriveId) throws ApiException {
        okhttp3.Call localVarCall = deleteHyperdriveValidateBeforeCall(accountId, hyperdriveId, null);
        Type localVarReturnType = new TypeToken<DeleteHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Hyperdrive (asynchronously)
     * Deletes the specified Hyperdrive.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperdriveAsync(String accountId, String hyperdriveId, final ApiCallback<DeleteHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHyperdriveValidateBeforeCall(accountId, hyperdriveId, _callback);
        Type localVarReturnType = new TypeToken<DeleteHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperdrive
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperdriveCall(String accountId, String hyperdriveId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "hyperdrive_id" + "}", localVarApiClient.escapeString(hyperdriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperdriveValidateBeforeCall(String accountId, String hyperdriveId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveId' is set
        if (hyperdriveId == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveId' when calling getHyperdrive(Async)");
        }

        return getHyperdriveCall(accountId, hyperdriveId, _callback);

    }

    /**
     * Get Hyperdrive
     * Returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @return CreateHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperdrive200Response getHyperdrive(String accountId, String hyperdriveId) throws ApiException {
        ApiResponse<CreateHyperdrive200Response> localVarResp = getHyperdriveWithHttpInfo(accountId, hyperdriveId);
        return localVarResp.getData();
    }

    /**
     * Get Hyperdrive
     * Returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @return ApiResponse&lt;CreateHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperdrive200Response> getHyperdriveWithHttpInfo(String accountId, String hyperdriveId) throws ApiException {
        okhttp3.Call localVarCall = getHyperdriveValidateBeforeCall(accountId, hyperdriveId, null);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Hyperdrive (asynchronously)
     * Returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Hyperdrive Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperdriveAsync(String accountId, String hyperdriveId, final ApiCallback<CreateHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperdriveValidateBeforeCall(accountId, hyperdriveId, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHyperdrive
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hyperdrives Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hyperdrives Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHyperdriveCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHyperdriveValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listHyperdrive(Async)");
        }

        return listHyperdriveCall(accountId, _callback);

    }

    /**
     * List Hyperdrives
     * Returns a list of Hyperdrives
     * @param accountId  (required)
     * @return ListHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hyperdrives Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hyperdrives Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ListHyperdrive200Response listHyperdrive(String accountId) throws ApiException {
        ApiResponse<ListHyperdrive200Response> localVarResp = listHyperdriveWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List Hyperdrives
     * Returns a list of Hyperdrives
     * @param accountId  (required)
     * @return ApiResponse&lt;ListHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hyperdrives Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hyperdrives Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHyperdrive200Response> listHyperdriveWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = listHyperdriveValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<ListHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Hyperdrives (asynchronously)
     * Returns a list of Hyperdrives
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hyperdrives Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hyperdrives Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHyperdriveAsync(String accountId, final ApiCallback<ListHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHyperdriveValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<ListHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchHyperdrive
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdrivePatchHyperdriveConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchHyperdriveCall(String accountId, String hyperdriveId, HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperdrivePatchHyperdriveConfig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "hyperdrive_id" + "}", localVarApiClient.escapeString(hyperdriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchHyperdriveValidateBeforeCall(String accountId, String hyperdriveId, HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling patchHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveId' is set
        if (hyperdriveId == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveId' when calling patchHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdrivePatchHyperdriveConfig' is set
        if (hyperdrivePatchHyperdriveConfig == null) {
            throw new ApiException("Missing the required parameter 'hyperdrivePatchHyperdriveConfig' when calling patchHyperdrive(Async)");
        }

        return patchHyperdriveCall(accountId, hyperdriveId, hyperdrivePatchHyperdriveConfig, _callback);

    }

    /**
     * Patch Hyperdrive
     * Patches and returns the specified Hyperdrive configuration. Updates to the origin and caching settings are applied with an all-or-nothing approach.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdrivePatchHyperdriveConfig  (required)
     * @return CreateHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperdrive200Response patchHyperdrive(String accountId, String hyperdriveId, HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig) throws ApiException {
        ApiResponse<CreateHyperdrive200Response> localVarResp = patchHyperdriveWithHttpInfo(accountId, hyperdriveId, hyperdrivePatchHyperdriveConfig);
        return localVarResp.getData();
    }

    /**
     * Patch Hyperdrive
     * Patches and returns the specified Hyperdrive configuration. Updates to the origin and caching settings are applied with an all-or-nothing approach.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdrivePatchHyperdriveConfig  (required)
     * @return ApiResponse&lt;CreateHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperdrive200Response> patchHyperdriveWithHttpInfo(String accountId, String hyperdriveId, HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig) throws ApiException {
        okhttp3.Call localVarCall = patchHyperdriveValidateBeforeCall(accountId, hyperdriveId, hyperdrivePatchHyperdriveConfig, null);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Hyperdrive (asynchronously)
     * Patches and returns the specified Hyperdrive configuration. Updates to the origin and caching settings are applied with an all-or-nothing approach.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdrivePatchHyperdriveConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchHyperdriveAsync(String accountId, String hyperdriveId, HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig, final ApiCallback<CreateHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchHyperdriveValidateBeforeCall(accountId, hyperdriveId, hyperdrivePatchHyperdriveConfig, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHyperdrive
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperdriveCall(String accountId, String hyperdriveId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperdriveCreateUpdateHyperdriveConfig;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "hyperdrive_id" + "}", localVarApiClient.escapeString(hyperdriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHyperdriveValidateBeforeCall(String accountId, String hyperdriveId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveId' is set
        if (hyperdriveId == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveId' when calling updateHyperdrive(Async)");
        }

        // verify the required parameter 'hyperdriveCreateUpdateHyperdriveConfig' is set
        if (hyperdriveCreateUpdateHyperdriveConfig == null) {
            throw new ApiException("Missing the required parameter 'hyperdriveCreateUpdateHyperdriveConfig' when calling updateHyperdrive(Async)");
        }

        return updateHyperdriveCall(accountId, hyperdriveId, hyperdriveCreateUpdateHyperdriveConfig, _callback);

    }

    /**
     * Update Hyperdrive
     * Updates and returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @return CreateHyperdrive200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperdrive200Response updateHyperdrive(String accountId, String hyperdriveId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig) throws ApiException {
        ApiResponse<CreateHyperdrive200Response> localVarResp = updateHyperdriveWithHttpInfo(accountId, hyperdriveId, hyperdriveCreateUpdateHyperdriveConfig);
        return localVarResp.getData();
    }

    /**
     * Update Hyperdrive
     * Updates and returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @return ApiResponse&lt;CreateHyperdrive200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperdrive200Response> updateHyperdriveWithHttpInfo(String accountId, String hyperdriveId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig) throws ApiException {
        okhttp3.Call localVarCall = updateHyperdriveValidateBeforeCall(accountId, hyperdriveId, hyperdriveCreateUpdateHyperdriveConfig, null);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Hyperdrive (asynchronously)
     * Updates and returns the specified Hyperdrive configuration.
     * @param accountId  (required)
     * @param hyperdriveId  (required)
     * @param hyperdriveCreateUpdateHyperdriveConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Hyperdrive Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Hyperdrive Failure Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperdriveAsync(String accountId, String hyperdriveId, HyperdriveCreateUpdateHyperdriveConfig hyperdriveCreateUpdateHyperdriveConfig, final ApiCallback<CreateHyperdrive200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHyperdriveValidateBeforeCall(accountId, hyperdriveId, hyperdriveCreateUpdateHyperdriveConfig, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperdrive200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
