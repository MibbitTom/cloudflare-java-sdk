/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicApiResponseCommonFailure;
import org.openapitools.client.model.MagicLanDeletedResponse;
import org.openapitools.client.model.MagicLanModifiedResponse;
import org.openapitools.client.model.MagicLanSingleResponse;
import org.openapitools.client.model.MagicLanUpdateRequest;
import org.openapitools.client.model.MagicLansAddSingleRequest;
import org.openapitools.client.model.MagicLansCollectionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicWanConnectorLansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicWanConnectorLansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicWanConnectorLansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicWanConnectorsLansCreateLan
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicLansAddSingleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansCreateLanCall(String accountId, String siteId, MagicLansAddSingleRequest magicLansAddSingleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicLansAddSingleRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/lans"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsLansCreateLanValidateBeforeCall(String accountId, String siteId, MagicLansAddSingleRequest magicLansAddSingleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsLansCreateLan(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsLansCreateLan(Async)");
        }

        // verify the required parameter 'magicLansAddSingleRequest' is set
        if (magicLansAddSingleRequest == null) {
            throw new ApiException("Missing the required parameter 'magicLansAddSingleRequest' when calling magicWanConnectorsLansCreateLan(Async)");
        }

        return magicWanConnectorsLansCreateLanCall(accountId, siteId, magicLansAddSingleRequest, _callback);

    }

    /**
     * Create a new LAN
     * Creates a new LAN. If the site is in high availability mode, static_addressing is required along with secondary and virtual address.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicLansAddSingleRequest  (required)
     * @return MagicLansCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicLansCollectionResponse magicWanConnectorsLansCreateLan(String accountId, String siteId, MagicLansAddSingleRequest magicLansAddSingleRequest) throws ApiException {
        ApiResponse<MagicLansCollectionResponse> localVarResp = magicWanConnectorsLansCreateLanWithHttpInfo(accountId, siteId, magicLansAddSingleRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new LAN
     * Creates a new LAN. If the site is in high availability mode, static_addressing is required along with secondary and virtual address.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicLansAddSingleRequest  (required)
     * @return ApiResponse&lt;MagicLansCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicLansCollectionResponse> magicWanConnectorsLansCreateLanWithHttpInfo(String accountId, String siteId, MagicLansAddSingleRequest magicLansAddSingleRequest) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsLansCreateLanValidateBeforeCall(accountId, siteId, magicLansAddSingleRequest, null);
        Type localVarReturnType = new TypeToken<MagicLansCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new LAN (asynchronously)
     * Creates a new LAN. If the site is in high availability mode, static_addressing is required along with secondary and virtual address.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param magicLansAddSingleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansCreateLanAsync(String accountId, String siteId, MagicLansAddSingleRequest magicLansAddSingleRequest, final ApiCallback<MagicLansCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsLansCreateLanValidateBeforeCall(accountId, siteId, magicLansAddSingleRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicLansCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsLansDeleteLan
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansDeleteLanCall(String siteId, String accountId, String lanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "lan_id" + "}", localVarApiClient.escapeString(lanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsLansDeleteLanValidateBeforeCall(String siteId, String accountId, String lanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsLansDeleteLan(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsLansDeleteLan(Async)");
        }

        // verify the required parameter 'lanId' is set
        if (lanId == null) {
            throw new ApiException("Missing the required parameter 'lanId' when calling magicWanConnectorsLansDeleteLan(Async)");
        }

        return magicWanConnectorsLansDeleteLanCall(siteId, accountId, lanId, _callback);

    }

    /**
     * Delete LAN
     * Remove a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @return MagicLanDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicLanDeletedResponse magicWanConnectorsLansDeleteLan(String siteId, String accountId, String lanId) throws ApiException {
        ApiResponse<MagicLanDeletedResponse> localVarResp = magicWanConnectorsLansDeleteLanWithHttpInfo(siteId, accountId, lanId);
        return localVarResp.getData();
    }

    /**
     * Delete LAN
     * Remove a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @return ApiResponse&lt;MagicLanDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicLanDeletedResponse> magicWanConnectorsLansDeleteLanWithHttpInfo(String siteId, String accountId, String lanId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsLansDeleteLanValidateBeforeCall(siteId, accountId, lanId, null);
        Type localVarReturnType = new TypeToken<MagicLanDeletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete LAN (asynchronously)
     * Remove a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansDeleteLanAsync(String siteId, String accountId, String lanId, final ApiCallback<MagicLanDeletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsLansDeleteLanValidateBeforeCall(siteId, accountId, lanId, _callback);
        Type localVarReturnType = new TypeToken<MagicLanDeletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsLansLanDetails
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> LAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansLanDetailsCall(String siteId, String accountId, String lanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "lan_id" + "}", localVarApiClient.escapeString(lanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsLansLanDetailsValidateBeforeCall(String siteId, String accountId, String lanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsLansLanDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsLansLanDetails(Async)");
        }

        // verify the required parameter 'lanId' is set
        if (lanId == null) {
            throw new ApiException("Missing the required parameter 'lanId' when calling magicWanConnectorsLansLanDetails(Async)");
        }

        return magicWanConnectorsLansLanDetailsCall(siteId, accountId, lanId, _callback);

    }

    /**
     * LAN Details
     * Get a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @return MagicLanSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> LAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicLanSingleResponse magicWanConnectorsLansLanDetails(String siteId, String accountId, String lanId) throws ApiException {
        ApiResponse<MagicLanSingleResponse> localVarResp = magicWanConnectorsLansLanDetailsWithHttpInfo(siteId, accountId, lanId);
        return localVarResp.getData();
    }

    /**
     * LAN Details
     * Get a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @return ApiResponse&lt;MagicLanSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> LAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicLanSingleResponse> magicWanConnectorsLansLanDetailsWithHttpInfo(String siteId, String accountId, String lanId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsLansLanDetailsValidateBeforeCall(siteId, accountId, lanId, null);
        Type localVarReturnType = new TypeToken<MagicLanSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * LAN Details (asynchronously)
     * Get a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> LAN Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> LAN Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansLanDetailsAsync(String siteId, String accountId, String lanId, final ApiCallback<MagicLanSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsLansLanDetailsValidateBeforeCall(siteId, accountId, lanId, _callback);
        Type localVarReturnType = new TypeToken<MagicLanSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsLansListLans
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List LANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List LANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansListLansCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/lans"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsLansListLansValidateBeforeCall(String accountId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsLansListLans(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsLansListLans(Async)");
        }

        return magicWanConnectorsLansListLansCall(accountId, siteId, _callback);

    }

    /**
     * List LANs
     * Lists LANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return MagicLansCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List LANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List LANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicLansCollectionResponse magicWanConnectorsLansListLans(String accountId, String siteId) throws ApiException {
        ApiResponse<MagicLansCollectionResponse> localVarResp = magicWanConnectorsLansListLansWithHttpInfo(accountId, siteId);
        return localVarResp.getData();
    }

    /**
     * List LANs
     * Lists LANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;MagicLansCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List LANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List LANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicLansCollectionResponse> magicWanConnectorsLansListLansWithHttpInfo(String accountId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsLansListLansValidateBeforeCall(accountId, siteId, null);
        Type localVarReturnType = new TypeToken<MagicLansCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List LANs (asynchronously)
     * Lists LANs associated with an account and site.
     * @param accountId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List LANs response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List LANs response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansListLansAsync(String accountId, String siteId, final ApiCallback<MagicLansCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsLansListLansValidateBeforeCall(accountId, siteId, _callback);
        Type localVarReturnType = new TypeToken<MagicLansCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicWanConnectorsLansUpdateLan
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param magicLanUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansUpdateLanCall(String siteId, String accountId, String lanId, MagicLanUpdateRequest magicLanUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = magicLanUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "lan_id" + "}", localVarApiClient.escapeString(lanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicWanConnectorsLansUpdateLanValidateBeforeCall(String siteId, String accountId, String lanId, MagicLanUpdateRequest magicLanUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling magicWanConnectorsLansUpdateLan(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicWanConnectorsLansUpdateLan(Async)");
        }

        // verify the required parameter 'lanId' is set
        if (lanId == null) {
            throw new ApiException("Missing the required parameter 'lanId' when calling magicWanConnectorsLansUpdateLan(Async)");
        }

        // verify the required parameter 'magicLanUpdateRequest' is set
        if (magicLanUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'magicLanUpdateRequest' when calling magicWanConnectorsLansUpdateLan(Async)");
        }

        return magicWanConnectorsLansUpdateLanCall(siteId, accountId, lanId, magicLanUpdateRequest, _callback);

    }

    /**
     * Update LAN
     * Update a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param magicLanUpdateRequest  (required)
     * @return MagicLanModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicLanModifiedResponse magicWanConnectorsLansUpdateLan(String siteId, String accountId, String lanId, MagicLanUpdateRequest magicLanUpdateRequest) throws ApiException {
        ApiResponse<MagicLanModifiedResponse> localVarResp = magicWanConnectorsLansUpdateLanWithHttpInfo(siteId, accountId, lanId, magicLanUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update LAN
     * Update a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param magicLanUpdateRequest  (required)
     * @return ApiResponse&lt;MagicLanModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicLanModifiedResponse> magicWanConnectorsLansUpdateLanWithHttpInfo(String siteId, String accountId, String lanId, MagicLanUpdateRequest magicLanUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = magicWanConnectorsLansUpdateLanValidateBeforeCall(siteId, accountId, lanId, magicLanUpdateRequest, null);
        Type localVarReturnType = new TypeToken<MagicLanModifiedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update LAN (asynchronously)
     * Update a specific LAN.
     * @param siteId  (required)
     * @param accountId  (required)
     * @param lanId  (required)
     * @param magicLanUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update LAN response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update LAN response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicWanConnectorsLansUpdateLanAsync(String siteId, String accountId, String lanId, MagicLanUpdateRequest magicLanUpdateRequest, final ApiCallback<MagicLanModifiedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicWanConnectorsLansUpdateLanValidateBeforeCall(siteId, accountId, lanId, magicLanUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<MagicLanModifiedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
